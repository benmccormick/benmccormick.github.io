{
    "version": "https://jsonfeed.org/version/1",
    "title": "benmccormick.org",
    "home_page_url": "http://benmccormick.org",
    "feed_url": "http://benmccormick.org/feed.json",
    "description": "A blog by Ben McCormick",
    "icon": "https://benmccormick.org/logo.png",
    "author": {
        "name": "Ben McCormick"
    },
    "items": [
        {
            "id": "https://benmccormick.org/2018/07/28/weekly-links-07-28-18/",
            "html_content": "<h3>JavaScript and the Web</h3>\n<p><a href=\"https://csswizardry.com/2018/07/getting-to-know-a-legacy-codebase/\">Getting to Know a Legacy Codebase Harry Roberts</a></p>\n<p>I like this advice on approaching a new codebase.  Some of it is CSS specific but the general ideas of tackling the important bits, experimenting with changes, and using tools as much as possible to catch regressions apply across the board.</p>\n<p><a href=\"https://medium.com/@Pinterest_Engineering/a-one-year-pwa-retrospective-f4a2f4129e05\">A one year PWA retrospective | Zach Argyle</a></p>\n<p>TL;DR: Pinterest saw great results from supplementing their mobile apps with a PWA web app.</p>\n<p><a href=\"https://medium.com/ben-and-dion/mission-improve-the-web-ecosystem-for-developers-3a8b55f46411\">Mission: Improve the Web Ecosystem for Developers | Dion Almaer</a></p>\n<p>I don’t know Dion, but this was a wonderful list of challenges that people looking to improve the web platform might want to tackle.  I’m excited to see people tackling this stuff.  I’m especially interested in what better tools for creating performant sites would look like.</p>\n<h3>Technical Deep Dives</h3>\n<p>These are long technical articles, and more back end focused then I usually write about on this blog but both touch on things I’m interested in and I found them fascinating.</p>\n<p><a href=\"https://segment.com/blog/introducing-centrifuge/\">Centrifuge: a reliable system for delivering billions of events per day || Calvin French-Owen</a></p>\n<p>I had to build an event handling system like this a few years ago, and it’s fun to see how the optimal solution changed for Segment as they scaled.  On the backend designs that make no sense for small projects start becoming very real options as a project scales.  That’s why it’s always worth having some skepticism over the idea that because AppAmaGooFaceSoft are using a technology it must be “best in class” and we should use it in our small 20 person development team that is facing problems of a completely different scale.</p>\n<p><a href=\"https://blog.burntsushi.net/ripgrep/\">ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} | Andrew Gallant</a></p>\n<p>This piece is structured as a comparison of performance between cli file search tools, but the cool part is the deep insight into text search algorithms and performance tricks littered throughout the benchmark discussions.  It’s fascinating to see how heavily optimized for speed these tools are.  Also, I’ve been using Ack for 5 years even though I know it’s not the fastest tool for searching, because for me it was always “fast enough” to avoid searching.  But ripgrep appears to be dramatically enough faster in the relatively rare circumstances where I’m searching truly large directories of files, that I may finally be up for converting to a new tool.</p>\n<h3>Book Review</h3>\n<p><a href=\"https://amzn.to/2mPr3zV\">Front-End Reactive Architectures | Luca Mezzalira</a></p>\n<p>I’ve been very excited to check out this book since I first saw the title pre-release.  I finally had a chance to purchase and read it last month, and I’m sad to report that I had fallen prey to the classic mistake of judging a book by it’s cover.  I had hoped that this would be a deep dive into architecture and how we structure front end applications, and how reactive programming concepts can impact that.  There’s a real dearth of quality high level UI architecture resources out there, so I was genuinely excited about this.</p>\n<p>Unfortunately the book is structured more like a series of loosely related blog posts, first with an overview of older architectural models like MVC, MVP and MVVM, followed by sections looking at several different libraries that use reactive principles: RxJS, Cycle, and MobX.  The latter sections focused more on the nuts and bolts of using the libraries to create simple example apps and less on the impact that using them would have on a large application.  So this is a good book if you want to see some simple code examples of how these libraries work in practice.  But I’m still waiting for a great high level front-end architecture book.</p>",
            "url": "https://benmccormick.org/2018/07/28/weekly-links-07-28-18/",
            "title": "Weekly Links: July 28th",
            "date_modified": "2018-07-28T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/20/weekly-links-07-20-18/",
            "html_content": "<h3>JavaScript and the Web</h3>\n<p><a href=\"https://medium.com/google-design/google-photos-45b714dfbed1\">Building the Google Photos Web UI | Antin Harasymiv</a></p>\n<p>An amazing detail-laden look at the design and engineering decisions that go into a top of the line web photo experience.  One of the best front end reads I’ve seen this year.</p>\n<p><a href=\"https://babeljs.io/blog/2018/07/19/whats-happening-with-the-pipeline-proposal\">What’s Happening With the Pipeline (|>) Proposal? | James DiGioia</a></p>\n<p>An update on the proposal to add a pipeline operator to JavaScript.  I am not the target audience of this proposal, as I don’t regularly write in the nested miniature function style that is aided by this proposal, but I would really love to see some real world code (not fabricated examples) that would have their readability improved by this proposal. The smart pipelines proposal in particular seems like it’s adding a bunch of new syntax for developers to learn and tooling to support.  Since this is a “sugar” feature and doesn’t add new capabilities, I really wonder whether it’s worth it.</p>\n<h3>Leadership and Teams</h3>\n<p><a href=\"http://boz.com/articles/p-rules.html\">The P Rules | Andrew Bosworth</a></p>\n<p>Design Reviews are one of my favorite parts of my job, and this is a great set of rules for having good ones.</p>\n<p><a href=\"https://larahogan.me/blog/feedback-equation/\">Feedback Equation | Lara Hogan</a></p>\n<p>So this is back to back weeks with links from Lara, and there’s a good reason for it.  This is a great framework for speaking the truth to somebody with humility.</p>\n<h3>Startups</h3>\n<p><a href=\"https://www.atrium.co/blog/b2b-vs-b2c/\">Why I love B2B over B2C | Justin Kan</a></p>\n<p>I’ve worked at B2B companies my whole career, so I’m biased I guess, but unless you just like playing the lottery, its tough to see why you’d prefer B2C from a pure financial perspective.</p>\n<h3>Random</h3>\n<p><a href=\"https://www.youtube.com/watch?v=1-vcErOPofQ\">Grace Hopper on Letterman in 1986 | YouTube</a></p>\n<p>This clip is just wonderful.  A little slice of history, touching the computer industry, the greatest generation, and the roots of our current late night comedy scene.  “There was a time when everyone in this country did one thing together” is an amazing statement in our current political environment.</p>",
            "url": "https://benmccormick.org/2018/07/20/weekly-links-07-20-18/",
            "title": "Weekly Links: July 20th",
            "date_modified": "2018-07-20T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/17/quick-tip-logging-breakpoints/",
            "html_content": "<p>Stop me if this sounds familiar: you see a bug on your site.  You want to know what’s going on.  You fire up the developer tools, put a breakpoint in the area you think is a problem, and… the error doesn’t occur while it’s being debugged.  Probably it’s a timing issue, but I’ve also seen situations where pausing on certain breakpoints will actually cause a browser tab to freeze up.  Whatever weirdness you’re dealing with, you can’t get a breakpoint running in the right spot to see the error.  These are known colloquially as <a href=\"https://en.wikipedia.org/wiki/Heisenbug\">Heisenbugs</a>, bugs that disappear when measured.  Ideally at this point you would add some logging, but if the issue is on production, and you don’t know exactly what needs to be logged, that could delay a fix by an unacceptable amount.</p>\n<p>I actually ran into this last night, and decided to test out a tactic I’d heard about in a <a href=\"https://changelog.com/jsparty/30\">recent JS Party episode</a>.  Did you know that you can use conditional break points to add temporary logging to a live application?</p>\n<p>Conditional breakpoints are a browser debugger feature where you set a breakpoint, and specify a condition.  The breakpoint only stops the program execution when that condition is truthy.  Here’s a video describing the feature in Firefox:</p>\n<div>\n          <div\n            class=\"gatsby-resp-iframe-wrapper\"\n            style=\"padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;\"\n          >\n            <iframe src=\"https://www.youtube.com/embed/pVPlMhfrMwM\" frameborder=\"0\" encrypted-media\"=\"\" allowfullscreen style=\"\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          \"></iframe>\n          </div>\n          </div>\n<p>Conditional breakpoints are useful when you’re running through a code path many times during program execution, but you want to stop during a specific run.  But they can also be used to solve our heisenbug problem.  Because the conditional breakpoint executes the code inside of it in the context of the line we’re trying to break on, we can actually put logging inside the breakpoint.</p>\n<p><a href=\"log-example.png\">An example of a console.log inside a breakpoint</a></p>\n<p>That <code class=\"language-text\">console.log</code> will execute, and because <code class=\"language-text\">console.log</code> returns false, the breakpoint will never actually stop.  It’s a heisenbug-safe version of watching variables when you’re at a breakpoint, and there’s no redeploys required.</p>",
            "url": "https://benmccormick.org/2018/07/17/quick-tip-logging-breakpoints/",
            "title": "Quick Tip: Logging In Breakpoints",
            "date_modified": "2018-07-17T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/15/prime-generation-revisited/",
            "html_content": "<p>I’ve been wanting to try learning a new programming language again for a while, and this weekend decided to play around with <a href=\"https://golang.org/\">Go</a> for the first time in a while.  Go is a statically typed, compiled language useful for systems programming, which makes it a nice complement to my 2 primary languages, JavaScript and Python.  To help myself learn, I decided to revisit the <a href=\"https://benmccormick.org/2017/11/28/sieveoferatosthenes/\">Sieve of Eratosthenes problem</a> that I wrote about last year.  I already had implementations in Python and JavaScript, and thought it would be interesting to see how the code and performance compared.</p>\n<p>As a refresher, the Sieve of Eratosthenes is a method for generating prime numbers by iterating through numbers and marking all multiples of primes we encounter as not prime.  The original algorithm is useful for finding small primes up to a limit, but will eventually consume infinite memory for computers or infinite time for humans.  I used a modified algorithm in my JavaScript implementation that only marks numbers as they become relevant, you can read more details about the problem in <a href=\"https://benmccormick.org/2017/11/28/sieveoferatosthenes/\">the original post</a> but using the JavaScript implementation to generate the 1 millionth prime looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span><span class=\"token operator\">*</span> <span class=\"token function\">generatePrimes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> markedNotPrimeMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> valueToCheck <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>valueToCheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">yield</span> valueToCheck\n            markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>valueToCheck<span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>valueToCheck<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> primes <span class=\"token operator\">=</span>markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>valueToCheck<span class=\"token punctuation\">)</span>\n            primes<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>prime<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">let</span> nextMultipleOfPrime <span class=\"token operator\">=</span> prime <span class=\"token operator\">+</span> valueToCheck<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>nextMultipleOfPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>nextMultipleOfPrime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>prime<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                    markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>nextMultipleOfPrime<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>prime<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n            markedNotPrimeMap<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span>valueToCheck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        valueToCheck <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> counter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> p <span class=\"token keyword\">of</span> <span class=\"token function\">generatePrimes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>counter <span class=\"token operator\">>=</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>That executes in ~10.5 seconds on my Macbook Pro, and the similar Python implementation averages about 23 seconds.  I was curious how fast a Go solution would execute, since it is known for being fast.</p>\n<p>I put a Go version together like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\">\n      <pre class=\"language-go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"strconv\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">generate_primes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">make</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">chan</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> marked_not_prime_map <span class=\"token operator\">=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">go</span> <span class=\"token keyword\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> value_to_check <span class=\"token operator\">:=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">;</span> value_to_check<span class=\"token operator\">++</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> primes<span class=\"token punctuation\">,</span> in_map <span class=\"token operator\">=</span> marked_not_prime_map<span class=\"token punctuation\">[</span>value_to_check<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>in_map <span class=\"token punctuation\">{</span>\n                c <span class=\"token operator\">&lt;-</span> value_to_check\n                <span class=\"token keyword\">var</span> values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n                marked_not_prime_map<span class=\"token punctuation\">[</span>value_to_check<span class=\"token operator\">*</span>value_to_check<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> value_to_check<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> prime <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> primes <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">var</span> next_multiple_of_prime <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> prime <span class=\"token operator\">+</span> value_to_check\n                    <span class=\"token keyword\">var</span> next_multiples<span class=\"token punctuation\">,</span> next_in_map <span class=\"token operator\">=</span> marked_not_prime_map<span class=\"token punctuation\">[</span>next_multiple_of_prime<span class=\"token punctuation\">]</span>\n                    <span class=\"token keyword\">if</span> next_in_map <span class=\"token punctuation\">{</span>\n                        marked_not_prime_map<span class=\"token punctuation\">[</span>next_multiple_of_prime<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>next_multiples<span class=\"token punctuation\">,</span> prime<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">var</span> values <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span>\n                        marked_not_prime_map<span class=\"token punctuation\">[</span>next_multiple_of_prime<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">,</span> prime<span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">}</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>marked_not_prime_map<span class=\"token punctuation\">,</span> value_to_check<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> c\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    c <span class=\"token operator\">:=</span> <span class=\"token function\">generate_primes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">var</span> counter <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">for</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> p <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;-</span>c\n        <span class=\"token keyword\">if</span> counter <span class=\"token operator\">>=</span> <span class=\"token number\">1000000</span> <span class=\"token punctuation\">{</span>\n            fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>strconv<span class=\"token punctuation\">.</span><span class=\"token function\">Itoa</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n        counter<span class=\"token operator\">++</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The Go version is about 50% longer than the JavaScript version due to boilerplate but is more or less a direct 1 to 1 translation of the JavaScript code.  In Go, generators are created using channels and goroutines.  Goroutines are special functions that can run concurrently to the main thread in Go, and channels are a mechanism for passing data from them, that block the goroutine until the message is received.  So a goroutine that will pass multiple messages through to a channel is essentially equivalent to a Python or JavaScript generator using <code class=\"language-text\">yield</code>.  Beyond that, most of the syntax difference is around the ceremony required for using slices in Go , and checking whether an item exists in a map.  Slices are Go’s version of a dynamic length array/list, they require an <code class=\"language-text\">append</code> function which returns a new slice to add a value.  Go doesn’t have a <code class=\"language-text\">has</code> method or equivalent on it’s map types.  Instead when you attempt to access a value from a map, the map returns 2 values: the received value or the “zero value” of the map’s type and a boolean saying whether the access was successful.  So you have code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"go\">\n      <pre class=\"language-go\"><code class=\"language-go\">commits <span class=\"token operator\">:=</span> <span class=\"token keyword\">map</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"example\"</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> val<span class=\"token punctuation\">,</span> has_val <span class=\"token operator\">=</span> commits<span class=\"token punctuation\">[</span><span class=\"token string\">\"example\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// val == 100, has_val == true</span>\n<span class=\"token keyword\">var</span> val2<span class=\"token punctuation\">,</span> has_val2 <span class=\"token operator\">=</span> commits<span class=\"token punctuation\">[</span><span class=\"token string\">\"example2\"</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// val == 0, has_val == false</span></code></pre>\n      </div>\n<p>So does all of this ceremony buy us any performance?  Only a minimal amount in this case.  After timing each script several time the Python code averaged out to 23 seconds, the JavaScript averaged 10.5 seconds, and the Go version averaged 9.5 seconds.  It’s the fastest, but only by minimal amounts over the JavaScript.  A good reminder that the algorithm will generally matter more than the programming language for many things, and also that large companies have optimized the heck out of JavaScript in recent years to the point where it’s pretty competitive on single threaded performance for many tasks.</p>",
            "url": "https://benmccormick.org/2018/07/15/prime-generation-revisited/",
            "title": "Prime Generation Revisited",
            "date_modified": "2018-07-15T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/13/weekly-links-07-13-18/",
            "html_content": "<h3>JavaScript and the Web</h3>\n<p><a href=\"https://medium.com/p/what-is-jsx-310ab98c463e\">What is JSX? | Kent C Dodds</a></p>\n<p>If you were introduced to React “all at once” and didn’t learn it from the basics up, JSX may feel a little bit like magic syntax.  This is a solid explanation of what JSX syntax actually compiles to under the covers.  It demystifies the process and shows that it is all “just JavaScript” in the end.</p>\n<p><a href=\"http://jxnblk.com/writing/posts/defining-component-apis-in-react/\">Defining Component APIs in React | Brent Jackson</a></p>\n<p>Setting up good interface boundaries between your React components is one of the most important steps you can take to make a React application more maintainable.  This is good solid advice, that I wish I’d had when I started building React apps.</p>\n<h3>Business and Leadership</h3>\n<p><a href=\"http://larahogan.github.io/blog/leadership-style-colors/\">Leadership Style Colors | Lara Hogan</a></p>\n<p>Lara has put together a thoughtful article about the different ways that leaders need to be able to relate to others.</p>\n<p><a href=\"https://m.signalvnoise.com/the-open-plan-office-is-a-terrible-horrible-no-good-very-bad-idea-42bd9cd294e3\">The open-plan office is a terrible, horrible, no good, very bad idea | DHH</a></p>\n<p>I appear to be in a weird middle ground where I neither love nor hate open offices.  I don’t think they’re good for my productivity, but I enjoy the people I work with and build more connections with coworkers in an open office than I did when I worked in cubicles. I also find that articles like this tend not to fully grapple with the alternatives.  Most companies aren’t mostly remote like Basecamp, and budgeting private offices for all developers is not realistic (especially for the startups called out in this piece due to unknown scaling needs).  So it’s remote, open office or cubicle farms, and all three have their detractors.</p>\n<h3>Design</h3>\n<p><a href=\"https://uxdesign.cc/designing-for-accessibility-is-not-that-hard-c04cc4779d94\">Designing for accessibility is not that hard | Pablo Stanley</a></p>\n<p>I’m embarrassingly ignorant about accessibility concerns, so this was a helpful article for me.  I’m going to try and walk through some of these steps on this site to help improve my knowledge here.</p>\n<p><a href=\"https://9to5mac.com/2018/07/10/app-store-10-years-design-evolution/\">10 years of the App Store: The design evolution of the earliest apps | 9to5Mac</a></p>\n<p>This was a really fascinating look at how iPhone app designs have shifted over the years.  9to5Mac took 10 popular apps that were there when the App Store first launched 10 years ago (I’ve used 8/10 of these at some point or another) and showed how their UIs and logos had evolved over time.  Interestingly it looks like early 2013, right before the new iOS7 look and feel launched, was the peak point for interface diversity and distinctiveness, as each of these apps had evolved along their own paths.  iOS7 imposed a level of standardization and sameness, and I think apps are just now re-evolving to the point of having truly distinct brand identities on top of that new base.</p>\n<h3>Books</h3>\n<p>I’ve been on vacation this week, so here are 2 quicky non-tech book reviews:</p>\n<p><a href=\"https://amzn.to/2L4uGQp\">Golden Days: West’s Lakers, Steph’s Warriors, and the California Dreamers Who Reinvented Basketball | Jack McCallum</a></p>\n<p>This was a fun book for basketball lovers.  The sections on Jerry West and the Lakers of the 60s and 70s are more detailed and colorful than the alternating chapters on the modern Warriors, but both are fun, and those interested in how modern Silicon Valley has interacted with the rise of the most popular basketball team in the world will find some interesting tidbits in the modern chapters as well.</p>\n<p><a href=\"https://amzn.to/2Jj6vJ2\">American Gods | Neil Gaiman</a></p>\n<p>A fantasy novel set in modern America.  This one was too crude for me to recommend unreservedly, but it contains a huge number of cool images and ideas, and I don’t regret reading it.</p>",
            "url": "https://benmccormick.org/2018/07/13/weekly-links-07-13-18/",
            "title": "Weekly Links: July 13th",
            "date_modified": "2018-07-13T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/09/book-review-five-dysfunctions/",
            "html_content": "<p>The nice thing about team books is that they’re talking about a subject that almost everybody can relate to.  <a href=\"https://amzn.to/2u2aPrm\">The Five Dysfunctions of a Team</a> by Patrick Lencioni is a book for leaders, but it’s also a book for anyone who wants to better understand why they problems they see in their teams occur, and what needs to change to make them better.</p>\n<p>The Five Dysfunctions is a leadership fable, a story told to illustrate the principals of a business model.  I’ve found that I enjoy this teaching style, I also loved <a href=\"https://amzn.to/2KHf3Ps\">Death By Meeting</a> and <a href=\"https://amzn.to/2KXOkxh\">The Goal</a>, which employee the same style.  The beauty of fables is the way they allow you to soak into a scenario, and connect it to your own experiences and relationships.  Then as the principles the author wants to teach unfold, they take advantage of those connections to spark ideas for application.  At least that’s the theory.</p>\n<p>The Five Dysfunctions is of course, about how teams go wrong.  I won’t spoil the contents too much, but ultimately, team failures aren’t about technique or distinct decisions, but human beings and how we relate to each other.  This book both clearly defines a set of those problems, and then gives concrete suggestions for improving a team when they’re present.  It’s a classic, and I found it as thought provoking as I expected.  I definitely recommend it for anyone who wants to better understand how teams work, and how they fail.</p>",
            "url": "https://benmccormick.org/2018/07/09/book-review-five-dysfunctions/",
            "title": "Book Review: The Five Dysfunctions of a Team",
            "date_modified": "2018-07-09T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/08/weekly-links-07-08-18/",
            "html_content": "<p>A small list this week as it’s a holiday in the states.  So fewer articles out there, and I’m sure I missed some of them.</p>\n<h3>Programmer Life</h3>\n<p><a href=\"http://firstround.com/review/my-lessons-from-interviewing-400-engineers-over-three-startups/\">My Lessons from Interviewing 400+ Engineers | First Round Review</a></p>\n<p>I’m nowhere near Marco’s experience level interviewing, but his advice in this “interview on interviewing” resonates with my experience.  Things that stood out to me:</p>\n<ul>\n<li>Don’t overoptimize on a specific skillset as a startup, since you don’t know what skills you need yet.</li>\n<li>It’s incredibly important (but also quite difficult) to be consistent in your standards across all interviewees</li>\n<li>Team interviewing works better than 1 on 1 interviews for evaluating technical skills and team fit.</li>\n</ul>\n<p><a href=\"https://lethain.com/digg-v4/\">Digg’s v4 launch: an optimism born of necessity | Will Larson</a></p>\n<p>An engineering horror story.</p>\n<p><a href=\"http://randsinrepose.com/archives/anti-flow/\">Anti-Flow | Rands in Repose</a></p>\n<p>Rands remains my favorite software blog because of his ability to capture truths about the engineer condition with beautiful words.</p>",
            "url": "https://benmccormick.org/2018/07/08/weekly-links-07-08-18/",
            "title": "Weekly Links: July 8th",
            "date_modified": "2018-07-08T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/04/evil-javascript/",
            "html_content": "<p>JavaScript developers sometimes complain that their language is unjustly maligned for having too many confusing features.  Plenty of other people are out there explaining why this is misguided, but for this post I want to lean in.  Rather than falling into the <em>traps</em> that JavaScript exposes you to, what if we embrace our language’s reputation instead, and see what code we can write if we don’t care about the feelings of others?</p>\n<p>The “Evil JavaScript” you’ll see today takes advantage of an array of language features. Many of these techniques still work in other languages, so please don’t worry that I’m limiting your pursuit of the dark side. But JavaScript certainly has a flair for evil that is hard to match.  If you write code that other people have to work with, the opportunities to annoy, confuse, aggravate and bamboozle are limitless.  The following is a small selection of choice techniques.</p>\n<h4>Modify objects in your getters</h4>\n<p>JavaScript objects can define <code class=\"language-text\">getters</code>, functions that let you access the result of a function as a property.  Used normally, that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> greeter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeter<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello Bob</span>\ngreeter<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'World'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeter<span class=\"token punctuation\">.</span>hello<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Hello World</span></code></pre>\n      </div>\n<p>Used evilly though, we can come up with fun self-destructing objects!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n   bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n   baz<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">get</span> <span class=\"token function\">evil</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">delete</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>keys<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'Nothing to see here'</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Here, every time we read <code class=\"language-text\">obj.evil</code>, we delete one of the other properties on the object, with no indication to the code accessing <code class=\"language-text\">obj.evil</code> that anything extraordinary is happening.  But this is just the start of how we can introduce unexpected side effects.</p>\n<h4>Nobody expects a Proxy!</h4>\n<p>Getters are cool and all, but they’ve been around for years, and many developers know about them.  We now have an even more powerful variation on the same theme with Proxies.  Proxies are an ES6 feature that let you put a wrapper class around an object that lets you control what happens when a user accesses or updates any property.  So we can, for instance define an object that will, one third of the time return a value from a random key whenever a user tries to access a key.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.33</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>prop<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> keys <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> key <span class=\"token operator\">=</span> keys<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>keys<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> evilObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Proxy</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this is example output that I received running the code</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evilObj<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></code></pre>\n      </div>\n<p>Our sneakiness is undermined a bit by devtools, where evilObj will be identified as a Proxy, but we can still lead other developers on a merry chase before we’re caught.</p>\n<h4>Contagious functions</h4>\n<p>So far we’ve talked about how objects can modify themselves, but we can also create innocuous looking functions that infect the objects that are passed to them with strange behavior.  For instance lets say we had a simple <code class=\"language-text\">get</code> function to do safe property lookups on an object that may not exist:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>It would be easy to make that function contagious by subtly changing the object it was passed.  For instance we could make it so the retrieved property no longer showed up when the user enumerates the keys.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>property <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> defaultValue<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n   <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n   Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> property<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      enumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['a', 'b']</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ['b']</span></code></pre>\n      </div>\n<p>This is super subtle, since enumeration is neither rare nor particularly common.  Since the actual bug wouldn’t be tied to the infected object at all, it could persist in a code base for a long time.</p>\n<h4>Messing with Prototypes</h4>\n<p>Sometimes the old ways are best.  One of the most criticized features of the JavaScript language is the ability to modify built-in prototypes.  This was used in the early days of JavaScript to enhance built in objects like arrays.  For instance we can add a <code class=\"language-text\">contains</code> function for arrays like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">contains</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>It turns out that doing this in real libraries can <a href=\"http://2ality.com/2016/02/array-prototype-includes.html#frequently-asked-questions\">ruin the language for everyone else</a>.  So providing additional useful prototype methods is a good long con for malicious developers with patience.  But for the impatient sociopaths reading along, we also have some short term fun we can unleash.  The fun thing about prototype manipulation is that it affects all code running in an environment, even if that code is running in modules or closures.  So if we introduce the following code as a 3rd party script (maybe an ad or analytics script?), we can introduce subtle bugs throughout a site.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">Array<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">map</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>acc<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0.95</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         idx <span class=\"token operator\">=</span> idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">let</span> index <span class=\"token operator\">=</span> acc<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">===</span> idx <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> idx\n      acc<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> acc<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> arr2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>We’ve rewritten <code class=\"language-text\">Array.prototype.map</code> to work just like normal <code class=\"language-text\">map</code> with the exception that we will randomly switch the order of 2 values 1/20th of the time.  An example result:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">square</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1,4,9,16,25,36,49,64,100,81,121,144,169,196,225</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225]</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>square<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1,4,9,16,25,36,49,64,81,100,121,144,169,196,225]</span></code></pre>\n      </div>\n<p>We ran map 3 times, and the first was subtly different than the next 2 runs.  It’s subtle enough that it won’t always cause anything to happen, and the crazy thing about this hack is that there’s no real way to know it’s happening without actually reading the source code that caused it.  Our function doesn’t show up weirdly in devtools, and it doesn’t error under strict mode or anything else.  This is how developers go mad.</p>\n<h4>Naming things is hard</h4>\n<p>As one of the 2 hard problems in Computer Science, you don’t have to be evil to come up with bad names<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  But it certainly doesn’t hurt.  We’ll pass over the chump change of misleading names and outdated comments.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// initialize a date</span>\n<span class=\"token keyword\">let</span> arrayOfNumbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> userid<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Darth Vader'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>No let’s get to the good stuff.  Did you know that much of unicode can be used to name variables in JavaScript?  If you’re into fun and games of course, this means that emoji are in play:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> 💩 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> postid<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span><span class=\"token punctuation\">,</span> postName<span class=\"token punctuation\">:</span> <span class=\"token string\">'Evil JavaScript'</span><span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>But we want evil JavaScript, so let’s go straight to lookalike characters.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> oｂj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error!</span></code></pre>\n      </div>\n<p>The <code class=\"language-text\">ｂ</code> in <code class=\"language-text\">oｂj</code> may look normal, but it is actually a <em>fullwidth latin small letter b</em> instead of a <em>latin small letter b</em>, and that distinction means that anyone typing in the variable directly is probably going to be very confused.</p>\n<h3>Don’t be evil</h3>\n<p>Despite appearances, it is the official position of this blog that evil JavaScript should not be encouraged and may in fact be harmful.  That said, it’s always good to know the ways things can go wrong. Each of these patterns exist out in the wild somewhere.  Hopefully in less malicious forms than I’ve shown here.  But lack of intent doesn’t make them easier to debug, and knowing just how bad things can get is a good start to seeing these bugs coming.  You never know what bug is sitting out there waiting to strike. Just because you’re paranoid doesn’t mean that they’re not out to get you.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>This may be hard to believe for old time Linux folks of course. They’ve had years to associate the worst naming offender in the industry (Microsoft) with the deepest forms of evil.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/07/04/evil-javascript/",
            "title": "Evil JavaScript",
            "date_modified": "2018-07-04T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/07/02/book-review-atomic-design/",
            "html_content": "<p>The Unix philosophy for designing software, “Make each program do one thing well”, is a piece of wisdom that goes beyond just programming.  For instance, it also applies to non-fiction writing.  When learning, I find that I gravitate towards small focused resources, rather than monolithic books or websites that aim to teach everything about a specific topic.</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/\">Atomic Design</a> by Brad Frost is a book that does one thing really well: it explains what a design system is, and how you can implement one in your organization.  It doesn’t try to be a book about CSS, design styles or any of the other myriad topics that touch against design systems.  That focus serves it well, and I found it to be well worth my time.</p>\n<p><a href=\"http://bradfrost.com/blog/link/design-systems/\">Design Systems</a>  are an organized toolkit for creating digital products.  They’re a set of elements, widgets, patterns, and layouts (atoms, molecules, organisms and templates in the language of the book) that can be combined to build complex sites and applications.  The idea is pretty simple.  But there are some real challenges in implementing one.</p>\n<ol>\n<li><em>What content belongs in a design system?  Where do we draw the boundary as to what belongs and what doesn’t?</em></li>\n<li><em>How do you build a tool for your design system so that patterns are easily findable, usable, and understandable?</em></li>\n<li><em>How do you keep a design system relevant over time as the product(s) change?</em></li>\n<li><em>How do you convince budget-conscious organizations that maintaining a design system is a good use of time and money?</em></li>\n</ol>\n<p>After a brief introduction to the ideas behind design systems and pattern libraries, these are the challenges that Atomic design tackles.  It discusses a hierarchy for patterns, and methods for pulling them out of existing applications, then moves on to talking about tools for implementing a pattern library, and techniques for navigating organizational politics when starting and maintaining a design system.</p>\n<p>So this book <strong>will be helpful</strong> for you if you are</p>\n<ol>\n<li>Struggling to deal with inconsistencies in your interfaces, or constantly doing custom UI work for each new feature</li>\n<li>Considering implementing a design system/pattern library for your organization</li>\n<li>Hoping to learn more about design systems because somebody else in your organization is pushing for one</li>\n<li>Having trouble maintaining an existing pattern library</li>\n</ol>\n<p>It <strong>won’t be helpful</strong> for you if you are</p>\n<ol>\n<li>Looking for tips on how to make your interface beautiful</li>\n<li>Seeking hands on information about specific design, CSS or JavaScript techniques</li>\n</ol>\n<p>I enjoyed Atomic Design a lot, and hope that I’ll get to use what I’ve learned in the near future.  As far as I can tell, Atomic design is only available on <a href=\"http://atomicdesign.bradfrost.com/\">Brad Frost’s site</a>.  You can read the book online there, or buy the paperback version.  If you fall into one of the 4 categories I listed above, I’d highly recommend checking it out.</p>",
            "url": "https://benmccormick.org/2018/07/02/book-review-atomic-design/",
            "title": "Book Review: Atomic Design",
            "date_modified": "2018-07-02T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/06/30/weekly-links-06-30-18/",
            "html_content": "<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.merrickchristensen.com/articles/headless-user-interface-components/\">Headless User Interface | Merrick Christensen</a></p>\n<p>UI mixins are one of the hardest problems to solve.  Sharing “behavior” across multiple UI components is difficult to do right.  Merrick has documented an emerging pattern for doing this with React.</p>\n<p><a href=\"https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c\">React Native at Airbnb | Airbnb Engineering</a></p>\n<p>This has gotten plenty of attention around the internet, but Airbnb is moving away from React Native after years of heavy use and contributions to the community.  Worth reading as an explanation of the pluses and minuses of React Native, probably not worth reading too much into the move beyond that.</p>\n<p><a href=\"https://remysharp.com/2018/06/26/an-adventure-in-sparse-arrays\">An Adventure in Sparse Arrays | Remy Sharp</a></p>\n<p>For anyone who read my <a href=\"https://benmccormick.org/2018/06/19/code-golf-sparse-arrays/\">“sparse array code golf” post</a> the other day, this is a better holistic look at sparse arrays in JavaScript.  I learned several new things here.</p>\n<h3>Programming Practices</h3>\n<p><a href=\"https://medium.com/@ricomariani/understanding-performance-regions-e4b6e09a94da\">Understanding Performance Regions | Rico Mariani</a></p>\n<p>This is a nice high level post about a different way to think about performance monitoring and improvement.</p>\n<h3>Fun</h3>\n<p><a href=\"https://www.youtube.com/watch?v=QjvzCTqkBDQ&#x26;feature=youtu.be\">Paul McCartney Carpool Karaoke</a></p>\n<p>An incredibly fun video.  Paul McCartney showing James Corden around Liverpool.</p>\n<p><a href=\"https://www.bloomberg.com/news/features/2018-06-21/how-nintendo-s-switch-helped-the-japanese-gaming-giant-win-again\">The Legend of Nintendo | Bloomberg</a></p>\n<p>A great writeup on Nintendo’s last few years and where they stand now.</p>",
            "url": "https://benmccormick.org/2018/06/30/weekly-links-06-30-18/",
            "title": "Weekly Links: June 30th",
            "date_modified": "2018-06-30T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        }
    ]
}