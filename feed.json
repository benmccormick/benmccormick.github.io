{
    "version": "https://jsonfeed.org/version/1",
    "title": "benmccormick.org",
    "home_page_url": "http://benmccormick.org",
    "feed_url": "http://benmccormick.org/feed.json",
    "description": "A blog by Ben McCormick",
    "icon": "https://benmccormick.org/logo.png",
    "author": {
        "name": "Ben McCormick"
    },
    "items": [
        {
            "id": "https://benmccormick.org/2018/06/15/weekly-links-06-15-18/",
            "html_content": "<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.graphqlstack.com\">GraphQL Stack</a></p>\n<p>This is a nice overview of the technologies involved with GraphQL, for anyone who has heard of the technology but isn‚Äôt quite sure how it all fits together.</p>\n<p><a href=\"https://css-tricks.com/understanding-the-almighty-reducer/\">Understanding The Almighty Reducer | Sarah Drasner</a></p>\n<p>Moving from a loop mindset to making proper use of forEach/map/filter/reduce was one of the biggest shifts I made when moving from Java development to JavaScript.  Reduce especially can be hard to learn initially, and it never becomes simple.  This is a great introduction for those who are unfamiliar or haven‚Äôt gotten comfortable with writing reducers yet.</p>\n<h3>Software + Business</h3>\n<p><a href=\"https://seths.blog/2018/06/on-paying-for-software/\">On paying for software | Seth Godin</a></p>\n<p>This mirrors my opinions on paying for software pretty well.  There‚Äôs a place in the world for free apps, and I definitely have passed on apps because of price before.  But the apps I‚Äôve used that have had real value to me have almost always been paid, usually these days as an ongoing subscription.  The exceptions, like Twitter, tend to come with frustrating downsides that are difficult to disentangle from the free-to-play model.</p>\n<h3>Tech World</h3>\n<p><a href=\"https://www.theatlantic.com/science/archive/2018/06/its-possible-to-reverse-climate-change-suggests-major-new-study/562289/\">Climate Change Can Be Reversed by Turning Air Into Gasoline | The Atlantic</a></p>\n<p>This seems really promising.</p>\n<p><a href=\"https://weblog.rogueamoeba.com/2018/06/14/on-the-sad-state-of-macintosh-hardware/\">On The Sad State of Macintosh Hardware | Rogue Amoeba</a></p>\n<p>I‚Äôm lucky enough to have access to 2 2015 era Macbook Pros (1 for home, 1 for work) and they‚Äôre amazing machines.  I‚Äôm hoping that they both have long lifespans. But I‚Äôm increasingly not sure what my next laptop will be whenever I next have a choice.  It seems like the laptops since then have lost some things I appreciate about my current laptops (Magsafe charger, HDMI port) and made the keyboard significantly worse, with minimum benefits.  I hope that Apple can right this ship.</p>",
            "url": "https://benmccormick.org/2018/06/15/weekly-links-06-15-18/",
            "title": "Weekly Links: June 15th",
            "date_modified": "2018-06-15T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/06/10/weekly-links-06-10-18/",
            "html_content": "<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://daverupert.com/2018/06/the-react-is-just-javascript-myth/\">The React is ‚Äújust‚Äù JavaScript Myth | Dave Rupert</a></p>\n<p>I‚Äôve been thinking a lot about the reasons that JavaScript development is perceived as intimidating and over-complicated the past few weeks.  Might have a full post on that soon, but for now, there‚Äôs a good point here.</p>\n<p>React is relatively simple at it‚Äôs core, but it‚Äôs difficult to find examples of using it in the wild, that don‚Äôt require you to learn Webpack/Babel/npm at minimum, and many ‚Äústarting points‚Äù will also toss in Redux/React Router/Jest/etc as well.</p>\n<p><a href=\"https://medium.com/@mweststrate/mobx-5-the-saga-continues-4852bce05572\">MobX 5: the saga continues‚Ä¶ | Michael Weststrate</a></p>\n<p>MobX is the first major library I‚Äôve seen to take advantage of proxies to give normal looking JavaScript objects/arrays magic powers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  This sort of ‚Äújust make it work in the prettiest way possible‚Äù API is the type of thing that tends to produce really cool results as long as it works correctly 100% of the time, but becomes a huge pain as soon as it‚Äôs flaky.  I‚Äôve never had any problems with MobX after using it for 2 years, so I‚Äôm hopeful seeing them as an early adapter here.  Will be interested to see if they start getting used more widely going forward.  If so, I hope that browser start thinking about how they can expose these types of patterns well in developer tools.  How do you drop into a side effect caused by a proxy in a debugger?  It‚Äôs an interesting problem</p>\n<p><a href=\"http://2ality.com/2014/12/es6-proxies.html\">Meta programming with ECMAScript 6 proxies | 2ality</a></p>\n<p>In case I lost anybody with my discussion of the last link, here‚Äôs an old but good walkthrough of what Proxies are and how you can use them to create some pretty magical APIs.</p>\n<h3>Microsoft Buying Github</h3>\n<p><a href=\"https://changelog.com/spotlight/14\">üî• Our reactions to Microsoft buying GitHub |Adam Stacoviak &#x26; Jerod Santo</a></p>\n<p>A <a href=\"https://changelog.com/\">Changelog</a> podcast that summarizes the reaction of the 2 primary Changelog hosts to the annoucement as well as collecting reactions from around the internet.</p>\n<p><a href=\"https://github.com/martenbjork/github-xp\">github-xp | M√•rten Bj√∂rk</a></p>\n<p>This is just fun.  A Chrome extension to render Github in the style of Windows XP.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Even if they chose to announce that in the silliest way possible</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/06/10/weekly-links-06-10-18/",
            "title": "Weekly Links: June 10th",
            "date_modified": "2018-06-10T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/06/05/es6-the-bad-parts/",
            "html_content": "<p>This month is the 3 year anniversary of the ECMAScript2015 spec, <a href=\"https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning\">better known as ES6</a>.  It was a spec update that brought a ton of features to the JavaScript language, and the start of a new era of improving the language.  It was also the last ‚Äúbig bang‚Äù release of JavaScript, as TC39 has now moved to a pattern of annual small releases rather than making large multi-year language releases.</p>\n<p>There has been a boatload of justified hype around ES6 over the last 4 years.  I‚Äôve been writing all of my code using the modern spec during that time<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. So this is a good time to step back and evaluate the features that were added.  Specifically there are some features that I used for a while that I‚Äôve stopped using, because they made my code worse.</p>\n<p>In his book <a href=\"https://amzn.to/2LJBY9z\">JavaScript: The Good Parts</a> Douglas Crockford dedicated a chapter to the <em>Bad Parts</em> of JavaScript.  <em>The Bad Parts</em> are the features of JavaScript that he felt shouldn‚Äôt be used.  Fortunately there is nothing as bad in ES6 as some of the old JavaScript stinkers like coercive equality, eval or the <code>with</code> statement.  ES6 was a well-designed release. But there are some features and patterns that I avoid. A JavaScript feature makes my <em>Bad Parts</em> list because:</p>\n<ol>\n<li><strong>It‚Äôs a trap.</strong>  The feature looks like it does one thing, but has unexpected behavior in some cases that can easily lead to bugs</li>\n<li><strong>It increases the scope of the language for little benefit.</strong> The feature provides some small advantage, but requires the readers of my code to know about obscure features.  This is doubly true for <em>API features</em> where using the feature means that other code that interacts with my code must know about the feature.</li>\n</ol>\n<p>In that spirit, here are my <em>Bad Parts</em> of ES6.</p>\n<h4>const</h4>\n<p>In older versions of JavaScript, we declared variables with the var keyword<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  This was mostly fine, but <code>var</code> has peculiarities.  It creates variables that are added to the global object, or scoped to a function, but don‚Äôt respect other block boundaries.  It is also possible to reference a <code>var</code> declared variable before it is declared. These oddities occasionally come back to bite developers.  In response ES6 introduced 2 new keywords for declaring variables: <code>let</code> and <code>const</code>.  These solve the primary quirks of <code>var</code>; they are block-scoped, so a variable declared inside of a loop is not referencable outside of that loop, and trying to access the variable before it is declared in code results in a reference error. This was a big step forward.  It was also confusing, because we were given 2 solutions.</p>\n<p>A <code>const</code> variable cannot be re-assigned after it has been declared. This is the only difference between <code>const</code> and <code>let</code>. This seems useful, and it can be.  The problem is the name. What it guarantees doesn‚Äôt match what most people expect from a <em>constant</em>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> CONSTANT <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// this will cause \"TypeError: invalid assignment to const `CONSTANT`\"</span>\nCONSTANT <span class=\"token operator\">=</span> <span class=\"token number\">345</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CONSTANT_ARR <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\nCONSTANT_ARR<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// this will print [1] without an error</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>CONSTANT_ARR<span class=\"token punctuation\">)</span>\n</code></pre>\n      </div>\n<p><code>const</code> prevents reassignment, but it doesn‚Äôt make objects immutable.  This is a fairly weak guarantee for most value types.  Because this feature invites confusion, and <code>const</code> is otherwise redundant with <code>let</code>, I choose to always use <code>let</code>.</p>\n<h4>Template Literal Tags</h4>\n<p><code>const</code> is an example of the spec creating too many solutions to too few problems. Template literals are the inverse.  The template literal syntax was TC39‚Äôs way of tackling string interpolation and multi-line strings.  Then they decided to give it a string macro feature as well.</p>\n<p>If you‚Äôve never seen a template literal tag, they‚Äôre a little like <a href=\"https://github.com/tc39/proposal-decorators\">decorators</a> for strings.  Here‚Äôs an example from <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">MDN</a>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token string\">'Mike'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">28</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">myTag</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> personExp<span class=\"token punctuation\">,</span> ageExp<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> str0 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"that \"</span>\n  <span class=\"token keyword\">var</span> str1 <span class=\"token operator\">=</span> strings<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \" is a \"</span>\n\n  <span class=\"token comment\">// There is technically a string after</span>\n  <span class=\"token comment\">// the final expression (in our example),</span>\n  <span class=\"token comment\">// but it is empty (\"\"), so disregard.</span>\n  <span class=\"token comment\">// var str2 = strings[2];</span>\n\n  <span class=\"token keyword\">var</span> ageStr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ageExp <span class=\"token operator\">></span> <span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'centenarian'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    ageStr <span class=\"token operator\">=</span> <span class=\"token string\">'youngster'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> str0 <span class=\"token operator\">+</span> personExp <span class=\"token operator\">+</span> str1 <span class=\"token operator\">+</span> ageStr<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> output <span class=\"token operator\">=</span> myTag<span class=\"token template-string\"><span class=\"token string\">`that </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> person <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is a </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> age <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// that Mike is a youngster</span>\n</code></pre>\n      </div>\n<p>This isn‚Äôt totally useless. <a href=\"https://codeburst.io/javascript-es6-tagged-template-literals-a45c26e54761\">Here‚Äôs a roundup of some use cases</a>.  HTML sanitization is a useful trait.  And this is the currently the cleanest way to do things when you‚Äôre having to perform the same operation on all inputs to an arbitrary string template.  But that‚Äôs a relatively rare scenario, and you can also accomplish the same use cases with a (more verbose) function API rather than using tagged literals.  And for most things, the function API won‚Äôt even be worse.  This feature is not adding new capabilities, but is adding new concepts that future readers of my code have to be familiar with.  So I plan on staying clear as much as possible.</p>\n<h4>Overly crazy destructuring expressions</h4>\n<p>Some features are fine when used simply, but can spiral out of controls.  For instance, I am happy to write ternary statements like</p>\n<p><code>let conferenceCost = isStudent ? 50 : 200</code></p>\n<p>but they become tough to follow if you start nesting them:</p>\n<p><code>let conferenceCost = isStudent ? hasDiscountCode ? 25 : 50 : hasDiscountCode ? 100 : 200</code>;</p>\n<p>This is how I feel about destructuring.  Destructuring lets you pull variables out of objects or arrays</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2, 4</span>\n</code></pre>\n      </div>\n<p>and also lets you rename variables, get nested values, and set defaults.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> val1<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>c<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>c<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>d<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val1<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2, 4, 5, 6</span>\n</code></pre>\n      </div>\n<p>All of which is great, until you start combining those features.  For instance, this expression declares 4 variables, userName, eventType, eventDate, and eventId pulled out of different spots in the object structure of <code>eventRecord</code>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> eventRecord <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ben M\"</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ben@m.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  event<span class=\"token punctuation\">:</span> <span class=\"token string\">\"logged in\"</span><span class=\"token punctuation\">,</span>\n  metadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"10-10-2017\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> userName <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  event<span class=\"token punctuation\">:</span> eventType <span class=\"token operator\">=</span> <span class=\"token string\">\"Unknown Event\"</span><span class=\"token punctuation\">,</span>\n  metadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>date<span class=\"token punctuation\">:</span> eventDate<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> eventId\n<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>It‚Äôs pretty much impossible to follow.  Code like this is much easier to read with the destructuring split into parts or eliminated.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">let</span> eventRecord <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"Ben M\"</span><span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">:</span> <span class=\"token string\">\"ben@m.com\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  event<span class=\"token punctuation\">:</span> <span class=\"token string\">\"logged in\"</span><span class=\"token punctuation\">,</span>\n  metadata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> date<span class=\"token punctuation\">:</span> <span class=\"token string\">\"10-10-2017\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  id<span class=\"token punctuation\">:</span> <span class=\"token string\">\"123\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> userName <span class=\"token operator\">=</span> eventRecord<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>userName <span class=\"token operator\">||</span> <span class=\"token string\">'Unknown'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> eventDate <span class=\"token operator\">=</span> eventRecord<span class=\"token punctuation\">.</span>metadata<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>event<span class=\"token punctuation\">:</span>eventType<span class=\"token operator\">=</span><span class=\"token string\">'UnknownEvent'</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">:</span>eventId<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> eventRecord<span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>I don‚Äôt have a clear line for when destructuring has gone too far, but anytime I can‚Äôt look at it and instantly know what variables are being declared, I know it‚Äôs time to break things down for readability.</p>\n<h4>Default Exports</h4>\n<p>One nice thing about ES6 was the way it standardized things that had been accomplished using competing libraries.  Classes, Promises and modules all benefited from being folded into the spec after the community had time to absorb lessons learned from competitive user-land implementations.  ES6 modules are a great replacement for the AMD/CommonJS format wars, and provide a nice clean syntax for imports.</p>\n<p>ES6 modules provide 2 main ways of exporting values: <em>named exports</em>, and <em>default exports</em>.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> mainValue <span class=\"token operator\">=</span> 'This is the <span class=\"token keyword\">default</span> <span class=\"token keyword\">export</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> mainValue\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> secondaryValue <span class=\"token operator\">=</span> 'This is a secondary value<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> secondaryValue2 <span class=\"token operator\">=</span> 'This is another secondary value<span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>A module can define multiple named exports, but only a single default export.  When importing default exports, the importing file can give the default export any name as there isn‚Äôt any lookup on name.  Named exports are imported by using the name of the variable in the exporting file, though renaming is possible.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">// default import</span>\n<span class=\"token keyword\">import</span> renamedMainValue <span class=\"token keyword\">from</span> <span class=\"token string\">'./the-above-example'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// named import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>secondaryValue<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./the-above-example'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// named import with a rename</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>secondaryValue <span class=\"token keyword\">as</span> otherValue<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./the-above-example'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>Default exports <a href=\"https://esdiscuss.org/topic/moduleimport#content-0\">were the preferred syntax of the folks designing ES6</a> and they intentionally gave it the cleanest syntax.  But in practice I‚Äôve found named exports to be better.</p>\n<ol>\n<li>Named exports match the names of the imported variable by default, making searching easier for those not using intelligent tooling.</li>\n<li>Named exports can be matched to variables in other values prior to an import statement being written, allowing niceties like <a href=\"https://code.visualstudio.com/updates/v1_18#_auto-import-for-javascript-and-typescript\">auto-import</a> for those using intelligent tooling.</li>\n<li>It‚Äôs possible to use named imports consistently for everything, but that‚Äôs only possible with default imports if you never want to export multiple values from a file.<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> Using only named modules keep things simpler.</li>\n</ol>\n<p>Naming things is good.  It promotes consistency in discussion and code.  I use named exports because I like clarity.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Thanks <a href=\"https://babeljs.io/learn-es2015/\">Babel</a>!</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n<li id=\"fn-2\">\n<p>Or global scope, or a property on an object, or a function declaration</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n<li id=\"fn-3\">\n<p>Exporting objects with multiple values as properties seems like a workaround here, but that loses the tree-shaking value that ES6 Modules provide for bundlers like webpack.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/06/05/es6-the-bad-parts/",
            "title": "ES6: The Bad Parts",
            "date_modified": "2018-06-05T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/06/03/weekly-links-06-03-18/",
            "html_content": "<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://developers.google.com/web/updates/2018/05/nic67#desktop-pwas\">New in Chrome 67  - Desktop PWAs¬†|¬†Google Developers</a></p>\n<p>Google has a new process for bundling web apps as installable applications, this time based on the emerging Progressive Web App semi-standard<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  An interesting alternative approach for smaller applications that don‚Äôt need the full electron runtime, or education apps targeting Chromebooks</p>\n<h3>Programming Tools</h3>\n<p><a href=\"https://github.com/ambv/black\">black: The uncompromising Python code formatter | Github</a></p>\n<p>This looks like a Python version of <a href=\"https://prettier.io/\">Prettier</a>, and something I‚Äôd be interested in playing with.</p>\n<p><a href=\"https://facebook.github.io/jest/blog/2018/05/29/jest-23-blazing-fast-delightful-testing.html\">Jest 23 | Jest Blog</a></p>\n<p>Jest just keeps getting better.  This release brings interactive snapshot updating, so that you can approve some changes and not others.  That‚Äôs a big UX improvement and reason enough to upgrade, but looks like there are some improved matchers and new customizability options for power users as well.  A solid release.</p>\n<h3>Tech &#x26; Business</h3>\n<p><a href=\"https://www.theverge.com/2018/6/3/17422752/microsoft-github-acquisition-rumors\">Microsoft has reportedly acquired Github | The Verge</a></p>\n<p>Microsoft seems to be doing everything it can to earn back love and trust from developers.  Some of that has been by investing in new stuff like Visual Studio Code, some of it has been attitude, and then things like this are just buying somebody elses love.  But I think they‚Äôve earned back enough good will at this point that most developers will be willing to give them a chance and not assume that this will automatically be a bad thing.  Which is a big change from 5 years ago.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>It‚Äôs a little vague still to really be considered a standard, but Microsoft and Google at least are providing broad support for similar sounding things that they both call PWAs, and Mozilla and Apple have been supporting the underlying technology if not the branding as much.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/06/03/weekly-links-06-03-18/",
            "title": "Weekly Links: June 3rd",
            "date_modified": "2018-06-03T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/05/27/weekly-links-05-27-18/",
            "html_content": "<h3>Business &#x26; Technology</h3>\n<p><a href=\"https://www.gatsbyjs.org/blog/2018-05-24-launching-new-gatsby-company/\">Gatsby contributors form Gatsby Inc. | Gatsby Blog</a></p>\n<p>This blog is built on <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>, and I‚Äôve <a href=\"https://benmccormick.org/topics/gatsby\">written</a> and <a href=\"https://www.slideshare.net/BenMcCormick/gatsby-intro\">spoken</a> on it a few times in the past.  So I‚Äôm really excited to see what happens with the tech as it becomes a company, while continuing to be open source.  It will be really exciting to see where they take it from here, and I think they have a real chance to be successful, especially if they can get a foothold into the ecommerce world.</p>\n<h3>Problem Solving</h3>\n<p><a href=\"http://reinertsenassociates.com/the-cult-of-the-root-cause/\">The Cult of the Root Cause | Donald Reinertsen</a></p>\n<p>A really nice short post on problem solving, and how the quest to find the root cause for an issue can sometimes be a distraction.</p>\n<h3>Books</h3>\n<p><a href=\"https://amzn.to/2sgXJoo\">Unbroken | Laura Hillenbrand</a></p>\n<p>I‚Äôve fallen behind on my quest to read 30 books in a year, but this month I was able to read a fantastic book that multiple friends had recommended: Unbroken.  With the <a href=\"https://www.imdb.com/title/tt7339792/\">second movie</a> based on the book coming out this fall, you‚Äôll probably start to hear about this book again.  It‚Äôs been around since 2010, but I didn‚Äôt read it when it was first popular, and now I wish I had.  It is an amazing story of human perseverence, surviving trauma, and ultimately grace.  It doesn‚Äôt oversimplify the human beings whose lives it chronicles, but still manages to shine on a light on the best and worst of the human condition.  Highly recommended.</p>",
            "url": "https://benmccormick.org/2018/05/27/weekly-links-05-27-18/",
            "title": "Weekly Links: May 27th",
            "date_modified": "2018-05-27T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/05/19/weekly-links-05-19-18/",
            "html_content": "<h3>JavaScript and the Web</h3>\n<p><a href=\"https://changelog.com/reactpodcast\">The React Podcast | Michael Jackson</a></p>\n<p>I listen to a decent amount of podcasts, but I‚Äôve usually found it tough to get into programming podcasts.  Without visually being able to see code, they‚Äôre usually either ultra high level, or get hard to follow when going into the details.  The changelog family of podcasts has generally been my favorite though, and the new<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> React podcast has been consistently excellent over it‚Äôs first 9 episodes.  Worth a listen.</p>\n<p><a href=\"https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/?utm_source=ponyfoo+weekly&#x26;utm_medium=email&#x26;utm_campaign=115\">Guess.js | Minko Gechev</a></p>\n<p>This is a crazy look at what I suspect will be the next step in static site performance stuff.  This blog does some of the cool stuff mentioned here (we prefetch links on the page thanks to Gatsby, and I use google analytics at build time to determine popular pages and populate the Most Read Articles list on the main page) but this is next level, using analytics to efficiently prefetch.  Excited to try it on the site.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://amzn.to/2LdnoXK\">The Vision | Tom King</a></p>\n<p>Ok so I‚Äôm pretty late on this one<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, but Tom King‚Äôs <em>The Vision</em> is the best comic book I‚Äôve read in years.  He‚Äôs got a <a href=\"https://amzn.to/2IwlMq1\">pretty</a> <a href=\"https://amzn.to/2LcYQ0U\">good</a> <a href=\"https://amzn.to/2Lh3ZFd\">run</a> going on Batman now as well, but this is a brilliant self-contained story that holds up as well as anything I‚Äôve seen. Great art as well.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Newly relauched? I‚Äôm not totally sure of the history</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n<li id=\"fn-2\">\n<p>The single edition Vision comics were originally released in 2015, though the hardcover that I purchased was just released this year.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/05/19/weekly-links-05-19-18/",
            "title": "Weekly Links: May 19th",
            "date_modified": "2018-05-19T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/05/14/mobx-state-machines-and-flags/",
            "html_content": "<p>A few weeks ago, I was listening to the <a href=\"https://changelog.com/reactpodcast\">React Podcast</a>, specifically their <a href=\"https://changelog.com/reactpodcast/5\">episode on State Machines</a> with <a href=\"https://twitter.com/davidkpiano\">David Khourshid</a>.  About 20 minutes into the podcast, there was a discussion on the benefits of using enums over flags to model the state of objects that can change across multiple dimensions.  It reminded me of one of the nice patterns that <a href=\"https://mobx.js.org/\">MobX</a> makes possible, and I thought I‚Äôd share it here.</p>\n<h3>Background</h3>\n<p>To set the stage here, the podcast discussion centered around modeling an async process like a promise. One possible way given was to use a mix of flags and if statements like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>using one of these objects might look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show error state</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show loading state</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show data State</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>In the podcast David Khourshid criticized this as a haphazard way to manage state, that doesn‚Äôt show the whole picture.  Because we can‚Äôt easily see how the various flags combine, it‚Äôs tough to keep track of all possible states.  For instance, in the above example, did we really want to show the error state if we had an error, but have called <code>load()</code> again and both <code>hasError</code> and <code>isLoading</code> are now true?  Maybe that was the intention, but maybe that was just a state that was missed during the original construction of the program.  It‚Äôs hard to tell.  </p>\n<p>As an alternative to full blown state machine modeling, David advocated for an easy first step of swapping out flags for enums.  In that case the code above might look like:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">const</span> STATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  INITIAL<span class=\"token punctuation\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span>\n  LOADING<span class=\"token punctuation\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">,</span>\n  ERROR<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  LOADED<span class=\"token punctuation\">:</span> <span class=\"token string\">'loaded'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> STATES<span class=\"token punctuation\">.</span>INITIAL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>LOADING<span class=\"token punctuation\">,</span> ERROR<span class=\"token punctuation\">,</span> LOADED<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> STATES<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> LOADING\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> LOADED<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> ERROR<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>with usage like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show error state</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>LOADING<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show loading state</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>LOADED<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show data State</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>INITIAL<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show blank state</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>We can see just from using an enum, we‚Äôve cleared some ambiguity: now it is clear that we should be showing a loading state when we‚Äôre loading data, even if a previous load resulted in an error.  And we‚Äôve also been forced to remember another state distinction that was missed originally, the difference between a successful load and the initial state before load is called.  This type of Enum-based approach is really helpful for modeling complex systems and especially async process state. But it‚Äôs not perfect.  While ENUMs are great for listing out every possible state, sometimes we just need to know if an object is in a particular state.  For instance, we might have a special help-prompt component that should only show if our data is in an error state, but is otherwise divorced from the details of the data.  In that case <code>loader.hasError</code> is simpler and  cleaner than <code>loader.state === STATES.ERROR</code>.  It‚Äôs a straight forward named expression that doesn‚Äôt require importing a constant from another file or matching up to a string value.  Enums add some verbosity and ceremony to code that can otherwise be very simple.  Fortunately MobX allows us to have our cake and eat it too.</p>\n<h3>MobX</h3>\n<p>MobX is a state management solution created by <a href=\"https://twitter.com/mweststrate\">Michael Weststrate</a>.  It grew out of the React community but can be used with other frameworks or on it‚Äôs own.  One of its nicest features are its intelligently updated <a href=\"https://mobx.js.org/refguide/computed-decorator.html\">computed properties</a>.  With MobX we can write our loader object like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>extendObservable<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> STATES <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  INITIAL<span class=\"token punctuation\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span>\n  LOADING<span class=\"token punctuation\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">,</span>\n  ERROR<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  LOADED<span class=\"token punctuation\">:</span> <span class=\"token string\">'loaded'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>INITIAL<span class=\"token punctuation\">,</span> LOADING<span class=\"token punctuation\">,</span> ERROR <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> STATES<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">extendObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          state<span class=\"token punctuation\">:</span> INITIAL<span class=\"token punctuation\">,</span>\n          isLoading<span class=\"token punctuation\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> LOADING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          hasError<span class=\"token punctuation\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          updateState<span class=\"token punctuation\">:</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>LOADING<span class=\"token punctuation\">,</span> ERROR<span class=\"token punctuation\">,</span> LOADED<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> STATES<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>LOADING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>LOADED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span>ERROR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>Now we have both our state enum, and we can check specific properties.  So both of the below examples work:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">// ENUM example</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>ERROR<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show error state</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>LOADING<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show loading state</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>LOADED<span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show data State</span>\n  <span class=\"token keyword\">case</span> STATES<span class=\"token punctuation\">.</span>INITIAL<span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">// show blank state</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">//Flags example</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show help component</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>And because MobX takes care of the details of efficiently updating our flags based on state, we know everything will stay in sync and remain performant, without a bunch of ugly code to make sure of that.</p>",
            "url": "https://benmccormick.org/2018/05/14/mobx-state-machines-and-flags/",
            "title": "MobX Patterns: State Machines & Flags",
            "date_modified": "2018-05-14T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/05/05/weekly-links-05-05-18/",
            "html_content": "<h3>Intriguing Github Projects</h3>\n<p><a href=\"https://github.com/mdx-js/mdx\">MDX</a></p>\n<p>Ever since I started using Gatsby to power this blog, I‚Äôve wanted the ability to write markdown with React elements intermingled in it.  This looks like the first working version of that I‚Äôve seen.  I‚Äôm excited to play with it.</p>\n<p><a href=\"https://github.com/sharkdp/bat\">bat: A cat(1) clone with wings | David Peter</a></p>\n<p>This looks like a really cool project, a ‚Äúcat‚Äù clone with syntax highlighting and git line indicators.  Lot‚Äôs of cool stuff being written in Rust these days.</p>\n<h3>Tech and Business</h3>\n<p><a href=\"https://www.sec.gov/Archives/edgar/data/1018724/000119312518121161/d456916dex991.htm\">Amazon Letter To Shareholders | Jeff Bezos</a></p>\n<p>I originally saw this letter in an article on <a href=\"https://stratechery.com/2018/divine-discontent-disruptions-antidote/\">Stratechery</a>, (and that piece is also great).  It‚Äôs one of the best short pieces on business that I‚Äôve ever read.  The Stratechery piece breaks down the idea of ‚Äúdivinely discontent customers‚Äù, which is an amazing image.  But the other advice about how to set and maintain high standards is even better.  Just great stuff, from the leader of one of the most important companies in the world.</p>\n<h3>Fun</h3>\n<p><a href=\"https://twitter.com/jhoff/status/991408768171855873\">‚ÄúWhat the customer really wanted üòè‚Ä¶ ‚Äú</a></p>\n<p>This is a new variant on one of my favorite programming jokes<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">What the customer really wanted üòè <a href=\"https://t.co/sDTbQsZb3U\">pic.twitter.com/sDTbQsZb3U</a></p>&mdash; Jayme Hoffman (@jhoff) <a href=\"https://twitter.com/jhoff/status/991408768171855873?ref_src=twsrc%5Etfw\">May 1, 2018</a></blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>If anyone knows where the original version of this joke is from let me know and I‚Äôll credit it.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/05/05/weekly-links-05-05-18/",
            "title": "Weekly Links: May 5th",
            "date_modified": "2018-05-05T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/04/27/weekly-links-04-22-18/",
            "html_content": "<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://engineering.linkedin.com/blog/2018/04/css-at-scale--linkedins-new-open-source-projects-take-on-stylesh\">CSS at Scale: LinkedIn‚Äôs New Open Source Projects Take on Stylesheet Performance | LinkedIn Engineering</a></p>\n<p>This is a cool new set of CSS tools from LinkedIn.  This looks most similar to CSS Modules/PostCSS to my eyes, with a focus on optimizing bundle size for both CSS and templates/components.  I‚Äôd be very interested in playing with it.</p>\n<h3>Programming Tools</h3>\n<p><a href=\"https://www.joelonsoftware.com/2018/04/23/strange-and-maddening-rules/\">Strange and maddening rules | Joel Spoelsky</a></p>\n<p>I‚Äôm continuing to enjoy Joel‚Äôs series on StackOverflow.  I‚Äôve always been more sympathetic to their moderation strategy than some, so I‚Äôll leave it as an exercise to the reader whether the explanations presented here hold water, but definitely worth reading if you‚Äôve ever tried contributing to StackOverflow and been frustrated.</p>\n<p><a href=\"https://medium.com/@felixrieseberg/defeating-electron-e1464d075528\">Defeating Electron | Felix Rieseberg</a></p>\n<p><a href=\"https://electronjs.org/\">Electron</a> doesn‚Äôt have the best reputation.  Any time an electron based app makes news on Hacker News, three quarters of the comments are bashing Electron and the companies that use it.  It‚Äôs been criticized recently and prominently on <a href=\"https://daringfireball.net/2018/02/non_native_apps_threat_to_mac\">Daring Fireball</a> and seems to generally be looked down on by ‚Äúreal‚Äù MacOS developers.  So I think this is a helpful response.  An Electron community member knocks down some straw-men (Electron doesn‚Äôt only exist because web developers don‚Äôt want to learn new things) and then lays out what would be needed to replace it.  </p>\n<p>I think there‚Äôs an interesting tension here:  This post describes what would be needed to create a more compelling cross-platform solution from the point of view of companies and developers.  But the criticism has mostly been focused on the requirements of users, not companies.  Specifically that Electron apps tend to be slower/less-memory-efficient/less accessible/less attuned to platform specific conventions.  So companies are making the decisions that let them serve the most number of people, while evolving to meet their needs as quickly as possible, with as small cost as possible.  But they‚Äôre possibly limiting the top level quality they can achieve, and there is a possible social good being missed by the people excluded (those with lower performance machines or accessibility needs<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>).</p>\n<h3>Tech and Ethics</h3>\n<p><a href=\"http://nymag.com/selectall/2018/04/dan-mccomas-reddit-product-svp-and-imzy-founder-interview.html\">‚ÄòI Fundamentally Believe That My Time at Reddit Made the World a Worse Place‚Äô | Noah Kulwin &#x26; Dan McComas</a></p>\n<p>A great interview on the massive potential for good or evil today‚Äôs tech products can have.  This does suggest that the problem is deeper than simply ‚Äúengineers and designers behaving ethically‚Äù though.  You can get at Reddit‚Äôs issues by following the money.</p>\n<p><a href=\"https://twitter.com/leinweber/status/989267343002951680?ref_src=twsrc%5Etfw\">A Very Good Program</a></p>\n<p>On a lighter note, here‚Äôs the real case for engineers and designers needing to behave ethically.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I made a VGP (very good program) that makes it so it looks like I‚Äôm typing on slack whenever anyone else is typing, and stops when they stop.<br><br>Everyone loves it so far and doesn‚Äôt find it annoying at all!<a href=\"https://t.co/W8e2EKuVXX\">https://t.co/W8e2EKuVXX</a> <a href=\"https://t.co/ZZd01GxYqg\">pic.twitter.com/ZZd01GxYqg</a></p>&mdash; will leinweber (@leinweber) <a href=\"https://twitter.com/leinweber/status/989267343002951680?ref_src=twsrc%5Etfw\">April 25, 2018</a></blockquote>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I am not an accessibility expert, but I‚Äôm aware that it is a criticism of Electron.  I can‚Äôt evaluate the actual difficulty of making a native vs electron application accessible.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/04/27/weekly-links-04-22-18/",
            "title": "Weekly Links: April 27th",
            "date_modified": "2018-04-27T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/04/25/the-new-hello-world/",
            "html_content": "<p>JavaScript has had a weird reputation inversion over the past decade.  For years it was the stripped down toy language that could.  It didn‚Äôt have the features people wanted, and it did have the features they didn‚Äôt want, but it ran everywhere and it was easy to just start building things.  The last decade has shown that you can actually build some serious applications in JavaScript.  But it has also eaten away at the ability to start simple and try new things.  State of the art for JavaScript apps now involves compile steps, a long tooling chain, and a million choices for developers to make.  So the folks who are helping new developers get started have a few options for teaching JavaScript:</p>\n<ol>\n<li><strong>Embrace The Complexity</strong> - Want to learn to write Web Apps?  Let‚Äôs just toss you into a boilerplate that‚Äôs using node, webpack, react, redux, redux-saga, react router, glamorous, eslint, prettier, npm scripts, lodash, and babel.  This is what production apps look like, so you might as well start learning in a realistic environment.</li>\n<li><strong>Hide The Complexity</strong> - This is where we maybe use something like <a href=\"https://codepen.io/\">Codepen</a> to provide a sandboxed area where we may be using Babel/React/etc, but the user doesn‚Äôt have to configure or think about them too much.  My understanding is that <a href=\"https://glitch.com/\">Glitch</a> tries to go down this route to some extent as well.</li>\n<li><strong>Discard The Complexity</strong> - Teach coding like it‚Äôs 2010 all over again!  This approach is to focus more on the JavaScript language as it‚Äôs implemented in the browser, using script tags without a build step, and maybe even an older/simpler library like jQuery to explain DOM concepts and CSS.  This approach can eventually evolve towards introducing more complexity.</li>\n</ol>\n<p>For the past few years I‚Äôve seen a blend of all of these approaches when I‚Äôve looked at other folks‚Äô beginner level resources.  It‚Äôs been hard to determine the best way to prepare new developers for the complexities of the development process. But good news, I think that era is finally coming to an end.</p>\n<h3>The Ideal Intro</h3>\n<p>In an ideal world, we‚Äôd be able to introduce new developers to the concepts that undergird modern web apps, and teach them syntax that is as up to date as possible without having to entangle them in the implementation details and distractions of production grade tools like Babel and Webpack.  So we want them to start out writing JavaScript code that is:</p>\n<ol>\n<li>Modular</li>\n<li>Cross-environment</li>\n<li>Modern (ES6+ syntax as appropriate)</li>\n<li>Simple to start with</li>\n</ol>\n<p>The last 10 years of tool build up have been primarily focused on making it easy to achieve the first 3 goals in production (along with prioritizing other needs of large scale applications).  But production tooling is by nature less concerned with #4.  Fortunately native environments are starting to catch up on the first 3, and that means we can do better.  </p>\n<h3>The New Hello World</h3>\n<p>Let‚Äôs say we want to frame an intro through the classic ‚Äúhello world‚Äù program.  Our goals are to create a JavaScript function that can print ‚ÄúHello World‚Äù, and then expand on that a bit.  And we want to teach this in a way that will still look familiar when our learners get themselves into a production JavaScript code base.  </p>\n<h4>Bare Bones</h4>\n<p>We might start with something super simple like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>name-display<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">let</span> displayArea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name-display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      displayArea<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World'</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<p>That‚Äôs about as simple as a JavaScript hello world gets.  You can access it by opening the file directly from the file system in your browser, and it‚Äôs easy enough to edit the text and see changes on refresh.</p>\n<p>But in 2018, we can do something cool next.  We want to be modular and separate concerns, so lets create a hello world module.  This is an opportunity to introduce functions and modules.  It introduces our only small tooling step: adding a simple web server.</p>\n<h4>Hello Modules</h4>\n<p>On OSX, it‚Äôs easy enough to set up a simple web server with <code>python -m SimpleHTTPServer 8080</code>.  We can do that with our existing index.html and verify that we can now see it at <code>localhost:8080</code> in our browsers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p>After that, we can start doing cool stuff, starting with creating a new module:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">//hello.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> sayHello <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'World'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>This is our first function.  Depending on your audience, you may want to strip this down a bit and remove the default parameter, or spend some time explaining the different concepts in play here. But the focus can be on the concept of functions, as well as the ability to export them from a module.</p>\n<p>Now we can update our index.js file to use the new function.  Assuming both files are in the same directory, that will look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>name-display<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sayHello<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello.js'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> displayArea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name-display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      displayArea<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<p>Now we have a hello world built on a foundation that can scale towards modern JavaScript environments.  We have modules and modern syntax, and the only difficult setup step has been a lightweight web server so far.  The rest is just script tags.  </p>\n<h3>Interactive</h3>\n<p>It‚Äôs easy enough now to take our module and turn it into something interactive:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-html\"><code><span class=\"token comment\">&lt;!-- index.html --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>container<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span> Enter a Name and Hit The Button<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>name<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>change-name<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>Say Hello<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>name-display<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">'</span>module<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n      <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sayHello<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello.mjs'</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">let</span> displayArea <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name-display'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change-name'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        displayArea<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<p>This example introduces DOM events and let‚Äôs the user decide who to say hello to.  It also is a good jumping off point for further experimentation for a new dev.</p>\n<h3>Crossing Environments</h3>\n<p>Going from the browser to node, even though it is simpler in some ways, is always going to be a bigger jump for newcomers because of most people‚Äôs unfamiliarity with the command line, and the base hurdle of installing node itself.  But once we‚Äôre ready to move past browsers, our new hello world can be easily translated to node land.  The biggest hurdle is in the file names.  We will have to rename or copy <code>hello.js</code> to be named <code>hello.mjs</code> (Node‚Äôs way of differentiating between files using ES6 syntax).  After that, we can write a simple script to start out:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">//node.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sayHello<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello.mjs'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>And then, as long as we‚Äôre on an up to date version of Node, we can run it with <code>node --experimental-modules node.mjs</code>.  And we will see our Hello World.</p>\n<p>There are some annoyances for beginners here.  Node only recently added module support, and beginners must</p>\n<ol>\n<li>Rename their modules to the currently non-standard mjs ending</li>\n<li>Have a recent version of Node (v8.5+)</li>\n<li>add the experimental-modules flag and learn to ignore the warning it gives</li>\n</ol>\n<p>But overall it isn‚Äôt meaningfully harder than learning to use node has been in the past.</p>\n<h3>Interactive Again</h3>\n<p>We can make our node.js version accept a command line arg easily enough, along with more opportunities to learn about functions, arrays and conditionals.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token comment\">//node.mjs</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>sayHello<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./hello.mjs'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getLast</span> <span class=\"token operator\">=</span> list <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> list<span class=\"token punctuation\">[</span>list<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token function\">getLast</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<h3>The Future</h3>\n<p>I‚Äôm excited to see the new dev experience moving back closer to alignment with the production web app experience.  I think that can only be a positive things.  Some steps that will help even more if/when they happen:</p>\n<ol>\n<li><strong>Module file format standardization</strong> - The .mjs extension seems to still be controversial, but it also seems a bit inevitable.  So the question will be whether it becomes more standard to use across all modular JS on the browser and node.  The current split and experimental support makes for a confusing distraction for new learners</li>\n<li><strong>De-flagging</strong> - Right now Firefox and Node still require flags for using modules.  That reduces beginner friendliness.</li>\n<li><strong>Where is the jQuery of 2018</strong> - This is more speculative, but I think the next step to a beginner friendly hello world is a ‚Äúbeginner friendly framework‚Äù that is based on the ‚Äúone way data flow/declarative translation of state to UI‚Äù paradigm that has swept across pretty much all modern JS frameworks.  That‚Äôs an important concept to understand, and there isn‚Äôt anything I‚Äôm aware of out there right now that let‚Äôs you build with those concepts but is as approachable to newcomers as jQuery is.  jQuery was a gateway to DOM manipulation, AJAX, and functional array manipulation for a generation of developers.  React and create-react-app is probably the closest to that concept today, but it isn‚Äôt nearly as simple.  </li>\n</ol>\n<p>That‚Äôs all for now.  Code samples for this are <a href=\"https://github.com/benmccormick/hello-new\">on github</a>.  Goodbye World.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>This should work in the latest Chrome, Safari and Edge out of the box.  I encountered a bit of slowness and flakiness on Chrome, but it worked like a charm in Safari.  Firefox still has this stuff behind a flag.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">‚Ü©</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/04/25/the-new-hello-world/",
            "title": "The New Hello World",
            "date_modified": "2018-04-25T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        }
    ]
}