{
    "version": "https://jsonfeed.org/version/1",
    "title": "benmccormick.org",
    "home_page_url": "http://benmccormick.org",
    "feed_url": "http://benmccormick.org/feed.json",
    "description": "A blog by Ben McCormick",
    "icon": "https://benmccormick.org/logo.png",
    "author": {
        "name": "Ben McCormick"
    },
    "items": [
        {
            "id": "https://benmccormick.org/2018/02/23/weekly-links-02-23-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"http://2ality.com/2018/02/ecmascript-2019.html\">Feature watch: ECMAScript 2019 | 2ality</a> - Not a lot to see here yet, but Axel Rauschmayer has set up a page for tracking the status of the next version of ECMAScript as features advance to stage 4 and become confirmed for the next version of the spec.  No features have been confirmed yet, but worth a bookmark.  He also has links to his detailed articles about the various candidate features if you’re interested in seeing where JavaScript is headed next.</p>\n<p><a href=\"https://www.troyhunt.com/the-javascript-supply-chain-paradox-sri-csp-and-trust-in-third-party-libraries/\">The JavaScript Supply Chain Paradox: SRI, CSP and Trust in Third Party Libraries | Troy Hunt</a> - This is a great reminder on why including scripts from 3rd party domains is a risky business, and how to do it securely.</p>\n<h4>Computer Science</h4>\n<p>After my <a href=\"https://benmccormick.org/2018/02/20/cs-for-fe/\">post on Computer Science</a> this week, I thought I’d share 2 CS-y links I came across this week.</p>\n<p><a href=\"https://medium.freecodecamp.org/i-dont-understand-graph-theory-1c96572a1401\">How to think in graphs: an illustrative introduction to Graph Theory and its applications | Vardan Grigoryan</a> -  This is a nice “plain language” explanation of basic graph theory.  It’s a bit long, but it’s a nice thing to look at for the folks who told me this week they want to know more about data structures.</p>\n<p><a href=\"http://amzn.to/2BL3YHo\">Learning JavaScript Design Patterns | Addy Osmani</a> - One of the better “CS for front end” resources I’m aware of is Addy Osmani’s book on JavaScript design patterns.  Like a lot of things in JS land, parts of it haven’t aged well now that it’s a 6 year old book (it’s very focused on jQuery and DOM manipulation in many of its examples), but since it’s centered around more timeless design patterns, I think it holds up well. </p>",
            "url": "https://benmccormick.org/2018/02/23/weekly-links-02-23-18/",
            "title": "Weekly Links: February 23rd",
            "date_modified": "2018-02-23T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/20/cs-for-fe/",
            "html_content": "<p>I am primarily a front end web developer, and I have a Computer Science degree.  In my experience, this is neither rare nor particularly common.  Folks seem to get into front end dev because they’re trying to solve particular problems, and those problems exist whether you have a PhD in high performance computing or you’ve never written a line of code before.  Front end web development is how you make code real to people, and it is the minimal requirement for making something that people can actually interact with in a web browser.  As a result, a dizzying array of folks get into Front end dev, and you’ll find a broader set of experience levels than devs who work further “down the stack”.  All of which means that many front end devs have never had any sort of “formal” Computer Science education.  </p>\n<p>Some CS degree holders turn up their nose at this, and it contributes to the reputation in some quarters of JavaScript and web dev not being “real programming”.  Some self-taught devs see themselves as being liberated from the “irrelevant theory” of formal Computer Science and see no need for that type of background for Front End development.  We all have the capacity to turn any sort of credential into a tribal mark.  My own experience is that developers can function just fine on the front end without a formal computer science background, but that my own education has helped me in my day to day work, mostly in subtle and indirect ways.</p>\n<p>I’ve been thinking for a while about what Computer Science topics are actually useful for front end developers.  It’s not obvious to me where to draw the lines, because you’ll never directly encounter many of the concepts that are covered in a typical Computer Science curriculum while making web applications. But I still have an intuition that my background in these subjects is helping me in my day to day.  This weekend I decided to ask Twitter about it.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Pondering what a blog series on “Computer Science for Front End Devs” would look like.  <br><br>Thinking this would be a high level of “what you missed if you don’t have a CS degree”, focusing on a subset relevant to FE devs.<br><br>Would love input.  What would you expect to be covered?</p>&mdash; Ben McCormick (@ben336) <a href=\"https://twitter.com/ben336/status/965373638697463809?ref_src=twsrc%5Etfw\">February 18, 2018</a></blockquote>\n<p>I got a high degree of interest from that tweet, and so decided to keep digging into the idea.  I did some research into the typical structure of a modern Computer Science curriculum, and came up with the lists below. Depending on the school, certain topics may be elevated or diminished, grouped or split, but the general shape tends to look the same for most schools I’ve looked at.</p>\n<h3>Intro class</h3>\n<p>Generally there is an intro class or 2 that can be skipped by students with previous experience that covers core programming concepts, usually with an Object-oriented philosophical tilt.</p>\n<ul>\n<li>\n<p><strong>Programming basics</strong></p>\n<ul>\n<li>Variables</li>\n<li>Basic Data Structures</li>\n<li>Control Structures/Recursion/Iteration</li>\n<li>Object Oriented Programming principles</li>\n</ul>\n</li>\n</ul>\n<h3>Core Curriculum</h3>\n<p>There are also often 3-5 other “core” classes that all CS majors must take.  They generally break down something like this:</p>\n<ul>\n<li>\n<p><strong>Data Structures and Algorithms</strong></p>\n<ul>\n<li>Big O analysis</li>\n<li>Common Data Structures - Linked Lists, Stacks, Queues Trees, Heaps, Graphs, etc</li>\n<li>Common Algorithms - Searches, Sorts, Graph algorithms, etc</li>\n</ul>\n</li>\n<li>\n<p><strong>Computer Systems</strong></p>\n<ul>\n<li>Start at the hardware level</li>\n<li>Assembly</li>\n<li>Compilers</li>\n<li>Memory Models</li>\n<li>Concurrency</li>\n<li>Operating Systems</li>\n<li>Processes</li>\n<li>File Systems</li>\n<li>Networking</li>\n</ul>\n</li>\n<li>\n<p><strong>Mathematical Foundations</strong></p>\n<ul>\n<li>Proofs and logic</li>\n<li>Formal lanugages/Context Free Grammars/Turing Machines</li>\n<li>NP-Completeness</li>\n<li>Probability Theory</li>\n<li>Bayes Theorem</li>\n<li>Hashing</li>\n</ul>\n</li>\n<li>\n<p><strong>Software Engineering (not always core)</strong></p>\n<ul>\n<li>Architecture of larger programs</li>\n<li>Balancing risk/quality/cost</li>\n<li>Design Patterns</li>\n<li>Designing for security/robustness/scalability</li>\n</ul>\n</li>\n</ul>\n<h3>Potential Specialties</h3>\n<p>Finally, programs usually have a selection of electives that students can take to dive deeper into different specialty areas.  These electives usually mirror the research interests of the faculty of the school but may include some of the following:</p>\n<ul>\n<li><strong>Systems Design</strong></li>\n<li><strong>Human-Computer Interaction</strong></li>\n<li><strong>Computer Networking</strong></li>\n<li><strong>Artificial Intelligence and Machine Learning</strong></li>\n<li><strong>Databases</strong></li>\n<li><strong>Computer Vision</strong></li>\n</ul>\n<h2>Computer Science for the web</h2>\n<p>So how much of this is relevant to your average front end developer?  Some of it is more tightly tied to web programming than others.  Most of the basics will be picked up through osmosis for a typical front end dev, but a rigorous look at concepts like object-oriented programming and recursion might be beneficial.  While most can usually get by with simple data structures, a background in common “intermediate” data structures like stacks, trees, and graphs can be quite useful in day to day web dev.  Software Engineering principles are as obviously useful when building web sites as they are when you’re building firmware or operating systems. On the other hand, Computer Systems and Mathematical foundation concepts are usually not directly applicable in front end work.  In my own experience, they serve as useful background for understanding the abstractions that my day to day work is built on.  It’s good to have an intuition as to how browsers work, what is happening when we send data to a file, or what “text encoding” means.  And you may end up in a crazy situation where you need to understand the code behind Babel or V8, and knowledge of compilers becomes a real part of your job.</p>\n<p>I’m trying to figure out the best way to teach some of this stuff to somebody who hasn’t and is never going to spend 4 years taking these classes.  So I’d love help from anyone reading:</p>\n<ol>\n<li><strong>If you have a CS degree and write front end code, how has it helped you?</strong></li>\n<li><strong>If you were going to try and share part of that education with somebody with different experiences, which parts would you say are important?  What resources would you recommend?</strong></li>\n<li><strong>If you don’t have a CS degree, do you feel like you’re missing out on anything?  What useful-seeming concepts have you heard about but found it hard to find resources on?</strong></li>\n</ol>\n<p>If you have any answers for those questions I’d love to hear from y’all on <a href=\"https://twitter.com/ben336\">Twitter</a> or <a href=\"mailto:ben@benmccormick.org\">email</a>.  </p>",
            "url": "https://benmccormick.org/2018/02/20/cs-for-fe/",
            "title": "Computer Science for Front End Developers?",
            "date_modified": "2018-02-20T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/16/weekly-links-02-16-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"https://staltz.com/promises-are-not-neutral-enough.html\">Promises are not neutral enough | André Staltz  </a> - This is a pretty good dissection of the downsides of Promises as JavaScript’s default async primitive.  I’m glad that Promises have replaced callbacks as the default async method for most JavaScript code, but it does have the downside of making it harder for anything better to come along.  </p>\n<p><a href=\"https://css-tricks.com/direction-aware-hover-effects/\">Direction Aware Hover Effects | CSS-Tricks</a> - As a relatively pedestrian CSS user, I always am fascinated by the cool things people can do with it.  These demos were no exception.  (Hat tip to <a href=\"https://ponyfoo.com/weekly\">Ponyfoo</a> for this one)</p>\n<h3>Tech Tools</h3>\n<p><a href=\"https://abe-winter.github.io/plea&#x27;s/help/2018/02/11/slack.html\">Slack is the opposite of organizational memory | Abe Winter</a> - This is a fun rant that makes some good points.  I have a love/hate relationship with Slack.  It’s a fun tool that I enjoy using, but I’m not at all convinced that it’s really making me more productive. I definitely feel the pain of normalizing crazy short reply times, even though I thrive on that on some ways and love the dopamine hit of being instantly helpful to somebody.  Slack makes it easy to mistake noise for productivity, and I definitely agree that it is more ephemeral than it pretends to be.  But for all that… I’m not sure there’s anything better out there<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, especially for teams that work partially or completely remote.</p>\n<h3>Cryptocurrency Craziness</h3>\n<p><a href=\"https://shkspr.mobi/blog/2018/02/advertising-screens-hacked-to-mine-bitcoin/\">Advertising Screens Hacked To Mine BitCoin | Terence Eden</a> - This is just nuts.  Bitcoin seems to be enabling a whole new malware economy.  </p>\n<p><a href=\"https://techcrunch.com/2018/02/13/salon-coinhive-cryptocurrency-mining/\">Salon’s Monero mining project might be crazy like a fox | TechCrunch</a> - At least some folks are giving you an ad-free malware experience though.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>The truth of this statement of course is going to depend on what exactly you’re hoping Slack will do for you.  I consider Slack to be a communication tool and not a project management tool.  The linked article seems to conflate the two, which is maybe part of the problem here.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/02/16/weekly-links-02-16-18/",
            "title": "Weekly Links: February 16th",
            "date_modified": "2018-02-16T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/14/book-review-clean-architecture/",
            "html_content": "<p><a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin was one of the better books on Software Development I’ve read in recent years.  It did exactly what I want from a software book in 2018: it tackled an important high level topic with a great amount of depth in a way that helped me as a reader to develop insight and perspective on the topic.  These days blog posts and other online sources cover most of my “how to” needs, as well as the simple “what is X and why should I care about it” questions that I used to go to books for.  But there is still no substitute for books when you want an in depth understanding of an important broad topic.\n<a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=as_li_ss_il?ie=UTF8&qid=1516226851&sr=8-1&keywords=clean+architecture&linkCode=li2&tag=benmccormicko-20&linkId=c599845decc4e5ed1457acae2a375ad6\" target=\"_blank\">\n<img border=\"0\" class=\"inline-img\" src=\"//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0134494164&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=benmccormicko-20\" ></a><img src=\"https://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&amp;l=li2&amp;o=1&amp;a=0134494164\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\">\nFor this book, that topic is software architecture.  The book tackles it by starting with some history, and then starting with a micro view before expanding out its gaze.  After giving a broad overview of the different software paradigms, Martin walks readers through 3 levels of architecture principles: class-level design principles, component-level component principles and system-level architecture principles.  At each level he shows the similarities between the lower level principles, as well as the unique concerns at each scale. Then he wraps it up with a case study example that shows the principles discussed throughout the book in action.</p>\n<p>I found Clean Architecture to be a great reminder of concepts I learned in school<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> that I didn’t properly appreciate at the time due to a lack of practical experience.  It brought home to me that while there are some architectural things I do pretty well right now, like keeping code separated enough that it only has one reason to change, there are other things that I don’t do well a lot of the time.  For me the biggest realization was how much grief I’ve caused myself the last few years from failing to keep high level policies from depending on low level details.  The book gave me a few new lenses to examine my decisions with, and definitely inspired me to spend more time taking a step back to see the big picture as I’m adding new features.  </p>\n<p>For me, that sense of perspective was the biggest win, but if you’re looking for detailed “how tos”, there’s a decent amount of that as well.  Martin goes into details about how to arrange and refactor classes to create maintainable systems that are easy to change, as well as identifying patterns to look for that may be a sign of problems to come.  He goes pretty deep into the weeds with examples and class diagrams as he discusses creating proper system boundaries and pulls it all together with a nice case study example at the end.  </p>\n<p>While I did find Clean Architecture extremely helpful overall, I do have some nitpicks.  The biggest for me personally is that while the book mentions dynamic languages like Ruby and Python a few times, it mostly does so in passing to say that the principles mention still apply, but may look different.  Since this is usually not expanded upon, and all of the examples given seem to assume static languages that provide abstract interfaces to classes, it is sometimes hard to see how the books principles should be applied to the dynamic languages that I use daily.  I would love to have seen more detail there.  Also, the final chapter of the book “The Missing Chapter” was a bit of an oddity.  It was written by a different author<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, framed issues that had already been covered differently, and came to some different conclusions than the rest of the book.  It was almost a counterpoint to the other parts of the book, which could have been interesting, but lacked an introduction or context to help explain its purpose.  Overall it left me a bit confused and ended the book on a discordant note rather than bringing the ideas together and focusing me on the important ideas.</p>\n<p>I can recommend <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> for anyone who wants to get better at thinking about the big picture when it comes to software systems, particularly if you haven’t already been exposed to any of the theory behind designing maintainable systems.  If you’re usually working in static languages on larger projects, I would double that recommendation, as you’ll be right in the book’s wheelhouse.  For those like me working with dynamic languages on web projects, it may be a bit more hit or miss, but it still is a great way to broaden your horizons and gain some new ways of thinking about the tradeoffs our work entails.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I was a Computer Science major, but if you weren’t exposed to theories of software architecture through a curriculum</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>This was not obvious to me on first reading, I only went back and noticed the acknowledgement on the chapter page when I was confused by a 3rd person reference to the author.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/02/14/book-review-clean-architecture/",
            "title": "Book Review: Clean Architecture",
            "date_modified": "2018-02-14T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/09/weekly-links-02-09-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"http://codemirror.net/\">CodeMirror</a> - CodeMirror is a JavaScript library for building text/code editors in the browser.  It isn’t new, but I’ve had the pleasure of building something moderately complex with it over the past week, and thought it deserved some promotion.  It makes building an online editor that does shiny “text editor” things like linting, find and replace, syntax highlighting and autocomplete a very manageable endeavor.  It’s highly extendable and is a nice example of “easy things should be easy and hard things should be possible”, with simple addons for basic stuff, and less simple extension points for custom work.  If you have need of an online text editor, make sure to check it out!</p>\n<p><a href=\"http://www.tomanthony.co.uk/blog/googlebot-javascript-random/\">Googlebot’s Javascript random() function is deterministic - Tom Anthony</a> - A really interesting peek at a small part of how Googlebot actually functions when rendering and indexing the web.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://medium.com/@pamelafox/sleep-strategies-for-a-racing-mind-d717e1ab890\">Sleep strategies for a racing mind – Pamela Fox</a> - I”ve never had the easiest time falling asleep at night, and it’s taken me a long time to figure out the best ways to manage that.  This article lays out a bunch of strategies for coping, many of which are the same things I’ve had to learn the hard way.  If you struggle to sleep, definitely worth a read.</p>\n<p>Finally I’ll leave you with my personal pick for “tweet of the week”</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">If at first you don’t succeed... <a href=\"https://twitter.com/hashtag/science?src=hash&amp;ref_src=twsrc%5Etfw\">#science</a> <a href=\"https://t.co/2TGojKDcr3\">pic.twitter.com/2TGojKDcr3</a></p>&mdash; TwistedDoodles (@twisteddoodles) <a href=\"https://twitter.com/twisteddoodles/status/960801583012380672?ref_src=twsrc%5Etfw\">February 6, 2018</a></blockquote>",
            "url": "https://benmccormick.org/2018/02/09/weekly-links-02-09-18/",
            "title": "Weekly Links: February 9th",
            "date_modified": "2018-02-09T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/07/react-confessions/",
            "html_content": "<p>I’ve been reading through <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin this month<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, and while it is great it has had the unpleasant effect of reminding me of all of the mistakes I’ve made over the past few years while learning and using <a href=\"https://reactjs.org/\">React</a>.  I’ve absolutely loved using React at work, and it has made so many things easier.  But it’s a very unopinionated tool when it comes to structuring applications, and I made a lot of mistakes as I was using it to build some small side projects, and then transitioned a major production app to React from Backbone/Marionette.  These mistakes are all architectural; how I broke out components, communicated between components, and managed data and dependencies within components.</p>\n<p>I thought it would be useful to lay out the architecture mistakes I made as I was learning React, both as a solid reflection exercise for myself, and a warning to those of you who are just starting down the “component based UI” road.  </p>\n<h3>My Mistakes</h3>\n<h4>1. Including API calls directly in components</h4>\n<p><strong>What I did wrong</strong>: This is an embarrassing one, but essentially in several places I had components directly fetching data from the server in their constructors or mount calls, and using that information to determine what to render.</p>\n<p><strong>Why I did it</strong>: This was to some extent a lack of planning.  I had all my core “business objects” modeled in some sort of separate object oriented way (either as Backbone or MobX objects) and was able to coordinate syncing them to the server outside of the component layer.  But some data in the system hadn’t been modeled in that way, and when I encountered a need for those components (such as some types of system configurations) instead of stepping back and coming up with a design for modeling those configurations on the front end, I instead sometimes fell back to an ad-hoc API call.   This was also sometimes a result of lazily copying legacy code that had bad patterns while converting components to React, and other developers copying bad patterns when trying to figure out the new React code.</p>\n<p><strong>What I should have done instead</strong>: This could be a whole series of blog posts in itself, but essentially I should have been observing a few principles that would have set off alarm bells.</p>\n<ol>\n<li>Components in a system of any size shouldn’t know about the server. UI Components are about as “low level detail” as it gets in a UI architecture, and should be passed the data they need from a higher level portion of the system.</li>\n<li>If the front end code needs data from the server, it is worth the time to properly model that data in terms of whatever data layer the front end is using.</li>\n</ol>\n<h4>2. Breaking the “props as the component interface” abstraction</h4>\n<p><strong>What I did wrong</strong>: One of the best things about React is the clear interfaces components provide with their list of props.  If properly documented with PropTypes or a type system like Flow or Typescript, it’s easy to look at any React component and tell what data it expects to receive, and therefore how other code is expected to interact with it.  99% of the time, good React components act as a function of <code>(props, state) => UI</code>.  It is however, possible to get access to a component instance, and call functions on them.  There are  rare situations where this is the right way to do things, for instance <a href=\"https://stackoverflow.com/questions/28889826/react-set-focus-on-input-after-render\">focusing an input</a>.  </p>\n<p>When I first started creating React components though, I overused that pattern, and accessed the interface directly to access or change its internal state.  I’d have components like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>inputValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SpecialInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p><strong>Why I did it</strong>:  Early on I was using this pattern in a way that copied other frameworks I was familiar with.  A parent component would need the state of it’s child component, so it would maintain a reference to the child and query the child about the state.  When I converted Backbone components to React, sometimes I was basically just copy and pasting existing code, and making it work.  </p>\n<p><strong>What I should have done instead</strong>:  React doesn’t really encourage parents pulling state from their children.  Instead, if there is state that needs to be shared between components, it should be moved up to the parent component and then the state and an updater function should be passed down to the child component.  So my example above would look like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-javascript\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SpecialInput\n             value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n             updateValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<h4>3. Interacting with 3rd party components directly</h4>\n<p><strong>What I did wrong</strong>: My first year and a half using React, when I was using 3rd party UI components like <a href=\"https://github.com/facebookarchive/fixed-data-table\">react-fixed-data-table</a> I would always use them directly in my components, and take full advantage of their APIs.</p>\n<p><strong>Why I did it</strong>: Because every React library in the world has documentation showing how to use its components directly in code for a variety of different use cases, and nobody ever tells you to put an abstraction around their code</p>\n<p><strong>What I should have done instead</strong>: I should have wrapped the 3rd party libraries in one or more wrapper components.  This has a few advantages:</p>\n<ol>\n<li>When we’re using a UI component like a table in a new place in our App, if I’ve created a wrapper component that has presets for most common settings, I only need to configure the things that are meaningful to this new use case in my app</li>\n<li>Targeted wrapper components like a <code>SortableTable</code> component or a <code>DropdownWithAutoComplete</code> component are easy to understand to a new reader of the code.  Instead of digging through configuration props, they can read the component name and understand the purpose of that component then focus on the data being passed to it</li>\n<li>When making updates to a library it is much easier to test that the changes are safe if the uses of the library are limited to a few focused components, rather than being spread across a whole application</li>\n<li>Similarly, if we need to switch to a new library, that is much easier with a limited footprint</li>\n<li>It can be easier to create reliable automatic tests using a wrapper component, since you have more control of things like how mocking works and when the component interface changes than you do for 3rd party code</li>\n</ol>\n<h4>4. Importing other parts of the system directly into display components</h4>\n<p><strong>What I did wrong</strong>: The main application I work on uses a messaging system to allow communication between different parts of the system.  It’s a legacy piece from when it existed as a Backbone application, and isn’t a very React-y way of doing things, but that isn’t really a problem.  This situation would be the same for a logging component or a data store.  What isn’t great is that when I need to use the messaging system, I always import it directly into the component file.</p>\n<p><strong>Why I did it</strong>: Direct imports are convenient, the messaging system is a core part of my system, and it seemed like a normal way of accessing it.  I also wasn’t aware of any better way to do it.</p>\n<p><strong>What I should have done instead</strong>:  The disadvantage of direct imports is that they’re harder to test.  If I had passed my messaging system as a prop to whatever component needed it, it would be much easier to test that it was called in the way I expected, without having to mock out the whole messaging system library.  I also could abstract away the whole power of the messaging system, and only provide the specific functionality needed by a component.  When I first began working on this system though, I didn’t know a practical way to do this.  The messenger system was often used by deeply nested components, and it seemed bad to pass it down a whole component tree.</p>\n<p>The answer is to use the <a href=\"https://www.robinwieruch.de/react-provider-pattern-context/\">Provider pattern</a>.  The provider pattern is a way to use React’s context API to provide top level properties from a high level parent component to deeply nested child components.  It is a perfect pattern for providing important high level pieces of your application to low level components without tightly coupling them, while maintaining testability.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<h4>5. Changing too many things at once</h4>\n<p><strong>What I did wrong</strong>: When my team began converting our application from Backbone to React, it was tempting to try and change many things at once.  All the React examples you see online are using Babel/ES6, Webpack, Redux, React Router and tons of other shiny but complicated things.  Trying to implement it all in an existing project<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> can be overwhelming and lead to <a href=\"http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html\">lava layers</a>.  We actually started out with good discipline and converted files to use ES6 first, then added Webpack, then slowly started to convert UI components to React.  Unfortunately as we continued to convert React, we began replacing our Backbone data models with MobX, and began using CSS Modules in some places.  When our team size was reduced last year, we were left in a situation where the same functions were performed in different ways throughout the codebase.</p>\n<p><strong>Why I did it</strong>: It’s easy to see things that could be better in a web application and immediately want to fix them!  Especially if parts of that change seem easier than other changes you’re working on</p>\n<p><strong>What I should have done instead</strong>: I wrote about this <a href=\"https://benmccormick.org/2018/01/07/large-improvements-small-team/\">at length</a> last month, but there really is no substitute for taking things one at a time.  While it’s tempting to think that it will be easier to convert to React if you’re using other “react-y” tools and libraries, your code will ultimately be more maintainable if it is consistent throughout an application.  The only reliable way to do that is to make changes completely before you start making other changes.  It isn’t sexy, and it will leave you at least a little ways off the bleeding edge, but it’s the way to build large, reliable systems and keep them up to date.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>At the time of writing this, it was super on sale on <a href=\"http://amzn.to/2mKoejo\">Amazon</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the Context API that the provider pattern is based on is changing, so I’d isolating out any provider code you write into a reusable component so that it is easy to update later</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or even a new project for that matter!</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/02/07/react-confessions/",
            "title": "React Architecture Confessions",
            "date_modified": "2018-02-07T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/02/03/weekly-links-02-03-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"http://2ality.com/2017/02/ecmascript-2018.html\">ECMAScript 2018 | 2ality</a> - The spec for the 2018 version of <a href=\"https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ECMAScript</a> has been finalized and this is a good roundup of the new features and syntax available.  I’m personally excited for rest/spread properties to be an official part of the language.</p>\n<p><a href=\"https://medium.com/@firt/pwas-are-coming-to-ios-11-3-cupertino-we-have-a-problem-2ff49fd7d6ea\">PWAs are coming to iOS 11.3: Cupertino, we have a problem | Maximiliano Firtman</a> - Interesting look at what is and isn’t available in the newest version of Safari when it comes to PWAs and offline support</p>\n<h3>Tech and Business</h3>\n<p><a href=\"https://medium.com/99-mph/1-trillion-of-real-estate-is-on-the-move-heres-why-94ee9233e5eb\">1 Trillion of Real Estate is on the move | Phil Levin</a> - Almost everybody seems to agree that self driving cars are going to happen.  It’s only a question of when.  But the other question is what the second-level effects of self driving cars will be.  Those who can correctly predict the answer to those two questions are going to have opportunities to make money and create interesting businesses. This is an interesting take on how self-driving cars might affect real estate.</p>",
            "url": "https://benmccormick.org/2018/02/03/weekly-links-02-03-18/",
            "title": "Weekly Links: February 3rd",
            "date_modified": "2018-02-03T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/01/19/weekly-links-01-19-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"https://stackoverflow.blog/2018/01/11/brutal-lifecycle-javascript-frameworks/\">The Brutal Lifecycle of JavaScript Frameworks | Stack Overflow Blog</a> - This was an interesting analysis on how JavaScript frameworks have risen and fallen.  Among the reasons that it’s interesting is that the data appears to be a bit of a Rorschach test.  The post itself is very negative about the pace of change in the JavaScript framework world.  But I saw a lot of twitter takes like this one:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">This “new framework every 6-months” FUD is comical. The crux is centered on 4 JS frameworks released over the last decade. <br><br>4. In 10 years. <br><br>It’s great for my business, but makes me chuckle. <br><br>It’s not really moving that fast y’all. <a href=\"https://t.co/BiH7UK0M9V\">https://t.co/BiH7UK0M9V</a></p>&mdash; Joel ⛈ (@jhooks) <a href=\"https://twitter.com/jhooks/status/951924735654244352?ref_src=twsrc%5Etfw\">January 12, 2018</a></blockquote>\n<p>Personally I lean more toward the side that there’s nothing wrong here.  The change in frameworks has come during a large change in use cases and technology used on the web.  Think PWAs verse server-side generated sites, and the large amount of new browser APIs and JavaScript language features.  These things have naturally brought new best practices which have been encoded in frameworks.  While it is true that a jQuery based site from 2009 might be difficult to maintain through today, that has less to do with the lack of support for the technology than it does with the fundamental nature of web development.  It would be much more difficult to build and scale a web application like <a href=\"https://slack.com/\">Slack</a> using only jQuery and other 2009 technologies.<br>\nWhich is why it was surpassed for <em>web application</em> development first by a wave of frameworks that allowed you to model domain concepts in an object oriented way and tie that to a UI (Backbone, Angular1, Knockout), and then by a second wave that allowed you to do that with more declarative component-based UIs (React, Ember, Angular2+, Vue).  Those evolutions have come to match a real need.</p>\n<p><a href=\"https://stackoverflow.com/questions/48270127/can-a-1-a-2-a-3-ever-evaluate-to-true/48274520#48274520\">Can (a ==1 &#x26;&#x26; a== 2 &#x26;&#x26; a==3) ever evaluate to true? | Stack Overflow</a> - This was a fun little question.  I don’t think I like it as an interview question for JavaScript, since it borders on trivia, and requires in-depth knowledge of the “bad parts” of JavaScript like <code>==</code> and <code>with</code> or global variable behavior that many new developers are just taught to avoid.  But it’s definitely a fun trivia question.  And it may even be a good interview question in Python, where you can do it using more commonly accepted parts of the language.</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"language-python\"><code><span class=\"token keyword\">class</span> <span class=\"token class-name\">EqualToEverything</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">def</span> <span class=\"token function\">__eq__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">True</span>\na <span class=\"token operator\">=</span> EqualToEverything<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">and</span> a <span class=\"token operator\">==</span> <span class=\"token number\">2</span> <span class=\"token operator\">and</span> a <span class=\"token operator\">==</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#prints True</span>\n</code></pre>\n      </div>\n<p><a href=\"https://hacks.mozilla.org/2018/01/making-webassembly-even-faster-firefoxs-new-streaming-and-tiering-compiler/\">Making WebAssembly even faster: Firefox’s new streaming and tiering compiler | Lin Clark</a> - Web Assembly + Rust is quickly moving to the top of my “I’ve got to learn more about that” list.</p>\n<p><a href=\"https://slack.engineering/keep-webpack-fast-a-field-guide-for-better-build-performance-f56a5995e8f1\">Keep webpack Fast: A Field Guide for Better Build Performance | Slack Engineering</a> - This is a super helpful and detailed list of performance tips and tricks for Webpack builds, which unfortunately are easy to make slow and challenging to make fast for large projects.  Even after having my own fights with webpack last year, I learned a few things from this, and look forward to experimenting with them.</p>\n<h3>Tech and Business</h3>\n<p><a href=\"https://www.joelonsoftware.com/2018/01/12/birdcage-liners/\">Birdcage Liners | Joel Spoelsky</a> - Joel’s first post in a while is a great piece on the problems with social media, as well as tech folks’ responsibility to think through the choices they’re making, including the secondary effects.  What type of future are we making?</p>\n<p><a href=\"https://motherboard.vice.com/en_us/article/9kng57/dogecoin-my-joke-cryptocurrency-hit-2-billion-jackson-palmer-opinion\">My Joke Cryptocurrency Hit $2 Billion and Something Is Very Wrong</a> - I promise I snagged this link to post before bitcoin took a dip this week, but I don’t think it’s properly appreciated in many places just how crazy the cryptocurrency fad is becoming.  Meme-based joke currencies are being valued at billions of dollars, and there are many other similar newborn currencies with similar valuations out there.  I’m not going to try to give anyone investment advise, but it seems clear for now that at minimum these “currencies” are completely unusable for their theoretical purpose as currency given the price swings.</p>",
            "url": "https://benmccormick.org/2018/01/19/weekly-links-01-19-18/",
            "title": "Weekly Links: January 19th",
            "date_modified": "2018-01-19T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/01/12/weekly-links-01-12-18/",
            "html_content": "<h3>JavaScript And The Web</h3>\n<p><a href=\"https://egghead.io/courses/manage-application-state-with-mobx-state-tree\">Manage Application State with Mobx-state-tree| Michael Weststrate on Egghead</a>  - Mobx-state-tree is an opinionated state library built on top of the unopinionated Mobx library.  This is a free course explaining why it exists and how to use it.  I <a href=\"https://benmccormick.org/2017/01/09/mobx-first-impressions/\">wrote about Mobx last year</a> and am still enjoying using it a year later.  I’m excited to dive into Mobx-state-tree and hopefully sharpen my Mobx skills in the process.</p>\n<h3>Programming Tools And Practices</h3>\n<p><a href=\"http://blog.atom.io/2018/01/10/the-state-of-atoms-performance.html\">The State of Atom’s Performance | Atom Blog</a> - Atom continues to (slowly) become snappier.  I’m glad to see how organized they are on this.  It’s really hard to take something that was built with a slower architecture fast while it’s being used by tens of thousands of people every day.  They’re making great progress.</p>\n<p><a href=\"http://amzn.to/2DqBeSQ\">Clean Architecture | Robert C Martin</a> - I’ll probably be posting more on this soon, but I’ve been reading the new book on architecture by “Uncle Bob” Martin, and it’s fantastic.  It breaks down big architecture and program design concepts like the Single Responsibility Principle and Dependency Inversion, and explains them well individually, but also shows how they fit together when designing a large system.  I’ll write a full review when I finish the book, but for now just wanted to share that it is worth picking up.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://www.nytimes.com/2018/01/09/us/north-carolina-gerrymander.html\">North Carolina Is Ordered To Redraw Its Congressional Map | NY Times</a> - A little bit of local news here <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, but it is still important for everyone in the USA.  Redistricting is the type of problem where a simple rules based algorithm could be helpful.  Nothing opaque or deep-learning-y, just have a machine apply a published set of rules and work with the results.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I’m a proud resident of Durham, North Carolina</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/01/12/weekly-links-01-12-18/",
            "title": "Weekly Links: January 12th",
            "date_modified": "2018-01-12T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        },
        {
            "id": "https://benmccormick.org/2018/01/07/large-improvements-small-team/",
            "html_content": "<p>Over the last year I’ve been acting as the lone JavaScript resource working on a codebase with around 90k lines of JavaScript code.  That has left me spending the vast majority of my work time trying to knock out features and deal with bugs across the large code surface area.  But I’ve also wanted to do my best to continue to improve code quality with limited resources.  Here are a few things I’ve learned about trying to improve code quality across a large project with limited resources.</p>\n<h4>1. You need to accept not being on the bleeding edge</h4>\n<p>Let’s be real, in the JavaScript world the only way to always be on the bleeding edge is to never maintain an application for more than a few weeks.  And even in other contexts, it often is much less feasible than hype bubbles at conferences or sites like Hacker News might make it seem.  Most companies that are shipping software that users actually pay for are using quite a lot of very old technology quite extensively.  That’s not to say there’s no place for new and shiny things, but there will always be limits to how new and shiny things get.  When you’re low on people resources for the size of your project, those limits get a lot more restrictive.</p>\n<h4>2. It’s important to identify your pain points.</h4>\n<p>There are 3 main type of value that developers can add by changing a software system. They can write new <strong>features</strong>, which give users new capabilities.  They can improve some <strong>cross-feature attributes</strong> of the system like loading speed, accessibility, design, logging or documentation.  Or they can make <strong>architecture improvements</strong> that make it easier to make other changes.  Generally engineers don’t have to argue to add features, because the business decision makers will be calling for them constantly.  Cross-feature things like performance, design or logging sometimes come from business decision makers, but often only when things have become problematic, and then the conversations around how long it will take to achieve improvements can be tense ones.  Architecture concerns pretty much never come from business folks, because they usually don’t see the effects of a bad architecture until it is too late and shipping simple features has become a disastrously slow process<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  It’s part of a developer’s job to push for the latter 2 type of changes when they’re needed.   But with limited resources, <em>needed</em> is often hard to quantify.</p>\n<p>That’s why it is important to know what is <em>actually</em> causing you pain, or will soon be causing pain.  Is your site getting slower and slower?  Is your CSS a giant tangled mess that creates bugs with every change<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>?  Make a list, and then prioritize it by importance and expected effort.</p>\n<h4>3. Take things one at a time</h4>\n<p>Once you have a list of things that you want to fix, it can be tempting to try to fit those fixes in all over the places.  You’re creating a new page, might as well write it in Vue instead of Angular.  You’re changing some styles, maybe you can use a CSS in JS library.  But the absolute worst thing you can do with limited resources is try to improve too many things at once.  You’ll end up with a codebase with many different ways to do everything, so that every change requires a full context reset, and maintenance means dealing with multiple sets of bugs and compatibility issues for each duplicated approach.  That’s why prioritization is critical.  With limited bandwidth, you need to know what <strong>one thing</strong> will be the best use of your time.</p>\n<h4>4. Expand from small footholds, don’t boil the ocean</h4>\n<p>A few truths to note at this point:</p>\n<ol>\n<li><strong>Changing large systems is hard.</strong>  They have a million different subtle assumptions weaved into their code, and making seemingly the same change in different places can often produce subtly different results.  </li>\n<li><strong>Practice is how you learn to use a tool or technique optimally.</strong> Unless you’ve already used a technology extensively in a different context, you will never be more blind to it’s downsides than at the start of adding it to a project.  As you begin using it, you’ll learn more about it and how to use it better in your system.</li>\n<li><strong>Well designed systems have good interface points</strong>.  Interface points are areas where one part of the system doesn’t need to care about the details of how other parts of the system are implemented, they just need to know the <em>interface</em> for interacting with that part of the system.  For example, when using React, parent components don’t need to know the details of how a child component work, just what props they take.  Similarly when writing HTMl, you don’t need to know the details of how CSS will work for layout, you just need to expose meaningful class names that CSS can use.  A website doesn’t need to know what language a web server is written in to make HTML requests to it.  These are examples of interface points, and while well designed systems will have more of them and fewer “breaches” of the interface lines, all systems have them to some extent.</li>\n</ol>\n<p>The implication of these truths is that there is value in starting small and expanding.  If we can pick a small section of the application that is cordoned off from the rest of the code in a meaningful way, we can create a foothold for the new technology.  This serves as a learning opportunity, an example, and a starting place.  If it goes badly, small changes are easy to revert or fix.  If it works well, we can look for more similar interface boundaries, or expand out to convert some of the code that uses the new code.</p>\n<p>When I converted a large Backbone app to use React, I took advantage of 2 different interface boundaries.  I started by converting small “widget” components to be written in React, and came up with a method of calling these widgets from within Backbone code.  Once I had enough of these building block widgets written in React, I started writing new pages in React.  Then finally I would convert subsections of Backbone driven pages to React, starting from the bottom up and converting the top level layouts of the page last.  I was using 2 interface boundaries: components and pages.  That made sense for Backbone to React, where I was essentially converting one type of component tree to another.  But the lines may be different for other changes, and you’ll need to use your judgement.</p>\n<h4>5. Automate what you can</h4>\n<p>Not every change needs to be hard and slow.  Sometimes we can take advantage of automation. Tools like <a href=\"https://prettier.io/\">Prettier</a> and <a href=\"https://eslint.org/\">ESLint</a> make it easy to automate code style and correctness fixes.  Tools like React often provide <a href=\"https://github.com/reactjs/react-codemod\">codemods</a> to help make it easier to update to a new version of the tool or use best practices.  Unit tests can help you prevent regression bugs and are easy to automate with a CI server or <a href=\"https://benmccormick.org/2017/02/26/running-jest-tests-before-each-git-commit/\">pre-commit hooks</a>.  </p>\n<p>If you’re dealing with problems that are more specific to your codebase, it may make sense to invest time into writing your own automation scripts, whether that means hacking together a crazy bash/python script to do a massive find and replace, or using a tool like Ansible to automate some previously manual developer processes. It made a big difference in our company when our QA developer put in the work to automate the creation of consistent local environments.</p>\n<h4>6. Count the cost of maintenance</h4>\n<p>With a small team, some improvements may simply not be worth it over time.  Genuinely valuable things like test coverage, JSDoc style automated documentation, old browser support, add overhead to future changes as well as any up front cost to implement. These are the type of things that advocates tend to moralize about, and say that it’s the developers job to advocate for them.  And that is true as I alluded to earlier.  But when faced with limited resources, it’s important to prioritize, and understanding the cost of maintaining certain improvements is part of that.</p>\n<h4>7. Distinguish between craftsmanship and business needs</h4>\n<p>Along the same lines, as developers we’re often encouraged to think of ourselves as craftsmen.  Think of <a href=\"https://thenextweb.com/apple/2011/10/24/steve-jobs-obsession-with-the-quality-of-the-things-unseen/\">Steve Jobs talking about using good wood for the back of a cabinet</a> or the aforementioned moralizing about code and process quality.  There are great things about this, since it is a developers job to look after the quality and craftsmanship of their product.  But it also is good to align that craftsmanship with business needs and create something that is useful rather than merely theoretically beautiful.  So there is a place for making changes to improve the “purity” of code, but when investing limited resources, it’s even more important than usual to balance that with business needs.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I’ve gotten to work with plenty of non-devs who respect the need for good architecture.  They still aren’t going to be able to identify when changes need to happen.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Little known fact: CSS actually stands for “Giant Tangled Mess that creates bugs with every change”</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>",
            "url": "https://benmccormick.org/2018/01/07/large-improvements-small-team/",
            "title": "Tips For Improving a Large Code Base With A Small Team",
            "date_modified": "2018-01-07T00:00:00Z",
            "author": {
                "name": "Ben McCormick",
                "url": "http://benmccormick.org"
            }
        }
    ]
}