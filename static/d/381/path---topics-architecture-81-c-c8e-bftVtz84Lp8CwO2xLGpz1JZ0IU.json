{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":null,"topics":["Code Quality","Architecture"],"category":"software-productivity","key":null,"title":"How I Work:  Refactoring","description":"Describing the process that goes behind refactoring code","layout":"post","path":"/2013/02/03/how-i-work-refactoring","date":"2013-02-03T21:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>I recently took the time to re-examine a section of code that I’ve worked on as part of a team for the last year.  Looking at it with fresh eyes I saw plenty of room for improvement.  The issues weren’t the result of one bad checkin or poor decision.  Instead they were the result of “death by a thousand cuts”, a series of small decisions made by different people that were individually justifiable but eventually resulted in brittle, hard to maintain code.</p>\n<p>Over the last few days I’ve been taking some time to refactor the code.  Doing so made me think about what questions I should be asking while refactoring code.  Here are a few of the things I look for when I’m working to clean up code:</p>\n<h4>Does each function do only one thing?</h4>\n<p>This has been the hardest bad habit for me to break.  I have a natural inclination when adding new functionality to try to toss it into a related function.  This seems great as first, but its how you go from a function that “removes special characters from a string”, to one that “removes extra characters from a string”, to one that “processes strings”, and finally to “the string function” that takes a string and returns a new output determined by a glob of unreadable code that nobody understands and everyone is scared to touch.</p>\n<p>Functions that perform only one purpose are easier to understand, easier to use, easier to test, and easier to port to new environments.  When functions start to perform multiple purposes it becomes harder to maintain <a href=\"http://en.wikipedia.org/wiki/Don&#x27;t_repeat_yourself\">DRY</a> principles.  If one function performs actions A&#x26;B, another performs B&#x26;C, and a 3rd one performs A&#x26;C, you have to duplicate each action twice, adding code bloat and opening up the risk of inconsistent changes across methods.</p>\n<h4>Does each object/concept have a consistent naming convention throughout the system?</h4>\n<p>One source of frustration I’ve had when debugging the code for my project has been the fact that different developers have started different naming conventions for objects within the code.  This results in a single object being called chartObj within function, chart within another, params in another place, and chartData in another instance.  Sometimes these different references even pop up within the same function.  This inconsistency makes it much harder for an unfamiliar developer to understand how the system functions.  This again can lead to duplicating information, if a developer modifying a function or class doesn’t realize they already have the information they need.</p>\n<h4>What assumptions have I made?</h4>\n<p>One thing that can easily add confusion within a system is making undocumented assumptions.  One common assumption thats made for javascript code is that it will always run in a browser, or have access to a specific library such as jQuery.  While some of these assumptions are necessary, its worthwhile documenting them in some way, either in the comments or through code checks that through exceptions if the assumptions are violated.</p>\n<p>This is important because requirements change.  The particular code that I’m working with was originally intended to run only in the browser, without any thought of server-side use.  When a requirement made it necessary to run it with PhantomJS, plenty of changes were needed.  This isn’t necessarily problematic, because this particular change was not likely when the original code was made, and the adaptation was not hard.  More problematic was the fact that developers not directly involved with the phantomJS work still were acting under the assumption that the code would run within a browser environment.</p>\n<p>These three questions are obviously not the only things that can be wrong in code, but in my experience they’re especially treacherous because they can come in slowly and then make every future change harder.</p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li><a href=\"http://www.codinghorror.com/blog/2007/03/curlys-law-do-one-thing.html\">Coding Horror: Curly’s Law</a> a readable explanation of DRY principles</li>\n<li><a href=\"http://refactoring.com/\">Refactoring.com</a>- A nice collection of resources on refactoring by Martin Fowler, who also has written a well regarded <a href=\"http://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=productjavasc-20\">book</a><img src=\"http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&amp;l=as2&amp;o=1&amp;a=0201485672\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\">\non refactoring.</li>\n</ul>","fields":{"slug":"/2013/02/03/how-i-work-refactoring"}}},{"node":{"frontmatter":{"readNext":"staying-productive,orthogonality-css-js,readable-code","topics":["Architecture","Code Quality"],"category":"software-productivity","key":"ll-context","title":"Giving Context To Best Practices","description":"What we talk about when we talk about best practices","layout":"post","path":"/2017/02/18/context-to-best-practices/","date":"2017-02-18T23:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>I’ve noticed a frustrating trend in online discussions about web development where developers take their personal experience with a tool or practice and promote it as a universal truth.  Some of this is the nature of being human: we all see the world through our own lens.  But the best technical observations exist within a specific context.</p>\n<p>Compare</p>\n<blockquote>\n<p>Everybody should be writing code using static types, the extra syntax is worth it because of all the bugs it prevents.</p>\n</blockquote>\n<p>to</p>\n<blockquote>\n<p>If you’re working in a large code base with many developers, static typing is extremely useful, because the overhead from writing extra code and compiler errors is more than made up for by reducing bugs and clearly expressing intent when developers edit code they didn’t write.</p>\n</blockquote>\n<p>The first quote presents a tradeoff and declares a universal preference for one direction in the tradeoff.  The second quote adds more details about the context in which the practice has been beneficial, and explains what about those circumstances (developers editing code they didn’t write) affects the tradeoff decision.  </p>\n<p>These type of distinctions are often lost in online discussions about development best practices. I have no interest in naming and shaming, but specifically I’ve seen this in discussions around JavaScript performance, testing, frameworks vs other frameworks vs VanillaJS, responsive design, progressive enhancement, and build pipelines.  For this post, I’m going to try to lay out a list  of some of the context that I’ve found helpful to take into account when giving or interpreting best practice advice.</p>\n<h3>Context to keep in mind when discussing and interpreting best practices</h3>\n<h4>Beginner vs Veteran</h4>\n<p>I’ll start with a distinction that folks seem better about making. Sometimes recommendations that make sense for beginners don’t work as well for more experienced developers and vice versa.  For instance it might make sense to advise a more experienced developer to use and heavily configure a build system like <a href=\"https://webpack.github.io/\">Webpack</a> for a new project. But beginners already have a lot to learn with each new project and might benefit from a simpler system; either a simple project without a build step, or a “batteries included” system like <a href=\"https://github.com/facebookincubator/create-react-app\">Create React App</a> or <a href=\"https://ember-cli.com/\">Ember CLI</a>.  Making these distinctions is important for helping developers who may feel overwhelmed by all the concepts they need to learn when getting started with web development.</p>\n<h4>Big Team vs Small team vs Individual</h4>\n<p>Another dynamic that matters when expressing best practices is the size of a team working on a project.  If a project is being developed by a large team, or several teams, or is meant to be used as a library by many people, techniques like automated documentation, static type checking, and clear style guidelines may be essential.  But for a personal project or a professional project run by a 1 person team, those same techniques may provide a lot of overhead for minimal benefit. Most teams will fall between those extremes and will have to weigh the tradeoffs in each case.</p>\n<h4>Personal Project vs Internal tool vs B2B Products vs Consumer Products</h4>\n<p>The audience of a project is also important.  Some projects we build for ourselves.  Some may be internal for a company, or for a group that we’re a part of.  Other projects are sold professionally to businesses or offered freely to consumers on the web.  There are different goals and expectations for each of these groups, that may impact which practices and techniques are important.  For instance, nobody cares if a personal web application you’ve made to organize your todos crashes in Internet Explorer or doesn’t have alt-text for images.  But browser compatibility and accessibility might be extremely important for a consumer web app aimed at a broad population.  Similarly, it might be ok for your internal web tool to have un-minified JavaScript and large un-optimized CSS and JavaScript bundles, since it will always be served locally over a fast connection.  But it could severely hurt the user experience to do the same things for a high traffic public site.</p>\n<h4>Web page vs Web app</h4>\n<p>Distinguishing between web pages<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> and web apps<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> would short circuit a large number of internet arguments before they started.  Specifically arguments about progressive enhancement, whether we use too much JavaScript and whether a site is “acceptable” if it doesn’t work without JavaScript.  Many accessibility and performance proponents push very strongly for less JavaScript and sites that work without JavaScript.  And that is a good thing… for the sites that <strong>can</strong> function without JavaScript.  Web apps like Trello, Google Docs, or Postman just don’t make sense without JavaScript.  But saying that we should use less JavaScript isn’t bad advice, it’s just bad advice when given or taken without context.</p>\n<h4>Existing project vs Greenfield project</h4>\n<p>Some choices are only easy to make at the start of a project.  It is possible to change the language or framework a project is written in midstream, but it is often extremely risky and painful.  So asking a developer working on a 5 year old JavaScript project with thousands of lines of code why they didn’t write it in <a href=\"http://elm-lang.org/\">Elm</a> or <a href=\"https://clojurescript.org/\">ClojureScript</a> is not helpful.  But suggesting that somebody write a new project in Elm may be just fine.</p>\n<h4>Short term project vs Long term project</h4>\n<p>Some software projects are meant to be written, completed, and never seen again.  For instance a promotional site for an event.  Some projects, like financial software, are meant to last for decades.  This is yet another distinction than can impact best practice discussions.  When working on a short term project, speed of delivery and initial quality tend to matter a lot.  For long term projects it may be better to prioritize maintainability, security and ease of deployment.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Web page: sites that are mostly content focused with some possible interactivity layered on top</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Web app: sites that are primarily an interactive experience for the user and behave more like traditional desktop or mobile applications</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/02/18/context-to-best-practices/"}}},{"node":{"frontmatter":{"readNext":"clean-architecture-book,react-confessions,large-improvements-small-team","topics":["Architecture","Book Review"],"category":"reviews","key":"philosophy-of-software-design-book","title":"Book Review: A Philosophy of Software Design","description":"John Ousterhout's book is a solid intermediate book on the art of writing software","layout":"review","path":"/2018/12/31/book-review-philosophy-of-software-design/","date":"2018/12/31","dontfeature":null,"isDraft":null},"html":"<p>A lot of the software books out there these days are marching towards their expiration dates the day they’re written.  When I see titles like “Angular 2 Development”, “Learning JavaScript with React”, “Writing Native Apps with Ionic 2 and Lodash 4” I know that the book will soon have out of date code examples and will not contain the latest ways a community is using the libraries they’re discussing.  There is value in these types of books and they often represent a monumental amount of thought and time from their authors, but 5 years from now they will no longer be relevant.  I love reading books that I know will last.</p>\n<p><a href=\"https://amzn.to/2Rpu6zX\">A Philosophy Of Software Design</a> by <a href=\"https://en.wikipedia.org/wiki/John_Ousterhout\">John Ousterhout</a> is a book that will last.  It’s full of timeless software writing advice that isn’t tied to a particular language, library or point of time.  Although not formally organized this way, it seems to be divided into ~4 parts: 2 chapters on the idea of complexity, a concept which Ousterhout uses as the unifying theme of the book, 8 chapters on what I’d describe as the structural design of software systems, 7 chapters on more “code level concerns” like naming conventions, comments and making code obvious, and then a final 2 chapters that feel a bit more like appendixes which discuss some common software trends and designing for performance.</p>\n<p>The best part of the book is those first few chapters where Ousterhout eloquently describes the problems that complexity can cause in a software project and lays out the distinction between a tactical and strategic approach to coding.  This is the heart of the titular <strong>philosophy</strong> of Software Design: the idea that software engineering is ultimately a fight against complexity.  It’s a strong vision clearly articulated.</p>\n<p>The “structural” sections of the book are all sound in an opinionated way.  The book makes an argument for larger implementations hidden behind smaller abstractions, which Ousterhout calls “deep modules”, and much of the structural section is through that lens.  This isn’t as open-minded as architecture advice I’ve seen elsewhere, but the benefit is that it’s prescriptiveness makes it much easier to use as a guide or code review tool than more situational or caveated advice.  That practical aspect is clearly a goal of the book, and the approach therefore makes sense.</p>\n<p>After chapter 11, the book takes a sudden detour from higher level concepts into much more concrete realms.  There is an extensive treatment of commenting style, naming conventions and other ways to make code readable and obvious.  There is a coherent through-line of building maintainable systems throughout, but the transition felt strange.  The content is still good though.</p>\n<p>The book ends on a chapter addressing modern software trends through the lens of the concepts considered in the book, which felt like a good place to wrap up, and then a chapter on designing for performance.  Given the books focus on complexity and the size of the performance topic, this chapter is content to argue that simple designs are friendly to performance, without trying to unpack many performance related topics.  It felt a bit tacked on to me, but it makes sense as a piece of objection handling for those who feel that they can’t simplify their architecture for performance reasons.</p>\n<p><em>A Philosophy of Software Design</em> is going to be my new go to recommendation for developers who are able to write code that runs but want to start thinking about how to write better code.  It doesn’t have the depth of something like <a href=\"https://benmccormick.org/2018/02/14/book-review-clean-architecture/\">Clean Architecture</a>, but it is extremely readable and approachable, and I’ve never seen an architecture-level book that was so focused on actionable advice.  If you take the advice in the first chapter and consult the book during code reviews, every chapter in the book has something to consider when looking at a piece of non-trivial code.  That makes it a perfect introduction to higher-level software design thinking.  If you think that would be a fit for you, <a href=\"https://amzn.to/2Rpu6zX\">go ahead and check it out</a>.</p>","fields":{"slug":"/2018/12/31/book-review-philosophy-of-software-design/"}}},{"node":{"frontmatter":{"readNext":"react-confessions,large-improvements-small-team,ll-context","topics":["Architecture","Book Review"],"category":"reviews","key":"clean-architecture-book","title":"Book Review: Clean Architecture","description":"Uncle Bob's book on architecture is informative, but limits its scope","layout":"review","path":"/2018/02/14/book-review-clean-architecture/","date":"2018/02/14","dontfeature":null,"isDraft":null},"html":"<p><a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin was one of the better books on Software Development I’ve read in recent years.  It did exactly what I want from a software book in 2018: it tackled an important high level topic with a great amount of depth in a way that helped me as a reader to develop insight and perspective on the topic.  These days blog posts and other online sources cover most of my “how to” needs, as well as the simple “what is X and why should I care about it” questions that I used to go to books for.  But there is still no substitute for books when you want an in depth understanding of an important broad topic.\n<a href=\"https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=as_li_ss_il?ie=UTF8&qid=1516226851&sr=8-1&keywords=clean+architecture&linkCode=li2&tag=benmccormicko-20&linkId=c599845decc4e5ed1457acae2a375ad6\" target=\"_blank\">\n<img border=\"0\" class=\"inline-img\" src=\"//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0134494164&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=benmccormicko-20\" ></a><img src=\"https://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&amp;l=li2&amp;o=1&amp;a=0134494164\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\">\nFor this book, that topic is software architecture.  The book tackles it by starting with some history, and then starting with a micro view before expanding out its gaze.  After giving a broad overview of the different software paradigms, Martin walks readers through 3 levels of architecture principles: class-level design principles, component-level component principles and system-level architecture principles.  At each level he shows the similarities between the lower level principles, as well as the unique concerns at each scale. Then he wraps it up with a case study example that shows the principles discussed throughout the book in action.</p>\n<p>I found Clean Architecture to be a great reminder of concepts I learned in school<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> that I didn’t properly appreciate at the time due to a lack of practical experience.  It brought home to me that while there are some architectural things I do pretty well right now, like keeping code separated enough that it only has one reason to change, there are other things that I don’t do well a lot of the time.  For me the biggest realization was how much grief I’ve caused myself the last few years from failing to keep high level policies from depending on low level details.  The book gave me a few new lenses to examine my decisions with, and definitely inspired me to spend more time taking a step back to see the big picture as I’m adding new features.</p>\n<p>For me, that sense of perspective was the biggest win, but if you’re looking for detailed “how tos”, there’s a decent amount of that as well.  Martin goes into details about how to arrange and refactor classes to create maintainable systems that are easy to change, as well as identifying patterns to look for that may be a sign of problems to come.  He goes pretty deep into the weeds with examples and class diagrams as he discusses creating proper system boundaries and pulls it all together with a nice case study example at the end.</p>\n<p>While I did find Clean Architecture extremely helpful overall, I do have some nitpicks.  The biggest for me personally is that while the book mentions dynamic languages like Ruby and Python a few times, it mostly does so in passing to say that the principles mention still apply, but may look different.  Since this is usually not expanded upon, and all of the examples given seem to assume static languages that provide abstract interfaces to classes, it is sometimes hard to see how the books principles should be applied to the dynamic languages that I use daily.  I would love to have seen more detail there.  Also, the final chapter of the book “The Missing Chapter” was a bit of an oddity.  It was written by a different author<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, framed issues that had already been covered differently, and came to some different conclusions than the rest of the book.  It was almost a counterpoint to the other parts of the book, which could have been interesting, but lacked an introduction or context to help explain its purpose.  Overall it left me a bit confused and ended the book on a discordant note rather than bringing the ideas together and focusing me on the important ideas.</p>\n<p>I can recommend <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> for anyone who wants to get better at thinking about the big picture when it comes to software systems, particularly if you haven’t already been exposed to any of the theory behind designing maintainable systems.  If you’re usually working in static languages on larger projects, I would double that recommendation, as you’ll be right in the book’s wheelhouse.  For those like me working with dynamic languages on web projects, it may be a bit more hit or miss, but it still is a great way to broaden your horizons and gain some new ways of thinking about the tradeoffs our work entails.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I was a Computer Science major, but if you weren’t exposed to theories of software architecture through a curriculum</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>This was not obvious to me on first reading, I only went back and noticed the acknowledgement on the chapter page when I was confused by a 3rd person reference to the author.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/02/14/book-review-clean-architecture/"}}},{"node":{"frontmatter":{"readNext":"feedback-loops,react-confessions,orthogonality-css-js","topics":["Architecture","JavaScript"],"category":"fe-architecture","key":"fe-concerns","title":"What's involved in Front End Architecture?","description":"6 areas of interest in front end software design discussions","layout":"post","path":"/2019/01/07/the-concerns-of-fe-architecture/","date":"2019/01/07","dontfeature":null,"isDraft":null},"html":"<p>The word “architecture” gets thrown around a lot in software discussions.  But we don’t seem to always use it the same way.  Some example usages:</p>\n<blockquote>\n<p>Our app uses Redux for our architecture.</p>\n</blockquote>\n<p>Sometimes we assume that because we are using a framework or data management library, that must be our architecture.</p>\n<blockquote>\n<p>I created a diagram of our dependency graph, showing all the imports in the code, as a way of seeing our architecture.</p>\n</blockquote>\n<p>We could also say the way your program is structured (which files depend on which other files) represents your architecture.  If we’re fancy, then maybe we have <a href=\"https://en.wikipedia.org/wiki/Unified_Modeling_Language\">UML diagrams</a> representing this structure.</p>\n<blockquote>\n<p> Bob is our architecture guy: he decides what dependencies we can bring in, is always asking us to refactor code to make it “cleaner”, and runs a design meeting before each feature to decide how to structure the code</p>\n</blockquote>\n<p>This final quote sounds like architecture is more about the decisions you’re making as you go through a project.</p>\n<h3>Appealing to authority?</h3>\n<p>So if the community isn’t using the term consistently, let’s ask the experts.  Here are 2 definitions from folks who have written popular books on software architecture.</p>\n<p>Robert Martin (Uncle Bob) uses the following definition in <a href=\"https://amzn.to/2rROcEA\">Clean Architecture</a>:</p>\n<blockquote>\n<p>The goal of software architecture is to minimize the human resources required to build and maintain the required system.</p>\n</blockquote>\n<p>Martin Fowler gave his definition in a talk titled <a href=\"https://www.youtube.com/watch?v=DngAZyWMGR0\">Making Architecture Matter</a>. It is worth watching in full, but paraphrased, his definition is:</p>\n<blockquote>\n<p>Software architecture is those decisions which are both important and hard to change</p>\n</blockquote>\n<p>These 2 definitions turn out to be complementary.  Uncle Bob motivates architecture: we’re focused on minimizing the work put into the system.  Martin Fowler’s definition shows what parts of the system architecture is concerned with: the parts that are “important” and hard to change.</p>\n<p>The next question of course is… what is important?  The unsatisfactory answer is that it depends.  It will change between projects, and will change within a project over time.  But when we scope the question to the domain of front end development, common themes emerge.  Specifically there are 6 areas of concern that I see coming up again and again in public and private front end architecture discussions.  They’re not exclusive to the front end, but they’re a good starting point for anyone thinking about building web applications.</p>\n<h4>Ease of Change</h4>\n<p>When new requirements arrive, how quickly are developers able to make changes and release new code to production?  When there are bugs, how easy is it to find the problem and fix it?  Are developers able to consistently deliver correct code?  Or are multiple iterations often required?</p>\n<h4>Security</h4>\n<p>Can a malicious user inject code into your site?  Are you unnecessarily exposing information about your users or code structure? And you are working with your API developers to use secure authentication and authorization practices right?</p>\n<h4>Accessibility</h4>\n<p>This concern is broader than the way the word is often used in web dev circles.  Is the full audience of this site or application able to use it with as few limitations as possible?  Users with disabilities?  Users with older but supported browsers?  How about international users or those with slow connections?  Does your site work on mobile?  Offline?  On Apple Watch?  Do you support AMP? And do your pages appear nicely on social media?  Do you even care about any of these audiences? Maybe you’re optimizing for people who aren’t your users?</p>\n<h4>Reliability</h4>\n<p>Is a site or  application consistently available to users?  Does it often fail, and if so how does it recover?  If things are breaking, are the developers aware of it quickly?  Do different users in different scenarios receive a consistent experience?</p>\n<h4>Performance</h4>\n<p>Is a site or application consistently quick to load and interact with?  If there are animations or highly interactive elements, are they responsive and usable, or do they freeze/jank? Is the user disrupted in their tasks by strange loading behavior?</p>\n<h4>Capability</h4>\n<p>Is your site limited in fulfilling its purpose because of foundational decisions or tradeoffs with the other concerns?  Have you made decisions that let you serve your audience in unique ways because of your tech stack or development processes?  Do your technical decisions even make sense in the context of your site or application’s purpose?</p>\n<h3>Coming Soon</h3>\n<p>I’m hoping to look at each of these areas more in depth in the coming weeks, as well as exploring how we make decisions that impact multiple areas simultaneously.  In the meantime, as you’re looking at decisions and tools that will impact the long term structure of your front end application, consider how they’ll impact each of these areas.</p>\n<p><strong>TL;DR</strong></p>\n<ul>\n<li><strong>Architecture is about decisions that are important and hard to change, with a goal of improving the efficiency of a project</strong></li>\n<li><strong>Front End architecture is often concerned with the areas of Ease of Change, Security, Accessibility, Reliability, Performance and Capability</strong></li>\n</ul>","fields":{"slug":"/2019/01/07/the-concerns-of-fe-architecture/"}}},{"node":{"frontmatter":{"readNext":"philosophy-of-software-design-book,fe-concerns,feedback-loops","topics":["Architecture"],"category":"software-productivity","key":"valuable-code-reviews","title":"6 Keys To Valuable Code Reviews","description":"Getting the most out of your code review process","layout":"post","path":"/2019/01/14/value-from-code-reviews","date":"2019/01/14","dontfeature":null,"isDraft":null},"html":"<p>I’ve read 2 things lately that really reminded me of the value of code reviews.  One was <a href=\"https://amzn.to/2Elk5g8\">A Philosophy Of Software Design</a> by John Ousterhout, which I reviewed <a href=\"https://benmccormick.org/2018/12/31/book-review-philosophy-of-software-design/\">here</a>.  Philosophy of Software Design is a practical guide to software design, and Ousterhout emphasizes code reviews as the best point for “practicing architecture” in real world projects.  The 2nd was Sophie Alpert’s recent blog post <a href=\"https://sophiebits.com/2018/12/25/why-review-code.html\">Why Review Code</a>, where she lists the various advantages she’s seen from having code reviews.  I can’t improve on her list, but I can endorse it.  I’ve seen all of the things she listed as benefits from code reviews in the past.  However I’ve seen these benefits come out in some environments more than others.  So I wanted to share 6 practical tips to getting the most valuable possible out of your team’s code reviews.</p>\n<h4>1. Make sure that code reviews are multi-directional</h4>\n<p>When you start doing code reviews, it can be tempting to only have senior developers review code.  After all, they’re the ones who know the system best. But not only do you risk burning out your senior staff that way, you also miss out on some of the biggest benefits of code reviews.  You get different benefits with different team combinations.  I’m using Junior and Senior here relatively speaking, the roles may change over time or in different areas of the codebase.</p>\n<ul>\n<li><strong>Senior Reviewing Junior</strong> - This is the first thing most folks think about.  This is an opportunity for a more experienced developer to catch bugs in a less experienced developer’s code and also give suggestions for improving architecture-level structure, introducing new ways of doing things, or catching when there are opportunities for code consolidation that the original author might not have known about.</li>\n<li><strong>Junior Reviewing Senior</strong> - When a less experienced developer reviews the code of a more experienced developer, its an opportunity for them to see new ways of doing things, and also get “cheap” exposure to new areas of a codebase.  It’s also a great opportunity for them to ask questions about things they don’t understand.  But it shouldn’t be a one way street.  Often times a fresh pair of eyes are great at catching bugs, and if a code review is particularly confusing to a less experienced dev, it’s a sign that the code may need to be rewritten or better documented so that it can be maintained in the future.</li>\n<li><strong>Peer Reviewing Peer</strong> - When 2 developers have roughly equal skill and experience with the codebase, code reviews are still an opportunity for a second pair of eyes, but they also have the benefits of building team collective knowledge about the codebase and exposing times when there are differences in approach across the team.  Conversations at this level are a great place to standardize on best practices and team conventions.</li>\n</ul>\n<h4>2. Hold reviewers responsible for the code they review</h4>\n<p>If a bug makes it past initial development efforts and is caught by QA or ends up in production, who is responsible for it?  Although there will ideally always be layers of accountability here, most developers I know naturally tend to hold themselves responsible when code they wrote breaks something, but also apply the same standard to others.  This can lead to rubber-stamp code reviews when things get busy, since there’s no “skin in the game”.  The benefits of code review tend to come out though, when developers take that same responsibility for the code they review.  A team culture that sees the reviewer and the developer as equally responsible for maintainable code, bug-smashing, and other architecture concerns will lead to better code reviews.  This means treating code review as a core job responsibilities for devs and rewarding those who do it well, rather than just tacking it on.</p>\n<h4>3. Match technology to your process</h4>\n<p>The teams I’ve worked on that didn’t have real code review processes also didn’t have an easy setup to make it work.  They were reviewing diffs manually in their editors or over email.  Tools like Github, Bitbucket and Gitlab have made this much easier.  If you want this to be part of your process, make it as easy as possible.</p>\n<h4>4. Use checklists where appropriate</h4>\n<p>In moderation, I’ve found checklists a useful tool for code reviews.  If your team has specific areas of focus that you want to improve compliance on, it can be helpful to give reviewers a list of items to sign off on.  For instance:</p>\n<ul>\n<li>Verify change supports internationalization</li>\n<li>Verify change doesn’t add any new code with legacy framework</li>\n<li>If change is user-facing, verify it includes documentation updates</li>\n</ul>\n<p>You can take this too far, the review process shouldn’t be reduced to repetitive box-ticking.  But these can be great as guides for implementing new initiatives or addressing problem areas in code.</p>\n<h4>5. Make code reviews as atomic as possible</h4>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">10 lines of code = 10 issues.<br><br>500 lines of code = &quot;looks fine.&quot;<br><br>Code reviews.</p>&mdash; I Am Devloper (@iamdevloper) <a href=\"https://twitter.com/iamdevloper/status/397664295875805184?ref_src=twsrc%5Etfw\">November 5, 2013</a></blockquote>\n<p>Huge code reviews are overwhelming, and much easier to rubber stamp.  When you develop a culture of creating small focused issues and reviewing each of them, it leads to more interaction and better results. Single issue (atomic) code reviews are best.  As a rule of thumb, if you can describe the change without using the words “and”, “rewrite”, or “a couple of different”, you’re probably doing alright.</p>\n<h4>6. Leave space to make changes</h4>\n<p>Finally, code reviews will have the most value if as a team you’re committed to acting on the feedback received.  That means being supportive when a code review leads to a re-write or refactor.  Sometimes that will need to be delayed of course, but in a healthy process there should usually be time to act on feedback.  This is of course easier if you’ve followed the previous suggestion and kept your code reviews small.</p>","fields":{"slug":"/2019/01/14/value-from-code-reviews"}}},{"node":{"frontmatter":{"readNext":"fe-concerns,react-confessions,feedback-loops","topics":["Architecture","JavaScript"],"category":"fe-architecture","key":"reliability-design","title":"Designing Front End Apps For Reliability","description":"Principles for creating more robust applications","layout":"post","path":"/2019/01/21/designing-for-reliability","date":"2019/01/21","dontfeature":null,"isDraft":null},"html":"<p>In my recent <a href=\"https://benmccormick.org/2019/01/07/the-concerns-of-fe-architecture/\">post on Front End Architecture</a> I identified <em>Reliability</em> as a key concern of front end architecture.  I define reliability as follows:</p>\n<blockquote>\n<p>An application’s ability to provide a consistent functional experience to all users in the intended audience over time.</p>\n</blockquote>\n<p>Let’s break that down a bit:</p>\n<p><strong>Consistent</strong> - Reliable applications function the same way over time or degrade gracefully, even on days with heavy load, leap years, and weekends.</p>\n<p><strong>Functional</strong> - Reliable applications allow the users to do the things they need to do, and are forgiving when a user attempts actions that weren’t part of an ideal use case.</p>\n<p><strong>All Users In The Intended Audience</strong> - Reliable applications work for users with strange data who live in different locales, and those with bad network connections and old browsers, at least within the limits of what what the business intends to support.  There is some overlap here with the concept of <strong>accessibility</strong>.</p>\n<p><strong>Over Time</strong> - In the real world, no application is ever completely reliable.  Things break down, there are bugs, and new edge cases are discovered.  What we can aspire to though, is an application where things that are working consistently stay working consistently, and as bugs, regressions and edge cases are discovered they get fixed in permanent ways.</p>\n<h3>Things Break Down</h3>\n<p>So why are applications often unreliable?  There are a fairly predictable set of issues that most applications run into that degrade reliability.</p>\n<h4>Unexpected Usage Patterns</h4>\n<p>Users are agents of chaos and the real world is stranger than expected.  Your sample database and QA testing doesn’t come close to giving you a true idea of how your application will be used.</p>\n<h4>External Failures</h4>\n<p>Google never has bugs right?  Good luck with that.  Even if the rest of the world always wrote perfect software, front end code usually has to deal with the network, even when your user is on a plane, accessing your site over 2G in the mountains, or just dealing with crappy coffeeshop wifi.</p>\n<h4>Bugs</h4>\n<p>Bugs happen.  When they happen consistently and repeat themselves, you have a reliability problem.</p>\n<h4>Scaling Problems</h4>\n<p>Some things work great on small data sets or with a few users but break down when things get popular.  This isn’t just a backend issue.  Data scales as well as people, and your program needs to be robust to slower backend responses when under load.</p>\n<h3>Keeping Things Running</h3>\n<p>I’d like to offer some practical strategies for overcoming the challenges I’ve listed.  These are things you can consider during code reviews and when setting up your dev processes.</p>\n<h4>1. Consider all states, and limit them if you can</h4>\n<p>One of the big leaps in JavaScript based UI development over the past decade has been moving from systems that we modeled as an initial UI state followed by a series of mutations (server generated HTML + jQuery) to systems that were modeled as partially driven with event systems that caused mutations to the UI (Backbone, Angular 1, Knockout), to systems that model the UI as a function of state (React, Vue, Angular2+, Modern Ember) State-driven systems tend to be more robust, because it is often more clear when a particular state might cause a problem, and it is more obvious when a problematic state occurs for a user how it happened.</p>\n<p>Visibility into state is a huge step forward.  The next step is to define the possible states.  You can do this in your head, but it’s much easier when using types or by thinking in terms of <a href=\"https://benmccormick.org/2018/05/14/mobx-state-machines-and-flags/\">state machines</a>.  If you can map out different portions of your applications into a limited set of states and define behavior for each of them, reliability will be much easier to achieve.</p>\n<p>The final step is to limit these states where possible.  Some interfaces depend on user input or external data enough that they naturally are effectively “infinite state machines”, but when you can limit states by cutting scope, rearranging components or cordoning “infinite state machines” off into a smaller area of your application, you gain a lot of benefits.</p>\n<h4>2. Don’t trust the network</h4>\n<p>This one is straightforward, and easy to check in code reviews.  Don’t assume that anything over a network will return quickly.  Don’t assume it will return correctly.  And in fact, don’t assume it will return at all.  You may be limited in how you can handle these possibilities, but the baseline competence here is handling them.  Have strategies for loading states, timeouts, error handling and bad formats.  Things like service workers can help here, but also make the problems around the network even more complicated by introducing a new caching layer.  When you start making calls over a network, you’re entering the realm of distributed systems and things get tricky fast.  But the least you can do is recognize the complexity and make a plan for it.</p>\n<h4>3. Consider variations in data</h4>\n<p>Do you have a test data set that you develop against?  Is that your primary source of validation before you send code off into the wild?  Some of that may be unavoidable and out of your control, but remember that users are agents of chaos.  You will encounter data you didn’t expect, so plan ahead for challenges.  How would your data visualization function if the dataset you ended up displaying was 2x the size of your test database?  10x? 1000x?  What if the list of products to display in your table contained product names 200 characters long?  Or if some of them were empty?  The real world is strange and you should be ready.</p>\n<h4>4. You should have testing</h4>\n<p>This is another topic that’s too big to cover fully here, but basically there’s a reason that QA engineers have jobs.  You should have a plan for testing.  That plan will be better if it contains meaningful amounts of automated regression testing, with a clear process for making sure bugs are tested automatically once they’ve been discovered and fixed.  If you don’t know where to start, always focus on testing the most important things well over testing everything mediocrely. And if you’re not in a position to do meaningful automated testing, consider what it will take to get there.</p>\n<h4>5. Monitoring</h4>\n<p>Finally, sometimes it’s just not possible to catch problems before they ship.  But you can still catch them before too many of your customers do if you put in the work.  I’ll be honest, I’ve never had a monitoring setup that I’ve been happy with at work, but on the front end good monitoring can mean sending console logs over the network so that they’re shared with whatever backend logging solution you’re using, tracking feature usage through analytics to look for any large problems or lack of usage that may indicate bugs, and even more advanced stuff like session recording in some cases.</p>\n<p><strong>TL;DR</strong></p>\n<ul>\n<li><strong>Reliability is an application’s ability to provide a consistent functional experience to all users in the intended audience over time.</strong></li>\n<li><strong>Reliability breaks down due to unexpected usage, external failures, bugs, and scaling problems</strong></li>\n<li><strong>You can boost reliability by defining and limiting application states, distrusting the network, thinking about variation in data, testing and monitoring</strong></li>\n</ul>","fields":{"slug":"/2019/01/21/designing-for-reliability"}}},{"node":{"frontmatter":{"readNext":"philosophy-of-software-design-book,fe-concerns,feedback-loops","topics":["Architecture","JavaScript"],"category":"fe-architecture","key":"strategies-tactics-moves","title":"Strategic Coding","description":"Thinking about architectural concerns is a full time occupation","layout":"post","path":"/2019/02/18/strategic-coding","date":"2019/02/18","dontfeature":null,"isDraft":null},"html":"<p>I recently read <a href=\"https://amzn.to/2Elk5g8\">A Philosophy Of Software Design</a> by John Ousterhout.  In an early chapter he paints a picture of a “tactical tornado” programmer, a programmer who is always focused on solving the current problem by the most expedient method possible, with no thought to the long term implications.  I suspect anyone with even a few years in the programming has seen programmers like this, and has also from time to time written “tactical” code like this themselves.  Ousterhout’s recommendation is instead to write code strategically rather than tactically, taking more up front time to plan the structure for the benefit of longer term productivity.</p>\n<p>Ousterhout focuses his examination of tactical vs strategic coding on the issue of complexity.  Complexity as he defines it is anything that makes the system difficult to work with.  It is the root issue behind much of the <em>ease of change</em> concern I identified in my <a href=\"https://benmccormick.org/2019/01/07/the-concerns-of-fe-architecture/\">recent post</a>.  But we can expand this to encompass all of the front end concerns.  We can easily impact reliability, performance, ease of change, accessibility, security and capability when we make short hand tradeoffs.</p>\n<p>Let’s consider the problem of getting a new sign up page set up for a site.  There are several different approaches we could take.  By far the simplest is a basic HTML page using normal CSS and little or no JavaScript, that posts to a backend service after the signup and then redirects to a different static page.  We could set this up on S3 or any other service that will host static files.  On the other extreme, we could set up a new server side rendered Typescript-based React application that uses Next.js to give us server side rendering, which we deploy using Docker and a fully automated CI build system with chatbot ops.  Which one of these approaches is better?</p>\n<p>A tactical tornado would likely prefer the first solution.  They could get the whole thing up and running in an hour, stamp it and call it done.  Other developers might be attracted to the <em>cool</em> approach and want to avoid the “outdated” approach.  But we can only really answer the question by stepping back and asking some questions:</p>\n<ul>\n<li>What is the future of this application?  Is this a standalone page, or the first page in a larger application?</li>\n<li>What feature requests are we likely to get for the page?  Is it probable that we’ll eventually need form validation, dynamic success and failure states, complex behavior that depends on the use case?</li>\n<li>What browsers are we supporting</li>\n<li>What are our performance benchmarks?</li>\n</ul>\n<p>Questions like that can tell us when we’ll benefit from an up front investment in certain areas, and when it’s wiser to be quick and dirty.  They also allow us to evaluate whether any options we’re considering might cut us off from achieving long term goals.  For instance, if we know that we’ll eventually need to scale this site into a large application with responsive interactions, personalized content and information maintained between page loads, building this out as a series of static pages which POST to a backend would eventually limit our capabilities or require a refactor.  But if this is only a one-off landing page for an event happening next week that won’t be maintained beyond that point, developing a long-term maintenance strategy would be wasted effort.  This is <em>strategic coding</em>, and it doesn’t stop at the beginning of a project, it’s an ongoing mindset that you can take as you add each new feature to an application.</p>\n<p>Ousterhout makes a case that aligns with my experience, that strategic programming is a long term winner.  I’ve seen that over time improvements to ease of change will often help a team save time lost, significant hits to performance, security, reliability may hurt them more than a fast solution saves them, and solutions that unreasonably limit us in terms of system capability or accessibility will ultimately get rejected.  The weasel words there exist for a reason… sometimes it really is the best idea to just get something working.  But a strategic programmer will understand the context of their project, and make wise choices about where and how to invest in the codebase.</p>\n<p><strong>TL;DR</strong></p>\n<ul>\n<li><strong>It is possible to program either tactically or strategically</strong></li>\n<li><strong>Tactical programming is focused on solving the immediate problem as quickly as possible</strong></li>\n<li><strong>Strategic coding considers the context of the problem, and any architectural concerns involved in a change</strong></li>\n<li><strong>Strategic coding doesn’t mean never hacking and always investing, it means letting context inform the amount and direction of investment in a codebase</strong></li>\n</ul>\n<p>PS: I put a <a href=\"https://benmccormick.org/2018/12/31/book-review-philosophy-of-software-design/\">full review of A Philosophy of Software Design</a> up on the site a few weeks ago.  Check it out :)</p>","fields":{"slug":"/2019/02/18/strategic-coding"}}},{"node":{"frontmatter":{"readNext":"readable-code,ll-context,productive-js-dev","topics":["Architecture"],"category":"software-productivity","key":null,"title":"Reusable Code Patterns","description":"Practical tips on reusing existing code","layout":"post","path":"/2016/01/08/reusable-code-patterns","date":"2016-01-08T05:22:29+00:00","dontfeature":null,"isDraft":null},"html":"<p>One of the most repeated mantras in all of software is the term “Don’t Repeat Yourself”. The phrase was first popularized by the book <a href=\"http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?s=books&#x26;ie=UTF8&#x26;qid=1452230454&#x26;sr=1-1&#x26;keywords=pragmatic+programmer\">The Pragmatic Programmer</a>, with it’s call for DRY software.  At it’s core, DRY is all about finding a way to keep logic related to a particular function in one place, so that changes for new functionality can be limited in scope and have predictable consistent effects.  Software developers are usually very good at knowing that repetition is bad, but I’ve seen that we can be less great at communicating about our options to avoid it, or discussing the tradeoffs between different approaches.  This post is going to look at a specific situation that programmers encounter all the time, and give a framework for talking about how to handle it, focusing on positive options rather than simply what we want to avoid.</p>\n<p>The high level situation I want to talk about is when a programmer encounters a problem for which they have an existing piece of code that mostly works as a solution, but doesn’t quite meet all the requirements.  Some examples would include:</p>\n<ul>\n<li>a screen that is required to show a user avatar, but at a different size than other avatars displayed in the interface (all of which use an existing avatar ui widget)</li>\n<li>a program that already has an API to get friends data from a users Facebook account, and needs to add a second API to get similar data from their Twitter account</li>\n<li>a program that needs a  function that takes an integer or a string and displays it on the screen, when it already has a function that displays data but only accepts strings</li>\n</ul>\n<p>Some of those are simple, some are more complex, and you might already be thinking about how you’d handle each case.  The point isn’t so much the exact example so much as having a way to communicate what the options are.  I’m going to lay out 6 different patterns for handling situations where you’re required to implement something similar but not exactly the same as something that already exists.  I will not be endorsing a particular strategy as correct, since they all have their place.  Instead I’ll be discussing the benefits and risks of each, and hopefully giving a good framework for thinking about and discussing these tradeoffs in the future.</p>\n<h3>Using the existing component as is</h3>\n<h4>Pros</h4>\n<ul>\n<li>Least Effort</li>\n<li>Encourages consistency and simplicity</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Often not allowed</li>\n<li>May be compromising user experience for developer expediency</li>\n</ul>\n<p>The first option is the simplest.  If you have a component that is similar to what is required but doesn’t quite match the requirements, change the requirements.  This can make sense in situations like the avatar example above, when you have a UI element or control that you use everywhere in the system.  It may make sense to use that same element in a new place for the benefit of consistency and user knowledge, rather than inventing a new UI element for the page.  This obviously requires an environment where developer input is welcome in the design and requirements process.</p>\n<p>Developers should be cautious with this though.  If using an existing component removes unecessary complexity from the design and saves time, it’s a win-win.  But if the design was a good one, and users lose out on functionality through developer “efficiency”, it can hurt the product.  Even worse, decisions like that usually end up coming back round again, as the need that was ignored often will pop up in new situations.</p>\n<h3>Copy and Paste</h3>\n<h4>Pros</h4>\n<ul>\n<li>Simple</li>\n<li>Keeps existing code stable in the short term</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Adds to maintenance burden</li>\n<li>Decreases readability/understandability of the code base for other developers</li>\n</ul>\n<p>This is the approach that says “To Hell with DRY”, and takes some existing code, creates a copy of it, and then partially modifies it to suit the current situation.  This would be analogous to taking the User avatar code listed above, creating a copy of it and simply modifying it to be bigger.  That might look like this in CSS:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">.user-avatar {\n    height: 30px;\n    width: 30px;\n    padding:5px;\n    float: left;\n    border-radius: 5px;\n}\n\n.user-avatar-big {\n    height: 50px;\n    width: 50px;\n    padding:5px;\n    float: left;\n    border-radius: 10px;\n}</code></pre>\n      </div>\n<p>Everything now works exactly the way we want it.  The problem comes when somebody wants to change the floats on avatar elements, or add a border to all of them now.  Instead of being able to make one change, they have to be aware of both avatar versions, and modify both.</p>\n<p>Note that copy and paste isn’t always bad.  Often there are very good reasons for not modifying existing code.  It may be code that you don’t control (for instance forking an open source project that is not actively maintained to add a feature that you want), or code that is from another project (or from a legacy portion of the current project that is handled as a different code base).  DRY is not crazy advice though, and if you’re operating within a single codebase you control, this is usually not the best option.</p>\n<h3>Classical Inheritance</h3>\n<h4>Pros</h4>\n<ul>\n<li>Well understood by most programmers, especially those with an academic background</li>\n<li>fits very well when you have multiple things that are variations of a type, with more similarities than differences</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Often used as a silver bullet for all situations</li>\n<li>Not suitable for situations where the objects are more different than similar, or when they are 2 different things at the core with shared behavior</li>\n</ul>\n<p>If you ask a recent Computer Science graduate what the best way to solve the problem of similar behavior across objects is, 99% of them will immediately say <a href=\"https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)\">inheritance</a>.  The “conventional wisdom” that’s taught in most introductory computer science courses is that Object Oriented Programming is the best way to structure programs, and that Object Oriented programming is primarily about inheritance.  Both statements are shaky, but the prevalence of this mindset means that many developers come out of school and look at every problem they see as a nail to hit with their inheritance hammer (this is certainly something I was guilty of when I first graduated).  </p>\n<p>Inheritance isn’t bad.  It’s definitely a tool you want in your toolbox, and shallow hierarchies of objects that inherit from a base class are a great pattern.  90% of “Frameworks” out there (Backbone, React, django, Rails, etc) use some form of inheritance as a way of structuring how users interact with the framework.  But when it is your only tool, things get ugly quickly.</p>\n<p>Inheritance is a bad choice when 2 objects are mostly different.  Inheritance forces objects to share an API, and implies that objects can be used interchangeably.  If the objects aren’t really interchangeable, this can lead to jumping through hoops to maintain a shared API, with a small base class being stretched between 2 or more verbose child classes.  Interfaces especially tend to be bad places to use inheritance, as they tend to require small tweaks and differences when used in different places that aren’t friendly to being passed as configuration properties or over-ridden methods.</p>\n<h3>Configuration</h3>\n<h4>Pros</h4>\n<ul>\n<li>Keeps everything in a single place</li>\n<li>\n<p>Declarative configuration can be easier to read and update than a bunch of logic</p>\n<h4>Cons</h4>\n</li>\n<li>Can get out of hand fast as use cases increase</li>\n<li>Often unclear what defaults should be, bad defaults make common use cases verbose</li>\n</ul>\n<p>We can define separate behaviors for 2 similar things by using a single configurable object. This maximizes code re-use since everything is in one place, and provides an easy to read abstraction over the code for quick changes later.  However, like inheritance it works much better for similar objects with small differences rather than different objects with shared behaviors, and can lead to “configuration creep” when the differences slowly grow, creating a monster configuration and spaghetti code that tries to handle all of the possible configuration options it could be passed.</p>\n<p>A big design point with configuration based strategies is figuring out good defaults.  If an object is designed so that the default case requires minimal to no configuration, and only true edge cases require a lot of configuration, configuration based objects and APIs can be very pleasant to deal with.  But objects with bad or no defaults that require common cases to include extensive configuration eventually lead to bloated projects that are very difficult to debug.</p>\n<h3>Mixins</h3>\n<h4>Pros</h4>\n<ul>\n<li>\n<p>Share individual behaviors or attributes well</p>\n<h4>Cons</h4>\n</li>\n<li>Can break down when the behavior or attribute requires significant knowledge about the object</li>\n</ul>\n<p>In contrast to inheritance and configuration, <a href=\"https://en.wikipedia.org/wiki/Mixin\">mixins</a> work well when objects are significantly different, but share similar behaviors. <code class=\"language-text\">Mixins</code> are the strategy of adding individual methods or properties to an object without implying any relationship between objects that use it.  Mixins are great when used to add a standalone behavior to different objects.  They avoid the problems of inheritance and don’t lock an object into a single API.</p>\n<p>That said, it can often be hard to construct good mixins, since many behaviors require knowledge of the object that is performing the behavior, such as making assumptions about the structure of the objects data.  This either requires the objects implementing the mixin to obey rules about how they’re structured, similar to inheritance, involves offloading significant complexity into the mixin to allow it to handle different formats (making it a potential source of bugs), or it risks naming conflicts if the mixin tries to implement the data storage itself.  </p>\n<h3>Composition</h3>\n<h4>Pros</h4>\n<ul>\n<li>\n<p>Incredibly flexible for handling subtly different behaviors</p>\n<h4>Cons</h4>\n</li>\n<li>Can ramp up complexity, making it difficult to see the whole system</li>\n<li>May end up pushing code re-use problems downwards instead of solving them, leading to many small similar modules</li>\n</ul>\n<p>Often when faced with 2 similar objects or functions, the best solution is to create more objects or functions.  Composition is trendy these days.  On the server side, you have people talking up micro-services and programs composed of small single-purpose modules.  On the client, React is the hottest library around.  The idea is appealing.  Instead of having one big complicated “thing”, I can create a few smaller “things” that I can wrap my mind around, and then get them to work together.  When this works well its great.  React for example, makes testing UIs much easier, since you can unit test individual components in a reliable way.  The problem is that it often moves complexity out of the components and into the architecture.  The hard part becomes figuring out how components fit together, designing interfaces and deciding what should be going where.  Although any individual piece of code may be comprehensible and simple, the system at large is harder to visualize and understand.</p>\n<p>Like mixins, composition often works best when you have 2 or more fairly different “things” that share behavior.  The composition mindset is to treat code like lego blocks that you can snap together in different configurations as needed.  When done well, it allows for useful abstraction, letting developers create complex components out of meaningful sub-components without having to know all the details of the subcomponents.  When done poorly, it can lead to a fractured project with many undocumented dependencies between components.  </p>\n<h2>All Together Now</h2>\n<p>The great thing about these strategies is that none of them is the <strong>right answer</strong>.  All of them have their place, and can even be combined.  At my work we’ve developed code for describing workflows.  The workflows are described using an object that takes a configuration and uses it to layout a series of widgets.  Each widget inherits from a framework, and many of them use mixins to share behavior.  Most of the widgets are composed of several smaller views, and as developers we have pushed back against designs several times in order to allow greater widget re-use.  Each time we need to create a new automator we’ve started by copy and pasting some of the configuration boilerplate (which hopefully we’ll reduce going forward by providing better default behavior as we understand the requirements better). This is one feature of a large software product, and it uses all 6 reuse patterns I’ve described to perform its purpose.</p>\n<p>In the end, what I hope you as a reader get out of this is not that one strategy is good or bad.  Instead I want to provide a way of thinking about the choices around re-use, so that we as developers can talk intelligently about the options and tradeoffs and make the right choice for a given situation.</p>","fields":{"slug":"/2016/01/08/reusable-code-patterns"}}},{"node":{"frontmatter":{"readNext":"jest-first,ll-context,callbacks-to-promises","topics":["Architecture","CSS","Code Quality"],"category":"software-productivity","key":"orthogonality-css-js","title":"Orthogonality and CSS in JS","description":"Separation of concerns in the context of CSS and JavaScript","layout":"post","path":"/2017/01/03/orthogonality-and-css-in-js/","date":"2017-01-03T00:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>One of the realities of the constant change in the web development world is that “best practices” are often hotly contested.  One issue that the front end community doesn’t seem to have come to a consensus on yet is how tightly to bundle JavaScript, HTML and CSS in code.  Should they be bundled and managed completely separately?  Kept in different files and imported together into JavaScript component files?  Or can we remove HTML and CSS files entirely and generate everything in JavaScript? This is a discussion that still comes up all the time in my <a href=\"https://twitter.com/thomasfuchs/status/810885087214637057\">twitter</a> <a href=\"https://twitter.com/TheLarkInn/status/812089065210335232\">feed</a>.</p>\n<p>Many new frameworks that encourage a component based architecture (including React, Vue, and Angular2 <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>) provide affordances for including HTML and CSS directly in JavaScript, but those solutions are not yet used universally.  Many people are still very happy keeping CSS bundled separately.  I have no idea what the <em>best</em> solution is.  But I am interested in how people talk about the problem.  One major argument I have seen from people advocating both sides is that their preferred approach encourages good “separation of concerns”.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">I&#39;m moving from storing my CSS, JS and HTML in different files, to physically putting them on different drives. Keep those concerns separate</p>&mdash; Ben Lesh (@BenLesh) <a href=\"https://twitter.com/BenLesh/status/812092408519413761\">December 23, 2016</a></blockquote>\n<p>I’d like to take a deeper look at this and give some vocabulary that can hopefully help anyone working through discussions on how to manage CSS for components.  I’ll focus specifically on CSS since frameworks tend to be more agnostic to how it is blended with JS than they are about HTML, and on components since that is the main context in which people are arguing for blending of css. For this piece, I’ll consider a component to be a set of HTML, CSS, and JavaScript that combine to form a reusable piece of UI <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.</p>\n<h3>Orthogonality, Cohesion, and Coupling</h3>\n<p><a href=\"http://amzn.to/2hNzQ0t\">The Pragmatic Programmer</a>, one of the best books ever written on Software Engineering, uses the following three terms when talking about “Separation of Concerns”: orthogonality, cohesion, and coupling.  </p>\n<p>Orthogonality is the idea that modules should be written in a way that a change in one module should not require changes in any other module.</p>\n<blockquote>\n<p>Two or more things are orthogonal if changes in one do not affect any of the others. In a well-designed system, the database code will be orthogonal to the user interface: you can change the interface without affecting the database, and swap databases without changing the interface.</p>\n<p><strong>— The Pragmatic Programmer</strong></p>\n</blockquote>\n<p>Cohesion is a measure of how well the internal contents of a module relate to each other. A cohesive module is one with a single well defined purpose, where all code in the module is related to that purpose.  A less cohesive module might have multiple purposes, with pieces of code that are completely unrelated to each other.  <a href=\"https://sites.google.com/site/unclebobconsultingllc/\">Robert C. Martin</a> describes this as each module having “a single reason to change”.</p>\n<p>Coupling is a measure of how dependent different modules are on the internal workings of other modules. In a loosely coupled system, any module can be completely rewritten as long as it exposes the same public interface, without any other modules needing to change.  In a tightly coupled system, changing the internal details of one module may require changes in many other modules.</p>\n<p>In the real world most systems are not purely orthogonal, and their modules are likely not 100% cohesive and uncoupled.  But striving for these goals is a good approximation of what many people mean when they talk about <em>separation of concerns</em>.</p>\n<h3>Conways Law</h3>\n<p><a href=\"http://amzn.to/2hNzQ0t\">The Pragmatic Programmer</a> does touch on another application of orthogonality to software engineering:</p>\n<blockquote>\n<p>Have you noticed how some project teams are efficient, with everyone knowing what to do and contributing fully, while the members of other teams are constantly bickering and don’t seem able to get out of each other’s way?</p>\n<p>Often this is an orthogonality issue. When teams are organized with lots of overlap, members are confused about responsibilities. Every change needs a meeting of the entire team, because any one of them might be affected.</p>\n<p>How do you organize teams into groups with well-defined responsibilities and minimal overlap? There’s no simple answer. It depends partly on the project and your analysis of the areas of potential change. It also depends on the people you have available. Our preference is to start by separating infrastructure from application. Each major infrastructure component (database, communications interface, middleware layer, and so on) gets its own subteam. Each obvious division of application functionality is similarly divided. Then we look at the people we have (or plan to have) and adjust the groupings accordingly.</p>\n<p>You can get an informal measure of the orthogonality of a project team’s structure. Simply see how many people need to be involved in discussing each change that is requested. The larger the number, the less orthogonal the group. Clearly, an orthogonal team is more efficient.</p>\n<p><strong>— The Pragmatic Programmer</strong></p>\n</blockquote>\n<p>The idea is that teams work more efficiently when each can work in its own areas without having to be bogged down by using another group (or individuals) code, and only interacting with those modules through a well communicated interface.  This is also known as <a href=\"https://en.wikipedia.org/wiki/Conway&#x27;s_law\">Conway’s Law</a>, which is often used disparagingly but still stands as a true observation about real life code.</p>\n<blockquote>\n<p>organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations</p>\n<p><strong>— Conway’s Law</strong></p>\n</blockquote>\n<p>Although it usually isn’t phrased quite so explicitly, I believe Conway’s law is often related to what people mean when they discuss separation of concerns in front end development.</p>\n<h3>Boundaries and Interfaces between CSS and JavaScript</h3>\n<p>Let’s look at 2 examples of how CSS can be structured.  We’ll use a “page view counter” as our example. The element will show the number of users who have viewed the page, and respond to click events by showing a modal with the most popular pages on the site.\nFirst, for a more traditional example, I’ll show a <a href=\"http://marionettejs.com/\">Marionette</a> View, with separate CSS. For a more integrated example, I’ll use a React component.</p>\n<h4>Marionette</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//view-counter.js</span>\n\n<span class=\"token keyword\">import</span> Mn <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone.marionette'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> template <span class=\"token keyword\">from</span> <span class=\"token string\">'./view-counter.hbs'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getPageViews<span class=\"token punctuation\">,</span> showModal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../util/page-views'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> ViewCounter <span class=\"token operator\">=</span> Mn<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  template<span class=\"token punctuation\">,</span>\n\n  className<span class=\"token punctuation\">:</span> <span class=\"token string\">'page-view-counter'</span><span class=\"token punctuation\">,</span>\n\n  ui<span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'showPageViewsModal'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'.show-modal-js'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'click @ui.showPageViewsModal'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showPageViewsModal'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">templateContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        pageViews<span class=\"token punctuation\">:</span> <span class=\"token function\">getPageViews</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  <span class=\"token function\">showPageViewsModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"hbs\">\n      <pre class=\"language-hbs\"><code class=\"language-hbs\">{{!view-counter.hbs}}\n\n&lt;span class=&quot;page-view-counter__title&quot;&gt; Page Views: &lt;/span&gt;\n&lt;span class=&quot;page-view-counter__counter show-modal-js&quot;&gt; {{pageViews}} &lt;/span&gt;</code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"css\">\n      <pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">//view-counter.css\n\n.page-view-counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.page-view-counter__title</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> 700<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.page-view-counter__counter</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 3px<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h4>React</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//view-counter.jsx</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> showModal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../util/page-views'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PageViewCounter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>display<span class=\"token punctuation\">:</span> <span class=\"token string\">'flex'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        fontWeight<span class=\"token punctuation\">:</span> <span class=\"token number\">700</span><span class=\"token punctuation\">,</span>\n        padding<span class=\"token punctuation\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        Page Views<span class=\"token punctuation\">:</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>span style <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>padding<span class=\"token punctuation\">:</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>pageViews<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>The React and Marionette examples have set different module boundaries. In the Marionette example, we have defined 3 modules, split by code type.  Ignoring the leaky abstractions in the Marionette boundaries <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, we can say we have 3 modules with clear singular purpose (styling, behavior,  structure) that use class names and  <code class=\"language-text\">templateContext</code> as interfaces.  The handlebars file exposes classes, which the CSS uses to style elements and the JavaScript code uses as attachment points for event handling.  The JavaScript view passes data to the template through templateContext.  In the React code we have defined a single module that exports a component as its only external interface. The module’s single purpose could be defined as “rendering a PageViewCounter”.</p>\n<h3>How do we define module boundaries?</h3>\n<p>If you’re excited to read which of the above examples is the <em>correct</em> module boundary definition, I’m sorry to disappoint you.  It turns out that module boundaries are more of an art than a science.  Let’s consider each of these examples by the criteria we laid out above.</p>\n<p>The Marionette modules are <strong>cohesive</strong>.  Each module is single purpose, with a clear reason why it might change.  The React module is also cohesive, as it describes a single atomic component. However, it has more reasons it might change.  We might change that module because of a change in the look and feel of the site, because of a change in the expected behavior of the click event, or because we’re changing the text inside the component.</p>\n<p>The Marionette modules are not quite <strong>decoupled</strong>.  While this CSS doesn’t nest selectors and we don’t have any explicit dependencies on the HTML structure, it is still written in a way that assumes <code class=\"language-text\">.page-view-counter__title</code> and <code class=\"language-text\">.page-view-counter__counter</code> will be direct children of <code class=\"language-text\">.page-view-counter</code>.  So changing the “internal details” of the Handlebars file by adding an extra element around those children would break the CSS. While the modules are not completely decoupled from each other, they don’t rely on any private details of other modules or global styles and can be used together as a reusable component.  The React module is similarly decoupled from the rest of the system, and as a single module faces no internal coupling issues.</p>\n<p>Both components should be <strong>orthogonal</strong> from the rest of the system, even though the Marionette modules may be less orthogonal internally.  The question of how they meet a Conway’s law style of orthogonality depends on a team.  If your team has designers, and developers separately working on style/structure and behavior, the Marionette version may allow for more efficient division of labor, with communication centering on class based communication.  If you instead have a group of polyglot front end developers who implement mocks from designers across all 3 areas, the React version will instead present a simpler implementation that maps better to your team, with the focus on interfaces across different components.  </p>\n<p>In the end decisions like this are an exercise in understanding context and preferences.  What will make your team productive? You can accept the coupling of the first example in order to gain the benefits of small focused modules.  Or you can take the larger scope of the React component in exchange for keeping all information relevant to a component in one place.  Are you making single developers responsible for a set of components?  Or are they responsible for behavior generally, with design handled by someone else? Make the decisions that work for your project.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href=\"http://amzn.to/2hNzQ0t\">The Pragmatic Programmer</a> is a great book. Much of the vocabulary in this post comes from its Chapter 8, but the whole book is worth a read and is highly recommended.</li>\n<li>CSS Tricks has a good look at the <a href=\"https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/\">pros and cons of CSS in JS</a>.  I focused on theory here, but this is much more hands on about the practical concerns around this debate.  </li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>This is a bit of a generalization.  React provides an abstraction over HTML that replaces hand-written HTML, but doesn’t specify anything for CSS, CSS in JS solutions are simply popular in that community.  Vue and Angular both allow  CSS and HTML to share a file with JS, but CSS can still be handled separately.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>There are some distinctions about CSS in JS vs importing CSS into JS using webpack that I’m not really dealing with here.  This is a post about how to think about these decisions moreso than the specific options for bundling CSS and JS</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>The root HTML element in any Marionette component is always defined implicitly in JavaScript, and Handlebars is an expressive templating language that can handle more than structure.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/01/03/orthogonality-and-css-in-js/"}}},{"node":{"frontmatter":{"readNext":"large-improvements-small-team,ten-things-js,ll-context","topics":["React","Architecture","JavaScript"],"category":"fe-architecture","key":"react-confessions","title":"React Architecture Confessions","description":"The mistakes I made while learning React and why I made them","layout":"post","path":"/2018/02/07/react-confessions/","date":"2018/02/07","dontfeature":null,"isDraft":null},"html":"<p>I’ve been reading through <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin this month<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, and while it is great it has had the unpleasant effect of reminding me of all of the mistakes I’ve made over the past few years while learning and using <a href=\"https://reactjs.org/\">React</a>.  I’ve absolutely loved using React at work, and it has made so many things easier.  But it’s a very unopinionated tool when it comes to structuring applications, and I made a lot of mistakes as I was using it to build some small side projects, and then transitioned a major production app to React from Backbone/Marionette.  These mistakes are all architectural; how I broke out components, communicated between components, and managed data and dependencies within components.</p>\n<p>I thought it would be useful to lay out the architecture mistakes I made as I was learning React, both as a solid reflection exercise for myself, and a warning to those of you who are just starting down the “component based UI” road.</p>\n<h3>My Mistakes</h3>\n<h4>1. Including API calls directly in components</h4>\n<p><strong>What I did wrong</strong>: This is an embarrassing one, but essentially in several places I had components directly fetching data from the server in their constructors or mount calls, and using that information to determine what to render.</p>\n<p><strong>Why I did it</strong>: This was to some extent a lack of planning.  I had all my core “business objects” modeled in some sort of separate object oriented way (either as Backbone or MobX objects) and was able to coordinate syncing them to the server outside of the component layer.  But some data in the system hadn’t been modeled in that way, and when I encountered a need for those components (such as some types of system configurations) instead of stepping back and coming up with a design for modeling those configurations on the front end, I instead sometimes fell back to an ad-hoc API call.   This was also sometimes a result of lazily copying legacy code that had bad patterns while converting components to React, and other developers copying bad patterns when trying to figure out the new React code.</p>\n<p><strong>What I should have done instead</strong>: This could be a whole series of blog posts in itself, but essentially I should have been observing a few principles that would have set off alarm bells.</p>\n<ol>\n<li>Components in a system of any size shouldn’t know about the server. UI Components are about as “low level detail” as it gets in a UI architecture, and should be passed the data they need from a higher level portion of the system.</li>\n<li>If the front end code needs data from the server, it is worth the time to properly model that data in terms of whatever data layer the front end is using.</li>\n</ol>\n<h4>2. Breaking the “props as the component interface” abstraction</h4>\n<p><strong>What I did wrong</strong>: One of the best things about React is the clear interfaces components provide with their list of props.  If properly documented with PropTypes or a type system like Flow or Typescript, it’s easy to look at any React component and tell what data it expects to receive, and therefore how other code is expected to interact with it.  99% of the time, good React components act as a function of <code class=\"language-text\">(props, state) =&gt; UI</code>.  It is however, possible to get access to a component instance, and call functions on them.  There are  rare situations where this is the right way to do things, for instance <a href=\"https://stackoverflow.com/questions/28889826/react-set-focus-on-input-after-render\">focusing an input</a>.</p>\n<p>When I first started creating React components though, I overused that pattern, and accessed the interface directly to access or change its internal state.  I’d have components like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>inputValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SpecialInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>Why I did it</strong>:  Early on I was using this pattern in a way that copied other frameworks I was familiar with.  A parent component would need the state of it’s child component, so it would maintain a reference to the child and query the child about the state.  When I converted Backbone components to React, sometimes I was basically just copy and pasting existing code, and making it work.</p>\n<p><strong>What I should have done instead</strong>:  React doesn’t really encourage parents pulling state from their children.  Instead, if there is state that needs to be shared between components, it should be moved up to the parent component and then the state and an updater function should be passed down to the child component.  So my example above would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SpecialInput\n             value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n             updateValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h4>3. Interacting with 3rd party components directly</h4>\n<p><strong>What I did wrong</strong>: My first year and a half using React, when I was using 3rd party UI components like <a href=\"https://github.com/facebookarchive/fixed-data-table\">react-fixed-data-table</a> I would always use them directly in my components, and take full advantage of their APIs.</p>\n<p><strong>Why I did it</strong>: Because every React library in the world has documentation showing how to use its components directly in code for a variety of different use cases, and nobody ever tells you to put an abstraction around their code</p>\n<p><strong>What I should have done instead</strong>: I should have wrapped the 3rd party libraries in one or more wrapper components.  This has a few advantages:</p>\n<ol>\n<li>When we’re using a UI component like a table in a new place in our App, if I’ve created a wrapper component that has presets for most common settings, I only need to configure the things that are meaningful to this new use case in my app</li>\n<li>Targeted wrapper components like a <code class=\"language-text\">SortableTable</code> component or a <code class=\"language-text\">DropdownWithAutoComplete</code> component are easy to understand to a new reader of the code.  Instead of digging through configuration props, they can read the component name and understand the purpose of that component then focus on the data being passed to it</li>\n<li>When making updates to a library it is much easier to test that the changes are safe if the uses of the library are limited to a few focused components, rather than being spread across a whole application</li>\n<li>Similarly, if we need to switch to a new library, that is much easier with a limited footprint</li>\n<li>It can be easier to create reliable automatic tests using a wrapper component, since you have more control of things like how mocking works and when the component interface changes than you do for 3rd party code</li>\n</ol>\n<h4>4. Importing other parts of the system directly into display components</h4>\n<p><strong>What I did wrong</strong>: The main application I work on uses a messaging system to allow communication between different parts of the system.  It’s a legacy piece from when it existed as a Backbone application, and isn’t a very React-y way of doing things, but that isn’t really a problem.  This situation would be the same for a logging component or a data store.  What isn’t great is that when I need to use the messaging system, I always import it directly into the component file.</p>\n<p><strong>Why I did it</strong>: Direct imports are convenient, the messaging system is a core part of my system, and it seemed like a normal way of accessing it.  I also wasn’t aware of any better way to do it.</p>\n<p><strong>What I should have done instead</strong>:  The disadvantage of direct imports is that they’re harder to test.  If I had passed my messaging system as a prop to whatever component needed it, it would be much easier to test that it was called in the way I expected, without having to mock out the whole messaging system library.  I also could abstract away the whole power of the messaging system, and only provide the specific functionality needed by a component.  When I first began working on this system though, I didn’t know a practical way to do this.  The messenger system was often used by deeply nested components, and it seemed bad to pass it down a whole component tree.</p>\n<p>The answer is to use the <a href=\"https://www.robinwieruch.de/react-provider-pattern-context/\">Provider pattern</a>.  The provider pattern is a way to use React’s context API to provide top level properties from a high level parent component to deeply nested child components.  It is a perfect pattern for providing important high level pieces of your application to low level components without tightly coupling them, while maintaining testability.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<h4>5. Changing too many things at once</h4>\n<p><strong>What I did wrong</strong>: When my team began converting our application from Backbone to React, it was tempting to try and change many things at once.  All the React examples you see online are using Babel/ES6, Webpack, Redux, React Router and tons of other shiny but complicated things.  Trying to implement it all in an existing project<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> can be overwhelming and lead to <a href=\"http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html\">lava layers</a>.  We actually started out with good discipline and converted files to use ES6 first, then added Webpack, then slowly started to convert UI components to React.  Unfortunately as we continued to convert React, we began replacing our Backbone data models with MobX, and began using CSS Modules in some places.  When our team size was reduced last year, we were left in a situation where the same functions were performed in different ways throughout the codebase.</p>\n<p><strong>Why I did it</strong>: It’s easy to see things that could be better in a web application and immediately want to fix them!  Especially if parts of that change seem easier than other changes you’re working on</p>\n<p><strong>What I should have done instead</strong>: I wrote about this <a href=\"https://benmccormick.org/2018/01/07/large-improvements-small-team/\">at length</a> last month, but there really is no substitute for taking things one at a time.  While it’s tempting to think that it will be easier to convert to React if you’re using other “react-y” tools and libraries, your code will ultimately be more maintainable if it is consistent throughout an application.  The only reliable way to do that is to make changes completely before you start making other changes.  It isn’t sexy, and it will leave you at least a little ways off the bleeding edge, but it’s the way to build large, reliable systems and keep them up to date.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>At the time of writing this, it was super on sale on <a href=\"http://amzn.to/2mKoejo\">Amazon</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the Context API that the provider pattern is based on is changing, so I’d isolating out any provider code you write into a reusable component so that it is easy to update later</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or even a new project for that matter!</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/02/07/react-confessions/"}}},{"node":{"frontmatter":{"readNext":"reliability-design,fe-concerns,valuable-code-reviews","topics":["Architecture","JavaScript"],"category":"fe-architecture","key":"perf-design","title":"Designing Front End Apps For Performance","description":"Principles for creating more responsive applications","layout":"post","path":"/2019/01/28/designing-for-perf","date":"2019/01/28","dontfeature":null,"isDraft":null},"html":"<p>Performance is a tricky topic to give generalized advice about.  Moreso than any of the other <a href=\"https://benmccormick.org/2019/01/07/the-concerns-of-fe-architecture/\">front end concerns</a> I discussed in my post at the beginning of the year, it is remarkably tied into the details of what an app is doing and how it is built.  That said, here are some general principles for designing performant applications that I’ve picked up over the years:</p>\n<h4>1. Measure First</h4>\n<p>One of the most tempting things with performance is to start making changes before you have a specific slow measurement to improve.  Maybe you’re writing your code up front with a major focus on performance because you know you’ll need it, or diving in to make changes the first time a user complains about slowness.  Regardless it can be tempting to “performance tune” before you get detailed performance measurements.</p>\n<p>This is problematic for 2 reasons: First, we often don’t know what good enough system performance is until users start using the system.  Secondly, programmers’ data-free intuitions on what parts of a system will be slow tend to be universally awful.</p>\n<p>Measuring different aspects of your system first provides several benefits:</p>\n<ol>\n<li>It gives you micro-benchmarks to improve upon, rather than waiting till “it feels good”</li>\n<li>It lets you determine which parts of the system are actually slow, so you can focus on bottlenecks</li>\n<li>It may help you justify performance focused work to project stakeholders.</li>\n<li>It will allow you to test for regressions later on</li>\n<li>It may reveal that the system performance is actually adequate in most situations, and help you narrow down edge cases to optimize or restrict</li>\n</ol>\n<p>Note that this advice encompasses two often quoted pieces of advice: Donald Knuth’s “Premature optimization is the root of all evil” and Kent Beck’s “Make it work, make it right, make it fast”.  When you only optimize based off of measurements, those things are going to naturally fall into place.</p>\n<p>So what should you measure? On the front end Google’s <a href=\"https://developers.google.com/web/fundamentals/performance/rail\">RAIL model</a> is a good place to start.  For loading you can look at benchmarks like first paint, first meaningful paint, and Time To Interactive (TTI) as useful benchmarks. They also provide similar guidance for input responsiveness and animation. Google is a bit preachy about specific perf benchmarks to my mind, but their analysis of <em>what</em> to measure is fantastic.</p>\n<p>It’s also useful to be able to communicate to backend developers when slowness comes from backend requests, so it’s good to familiarize yourself with the network panel in your favorite browser’s developer tools.  That will let you see how long different requests are taking and help evaluate when a performance problem is actually a network problem.</p>\n<h4>2. Assume the network is slow</h4>\n<p>Related to the end of the last point, one of the defining attributes of front end development is that it always involves a network.  You can think of network requests as a giant chaos machine at the heart of your web application.  Network requests will fail, they will be slow… and they’ll almost always look better to you in local development than they will be to your users, assuming like many developers that you’re operating on reasonably good hardware and decent wifi.</p>\n<p>So the network can be a bit of a performance trap for devs.  While I still advocate measuring first, with the network it’s worth assuming that your local setup is not a good proxy for the user and either finding ways to do better tests or simply expecting that the user will have a slower or flakier connection and designing for that.  Firefox and Chrome are very helpful here, as they will allow you to simulate slower connections from within their network panel, allowing you to experience your app the way your users do.  This is especially important if you’re targeting mobile users.</p>\n<h4>3. You can do things more efficiently or you can do less</h4>\n<p>This is ultimately the heart of performance.  When an operation is slow, it is ultimately because your user’s computer is performing too many operations to fit them all into the time you want them to.  To speed things up, you either have to reduce the number of operations by making your code more efficient, or by removing some work completely.  When people talk about compiled languages being faster than non-compiled languages, this is usually what they mean: compilers are very proficient at optimizing code for efficiency and removing wasted operations.</p>\n<p>On the front end there are several major areas of potential waste: we can send too many things over the network, we can cause the browser to repaint or layout thrash unnecessarily, and we can block critical actions like responding to a users input with less critical actions like re-rendering an item offscreen.  Each of those could merit a series of articles on their own, but are great starting points when thinking about how to improve performance when no one component is obviously slow.</p>\n<p>But it is worth remembering that sometime the only way out is doing less. Maybe you need to delay rendering some parts of the screen, or remove an expensive to render visualization. Maybe you should be using built in components instead of shipping a fancy UI component library.  I have no idea what your use case is, but it’s always worth thinking about what you can do less of.</p>\n<h4>4. Perception matters more than reality</h4>\n<p>Engineers like to deal with data and reality.  My first 3 points played right into that.  Now it’s time to go against the grain.  The truth is that users aren’t pulling up devtools to check and see if your site is slow.  It either feels slow to them or it doesn’t.  And the actual numbers are only part of that perception.  Here are some things that can make fast sites seem sluggish and slow sites seem broken:</p>\n<ol>\n<li>\n<p><strong>Not showing a visual response to user interaction</strong></p>\n<p>When a user clicks a button that triggers a network request, and the system does nothing till that request completes, it will lead to the user thinking the system is slow at best and broken at worst.</p>\n</li>\n<li>\n<p><strong>Freezing the interface while waiting on a response to a previous interaction</strong></p>\n<p>It’s always important to keep the screen interactive while waiting on a request, even if some options are disabled or limited.  The user should be able to access navigation and other standard elements of the interface as normal.  In a scenario where the request is saving data, it may be necessary to add prompts to check whether they want to interrupt the save however.</p>\n</li>\n<li>\n<p><strong>Loading states without any movement or animation</strong></p>\n<p>Sometimes people just want to know that you’re doing something.  Animation communicates that something is happening.  It can be a spinner, a flowing placeholder block, or a progress bar.  The important thing is to show the user “things are happening”.  Of course the more relevant your loading state is the better.  Facebook’s placeholder items in their newsfeed create an illusion of content coming in even faster since the loading state itself helps frame the screen for the user.  Much more effective than a loading spinner that serves to remind the user that they’re having to wait for something.</p>\n</li>\n</ol>\n<h3>Performance Is All About Effort</h3>\n<p>To quote <a href=\"https://hackernoon.com/10-things-i-learned-making-the-fastest-site-in-the-world-18a0e1cdf4a7\">David Gilbertson’s great post on performance</a>:</p>\n<blockquote>\n<p>It’s really easy to make a slow site, all you have to do is not try to make a fast one.</p>\n</blockquote>\n<p>Performance comes down to caring, measuring and investing.  If you set reasonable benchmarks, and track them as you make changes, you’re likely to find ways to achieve them.  If you set unreasonable benchmarks and make the space to work at them, you’re likely to do better than anyone who isn’t trying that hard would expect.</p>\n<p><strong>TL;DR</strong></p>\n<ul>\n<li><strong>Measure First</strong></li>\n<li><strong>Assume The Network is Slow</strong></li>\n<li><strong>You can do things more efficiently or you can do less</strong></li>\n<li><strong>Perception > Reality</strong></li>\n<li><strong>Performance is all about effort</strong></li>\n</ul>","fields":{"slug":"/2019/01/28/designing-for-perf"}}},{"node":{"frontmatter":{"readNext":"react-confessions,fe-concerns,valuable-code-reviews","topics":["Architecture","React"],"category":"fe-architecture","key":"reusable-react","title":"Reusable Code In React: Inheritance, Composition, Decorators and Mixins","description":"How React uses multiple code sharing patterns to create a great developer experience","layout":"post","path":"/2019/02/11/reusable-react","date":"2019/02/11","dontfeature":null,"isDraft":null},"html":"<p>Once you get past the initial complexity it creates by bucking conventions, React is the most developer friendly UI library I have ever used.  A big reason for that is the way it uses and encourages a variety of patterns to share codes and concepts across a code base. Let’s look at how 4 traditional code re-use patterns are used by React and in the React ecosystem, using a simple counter example to explore why each pattern is used.</p>\n<h4>Inheritance</h4>\n<p>Inheritance is a code-reuse technique associated with object oriented programming.  If you’re like me and learned to program in school using Java, it probably is one of the very first Computer Science concepts you learned.  For self-taught JavaScript devs it may be much less familiar.  Inheritance is a pattern for extending an existing class or object with additional methods or data, possibly overriding the implementations of other methods in the process.  A classic example of inheritance looks like this in JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> automobile<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token string\">`This </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> wheels`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> <span class=\"token string\">'car'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> <span class=\"token string\">'bike'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This car has 4 wheels</span>\nbike<span class=\"token punctuation\">.</span><span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This bike has 2 wheels</span></code></pre>\n      </div>\n<p>Inheritance is useful for highly structured objects where you have a lot of shared behavior across similar but slightly different objects and you want to be able to treat all of the objects as interchangeable from an API perspective. This is especially valuable when that interchangeable API is well defined and unlikely to change too much.  However it tends to lead to brittle structures when nested across multiple levels, and is a poor fit when dealing with dissimilar objects that need to share a few behaviors.</p>\n<p>React Components are objects that we want to treat as interchangeable from an outside API perspective, and they have well defined points where behavior may need to be different between components but don’t always need to differ: the lifecycle methods like render, componentDidMount, componentWillUnmount, etc.  Thus React relies on a single level of inheritance as the foundation of its class components.  Class components inherit from React.Component, and only implement the life cycle methods that they’re interested in.  But all of them inherit useable setState and forceUpdate functions, and React can verify that by checking the <code class=\"language-text\">isReactComponent</code> property on the object.</p>\n<p>Here is a basic counter component.  Notice how we don’t have to define <code class=\"language-text\">setState</code> on our <code class=\"language-text\">Counter</code> class.  Instead it inherits it from React.Component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//counter.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-layout\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-display\"</span><span class=\"token operator\">></span>\n                Current Count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn fancy-btn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Outside of this single layer of inheritance for defining Class components, inheritance isn’t used much in React development.  It turns out that better patterns have emerged for sharing application code.</p>\n<p><strong>Inheritance Pattern</strong>: Used sparingly to share common code across React class components.</p>\n<h4>Composition</h4>\n<p>Composition is a code reuse technique where a larger object is created by combining multiple smaller objects.  Composition is in some ways the natural pattern of the browser, as HTML uses it.  We build a table in html, not by adding a bunch of configuration to a single table object, but by combining a <code class=\"language-text\">table</code> tag with <code class=\"language-text\">tr</code>s, <code class=\"language-text\">td</code>s, and <code class=\"language-text\">th</code>s like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Web Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Language<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Rails<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Ruby<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Django<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Flask<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Scala<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Express<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre>\n      </div>\n<p>React has fully embraced the HTML style of composing UI components, and it takes thing to the next level by allowing components to be stateful and pass values down into children.  For instance, if we wanted to split the counter component above into a separate control and display, perhaps using a standard set of UI components we could do it by extracting <code class=\"language-text\">FancyLayout</code>, <code class=\"language-text\">FancyButton</code> and <code class=\"language-text\">FancyDisplay</code> elements out into their own components and then composing them back into a single counter component.  This type of thing is useful for creating and reusing standard UI elements, and might look something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// UI components defined elsewhere</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyLayout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-layout\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyDisplay</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-display\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button\n    className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`fancy-layout </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>className<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// counter.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n                Current Count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyButton\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>In this example we now have 4 components instead of one.  Three of them are laser-focused on defining a specific element type, and are “display only” with no logic of their own.  The 4th contains all of our logic and defines how the display pieces come together.</p>\n<p>In the seminal 1994 book <a href=\"https://amzn.to/2WDhncv\">Design Patterns</a> the authors argue that composition should be strictly preferred over inheritance where possible because it creates less tightly coupled objects, and encourages designs where objects are small, focused and readable.  Composition also lets us hide complexity inside of child objects, because parent components only have to concern themselves with the APIs exposed by those child objects.  One of the keys to React’s success has been making this type of composition clean and painless by encouraging strong component interfaces and utilizing JSX to provide a comfortable syntax for describing composed UIs while keeping all component concerns in the same place<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p>It is worth noting that after this refactor, our counting logic is still tightly tied to the layout of our counter component.  Let’s explore 2 more patterns that can help us extract our logic from the display completely.</p>\n<p><strong>Composition Pattern</strong>: The core pattern for separating concerns while creating complex UIs with React.</p>\n<h4>Decorators</h4>\n<p>Decorators are a pattern for editing an instance of a class to give it additional behaviors than it had previously.  In contrast to inheritance, decorators are not part of the class definition, but are modifications to the class at run time to allow a subset of objects to have additional data or behavior <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  In classic object oriented programming, this was implemented by having a decorator class that shared an interface with the class to be decorated, and called its methods through to that class, with additional behavior before or after the pass-through.  The React community has generally implemented this pattern slightly differently, by writing functions that take a component class and return a new component class that calls through to the original component, possibly with additional props passed in, extra components rendered around it, or conditional logic that causes it not to render in some cases.  The React community generally refers to this pattern as <a href=\"https://reactjs.org/docs/higher-order-components.html\">Higher Order Components</a>.</p>\n<p>Here’s an example of using a higher order component called <code class=\"language-text\">withCounter</code> to separate out the display and logic portions of our Counter component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withCounter</span> <span class=\"token operator\">=</span> WrappedComponent <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token punctuation\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> increment<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ComponentWithCounter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// counter.js</span>\n\n<span class=\"token comment\">// this is a display only version of the component with no logic</span>\n<span class=\"token comment\">// very easy to test and simple to change</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n                Current Count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyButton\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// this adds the logic back to the display only version</span>\n<span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">withCounter</span><span class=\"token punctuation\">(</span>CounterDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Now we’ve taken our refactored <code class=\"language-text\">Counter</code> and split it into 2 more pieces.  The display logic remains in a simplified <code class=\"language-text\">CounterDisplay</code> component that doesn’t have any state or business logic of its own.  <code class=\"language-text\">CounterDisplay</code> takes 2 new props, <code class=\"language-text\">count</code> and <code class=\"language-text\">increment</code> that allow it to implement the counting logic without having to know how it is implemented.</p>\n<p>Meanwhile, we split the counting logic out into a Higher Order Component.  <code class=\"language-text\">withCounter</code> takes a React component and wraps it with another component that is solely responsible for keeping track of counts and providing the increment function.  In this case that is our CounterDisplay component, but if we decided we wanted to also have fancy counters that incremented when the user clicked a checkbox or hovered over a box or typed the word increment, it would be easy to reuse this logic.</p>\n<p>Higher Order Components helped many React libraries like Redux and React Router define elegant APIs when they first came on the scene, but they’ve always been a power user technique.  There are many ways to screw them up, and although they allow for theoretical loose coupling, they still require a certain level of shared understanding between the decorator and decoratee, including knowing what props to make available, whether any methods have to be proxied through to the decorated component, and more.  The community as a whole has tended to favor render props over the past year<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, and now looks poised to move towards our 4th pattern: mixins.</p>\n<p><strong>Decorator Pattern</strong>: Used to provide a nice interface for separating out logic shared by multiple components and centralizing it.</p>\n<h4>Mixins</h4>\n<p>The newest pattern that React has added to its bag of code reuse tricks is also one of the oldest.  In older versions of React there was a feature called “mixins” that was <a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">later deprecated due to its ease of mis-use</a>.  “Mixins” are gone now, but the “Mixin pattern” is back!  React is in the process of introducing <a href=\"https://reactjs.org/docs/hooks-intro.html\">hooks</a>, a new way of doing mixins.</p>\n<p>So first, what is a mixin?  It is yet another way of defining shared behavior onto a class, in this case providing methods and/or data that are “mixed in” to one or more classes.  It differs from inheritance because a class using a mixin doesn’t have to use the mixin as a parent class, and the class may use several mixins at once.  Mixins that are used together in one class may not be used together in another.  Mixins also different from the decorator pattern, because the mixin is part of the class definition, not something that is applied dynamically later.</p>\n<p>Mixins are useful when you have classes with different purposes that shouldn’t share an inheritance tree but do have some shared behavior.  In practice though they have historically been tricky to use because it is easy to tightly bind mixin code to the implementation of the code that it is mixed into.  Poorly implemented Mixins can result in naming collisions, inflexible code, and hard to trace errors.</p>\n<p>React Hooks may not look like mixins, since they are used in a function, not a class.  But they fill the exact same role as traditional mixins, while avoiding some of the footguns (no naming collisions!).  Let’s look at an example from Dan Abramov’s blog post <a href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">introducing hooks</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This is a hook that provides the width of the current window to a React component, updating each time the window is resized.  You would use it in practice like this example of a header bar that replaces its menu items with a hamburger menu on smaller screens:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> windowWidth <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> showHamburgerMenu <span class=\"token operator\">=</span> windowWidth <span class=\"token operator\">&lt;</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Logo<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>showHamburgerMenu <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>HamburgerMenu<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>MenuItems<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This usage is different from a normal helper function, because it enhances the component; because this is using React’s state code within the hook, this component will automatically update when needed.  So it is a way of reusing component behavior like Higher Order Components.  But we lose a lot of the disadvantages of HOCs.   <code class=\"language-text\">useWindowWidth</code> and <code class=\"language-text\">Header</code> are extremely loosely coupled.  <code class=\"language-text\">useWindowWidth</code> doesn’t know anything about the header bar structure or logic, or the rules for when things should show.  It is only providing information.  At the same time, if we refactored it to get the window size in some other way, or to throttle updates, we wouldn’t have to change anything about <code class=\"language-text\">Header</code>, since all it knows is that <code class=\"language-text\">useWindowWidth</code> will occasionally provide it an updated windowWidth.</p>\n<p>The functional style makes this look different than a traditional object oriented “mixin pattern” example, but it is using the same concepts and solving the same problems.  This way of doing things has advantages; because it is “just a function” that gets called, we never need to worry about it having a naming collision with a different class method, or having to be aware of the structure of the outer component.  If it needs component specific information, we can just pass it an argument.</p>\n<p>With Hooks, we can create a much cleaner version of our Higher Order Component example from the decorators section.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// defined in a library file</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIncrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>initial <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>val <span class=\"token operator\">=></span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// counter.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n            Current Count<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>FancyButton\n            className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>As with decorators we’ve extracted the logic in a reusable form, but we’ve done so with much less boilerplate.  I’ve removed the intermediate <code class=\"language-text\">CounterDisplay</code> here, because if we’re not using it for anything else, it is easy enough to just include the hook directly in the definition.  But if we wanted, we could easily use that <code class=\"language-text\">CounterDisplay</code> component with a hooks enabled wrapper component:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CounterDisplay count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> increment<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>Mixin Pattern</strong>: Hooks use a variation on the Mixin pattern to allow sharing related behavior and data between unrelated function components easily.</p>\n<h3>Summary</h3>\n<p>If I took one thing out of this analysis personally, it was a renewed appreciation for considering the needs of a situation and finding the right approach for the job, rather than trying to fit every problem to my favorite solution.  I’m over 2000 words and I haven’t even addressed all the different strategies React and the React community use for code re-use. <em>Sorry render props</em> 😢.   So next time you run into an architecture problem, consider a few different solutions and their tradeoffs.</p>\n<p><strong>TL;DR</strong></p>\n<p>React uses a variety of patterns for code reuse.\n<strong>Inheritance Pattern</strong>: Used sparingly to share common code across React class components.\n<strong>Composition Pattern</strong>: The core pattern for separating concerns while creating complex UIs with React.\n<strong>Decorator Pattern</strong>: Used to provide a nice interface for separating out logic shared by multiple components and centralizing it.\n<strong>Mixin Pattern</strong>: Hooks use a variation on the Mixin pattern to allow sharing related behavior and data between unrelated function components easily.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Clunky JS based interfaces for specifying child components are visually difficult to scan and understand, while solutions that use external template files spread logic about a single component to multiple files, making it harder to keep everything in the developers head.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the decorator pattern is not the same thing as the TC39 proposal to <a href=\"https://github.com/tc39/proposal-decorators\">add a decorator syntax to JavaScript</a>, or the TypeScript feature of the same name.  Both are related to modifying class behavior, but the mechanisms are not the same.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Render props ultimately qualify as an advanced composition technique and so didn’t get their own heading here, but they’re definitely worth understanding.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2019/02/11/reusable-react"}}}],"topic":"Architecture"}}