{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"react-component-styles,callbacks-to-promises,mobx-first","topics":["React"],"category":"frameworks","key":"what-are-hocs","title":"What are Higher Order Components?","description":"An explanation of React's higher order components","layout":"post","path":"/2016/12/14/what-are-higher-order-components","date":"2016-12-14T14:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>If you spend much time at all reading through articles and documentation around React, you’re likely to run into the term “Higher Order component”, often abbreviated HoC.  Since it is often used without context in React discussions, and is not a particularly intuitive term for many (most?) developers, I thought it was worth publishing a quick and simple explanation of what Higher Order Components are.</p>\n<p>Higher Order Components are functions that take a React Component, and return a React Component.  The “higher order” phrasing is borrowed from the term “higher order function”, a more widely used term in Mathematics and Computer Science that refers to a function that either takes one or more functions as an argument, returns a function, or does both.  Since React Components can be thought of as functions that take data and return ui elements, the naming and usage make sense.  Let’s look at an example of a higher order component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ExtraPropsComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>WrappedComponent<span class=\"token punctuation\">,</span> componentType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtraPropsChild</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        importantFunction<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n        componentType<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This is a pretty basic HoC that takes a component and returns a new version of that component that will always be passed 2 extra props <code class=\"language-text\">importantFunction</code> and <code class=\"language-text\">componentType</code>. One is statically generated in this case, but the other is dynamically passed in when the component is generated.  The ability to pass dynamic content in when defining the component is one of the key wins of HoCs in the real world.  For instance, this is how Redux’s <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect</a> function works.</p>\n<p>Note that this is different from a normal React Component that renders a subcomponent passed as an argument like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> componentType <span class=\"token operator\">=</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtraPropsComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> ChildComponent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        importantFunction<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n        componentType<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> props<span class=\"token punctuation\">.</span>ChildComponent<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ChildComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>These 2 examples are roughly equivalent for this case, but accomplish things in different ways.  The HoC is a function that takes a component and data when it is created and generates another component.  The normal component example is a component that takes a component as a property and accesses a variable that is in its scope at creation time to generate the element tree that it renders.  The HoC is more flexible as you could theoretically create multiple versions of a component using the single HoC.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'fancy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CrazyButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'crazy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BoringButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'boring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>For the equivalent functionality without using an HoC, you would have to define the whole component for each case.</p>\n<h3>Higher Order Components in the real world</h3>\n<p>I’ve already mentioned connect from <a href=\"https://github.com/reactjs/react-redux\">react-redux</a> as an example of a higher order component.  Other popular libraries that use HoC as part of their APIs include:</p>\n<ul>\n<li><a href=\"http://formidable.com/open-source/radium/\">Radium</a>: a library for inline styles in React that uses a higher order component to transform in-line styles added to a component into a more robust-css like system</li>\n<li><a href=\"https://github.com/ReactTraining/react-router\">React Router</a>: a routing library for React that uses <code class=\"language-text\">withRouter</code> a HoC that injects access to the router into components that it wraps</li>\n<li><a href=\"https://facebook.github.io/relay/\">Relay</a>: Facebook’s library for connecting to GraphQL APIs includes Relay.Container, a HoC that allows developers to declare the data requirements for a component</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>This was intentionally a very high level look at Higher Order Components.  If you want to go deeper, <a href=\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.yhbug3ohe\">this medium article</a> is a great deep dive into all the use cases they allow.</li>\n<li>If you’re interested in using HoCs in your own code base, <a href=\"https://github.com/acdlite/recompose\">recompose</a> is a utility library for making the syntax around defining and using them painless</li>\n</ul>","fields":{"slug":"/2016/12/14/what-are-higher-order-components"}}},{"node":{"frontmatter":{"readNext":"friday-links-11-10-17,ten-things-js,adequate-talk","topics":["React"],"category":"opinion","key":"friday-links-11-10-17","title":"Weekly Links: November 10th 2017","description":"React, Social Media, and Comments","layout":"weekly-links","path":"/2017/11/10/friday-links/","date":"2017/11/10","dontfeature":null,"isDraft":null},"html":"<p>I started this new thing last week, <em>Friday Links</em>.  There’s a <a href=\"https://goo.gl/forms/MwEtFrDwFWzXSRv13\">feedback form</a> if you’re a regular reader and want to tell me what you think of it.  Otherwise, enjoy the links!</p>\n<h3>JavaScript And The Web</h3>\n<p> <a href=\"https://medium.com/javascript-inside/slaying-a-ui-antipattern-in-react-64a3b98242c\">Slaying a UI Antipattern in React – JavaScript Inside</a> - This is an interesting case study of how to work through an architectural problem using React.  I love seeing posts like this that take real world scenarios (I deal with this case of having data that might be in one of several loading states all the time), and identify re-usable patterns for solving them.</p>\n<p> <a href=\"https://jakearchibald.com/2017/netflix-and-react/\">Netflix functions without client-side React, and it’s a good thing - JakeArchibald.com</a> - A nice look at what Netflix’s experience removing client-side react from their landing page means and doesn’t mean.  I’m going to be really curious to see how the JS community gets better at enabling fast initial experiences while still having full rich interactivity when the users need it.</p>\n<h3>Programming Tools and Practices</h3>\n<p><a href=\"https://prettier.io/\">Prettier</a> - Prettier put out a new release this week and now supports Markdown as well as JavaScript, TypeScript, CSS, and GraphQL.  It has been my favorite new tool of 2017, solving a problem I didn’t know I had: the mental overhead of constantly reformatting my own code.  </p>\n<p><a href=\"http://amzn.to/2zvm12Z\">The Pragmatic Programmer - Andy Hunt &#x26; Dave Thomas</a> - Not a new book at all, but I like to recommend it at every opportunity.  It’s my favorite resource on the practice of Software Engineering and well worth checking out if you’ve never read it.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://www.economist.com/news/briefing/21730870-economy-based-attention-easily-gamed-once-considered-boon-democracy-social-media\">Once considered a boon to democracy, social media have started to look like its nemesis - The Economist</a> - This is a wide-ranging take on the downsides of social media with a focus on it’s deleterious effects on our political systems.  If you’re on social media and/or you care about the future of politics in your place of living, it is worth a read.  </p>","fields":{"slug":"/2017/11/10/friday-links/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-12-08-17","title":"Weekly Links: December 8th 2017","description":"React RFCs, Advanced React Componetns, and Moderating Internet scale content","layout":"weekly-links","path":"/2017/12/08/weekly-links-12-08-17/","date":"2017/12/08","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://reactjs.org/blog/2017/12/07/introducing-the-react-rfc-process.html\">Introducing the React RFC Process | React Blog</a> - React is now using a public process for proposing and designing new features, starting with a new context API.</p>\n<p><a href=\"https://blog.neufund.org/why-we-have-banned-default-exports-and-you-should-do-the-same-d51fdc2cf2ad\">Why we have banned default exports in Javascript and you should do the same | Krzysztof Kaczor</a> - This lines up pretty well with my own experience when it comes to native JS modules.  The named exports are pretty much always better than the default ones.</p>\n<p><a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns | Egghead.io/Kent C. Dobbs</a> - This is a new Egghead course on React Component patterns, and is the best “advanced” React resource I’ve seen.  If you’re a React developer, you should either watch it this weekend while it is still free, or pay up to Egghead (it will be behind their subscriber wall starting Monday).  He also released a <a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">beginner level React course</a> this week that will remain free.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://stratechery.com/2017/the-pollyannish-assumption/\">The Pollyannish Assumption | Stratechery</a> - Ben Thompson gives a pretty good breakdown here of the problems companies face moderating Internet scale content.  Human beings capable of both greater heights and darker depths than we like to think.  </p>","fields":{"slug":"/2017/12/08/weekly-links-12-08-17/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-11-18","title":"Weekly Links: March 11th","description":"Classic React Links","layout":"weekly-links","path":"/2018/03/11/weekly-links-03-11-18/","date":"2018/03/11","dontfeature":null,"isDraft":null},"html":"<p>Rather than posting random stuff that popped up this week like usual, I wanted to instead post a set of “classic” links instead. The theme this week is Learning React.  Here are some of the links that helped me to learn different React concepts as I was first tackling it.  Note that these are links that helped me learn the concepts behind different parts of the React ecosystem.  Some are intro level, while some assume basic familiarity with the concepts they discuss.</p>\n<h3>The Motivation Behind React</h3>\n<p><a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking In React</a> - It’s strange, but I never expect the official docs for a project to be the best explanation of their purpose.  Official documentation tends to lean towards the “how” rather than the “why”, and the motivations of the maintainers aren’t always the motivations of the community anyway.  But this article from the React docs remains the best explanations of the problems that React is solving as well as the way that it solves them.</p>\n<p><a href=\"https://rauchg.com/2015/pure-ui\">Pure UI</a> - Even moreso than <em>Thinking in React</em>, this 2015 article nails the paradigm shift that React represented.  The power of UI as a function of data has been the biggest change I’ve experienced in my career building UIs, and this article was like a message in the bottle from the future when it was first written 3 years ago.</p>\n<h3>Flux, MobX and Redux</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux | Lin Clark</a> - This was a nice early run through of the Flux concepts.  Lin Clark is one of the best “front end explainers” out there, and she does a good job here.</p>\n<p><a href=\"https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8\">The Fundamental Principles Behind MobX | Michael Weststrate</a> - Like most of the other links here, this is a theory link, not a practical introduction.</p>\n<p><a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting Started With Redux | Dan Abramov on Egghead.io </a> - Like <em>Thinking with React</em>, this is a great introduction to a library that starts with the problems to be solved and shows how a new library solves that problem, rather than simply telling you what a tool does.</p>\n<p><a href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\">You Might Not Need Redux | Dan Abramov</a> - Another helpful article for understanding what Redux is and isn’t solving for, helpful if you’re trying to decide whether to include it in a project.</p>\n<h3>React Patterns</h3>\n<p><a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns | Kent C Dobbs on Egghead.io</a> - This is my one paid content link, but its so good that its worth sharing.  This was a fantastic course that covers patterns like Higher Order Components, Render props and more.  It discusses both the implementation concerns and motivation behind each.</p>\n<h3>Future Stuff</h3>\n<p><a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\">React’s New Context API | Kent C Dobbs</a> - This is fairly recent, but Kent Dobbs gave a great explanation of React’s new context API</p>\n<p><a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16 | React Blog</a> - I posted this last week as well, but this is a great inspirational talk on where React is going next.</p>","fields":{"slug":"/2018/03/11/weekly-links-03-11-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-16-18","title":"Weekly Links: March 16th","description":"React Context, Mobx, and Rust","layout":"weekly-links","path":"/2018/03/16/weekly-links-03-11-16/","date":"2018/03/16","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://hph.is/coding/bitmasks-react-context\">Bitmasks and the new React Context API | Haukur Hallvarðsson</a> - A nice rundown of one aspect of the new React Context API that is likely to be familiar to low-level developers but will probably be a new idea to many front end devs: using bitmasks to test a condition.</p>\n<p><a href=\"https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\">MobX 4: Better, simpler, faster, smaller | Michel Weststrate</a> - MobX continues to be a fantastic state management libary and this update looks like it will make it even better.</p>\n<p><a href=\"https://engineering.linkedin.com/blog/2018/03/how-we-built-the-same-app-twice-with-preact-and-glimmerjs\">Lighter than Lightweight: How We Built the Same App Twice with Preact and Glimmer.js | LinkedIn Engineering</a> - This is a really cool real world comparison of 2 JavaScript frameworks, where they actually built the same app in 2 separate frameworks, with core contributors to each framework involved in the implementation.  To be honest, my main takeaway is that among modern frameworks “framework performance” can be a bit overrated, and not a great reason to choose a specific library or framework, as compared to factors like developer experience, community, and fit with the existing codebase.</p>\n<h3>Rust And WebAssembly</h3>\n<p>I’ve been thinking about taking the time to learn a new language for the first time in a while.  I think WebAssembly and Rust transpiled to WebAssembly in particular are going to become an important part of high performance JavaScript applications and frameworks/libraries.  So I’m starting to check it out.  Here are a few  recent relevant links</p>\n<p><a href=\"https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/\">Making WebAssembly better for Rust &#x26; for all languages – Mozilla Hacks – the Web developer blog</a> - This outlines a plan to improve the developer experience of what I think is the future of WebAssembly in most web apps: interop with JavaScript to improve performance of open source libraries and some core performance sensitive code.</p>\n<p><a href=\"https://github.com/atom/xray\">GitHub - atom/xray: An experimental next-generation Electron-based text editor</a> - A non-webassembly example of using Rust selectively to increase performance of an application built primarily using web technologies.</p>\n<p><a href=\"https://blog.rust-lang.org/2018/03/12/roadmap.html\">Rust’s 2018 Roadmap | Rust Blog</a> - A good rundown of the areas of focus for Rust this year.  I’m particularly interested in their target use cases, since 3 of them (CLI tools, Network Services and WebAssembly/the web) are things that I have built before and will build again.</p>","fields":{"slug":"/2018/03/16/weekly-links-03-11-16/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React","Computer Science"],"category":"opinion","key":"weekly-links-03-02-18","title":"Weekly Links: March 2nd","description":"The future of React, Makefiles, state machines and blindness","layout":"weekly-links","path":"/2018/03/02/weekly-links-03-02-18/","date":"2018/03/02","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16| React Blog</a> - This is a preview of where React is going next.  I’m still processing through this, and how I can use it, but Suspense seems like something that will make dealing with async data much easier in React.  Loading states are something I deal with all the time, and having cleaner primitives for expressing them will be a big win.</p>\n<h3>Programming Tools</h3>\n<p><a href=\"http://www.olioapps.com/blog/the-lost-art-of-the-makefile/\">The Lost Art of the Makefile |Jesse Hallett</a> - An interesting case for using Makefiles to manage modern JavaScript builds on projects that don’t need the overhead of webpack.  I don’t think this is going to be the next trend in JS, but I am interested to see where the JS world leans next when it comes to task automation.  When I started using JS, I saw people using Make or tools from other language ecosystems to build projects.  Grunt and Gulp really changed that and moved folks towards using the node ecosystem for task automation.  Now the community seems to have settled on webpack for build related tasks, and npm scripts for everything else.  I’m all good with webpack for builds, it’s complicated but powerful.  But npm scripts are frustrating as a task automation solution.  There’s no ability to comment, and long operations in nested JSON strings are a bit unwieldy.  I’d love to see some standardization on something more like make that allows comments and powerful task composition.</p>\n<h3>Computer Science In JS</h3>\n<p><a href=\"http://raganwald.com/2018/02/23/forde.html\">Forde’s Tenth Rule, or, “How I Learned to Stop Worrying and ❤️ the State Machine” | Reginald Braithwaite</a> - A really nice explanation of state machines, and how they can be used in JavaScript development.  The article is written at a very conceptual level and really explains the topic well.  I was thinking afterwards about how the state machine concepts reminded me of Redux, and fortunately I found another link that expanded on that connection…</p>\n<p><a href=\"https://medium.freecodecamp.org/how-to-model-the-behavior-of-redux-apps-using-statecharts-5e342aad8f66\">How to model the behavior of Redux apps using statecharts | Luca Matteis</a> - I hadn’t heard of statecharts before reading this, but they look like a really interesting tool for talking about large systems.  I’d be really curious to play with the redux middleware for automatically generating them and see if the artifacts it produces are useful.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://mobile.nytimes.com/2018/02/23/opinion/eyesight-going-blind.html\">Am I Going Blind? | Frank Bruni</a> - This is absurdly well written, and it hit me personally since the idea of going blind has always been a personal fear of mine.  I think everybody has their one bad thing that they irrationally fear will happen to them and this is mine.  The article was good perspective in mutliple ways, reminding me how blessed I am and how resilient humans (and our bodies) are.  (Via <a href=\"https://daringfireball.net/linked/2018/02/23/bruni-going-blind\">Daring Fireball</a>)</p>","fields":{"slug":"/2018/03/02/weekly-links-03-02-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-16-30","title":"Weekly Links: March 30th","description":"ES Modules, Command Line tools, and Privacy","layout":"weekly-links","path":"/2018/03/24/weekly-links-03-11-30/","date":"2018/03/30","dontfeature":null,"isDraft":null},"html":"<p>A big pile of links for Easter weekend.  Happy Easter everybody!</p>\n<h3>JavaScript and the Web</h3>\n<p><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES modules: A cartoon deep-dive | Lin Clark</a> - As usual, Lin Clark offers a great approachable explanation of a complex topic.  Here she gets into the weeds of how ES modules are implemented in browsers, and how the module syntax differs from CommonJS.</p>\n<p><a href=\"http://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/\">Redux - Not Dead Yet! | Mark Erickson</a> - A good explainer of where Redux fits into the React landscape today.</p>\n<p><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\">Update on Async Rendering | Brian Vaughn</a> - Important read for React devs.  There are changes coming to the core lifecycle methods.</p>\n<p><a href=\"https://furbo.org/2018/03/28/system-fonts-in-css/\">System Fonts in CSS | Craig Hockenberry</a> - I’m always happy to see improvements to the default font situation on the web<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.   I don’t love relying on custom loaded fonts for this blog and I wish there were more high quality fonts that were reliably available without resorting to loading your own.  This particular feature doesn’t pass the “caniuse test” for now though; Chrome and Safari support it, but there’s nothing from Edge or Firefox yet.</p>\n<h3>Command Line Tips</h3>\n<p><a href=\"https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/\">git log – the Good Parts | Ian Miell</a> - A good rundown of some of the things you can do with git log.  It misses that you can use <code class=\"language-text\">--author</code> to filter by the committer though, which is a flag I use all the time when I know who did a specific piece of work but am vague on what actually changed.</p>\n<p><a href=\"https://rachelbythebay.com/w/2018/03/26/w/\">Why I usually run ‘w’ first when troubleshooting unknown machines</a> - Here’s a useful command line command I didn’t know about.  <code class=\"language-text\">w</code> shows you a list of users currently on a machine and what they’re doing.</p>\n<h3>Code Style, Documentation and Code Reviews</h3>\n<p><a href=\"http://bradfrost.com/blog/post/just/\">“Just” | Brad Frost</a> - A good reminder to not assume everybody has our accumulated knowledge.  I’ve found a good cure for this is to spend some time working with programming tools I have no experience in.  Trying to install gems in Ruby for instance always reminds me how confusing npm was when I started using it.</p>\n<p><a href=\"http://blog.timoxley.com/post/47041269194/avoid-else-return-early\">Avoid Else, Return Early | Tim Oxley</a> - I’ve found this pattern of short-circuiting functions to produce very readable code.  I’ve also seen these referred to as <em>guard statements</em>.</p>\n<p><a href=\"https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/\">Putting the I back in IDE: Towards a Github Explorer| Jane Street Tech Blog </a> - This is an interesting idea, although I was a bit weirded out by the idea of commenting in the source files to leave code review comments.  The idea of deeper editor integration is excellent though, and I’d love to see Github evolve further in this direction with their Atom plugin.</p>\n<h3>Privacy in the news</h3>\n<p><a href=\"https://arstechnica.com/information-technology/2018/03/facebook-scraped-call-text-message-data-for-years-from-android-phones/\">Facebook scraped call, text message data for years from Android phones | Ars Technica</a> - It’s been a bad few weeks for Facebook.  You can maybe get away with trying to get everyone’s data, and you can maybe get away with being careless with user data, but when you’re as big as Facebook is, you absolutely can’t do both.</p>\n<p><a href=\"https://www.theverge.com/2018/3/28/17172548/gdpr-compliance-requirements-privacy-notice\">How Europe’s new privacy rule is reshaping the internet | The Verge</a> - GDPR is a big deal.  If you’re involved in web products that store user information, you should understand this.  I’m excited to see meaningful regulation on privacy issues that seems to be reasonably well written.</p>\n<h3>Humor</h3>\n<p><a href=\"https://www.johndcook.com/blog/2018/03/28/cow-astrology/\">Cow Astrology | John Cook</a> - When a mathematician examines the implications of astrology’s claims.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Or I would always be happy if there was ever anything to be happy about.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/03/24/weekly-links-03-11-30/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-04-07-30","title":"Weekly Links: April 7th","description":"React Lifecycles, Refactoring, Uber and Seagulls","layout":"weekly-links","path":"/2018/04/07/weekly-links-04-07-18/","date":"2018/04/07","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://twitter.com/dan_abramov/status/981712092611989509\">React Lifecycle Diagram | Dan Abramov</a></p>\n<p>Dan shared a really great illustration of the React lifecycle methods on twitter that can help you internalize how they work if you’re unfamiliar.</p>\n<p><a href=\"https://martinfowler.com/articles/201803-refactoring-2nd-ed.html\">Announcing the Second Edition of “Refactoring”</a></p>\n<p>The upcoming second edition of <a href=\"https://amzn.to/2IzhmhS\">Refactoring</a> will have it’s code examples written in JavaScript.  I’d love to see more architecture-level books written for JavaScript developers.  I don’t think we have great definitive resources for those questions yet, and rewriting a classic with JS examples is a great first step.</p>\n<p><a href=\"https://developers.google.com/web/updates/2018/04/present-web-pages-to-secondary-attached-displays\">Present web pages to secondary attached displays | Google Developers</a></p>\n<p>This is a small thing, but I thought Chrome’s experimental support for external display controls was cool, and may eventually lead to me actually using one of the many JS based presentation tools instead of Keynote.</p>\n<h3>Tech</h3>\n<p><a href=\"https://www.citylab.com/transportation/2018/03/former-uber-backup-driver-we-saw-this-coming/556427/\">Former Uber Backup Driver: We Saw This Coming | Citylab</a></p>\n<p>May be some sour grapes here, but the piece raises some interesting questions about the transition from our current state to a self-driving car future, and whether a <a href=\"https://www.caranddriver.com/features/path-to-autonomy-self-driving-car-levels-0-to-5-explained-feature\">Level 3</a> self driving car is even a feasible goal.</p>\n<p><a href=\"https://www.joelonsoftware.com/2018/04/06/the-stack-overflow-age/\">The Stack Overflow Age | Joel Spolsky</a></p>\n<p>Stack Overflow had a huge influence on my early days learning JavaScript.  I love seeing the history here from one of the founders.</p>\n<h3>Humor</h3>\n<p><a href=\"https://www.facebook.com/photo.php?fbid=10156523301334739&#x26;set=a.10150885243919739.471335.523144738&#x26;type=3&#x26;theater\">Returning To The Empress Hotel | Nick Burchill (Facebook)</a></p>\n<p>One of the funnier stories I’ve read on the internet in a while.</p>","fields":{"slug":"/2018/04/07/weekly-links-04-07-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-10-18","title":"Weekly Links: June 10th","description":"React Complexity, Proxies, and more Microsoft-Github reactions","layout":"weekly-links","path":"/2018/06/10/weekly-links-06-10-18/","date":"2018/06/10","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://daverupert.com/2018/06/the-react-is-just-javascript-myth/\">The React is “just” JavaScript Myth | Dave Rupert</a></p>\n<p>I’ve been thinking a lot about the reasons that JavaScript development is perceived as intimidating and over-complicated the past few weeks.  Might have a full post on that soon, but for now, there’s a good point here.</p>\n<p>React is relatively simple at it’s core, but it’s difficult to find examples of using it in the wild, that don’t require you to learn Webpack/Babel/npm at minimum, and many “starting points” will also toss in Redux/React Router/Jest/etc as well.</p>\n<p><a href=\"https://medium.com/@mweststrate/mobx-5-the-saga-continues-4852bce05572\">MobX 5: the saga continues… | Michael Weststrate</a></p>\n<p>MobX is the first major library I’ve seen to take advantage of proxies to give normal looking JavaScript objects/arrays magic powers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  This sort of “just make it work in the prettiest way possible” API is the type of thing that tends to produce really cool results as long as it works correctly 100% of the time, but becomes a huge pain as soon as it’s flaky.  I’ve never had any problems with MobX after using it for 2 years, so I’m hopeful seeing them as an early adapter here.  Will be interested to see if they start getting used more widely going forward.  If so, I hope that browser start thinking about how they can expose these types of patterns well in developer tools.  How do you drop into a side effect caused by a proxy in a debugger?  It’s an interesting problem</p>\n<p><a href=\"http://2ality.com/2014/12/es6-proxies.html\">Meta programming with ECMAScript 6 proxies | 2ality</a></p>\n<p>In case I lost anybody with my discussion of the last link, here’s an old but good walkthrough of what Proxies are and how you can use them to create some pretty magical APIs.</p>\n<h3>Microsoft Buying Github</h3>\n<p><a href=\"https://changelog.com/spotlight/14\">🔥 Our reactions to Microsoft buying GitHub |Adam Stacoviak &#x26; Jerod Santo</a></p>\n<p>A <a href=\"https://changelog.com/\">Changelog</a> podcast that summarizes the reaction of the 2 primary Changelog hosts to the annoucement as well as collecting reactions from around the internet.</p>\n<p><a href=\"https://github.com/martenbjork/github-xp\">github-xp | Mårten Björk</a></p>\n<p>This is just fun.  A Chrome extension to render Github in the style of Windows XP.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Even if they chose to announce that in the silliest way possible</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/06/10/weekly-links-06-10-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-23-18","title":"Weekly Links: June 23rd","description":"Gatsby, programming practices, and book reviews","layout":"weekly-links","path":"/2018/06/23/weekly-links-06-23-18/","date":"2018/06/23","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.gatsbyjs.org/blog/2018-06-16-announcing-gatsby-v2-beta-launch/\">Announcing Gatsby v2 beta launch! | GatsbyJS</a></p>\n<p>Gatsby continues to be one of the most exciting things happening in web development.  If you’re unfamiliar, Gatsby is a tool for building performant content-focused sites with React and GraphQL.  This blog has been built on it for the last 18 months or so.  Updating to V2 is pretty straightforward, I’ve been running it on here for the past week with no problems.  And V2 offers some nice improvements in terms of hot loading speed, library updates (it’s React 16, Babel 7 and Webpack 4 friendly) and API improvements.  It’s also obvious that since they <a href=\"https://benmccormick.org/2018/05/27/weekly-links-05-27-18/\">announced that Gatsby contributors were forming a company</a> the docs and marketing materials have been quickly moving from “indy open source” level to “real company” level, which is cool to see.</p>\n<h3>Programming Practices</h3>\n<p><a href=\"http://laputan.org/mud/\">Big Ball of Mud |  Brian Foote and Joseph Yoder </a></p>\n<p>This is an older piece (1999), but a cool reflection on “Big Balls of Mud”: computer systems that have been designed haphazardly and are now difficult to change.  Besides giving these systems a great name, Foote and Yoder are thoughtful about why these systems come to be, and how and when that may be appropriate.</p>\n<p><a href=\"https://amasad.me/intuition\">Overcoming Intuition in Programming</a></p>\n<p>Some interesting reflections here on how we use frameworks to reduce the cognitively challenging parts of programming.  I can definitely recall feeling less useful outside of my comfort zone when I’ve spent too much time working with “intuitive” code.</p>\n<h3>Books</h3>\n<p><a href=\"https://leanpub.com/javascriptallongesix/read\">JavaScript Allongé | Reg Braithwaite</a></p>\n<p>I realized the other day that I had never written a review of one of my favorite JavaScript books on this site.  This won’t count as a full review, but suffice it to say that if you’re interested in functional programming, want to get a deeper understanding of JavaScript, or really like JavaScript <strong>and</strong> coffee, this is the book for you.</p>\n<p><a href=\"https://amzn.to/2MiGMSV\">On Writing Well | William Zinsser</a></p>\n<p>Over the past year, I’ve been going through a challenge to read 30 books in a year.  I am well aware of my limitations as a writer, so one of the books I added to the list was “On Writing Well”, recommended from multiple sources as the best resource for non-fiction writing.</p>\n<p>Reading a 42 year old book<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> about writing is a nice view into what has changed over the last half century and what hasn’t.  The basic principles the book lays out are as applicable as ever, however its specific examples often feel a bit dated.  It lacks any direct instruction about the type of writing that now happens in emails, slack and social media<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, but it pointed me back to a time where our public writing was created with more care and resulted in more eloquence than you usually find in today’s frenzied discourse.  Parts of the book felt dated to me, but there was plenty of practical advice to glean, and even more sections I found inspiring.  I finished up wanting my writing to be better and had some practical ideas about how to make that happen.  And I learned a little bit about painting birds and the salt caravans of the Sahara along the way.  What more can you ask for?</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>It was last updated in 2006, so it’s not completely that old.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>There is a great opportunity sitting out there for somebody to write the definitive book on modern business writing skills.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/06/23/weekly-links-06-23-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-30-18","title":"Weekly Links: June 30th","description":"Headless UIs, Performance Monitoring, and Carpool Karaoke","layout":"weekly-links","path":"/2018/06/30/weekly-links-06-30-18/","date":"2018/06/30","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.merrickchristensen.com/articles/headless-user-interface-components/\">Headless User Interface | Merrick Christensen</a></p>\n<p>UI mixins are one of the hardest problems to solve.  Sharing “behavior” across multiple UI components is difficult to do right.  Merrick has documented an emerging pattern for doing this with React.</p>\n<p><a href=\"https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c\">React Native at Airbnb | Airbnb Engineering</a></p>\n<p>This has gotten plenty of attention around the internet, but Airbnb is moving away from React Native after years of heavy use and contributions to the community.  Worth reading as an explanation of the pluses and minuses of React Native, probably not worth reading too much into the move beyond that.</p>\n<p><a href=\"https://remysharp.com/2018/06/26/an-adventure-in-sparse-arrays\">An Adventure in Sparse Arrays | Remy Sharp</a></p>\n<p>For anyone who read my <a href=\"https://benmccormick.org/2018/06/19/code-golf-sparse-arrays/\">“sparse array code golf” post</a> the other day, this is a better holistic look at sparse arrays in JavaScript.  I learned several new things here.</p>\n<h3>Programming Practices</h3>\n<p><a href=\"https://medium.com/@ricomariani/understanding-performance-regions-e4b6e09a94da\">Understanding Performance Regions | Rico Mariani</a></p>\n<p>This is a nice high level post about a different way to think about performance monitoring and improvement.</p>\n<h3>Fun</h3>\n<p><a href=\"https://www.youtube.com/watch?v=QjvzCTqkBDQ&#x26;feature=youtu.be\">Paul McCartney Carpool Karaoke</a></p>\n<p>An incredibly fun video.  Paul McCartney showing James Corden around Liverpool.</p>\n<p><a href=\"https://www.bloomberg.com/news/features/2018-06-21/how-nintendo-s-switch-helped-the-japanese-gaming-giant-win-again\">The Legend of Nintendo | Bloomberg</a></p>\n<p>A great writeup on Nintendo’s last few years and where they stand now.</p>","fields":{"slug":"/2018/06/30/weekly-links-06-30-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-04-05-19","title":"Weekly Links: May 19th","description":"The React Podcast, Guess.js, and The Vision","layout":"weekly-links","path":"/2018/05/19/weekly-links-05-19-18/","date":"2018/05/19","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://changelog.com/reactpodcast\">The React Podcast | Michael Jackson</a></p>\n<p>I listen to a decent amount of podcasts, but I’ve usually found it tough to get into programming podcasts.  Without visually being able to see code, they’re usually either ultra high level, or get hard to follow when going into the details.  The changelog family of podcasts has generally been my favorite though, and the new<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> React podcast has been consistently excellent over it’s first 9 episodes.  Worth a listen.</p>\n<p><a href=\"https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/?utm_source=ponyfoo+weekly&#x26;utm_medium=email&#x26;utm_campaign=115\">Guess.js | Minko Gechev</a></p>\n<p>This is a crazy look at what I suspect will be the next step in static site performance stuff.  This blog does some of the cool stuff mentioned here (we prefetch links on the page thanks to Gatsby, and I use google analytics at build time to determine popular pages and populate the Most Read Articles list on the main page) but this is next level, using analytics to efficiently prefetch.  Excited to try it on the site.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://amzn.to/2LdnoXK\">The Vision | Tom King</a></p>\n<p>Ok so I’m pretty late on this one<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, but Tom King’s <em>The Vision</em> is the best comic book I’ve read in years.  He’s got a <a href=\"https://amzn.to/2IwlMq1\">pretty</a> <a href=\"https://amzn.to/2LcYQ0U\">good</a> <a href=\"https://amzn.to/2Lh3ZFd\">run</a> going on Batman now as well, but this is a brilliant self-contained story that holds up as well as anything I’ve seen. Great art as well.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Newly relauched? I’m not totally sure of the history</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>The single edition Vision comics were originally released in 2015, though the hardcover that I purchased was just released this year.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/05/19/weekly-links-05-19-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-08-18-18","title":"Weekly Links: August 18th","description":"Performance, React resources, and Radical Candor","layout":"weekly-links","path":"/2018/08/18/weekly-links-08-18-18/","date":"2018/08/18","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://ethanmarcotte.com/wrote/bits/\">Bits | Ethan Marcotte</a></p>\n<p>I’ll pretty much always link performance posts that do a good job laying out the challenges in a way that respects both the technical and business POV.  Ethan advocates here for a more structural view to performance problems on the web and wonders how we can find more performant ways to solve businesses revenue problems.</p>\n<p><a href=\"https://egghead.io/browse/frameworks/react\">React Community Resources | Egghead</a></p>\n<p>Egghead has accumulated a pretty amazing set of beginner React resources that are free for non-members.  If you’re trying to get into React, this is a pretty good place to start.</p>\n<h3>Books</h3>\n<p><a href=\"https://amzn.to/2vX6yGo\">Radical Candor | Kim Scott</a></p>\n<p>I may write this up as a full review later, but Radical Candor was the best book I’ve read this year.  It’s a book for managers, but it really was just one of the best books I’ve ever read on communication and relationships.  If you want to work better with others, Radical Candor is worth buying.</p>","fields":{"slug":"/2018/08/18/weekly-links-08-18-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-09-01-18","title":"Weekly Links: September 1","description":"Reverse Engineering React, Python refactoring, and Bat","layout":"weekly-links","path":"/2018/09/01/weekly-links-09-01-18/","date":"2018/09/01","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://blog.angularindepth.com/practical-application-of-reverse-engineering-guidelines-and-principles-784c004bb657\">Reverse Engineering React | Angular In Depth</a></p>\n<p>A really cool look at how you can approach a new code base and start learning how it works quickly</p>\n<h3>Programming Tools</h3>\n<p><a href=\"https://pybowler.io\">Bowler | Facebook Open Source</a></p>\n<p>This looks like “JSCOdeshift for Python” to me: a way to quickly update codebases to use new patterns and practices.  I love it. You can <a href=\"https://benmccormick.org/2018/06/18/codemod-survival/\">check out my experience using JavaScript Codemods here</a></p>\n<p><a href=\"https://github.com/sharkdp/bat\">bat</a></p>\n<p>bat is a prettier <a href=\"https://en.wikipedia.org/wiki/Cat_(Unix)\">cat</a>:  dump a file into the terminal, but use syntax highlighting and line numbers.  Good stuff for anyone who lives on the command line.</p>","fields":{"slug":"/2018/09/01/weekly-links-09-01-18/"}}},{"node":{"frontmatter":{"readNext":"jest-first,backbone-devs-react,callbacks-to-promises","topics":["React","JavaScript"],"category":"frameworks","key":"react-component-styles","title":"Digging Into React: Choosing Component Styles","description":"An examination of the various styles for defining React components","layout":"post","path":"/2016/05/02/digging-into-react-choosing-component-styles","date":"2016-05-02T02:32:36+00:00","dontfeature":null,"isDraft":null},"html":"<p>Over the past month I’ve been building my first production features using React.  One of the first things I’ve noticed is the amount of choices that come into a new React project.  A lot of this is about the ecosystem around React (Webpack vs Browserify? Redux vs Relay? Do I need CSS modules or Immutable.js?) but many of the choices are just part of the library, figuring out the best, or at least a consistent, way to do things.</p>\n<p>One such choice is the syntax for defining components that you choose to use.  In React, you can define components in at least 3 different styles: the React.createClass style, the ES6 class style, and the pure functional style <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Each has some advantages and disadvantages.</p>\n<h3>React.createClass</h3>\n<p>React.createClass is the original style for defining React components, and is still the preferred style in the React documentation.</p>\n<p>Here’s what a theoretical SaveButton component looks like in this style.  It is a simple component that listens for clicks and then uses a separate dispatcher object to send a request to save the data on the page.  After saving the button will either show some specified saved text or “Saved”.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> SaveButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    propTypes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//text to show after the component is saved</span>\n        savedText<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//primary text to show on the button</span>\n        text<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">getDefaultProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n             savedText<span class=\"token punctuation\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> saved<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>saved<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span>“button” onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>saved <span class=\"token operator\">?</span> savedText <span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>One of the best things about this style is its cohesive nature.  Everything about the component is described as a single object passed to React.createClass.  Since it is just an object that React processes, it is also able to accommodate more usage styles than ES6 classes and functional components.  Specifically we can use <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">mixins</a> and add declarative properties like propTypes directly to the component definition.</p>\n<p>The downside of the createClass approach is the custom nature of it.  External tools can’t inspect a component declaration and know what functions and methods will be available on the final component without either some deep inspection of the React source code or pre-existing knowledge of React.createClass that somebody has to document and maintain.</p>\n<h3>ES6 Classes</h3>\n<p>Last March, with React v0.13, the React team introduced a second syntax for React components using ES6 classes.  The constraints of the ES6 class definition change the component API in a few ways.  With ES6 classes there is no way to add properties to the class property as part of the main definition, they need to be added afterwards <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  Some niceties that are possible with React.createClass don’t work with ES6 classes as well.  Mixins aren’t possible, and React will no longer “autobind” your functions to the component instance, so when passing class methods as callbacks in your components it is necessary to bind it to the current context, either by using arrow functions like\n<code class=\"language-text\">&lt;span onClick= {() =&gt; this.save()} &gt;</code> or by binding the function like <code class=\"language-text\">this.save = this.save.bind(this)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SaveButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> saved<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>saved<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>saved <span class=\"token operator\">?</span> savedText <span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    text<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token punctuation\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>While this approach makes some syntactic compromises and loses mixins, it has the advantage of standardization and tooling support.  A good JavaScript tool can easily tell that a SaveButton should have render and save methods, as well as detecting the methods it inherits from React.Component.  This is useful for things like auto-complete and linting, as well as (theoretically) run-time performance.</p>\n<h3>Pure Functional Components</h3>\n<p>Last fall with React 0.14, React added a 3rd component style.  Functional components dispose of many of the secondary features of React, and focus on the <code class=\"language-text\">render</code> function.  They are the least powerful of all the component syntaxes.  In addition to losing mixins, pure functional components don’t have the life-cycle functions of the class based syntaxes and also don’t have any internal state.  For these components, all state must be managed externally through something like Redux, or parent components that do have state.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SaveButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">,</span> isSaved<span class=\"token punctuation\">,</span> setSaved<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">save</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setSaved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span>“button” onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>save<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n       <span class=\"token punctuation\">{</span>isSaved <span class=\"token operator\">?</span> savedText <span class=\"token punctuation\">:</span> text<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//text to show after the component is saved</span>\n    savedText<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//primary text to show on the button</span>\n    text<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// has the data already been saved?</span>\n    isSaved<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// a function to update the application state and mark the page as saved</span>\n    setSaved<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token punctuation\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Despite being the least powerful of the 3 component styles, functional components do have some advantages.  First of all, they’re very simple.  It is easy to see what is going on with them, and easy for React to optimize for them.  Like ES6 classes, they’re easy to understand for 3rd party tools since they’re “just functions”, and easy to explain to new developers for the same reason.  They also work well with systems like Redux which already encourages pulling state out of components into global stores.</p>\n<h2>Choosing a component style</h2>\n<p>So given these 3 styles, how do you choose which style to use for a component?  Balance a desire for consistency with a respect for the <a href=\"https://en.wikipedia.org/wiki/Rule_of_least_power\">Principle of Least Power</a>.</p>\n<p>For consistency purposes, don’t use more than 2 of these styles within a single project.  This mostly breaks down to “don’t use createClass and ES6 classes” together in the same project.  There are significant differences in capability and complexity between the first 2 styles and functional components. But the class based styles are similar enough that using both adds complexity but fails to do much in terms of signaling intent.  Switching between 2 different styles of communicating a concept should also indicate a meaningful difference in intent.</p>\n<p>Of course the most consistent approach would be to always use createClass, since it is the most powerful and any component that can be implemented in the other 2 styles can be implemented using createClass.  This is where the principle of least power comes in.  Here is Tim Berners-Lee’s initial description of that principle:</p>\n<blockquote>\n<p>Computer Science in the 1960s to 80s spent a lot of effort making languages which were as powerful as possible. Nowadays we have to appreciate the reasons for picking not the most powerful solution but the least powerful. The reason for this is that the less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative from, anyone can write a program to analyze it in many ways. The Semantic Web is an attempt, largely, to map large quantities of existing data onto a common language so that the data can be analyzed in ways never dreamed of by its creators. If, for example, a web page with weather data has RDF describing that data, a user can retrieve it as a table, perhaps average it, plot it, deduce things from it in combination with other information. At the other end of the scale is the weather information portrayed by the cunning Java applet. While this might allow a very cool user interface, it cannot be analyzed at all. The search engine finding the page will have no idea of what the data is or what it is about. This the only way to find out what a Java applet means is to set it running in front of a person.</p>\n</blockquote>\n<p>The less powerful react components styles are the more readable styles, both for humans and computers. That readability also limits the classes of errors and unexpected behaviors we can enact. So we should strive for simple components where we can, while balancing that with our desire for consistency.</p>\n<p>For projects looking into this, there are a few simple questions that you can answer to decide which style to use.</p>\n<ol>\n<li>Do you need to integrate with non-React libraries that modify the DOM?</li>\n<li>Do you need to manage state within your components (IE are you not using an external state management library like Redux)?</li>\n<li>Do you need to use mixins for anything in your project?</li>\n</ol>\n<p>If you answered yes to any of these questions, then you need to include a class based component style in your options for your projects.  If you answered yes to #3, then you will need to use React.createClass.</p>\n<p>Once you’ve made those decisions at the project level, the decisions are easy for an individual component.  If you answered no to all of the questions above (unlikely for a large project, but possible), you should always use functional components.  If not, you can ask the same 3 questions for each new component.  If the answer to all of the questions are no for a component, use a functional component, otherwise use the class based style you’ve chosen for your project.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/reusable-components.html#es6-classes\">The React documentation</a> is the best place to look at the benefits and tradeoffs of the different component styles</li>\n<li><a href=\"http://jamesknelson.com/should-i-use-react-createclass-es6-classes-or-stateless-functional-components/\">James Nelson wrote a similar guide last year</a> focused on the decision tree of what style to use for a component.  He dismisses the createClass style completely and has a similar but slightly different set of questions to ask.</li>\n<li><a href=\"https://github.com/facebook/react/issues/5677\">This github thread</a> makes the important distinction that functional components are not yet optimized in any special way, though they may be in the future.</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Technically you can also use an ES5 class based style, but I’m going to ignore that.  It is not a common idiom for React programs as far as I can tell.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>There is a proposal for adding static properties to ES6 classes, but it is still in early stages right now and is not guaranteed to end up as part of the ECMAScript spec.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2016/05/02/digging-into-react-choosing-component-styles"}}},{"node":{"frontmatter":{"readNext":"saving-time-jest,backbone-devs-react,mobx-first","topics":["Jest","Testing","React"],"category":"tools","key":"jest-first","title":"Testing with Jest Snapshots: First Impressions","description":"First impression of testing UI components using Jest snapshots","layout":"post","path":"/2016/09/19/testing-with-jest-snapshots-first-impressions/","date":"2016-09-19T12:41:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>Over the past 6 months my team at work has been slowly transitioning a large Backbone application to React.  One of the main goals of the transition has been to build out unit tests as we transition components.  As part of that we switched from using Karma to using Jest for managing our tests.</p>\n<p>Our new setup with Jest has several advantages over our previous setup. All Jest tests run through node using a fake DOM implementation.  We don’t need to start up a browser so tests are faster and less flaky <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  Jest makes it possible to mock all modules by default <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, which works well for us since our code base currently contains a large amount of code that is difficult to test for one reason or another.  Jest provides great integration with Babel, which is helpful since all of our Backbone and React code uses ES6 that we transpile for the browser.  Finally Jest provides a wonderful watch mode that runs only the tests that are relevant to the changes you’ve made and makes it easy to see the result.</p>\n<p>About a month ago, Jest debuted a new feature: Snapshot testing.  It works a bit differently than a normal unit test.  Instead of executing some code and comparing the output against a value provided by a developer, the first time a test is run, the output passed into the test is saved to a “snapshot file”.  Then when the test is run in the future, the output is compared to the snapshot file.  If the output matches the file, the test passes, if the output is different then the file, the test fails and Jest prints a diff.  We’ve been using Jest snapshots for a few weeks now and I wanted to share my initial impressions.</p>\n<h3>What is it like to use a snapshot test ?</h3>\n<p>The process for snapshot testing is a bit different than normal tests.  Most snapshot tests look fairly simple.  Something like this example from the <a href=\"https://github.com/facebook/jest/tree/master/examples/snapshot\">Jest repository</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Link.react.js</span>\n<span class=\"token comment\">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">HOVERED</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'hovered'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOVERED</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onMouseLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>a\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">}</span>\n        href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n        onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter<span class=\"token punctuation\">}</span>\n        onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Link.react-test.js  (partial)</span>\n<span class=\"token comment\">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n<span class=\"token comment\">/* eslint-disable no-unused-vars */</span>\n\n<span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'../Link.react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token operator\">></span>Facebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The first time the test is run, a snapshot file is produced.  In this case, running the previous test produces a snapshot file that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Link.react-test.js.snap  (partial)</span>\nexports<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token string\">`test renders correctly 1`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`\n&lt;a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function bound _onMouseEnter]}\n  onMouseLeave={[Function bound _onMouseLeave]}>\n  Facebook\n&lt;/a>\n`</span></span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This gives us a baseline for what we expect the UI to look like.  The snapshot is generated in a folder in your <code class=\"language-text\">__tests__</code> directory, so that it can be checked into source control.</p>\n<p>The next time a test is run, if nothing has changed, the test passes.  However, if we change something (let’s say we add a class), the test fails and shows us a diff.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// updated link render method</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a\n      className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token string\">`link-item </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">}</span>\n      href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n      onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter<span class=\"token punctuation\">}</span>\n      onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"diff\">\n      <pre class=\"language-diff\"><code class=\"language-diff\"># jest output\n\nFAIL  __tests__/Link.react-test.js\n ✕ renders correctly (16ms)\n\n● renders correctly\n\n    Received value does not match the stored snapshot 1.\n\n    - Snapshot\n    + Received\n\n      &lt;a\n<span class=\"token deleted\">-       className=\"normal\"</span>\n<span class=\"token inserted\">+       className=\"link-item normal\"</span>\n        href=\"http://www.facebook.com\"\n        onMouseEnter={[Function bound _onMouseEnter]}\n        onMouseLeave={[Function bound _onMouseLeave]}>\n        Facebook\n      &lt;/a>\n\n      at Object.&lt;anonymous> (__tests__/Link.react-test.js:14:16)</code></pre>\n      </div>\n<p>We can then choose to accept this change by running <code class=\"language-text\">jest -u</code> to update the snapshot, or update our code to fix the regression.  If we update the snapshot file, the test will start passing again.</p>\n<h3>Snapshot tests are a complement for conventional tests not a replacement</h3>\n<p>The first thing that became clear to me while using snapshot testing is that they’re not for everything.  They are optimized for a different case than normal assertion-based tests.</p>\n<p>Classic assertion based tests are perfect for testing clearly defined behavior that is expected to remain relatively stable.</p>\n<p>Snapshot tests are great for testing less clearly defined behavior that may change often.</p>\n<p>Snapshot testing is perfect for things that in the past would have raised concern for “overly brittle” tests that slow development teams down.  The classic example of this (and the main focus of discussion around Jest snapshots so far) is UI testing.</p>\n<p>UI components often change in small and trivial ways.  Copy is changed, whitespace is added, a border color is modified. Generally this means that developers have to choose between detailed tests that catch any regression but require constant updates, or less detailed tests that focus on core behaviors but miss smaller regressions.</p>\n<p>Snapshot tests provide a new way of approaching these problems in unit tests.  Because they are easy to write and effortless to update, and provide a clear view of what changed after each update, whether it is major or minor.</p>\n<p>This isn’t without any disadvantage. Snapshot tests preserve a starting point, but don’t give any indication of developer intent to future developers.  Like any other test, if the initial snapshot passes with bugs, or doesn’t capture the full range of cases, the test won’t adequately cover those behaviors.  But unlike traditional tests, snapshot tests don’t provide specific guidance for what the original developer expected beyond the “actual behavior”.  If there are multiple sub-behaviors that interact to produce output, its not clear which of those are essential, and which are incidental.  That’s not something you want for your critical application logic, especially complicated logic with many subtle cases.  But for UI components and other application elements that are likely to change a lot over time, this is a good set of tradeoffs.</p>\n<h3>Snapshot tests are more useful with a healthy code review process</h3>\n<p>I’ve pointed out several times now that snapshot tests are easy to update.  One of the downsides of the current design is that they can be almost too easy to update.  When a snapshot test fails, you have the option of modifying the output so that the test passes again, or updating the snapshot to reflect the new output.  Unfortunately, Jest currently provides no granularity for this updating.  Running <code class=\"language-text\">jest -u</code> to update the snapshots will update all snapshots.  So if  a single change causes many snapshots to break, it can be easy to accidentally update all of them, and possibly difficult to work through the whole diff to find changes.</p>\n<p>A robust code review process minimizes these problems.  Because snapshots are checked into source, the diffs in the snapshots are checked into source control.  Viewing diffs in a dedicated code review tool like Github, Bitbucket or Gitlab, it’s easier to see exactly what changed over many files than it might be when updating snapshots from the command line, and if you update a snapshot multiple times in a single branch, you can see the net effect on the snapshot through source control diffs better than you can through Jest.</p>\n<h3>Snapshot tests work well with auto-mocking</h3>\n<p>Auto-mocking has been one of Jest’s more controversial features.  Prior to version 15, Jest mocked every module used in tests by default.  To run the actual module code, it was necessary to manually unmock each module used or change Jest configurations.  Though it is now disabled by default, auto-mocking actually works very well with snapshot tests.  One problem with tests that rely on generating DOM in React is the fact that most components of any complexity are actually made up of smaller components, that often use external functions with complex logic to determine what to show.  If we fully render everything, changing any of those pieces can break tests for many components, moving us away from the concept of a “unit test”.  If we mock child components and helper functions and then test them individually though, we can focus our tests to only change based on the logic of the individual component being tested.  This is incredibly easy with Jest, and especially helpful in large code bases that don’t have complete test coverage.  Auto-mocking is considered an “advanced feature” of Jest, but it’s not hard to use.  Most mocked modules produce something non-harmful by default, and when its necessary to override, its not difficult to produce something meaningful without getting too involved.  Just add a file with the same name as the file to be mocked into a <code class=\"language-text\">__mocks__</code> folder in that directory, and give the mocked module the same interface as the mocked component.  You can either write it from scratch or use <a href=\"http://facebook.github.io/jest/docs/api.html#jest-genmockfrommodule-modulename\">jest.genMockFromModule</a> as a starting place.</p>\n<h3>Summary</h3>\n<p>I’m impressed by Jest snapshots.  When combined with React, they’re providing my first non-frustrating experience unit testing UI components.  I’m excited to use them more going forward, and will be interested to see how they evolve from here.</p>\n<hr>\n<h3>Extra: A few miscellaneous Jest Thoughts</h3>\n<ul>\n<li>The UI output from Jest 15 tests is the best I’ve ever seen from a testing framework.  Aside from the nice diffs on snapshots, they do a good job explaining how output differed from expectations in assertion based tests, and communicating context for test failures, warnings and logging messages.  They also give great guidance when making configuration changes:</li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/cpojer\">@cpojer</a> This is lovely, thank you! <a href=\"https://t.co/CX1v11CAVc\">pic.twitter.com/CX1v11CAVc</a></p>&mdash; Ben McCormick (@ben336) <a href=\"https://twitter.com/ben336/status/772906536154894336\">September 5, 2016</a></blockquote>\n<ul>\n<li>\n<p>I’ve also been super impressed with Jest’s watch mode in Jest 15.  <code class=\"language-text\">--watch</code> makes it easy to focus on a few files or run tests on all files, and stays up to date as you change code.  If you haven’t worked with Jest in a while, the developer experience alone makes it worth trying out.</p>\n</li>\n<li>\n<p>One potential future annoyance with snapshot tests:  The snapshot format can’t be iterated on without breaking all current tests.  Make sure not to mix functional changes with Jest updates!</p>\n</li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">We&#39;ll update the snapshot format sometimes in minor/major releases. When updating Jest, please update snapshots<br><br>See <a href=\"https://t.co/gPE63dMz8P\">https://t.co/gPE63dMz8P</a></p>&mdash; Christoph Pojer (@cpojer) <a href=\"https://twitter.com/cpojer/status/776623521069805568\">September 16, 2016</a></blockquote>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Randy Coulman has a <a href=\"http://randycoulman.com/blog/2016/09/06/snapshot-testing-use-with-care/\">nice article</a> on some of the reasons to be careful about embracing snapshot testing.  He makes good points about the requirement of human involvement in verifying a change in time-crunched situations and also the potential value of snapshot tests for legacy code.</p>\n</li>\n<li>\n<p>My team uses a mix of <a href=\"https://github.com/airbnb/enzyme\">enzyme</a> and snapshot tests for unit testing React Components.  <a href=\"https://github.com/trayio/enzyme-to-json?utm_content=buffer6b78b&#x26;utm_medium=social&#x26;utm_source=twitter.com&#x26;utm_campaign=buffer\">This repo</a> combines them, allowing you to use enzyme to generate the snapshot output to diff against rather than the renderer provided by Jest. I personally haven’t felt the need to integrate these two tools, but if your team uses enzyme and wants consistency/fewer (used) dependencies, this could be a cool option.</p>\n</li>\n<li>\n<p>Finally here’s <a href=\"https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript\">another article</a> on how Snapshot testing convinced one team to migrate to Jest from Tape</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>PhantomJS was a tremendous source of pain in our Karma setup.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>This used to be the default setting, with Jest 15 it can be configured to work that way.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2016/09/19/testing-with-jest-snapshots-first-impressions/"}}},{"node":{"frontmatter":{"readNext":"jest-first,backbone-devs-react,react-component-styles","topics":["Mobx","JavaScript","React"],"category":"frameworks","key":"mobx-first","title":"MobX: First Impressions","description":"First impression of managing data with MobX","layout":"post","path":"/2017/01/09/mobx-first-impressions/","date":"2017-01-09T13:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>I spent some time around the holidays this year playing with <a href=\"https://mobx.js.org/\">MobX</a>, a state management library for JavaScript.  MobX is an unopinionated library that provides a layer over normal JavaScript data structures that allow other code to efficiently observe data changes and update based on what has changed.  It’s an interesting tool for handling state in web applications, especially in existing projects that might need to update state handling iteratively.  Here are some first impressions.</p>\n<h3>What is MobX?</h3>\n<p>MobX has 3 core concepts developers need to understand:</p>\n<ol>\n<li><strong>Observable state</strong> - MobX provides functions to make data <em>observable</em>.  Observable data can be watched by other pieces of code which may efficiently update when the state changes.  Observable data is primarily created in MobX using the <code class=\"language-text\">observable</code> function.</li>\n<li><strong>Derivations</strong> - Functions that <em>watch</em> observable data are called derivations.  MobX has 2 primary types of derivations: <em>computed values</em> and <em>reactions</em>.  Computed values update a value based on other data, while reactions produce side effects: updates to a UI, a network call, or a logging statement for example. MobX provides a <code class=\"language-text\">computed</code> function for defining computed values; in most cases reactions will likely be mostly defined using a framework specific helper library like <a href=\"https://github.com/mobxjs/mobx-react\">mobx-react</a> or <a href=\"https://github.com/500tech/ng2-mobx\">ng2-mobx</a>.  MobX does provide some lower level libraries for reactions though, including <code class=\"language-text\">autorun</code> and <code class=\"language-text\">when</code>.</li>\n<li><strong>Actions</strong> - Code that updates observable state is known as an action.  MobX has a formalized version of actions which can be defined using the <code class=\"language-text\">action</code> function, but it is also possible to modify state directly using any normal JavaScript code and maintain observable behavior.</li>\n</ol>\n<p>In practice this looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> digits <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> DigitPrinter <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>DigitPrinter digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* prints 1, 2 */</span>\n\n\ndigits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* DOM re-renders to print 1, 2, 3 */</span>\n\ndigits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* DOM re-renders to print 1, 2, 4 */</span></code></pre>\n      </div>\n<p>The component is able to passively <em>observe</em> changes in the data, and re-render when it changes.  But MobX is actually even smarter than this example shows.  Let’s look at another example, this time using a more complex data structure (a class).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>extendObservable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Appointment</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">extendObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      dueDate<span class=\"token punctuation\">:</span> <span class=\"token string\">'01-01-2017'</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Dinner with Joe'</span>\n      location<span class=\"token punctuation\">:</span> <span class=\"token string\">'Chik-Fil-A'</span><span class=\"token punctuation\">,</span>\n      isToday<span class=\"token punctuation\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>dueDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'MM-DD-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> @ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> TodayBox <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodayBox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>isToday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>     \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> appointment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Appointment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>TodayBox appointments <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>appointment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* prints an empty div */</span>\n\nappointment<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Dinner with Bob'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Nothing relevant has changed. The component does not re-render */</span>\n\nappointment<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token string\">'01-09-2017'</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">/*  assume that 01-09-2017 is \"today\" */</span></code></pre>\n      </div>\n<p>MobX has the “magical” ability to determine what changes actually affect the observer and not make unnecessary calls of reaction functions.  In practice, that magic allows you to write less, more efficient code for updating your UI based on data.</p>\n<h3>How Does MobX work?</h3>\n<p>I have a learned skepticism of magical solutions like this.  Generally I find that time-saving magic like this ends up costing time when it comes to maintenance, and explicit relationships between code saves time over less-boilerplate heavy code. Fortunately, while the libraries code itself is fairly complex, it isn’t too hard to understand the logic behind how MobX works.  </p>\n<p>On the Observer side, MobX uses <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ES5</a> setters and getters to proxy updates to observable data structure and listen in when data is updated.  This allows the type of event listening that <a href=\"http://backbonejs.org/\">Backbone</a> and other libraries provide, without requiring the user to go through special <code class=\"language-text\">set</code> or <code class=\"language-text\">get</code> methods to update an object’s properties.  Most of the time you should be able to just be able to write code as you normally would, and MobX will make it work.  There are some exceptions though that mean its important to actually understand how the library work.  Getters and Setters only work when looking up an existing property on an object, so when using primitive values or adding new values to an existing object, some special syntax (the return of <code class=\"language-text\">get</code> and <code class=\"language-text\">set</code> methods) may be required.  In Mobx primitive observables are referred to as <em>boxed</em> values, and objects that require new values over time can be handled by using observable Maps, which use the API of <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ES6</a> Maps.</p>\n<p>On the derivative side, reactions and computed values are always defined as functions.  MobX wraps these functions and is able to determine (through the method described above) what properties were accessed during each function run.  It then only listens for changes to these properties.  Thus it doesn’t matter if you theoretically could access thousands of observable properties in a function, if you wrap those references in an if statement to a single property, and that property returns false on first run, the derivative function will only listen for changes on that property before running again. When an observable is updated, all derivative code is run synchronously and atomically so there is no concern of getting into bad intermediate states.</p>\n<p>Most of the “magic” is covered by the 2 paragraphs above, and once you understand the ideas behind them (see the resources at the bottom of this post for more in-depth explanations), it is fairly easy to understand the reasoning behind the cases where the magic fails.</p>\n<h3>Decorators</h3>\n<p>Developers who actually use MobX are probably questioning my examples by now, because I’ve been using a different syntax than the primary MobX documentation for showing my examples.  So let’s talk about decorators.  The preferred way (according to the documentation) to write MobX code is to use decorators to define observers and observables.  Decorators are a <a href=\"http://tc39.github.io/proposal-decorators/\">proposed new JavaScript feature</a> for declaratively adding extra behavior to classes, class properties and class methods.  Using them with MobX, my above example would look like this <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Appointment</span> <span class=\"token punctuation\">{</span>\n\n  @observable dueDate <span class=\"token operator\">=</span> <span class=\"token string\">'01-01-2017'</span>\n  @observable title <span class=\"token operator\">=</span> <span class=\"token string\">'Dinner with Joe'</span>\n  @observable location <span class=\"token operator\">=</span> <span class=\"token string\">'Chik-Fil-A'</span>\n\n  @computed <span class=\"token keyword\">get</span> <span class=\"token function\">isToday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>dueDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'MM-DD-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> @ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n@observer <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodayBox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>isToday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>     \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>That obviously looks a lot cleaner than my example.  So what’s the problem?  Again, decorators are a <em>proposed</em> JavaScript feature.  Currently they’re in Stage 2, which means roughly that they are very likely to eventually make it into the language, but may change in non-trivial ways before that happens.  Currently decorators are implemented in <a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">TypeScript</a>, as well as a <a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">3rd party babel plugin</a>, but as of January 2017 <a href=\"http://kangax.github.io/compat-table/esnext/#test-class_decorators\">are not implemented in any browser engines</a>, and are not implemented in any first party babel plugins <a href=\"https://github.com/babel/babel/issues/2645\">due to spec instability</a>.  Decorators are a key part of Angular2, and are used by other frameworks including <a href=\"http://aurelia.io/\">Aurelia</a> and <a href=\"https://github.com/rwjblue/ember-computed-decorators\">Ember</a>, so I don’t think they’re going away.  But I also don’t see them as ready for production use for teams that don’t have the capacity to dedicate the time to update existing code if/when the spec changes<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  If for one reason or other you’re comfortable with the risks however, decorators are a great way to clean up the MobX API, and I’m excited for the spec to get to the point where I can use them.</p>\n<h3>Comparison to Redux and setState</h3>\n<p>As a state management library that was built to be used with React, the obvious questions to ask about MobX are how it improves over React’s built in state handling, and how it compares to <a href=\"http://redux.js.org/\">Redux</a>, the current most popular state management solution for React. MobX takes a different approach to each.</p>\n<p>It’s important to say at the start that MobX isn’t mutually exclusive with using setState.  It’s possible to use them together, with MobX managing application data and setState handling individual component/UI state.  But there is some advantages to using MobX for UI state as well.  The biggest reason is that MobX is smarter than setState about when re-rendering is required.  By default React Components re-render on any call to setState, regardless of whether the state change actually affects what is rendered or not. MobX’s creator <a href=\"https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.x0o6y4rxv\">wrote more about this on Medium</a>.</p>\n<p>Comparing MobX and Redux could be a whole article on its own, so I’m not going to go too deep here, but suffice it to say that MobX is more flexible than Redux, but as a result loses some of the benefits of Redux’s structured approach.  Specifically, it is easy to convert a single object to become a MobX observable and use it in an existing React component.  It can be easily inlined in an existing file and used for one component even.  You also don’t have to deal with the ceremony of using <a href=\"http://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2/\">immutable data</a>.  Redux is intended as a solution that will take over all your state, and doesn’t scale down nearly as well or mix with other solutions <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.  However, Redux’s structure also has benefits.  It allows easy testings of each component of an app individually, the creation of powerful tooling that will work with any Redux app, and reliable guarantees of how state will be updated.  These things are mostly possible with MobX <sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>, but require more developer discipline, and/or can’t be written as easily as universal tools. Overgeneralizing, I would prefer Redux in a new application, but would look to MobX for improving data management in an existing application.  MobX also has advantages in applications where you’re displaying a large amount of UI elements based on a relatively small amount of data, or have a lot of derived data (something like a spreadsheet), whereas Redux has benefits for applications that need to be extremely reliable and well tested.  </p>\n<h3>Stray Thoughts</h3>\n<ul>\n<li>If you do want more discipline in MobX, make sure to use <code class=\"language-text\">useStrict</code> to require updates to use Actions</li>\n<li>MobX has a nice set of <a href=\"https://github.com/mobxjs/mobx-react-devtools\">devtools</a> that are useful if you’re opting in to using actions, and using React with MobX.</li>\n<li>If this isn’t clear yet, I definitely recommend hacking around with Mobx’s low level APIs to learn more about how it works before integrating it straight into a framework</li>\n<li><del>Also note that MobX 3.0 is imminent, there is a release candidate that you can play with now.</del> <strong>Update:</strong> That didn’t take long.  <a href=\"https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443#.mk6mdypt2\">MobX 3.0 is out</a>.</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>The two most helpful resources I found for conceptually understanding MobX were in-depth articles by the library’s author <a href=\"\">Michael Westrate</a>: <a href=\"https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.jd4hgh2zi\">Becoming fully reactive: an in-depth explanation of MobX</a> on Medium and <a href=\"https://mobx.js.org/intro/concepts.html\">Concepts &#x26; Principles</a> from the MobX documentation</p>\n</li>\n<li>\n<p>This <a href=\"https://twitter.com/AdamRackis/status/775706291259908096\">tweet thread</a> and the linked article, are a good breakdown of the tradeoffs between MobX and Redux</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Technically this also uses class properties as well, another proposal that works well with decorators</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>It’s possible any spec changes will be trivially fixable with a code mod script, but right now there is more uncertainty than I am personally comfortable with.  I’m grateful to people who are willing to take more risks here than me, they push the language forward.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>I’m talking here about what is encouraged and easy, not what is possible.  It is of course possible to mix in Redux with other solutions.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>MobX has some nice <a href=\"https://github.com/mobxjs/mobx-react-devtools\">devtools!</a></p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/01/09/mobx-first-impressions/"}}},{"node":{"frontmatter":{"readNext":"large-improvements-small-team,ten-things-js,ll-context","topics":["React","Architecture","JavaScript"],"category":"software-productivity","key":"react-confessions","title":"React Architecture Confessions","description":"The mistakes I made while learning React and why I made them","layout":"post","path":"/2018/02/07/react-confessions/","date":"2018/02/07","dontfeature":null,"isDraft":null},"html":"<p>I’ve been reading through <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin this month<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, and while it is great it has had the unpleasant effect of reminding me of all of the mistakes I’ve made over the past few years while learning and using <a href=\"https://reactjs.org/\">React</a>.  I’ve absolutely loved using React at work, and it has made so many things easier.  But it’s a very unopinionated tool when it comes to structuring applications, and I made a lot of mistakes as I was using it to build some small side projects, and then transitioned a major production app to React from Backbone/Marionette.  These mistakes are all architectural; how I broke out components, communicated between components, and managed data and dependencies within components.</p>\n<p>I thought it would be useful to lay out the architecture mistakes I made as I was learning React, both as a solid reflection exercise for myself, and a warning to those of you who are just starting down the “component based UI” road.  </p>\n<h3>My Mistakes</h3>\n<h4>1. Including API calls directly in components</h4>\n<p><strong>What I did wrong</strong>: This is an embarrassing one, but essentially in several places I had components directly fetching data from the server in their constructors or mount calls, and using that information to determine what to render.</p>\n<p><strong>Why I did it</strong>: This was to some extent a lack of planning.  I had all my core “business objects” modeled in some sort of separate object oriented way (either as Backbone or MobX objects) and was able to coordinate syncing them to the server outside of the component layer.  But some data in the system hadn’t been modeled in that way, and when I encountered a need for those components (such as some types of system configurations) instead of stepping back and coming up with a design for modeling those configurations on the front end, I instead sometimes fell back to an ad-hoc API call.   This was also sometimes a result of lazily copying legacy code that had bad patterns while converting components to React, and other developers copying bad patterns when trying to figure out the new React code.</p>\n<p><strong>What I should have done instead</strong>: This could be a whole series of blog posts in itself, but essentially I should have been observing a few principles that would have set off alarm bells.</p>\n<ol>\n<li>Components in a system of any size shouldn’t know about the server. UI Components are about as “low level detail” as it gets in a UI architecture, and should be passed the data they need from a higher level portion of the system.</li>\n<li>If the front end code needs data from the server, it is worth the time to properly model that data in terms of whatever data layer the front end is using.</li>\n</ol>\n<h4>2. Breaking the “props as the component interface” abstraction</h4>\n<p><strong>What I did wrong</strong>: One of the best things about React is the clear interfaces components provide with their list of props.  If properly documented with PropTypes or a type system like Flow or Typescript, it’s easy to look at any React component and tell what data it expects to receive, and therefore how other code is expected to interact with it.  99% of the time, good React components act as a function of <code class=\"language-text\">(props, state) =&gt; UI</code>.  It is however, possible to get access to a component instance, and call functions on them.  There are  rare situations where this is the right way to do things, for instance <a href=\"https://stackoverflow.com/questions/28889826/react-set-focus-on-input-after-render\">focusing an input</a>.  </p>\n<p>When I first started creating React components though, I overused that pattern, and accessed the interface directly to access or change its internal state.  I’d have components like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>inputValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SpecialInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>el <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p><strong>Why I did it</strong>:  Early on I was using this pattern in a way that copied other frameworks I was familiar with.  A parent component would need the state of it’s child component, so it would maintain a reference to the child and query the child about the state.  When I converted Backbone components to React, sometimes I was basically just copy and pasting existing code, and making it work.  </p>\n<p><strong>What I should have done instead</strong>:  React doesn’t really encourage parents pulling state from their children.  Instead, if there is state that needs to be shared between components, it should be moved up to the parent component and then the state and an updater function should be passed down to the child component.  So my example above would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>event <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token punctuation\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SpecialInput\n             value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n             updateValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>inputValue <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h4>3. Interacting with 3rd party components directly</h4>\n<p><strong>What I did wrong</strong>: My first year and a half using React, when I was using 3rd party UI components like <a href=\"https://github.com/facebookarchive/fixed-data-table\">react-fixed-data-table</a> I would always use them directly in my components, and take full advantage of their APIs.</p>\n<p><strong>Why I did it</strong>: Because every React library in the world has documentation showing how to use its components directly in code for a variety of different use cases, and nobody ever tells you to put an abstraction around their code</p>\n<p><strong>What I should have done instead</strong>: I should have wrapped the 3rd party libraries in one or more wrapper components.  This has a few advantages:</p>\n<ol>\n<li>When we’re using a UI component like a table in a new place in our App, if I’ve created a wrapper component that has presets for most common settings, I only need to configure the things that are meaningful to this new use case in my app</li>\n<li>Targeted wrapper components like a <code class=\"language-text\">SortableTable</code> component or a <code class=\"language-text\">DropdownWithAutoComplete</code> component are easy to understand to a new reader of the code.  Instead of digging through configuration props, they can read the component name and understand the purpose of that component then focus on the data being passed to it</li>\n<li>When making updates to a library it is much easier to test that the changes are safe if the uses of the library are limited to a few focused components, rather than being spread across a whole application</li>\n<li>Similarly, if we need to switch to a new library, that is much easier with a limited footprint</li>\n<li>It can be easier to create reliable automatic tests using a wrapper component, since you have more control of things like how mocking works and when the component interface changes than you do for 3rd party code</li>\n</ol>\n<h4>4. Importing other parts of the system directly into display components</h4>\n<p><strong>What I did wrong</strong>: The main application I work on uses a messaging system to allow communication between different parts of the system.  It’s a legacy piece from when it existed as a Backbone application, and isn’t a very React-y way of doing things, but that isn’t really a problem.  This situation would be the same for a logging component or a data store.  What isn’t great is that when I need to use the messaging system, I always import it directly into the component file.</p>\n<p><strong>Why I did it</strong>: Direct imports are convenient, the messaging system is a core part of my system, and it seemed like a normal way of accessing it.  I also wasn’t aware of any better way to do it.</p>\n<p><strong>What I should have done instead</strong>:  The disadvantage of direct imports is that they’re harder to test.  If I had passed my messaging system as a prop to whatever component needed it, it would be much easier to test that it was called in the way I expected, without having to mock out the whole messaging system library.  I also could abstract away the whole power of the messaging system, and only provide the specific functionality needed by a component.  When I first began working on this system though, I didn’t know a practical way to do this.  The messenger system was often used by deeply nested components, and it seemed bad to pass it down a whole component tree.</p>\n<p>The answer is to use the <a href=\"https://www.robinwieruch.de/react-provider-pattern-context/\">Provider pattern</a>.  The provider pattern is a way to use React’s context API to provide top level properties from a high level parent component to deeply nested child components.  It is a perfect pattern for providing important high level pieces of your application to low level components without tightly coupling them, while maintaining testability.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<h4>5. Changing too many things at once</h4>\n<p><strong>What I did wrong</strong>: When my team began converting our application from Backbone to React, it was tempting to try and change many things at once.  All the React examples you see online are using Babel/ES6, Webpack, Redux, React Router and tons of other shiny but complicated things.  Trying to implement it all in an existing project<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> can be overwhelming and lead to <a href=\"http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html\">lava layers</a>.  We actually started out with good discipline and converted files to use ES6 first, then added Webpack, then slowly started to convert UI components to React.  Unfortunately as we continued to convert React, we began replacing our Backbone data models with MobX, and began using CSS Modules in some places.  When our team size was reduced last year, we were left in a situation where the same functions were performed in different ways throughout the codebase.</p>\n<p><strong>Why I did it</strong>: It’s easy to see things that could be better in a web application and immediately want to fix them!  Especially if parts of that change seem easier than other changes you’re working on</p>\n<p><strong>What I should have done instead</strong>: I wrote about this <a href=\"https://benmccormick.org/2018/01/07/large-improvements-small-team/\">at length</a> last month, but there really is no substitute for taking things one at a time.  While it’s tempting to think that it will be easier to convert to React if you’re using other “react-y” tools and libraries, your code will ultimately be more maintainable if it is consistent throughout an application.  The only reliable way to do that is to make changes completely before you start making other changes.  It isn’t sexy, and it will leave you at least a little ways off the bleeding edge, but it’s the way to build large, reliable systems and keep them up to date.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>At the time of writing this, it was super on sale on <a href=\"http://amzn.to/2mKoejo\">Amazon</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the Context API that the provider pattern is based on is changing, so I’d isolating out any provider code you write into a reusable component so that it is easy to update later</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or even a new project for that matter!</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/02/07/react-confessions/"}}},{"node":{"frontmatter":{"readNext":"mobx-first,mn-series,backbone-eco","topics":["Backbone","React","Marionette"],"category":"frameworks","key":"backbone-devs-react","title":"Lessons Backbone Developers Can Learn From React","description":"A look at the lessons that Backbone developers can learn from React","layout":"post","path":"/2015/09/09/what-can-backbone-developers-learn-from-react","date":"2015-09-09T11:19:43+00:00","dontfeature":null,"isDraft":null},"html":"<p>Since I started programming professionally, I’ve always kept an informal list of technologies I want to check out.  Things that I thought would be useful for my career, would expose me to new ideas, or just looked plain cool.  I spent a chunk of my Labor Day weekend working through that list a bit by learning more about <a href=\"http://facebook.github.io/react/\">React</a>, the JavaScript View library from Facebook. React is a fascinating piece of technology, and a strong ecosystem of tools and libraries is growing up around it.  For developers starting brand new front-end projects in 2015, it ranks as one of the 2 main libraries I’d suggest looking into as a base, along with <a href=\"http://emberjs.com/\">Ember</a>.  Most developers though are not starting brand new projects.  We’re maintaining existing code, or starting a new project while trying to reuse components of an old one.  Fortunately, React is about ideas as much as it is technology.  For this piece, I’m going to go through the big ideas of React and look at 3 of them that developers working on other frameworks (and <a href=\"http://backbonejs.org/\">Backbone</a> in particular) can learn from.  There’s a lot more to React and its community than just these 3 ideas, so I’ll also include some extra resources at the bottom for those interested in learning more about it.</p>\n<h3>Idea 1: Interfaces should be a tree of composable components</h3>\n<p>React interfaces are constructed by combining many small “components”, each of which can be created by combining other smaller components.  In the end a normal React interface will resemble a tree, with a top level component that encompasses the whole app and many smaller components nested inside of it.  It’s a model that should be familiar; the browser DOM works the same way.</p>\n<p>Building interfaces this way lets you reuse more code and also makes code easier to reason about.  Because you’re composing your interfaces rather than using inheritance or monolithic page objects to build your pages, you can write common code for items like buttons, date-pickers and lists once and then re-use them all over place, even creating larger components like a dialog box out of smaller components like buttons, inputs and an overlay.  And since components are small and focused, it’s much easier to dive into them and understand what is going on.  Since react components are built to work in this standardized ways, you can be comfortable knowing that no other code is going to be changing the area of the UI controlled by that component.</p>\n<p>Backbone doesn’t enforce a specific way to organize your UI code.  You can create a single Backbone View for a whole page, have different non-nested views control different portions of a page, or use a nested scheme.  For simple sites or apps, each of these can make sense.  You probably don’t need a nested component tree for a simple content page with one or two pieces of interactive behavior.  But for large rich apps, small composable Views (or other building blocks) can provide much more flexibility, allowing you to mix and match pieces of your application to build diverse pages without becoming overwhelmed with code.</p>\n<p>Building this sort of tree system in Backbone is one of the main selling points of <a href=\"http://marionettejs.com/\">Marionette</a>, the most popular of several libraries that add conventions on top of Backbone’s structure.  Marionette provides collection Views and layout Views that <a href=\"http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/\">let you build rich View trees</a> that are very similar in structure to a React app, while maintaining compatibility with Backbone’s code and the Backbone communities conventions.  It’s also possible to compose an applications interface with a mix of Backbone and other “components”; for instance using <a href=\"http://webcomponents.org/\">web components</a>, React Components, or even jQuery UI widgets to represent individual pieces in an application and then tying together their layout using Backbone Views.   </p>\n<p>That’s not to say there are no problems with implementing this style in Backbone though.  For one thing, when nesting one Backbone view inside of another, Backbone does not provide strong encapsulation of child views.  Because Backbone Views act on HTML directly, when a parent view listens to an event or modifies HTML directly, it is possible for the view to listen to events on elements controlled by a child view and even modify those elements directly.  That can create confusing side effects, since in a deeply nested view tree it means an event could lead to code being triggered in one of many different Views, and the state of that piece of DOM could be affected by many different areas of code at once.  In Backbone these problems must mostly be solved with programmer discipline, a weight that adds to the difficulty of deeply nested UIs, but doesn’t prevent them.</p>\n<h3>Idea 2: Modern JavaScript leads to cleaner code</h3>\n<p>Using modern JavaScript is less a core idea of React, and more a value of its community.  When researching React, almost every example of React code I found was written using <a href=\"https://babeljs.io/docs/learn-es2015/\">ES6 style JavaScript code</a> and a modern module system (commonJS or ES6 modules using either <a href=\"https://webpack.github.io/\">webpack</a> or <a href=\"http://browserify.org/\">browserify</a>).  Many React developers are even pushing the boundaries of todays browsers and standards and experimenting with how their code could be improved by proposed ES7 features.  I rarely see Backbone code examples using these styles.  They’re usually in ES5 style or <a href=\"http://coffeescript.org/\">Coffeescript</a> and use AMD modules or global namespaces to structure code.  Some of this is a natural function of the hype cycle: most Backbone code examples were written 3-4 years ago when it was the hot new JavaScript framework, while most React examples are written now.  But the net result is that most people who use Backbone today aren’t being exposed to these new styles and tools.  Since things like JavaScript APIs and module loaders can be chosen separate from what framework you choose <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>, this is an opportunity to take advantage of innovation from other places without giving up an investment in Backbone.</p>\n<p>Take the following code examples for instance.  This is the same View written in 3 styles: ES5 with namespaces, ES6 and ES7.  Compare the readability and usability in each case.  The example is just a simple view that takes a template, logs a message when it is created and shows a different modal when 2 different buttons are clicked, with a callback function after the modal is closed.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES5 with namespaces</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">,</span> Backbone<span class=\"token punctuation\">,</span> Modal<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    App<span class=\"token punctuation\">.</span>ExampleView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n        template<span class=\"token punctuation\">:</span> App<span class=\"token punctuation\">.</span>templates<span class=\"token punctuation\">[</span><span class=\"token string\">'exampleview'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        events<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showSuccess'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showError'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>slice<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        showSuccess<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        showError<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        showModal<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> title <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                title <span class=\"token operator\">=</span> <span class=\"token string\">'Alert'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onModalClose<span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        onModalClose<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>App <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Backbone<span class=\"token punctuation\">,</span> Modal<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Obviously the scenario is a bit contrived here (we’d want to generalize any logging in the constructor in real life, and we would listen for model changes to re-render rather than just blindly doing it in a callback).  But notice how many confusing things are going on that are completely incidental to what the code is doing.  A JavaScript beginner would have a lot to work through in this example.  Why is the whole file wrapped in a function?  Where do Backbone and Modal come from?  What’s going on with <code class=\"language-text\">Backbone.View.apply(this, [].slice.call(arguments));</code>?  That’s even aside from the incidental complexity of having to know what order your files are loaded in when using this particular module style.  We can do so much better.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES6</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>View<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> Backbone<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'utils/modal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>template<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ExampleViewTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'templates/exampleview'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ExampleView <span class=\"token operator\">=</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    template<span class=\"token punctuation\">:</span> ExampleViewTemplate<span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showSuccess'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showError'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        View<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Alert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>ES6 allows us to clean up our original example a lot!  We’re able to ditch the wrapping function, and instead pull our dependencies directly at the top of the file, with clear pointers to module paths so that new developers can easily go find the code we’re referencing.  At a smaller level, we’ve cleaned up many of the annoyances from the original code.  We no longer have to slice arguments; instead we can use the rest operator to collect all of the arguments as an array and pass them to the constructor directly.  Similarly, we don’t need to explicitly check for undefined anymore in showModal since we can display default arguments.  Finally, we can get rid of some function boilerplate, removing the function keyword completely for object methods and changing the <code class=\"language-text\">bind(this)</code> from onModalClose to use an ES6 lambda function.  All of this is helpful, and represents the best of what is stable for production at the moment.  But if we want to look ahead to the current proposed ES7 additions, we’ll be able to clean this code up even more.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES7</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>View<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> Backbone<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'utils/modal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>template<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ExampleViewTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'templates/exampleview'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n\n    template <span class=\"token operator\">=</span> ExampleViewTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Alert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onModalClose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>ES7 allows us to clean up more boilerplate using classes <sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup>, static properties, and <code class=\"language-text\">::</code> as a special shorthand for function binding.  But it also allows us to start actually improving the interface of Backbone itself.  The example above uses decorators to define extra behaviors that wrap the View’s methods. In this case decorators <a href=\"http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\">allow us to contextualize the events to function mapping</a> for our View, improving on the default events hash that Backbone provides.  There are many examples of similar convenient conventions that are being experimented with in the React community. Backbone developers can learn a lot here by looking through React code.  Since React components are syntactically similar to Backbone Views (even though the underlying model is quite different), it’s easy to learn a lot of new JavaScript techniques that can be used in Backbone in the process.</p>\n<h3>Idea 3: Don’t use DOM as a source of state</h3>\n<p>The final big idea that Backbone developers can learn from React is its insistence on not using the DOM as a source of state.  React encourages a programming model where in theory, any component can be re-rendered at any time based on a change in data.  That means that any UI state must be captured in code and not in the UI.  This is another approach that requires programmer discipline in Backbone.  It means that instead of just typing out <code class=\"language-text\">this.$(&#39;.main-content&#39;).addClass(&#39;highlighted&#39;)</code>, you’ll want to set an <code class=\"language-text\">contentIsHighlighted</code> variable somewhere and then either re-render your view or do a structured update based on your state.  That way, instead of having to read the DOM later to know the state of your application it is all copied in code.  This leads to better testability, more predictable code and fewer edge cases when the structure of your HTML changes.  </p>\n<p>This idea was historically the primary benefit for Backbone apps over pure jQuery applications.  But the truth is that while Backbone does a good job of pulling application data into code with models and collections, it makes it very tempting to encode UI state info in the DOM by exposing jQuery helpers and not providing a canonical way to store view state.  Still, a little discipline goes a long way.  By using a separate Backbone Model as a view-model or just storing your state as properties on the view object itself, you can pull your state out of the DOM and make it much easier to inspect and reason about when you’re debugging your code or trying to refactor.</p>\n<p>You probably can’t take this idea to the full extent that React takes it using Backbone.  The extreme end of the React philosophy is to use React components as stateless functions that simply take application data and ui state as arguments and return an HTML representation of the UI.  This means that React interfaces can be re-rendered completely after any change without losing information.  React supports this and makes it performant by using a “virtual DOM” to generate the new HTML that would result from a data or state change, compare it to the existing HTML, and then only make the changes that are required in the actual DOM <sup id=\"fnref:3\"><a href=\"#fn:3\">3</a></sup>.  That works well in React since it has a clear concept of what is controlled by each component.  As previously noted, Backbone does not strongly encapsulate its Views, which complicates doing the type of virtual DOM analysis that React manages.  So it’s more practical to focus on pulling state out of Views and managing re-renders based on Backbone’s event system (the idiomatic Backbone approach).  If you want to pursue the UI as pure functional programming paradigm, you’d probably do better moving off Backbone to a system designed for that like React, <a href=\"http://cycle.js.org/\">cycle.js</a>, <a href=\"https://github.com/omcljs/om\">Om</a>, or <a href=\"https://github.com/Reactive-Extensions/RxJS\">rxjs</a>.  But even if you can’t go all in on functional UI programming in your current code base, understanding the problems inherent with using DOM to manage state will help you write better Backbone apps.</p>\n<h3>React Resources Round-up</h3>\n<p>If you’re interested in learning more about React, many others have put together better resources than I’m capable of.  Here’s a quick roundup of some of the resources I’ve found helpful.</p>\n<h4>Intro</h4>\n<ul>\n<li>If you want to get a big picture view of what React is about, I’d recommend starting with this <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">2013 conference video</a> where a member of the React team, addresses some of the criticisms that React received early on and lays out the ideas behind the library.  Some of the details have changed since, but the big picture view remains.</li>\n<li>The React documentation is also exceptionally well-written and accessible.  This blurb on <a href=\"http://facebook.github.io/react/docs/thinking-in-react.html\">thinking in react</a> is a good place to start.</li>\n</ul>\n<h4>Talks</h4>\n<ul>\n<li>If you want to see some of the nice potential side effects that React can provide <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">this talk</a> by Dan Abramov, the creator of Redux, shows how easy it is to create developer tools that significantly improve a developers feedback loop and user experience while writing code.</li>\n<li>The <a href=\"https://www.youtube.com/watch?v=PAA9O4E1IM4\">keynote from React Europe</a> gives a good feel for the current state of the ecosystem around React.</li>\n</ul>\n<h4>Articles</h4>\n<ul>\n<li><a href=\"http://rauchg.com/2015/pure-ui/\">Pure UI</a> by Guillermo Rauch is the best explanation I’ve read of the benefits of the UI model that React encourages, though it is not specifically about React.</li>\n<li>One of the biggest instinctive objections many developers have when they first see React code is the mixing of JavaScript and the HTML syntax of JSX inside a single file.  <a href=\"https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918\">Eric Elliot has a nice post on medium</a> examining those objections and explaining why JSX makes sense.</li>\n</ul>\n<h4>Projects</h4>\n<ul>\n<li><a href=\"https://facebook.github.io/flux/\">Flux</a> is one of the 2 main data management frameworks that Facebook and the React team recommend for use with React.  The second newer one, <a href=\"https://facebook.github.io/relay/\">Relay</a> is a bit more crazy advanced and requires a very specific type of backend API to implement.  If you’re interested in Flux, also make sure to check out <a href=\"https://github.com/rackt/redux\">Redux</a>, an opinionated flux implementation focused pure functional programming concepts.</li>\n<li><a href=\"https://github.com/rackt/react-router\">React Router</a> is a router for React applications based on Ember’s router.  It provides a nice declarative model for defining routes based on JSX, the JS language extension that Facebook created along with React</li>\n<li><a href=\"https://babeljs.io/\">Babel</a> isn’t a react specific technology, but its important to understand it if you want to digest most of the React examples out there, or build a React app yourself, since it is now recommended as the tool for writing React code in an idiomatic style.</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        Well at this point many frameworks are doubling down on \"1st class experiences\" with Babel (React/Ember) or Typescript (Angular2).  But Backbone at least doesn't care what transpilers you use or don't, and the other libraries are all still usable with vanilla ES5 JavaScript.\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:2\">\n        <p>\n        Yes I know that classes are an ES6 feature.  But without decorators, using them with Backbone <a href=\"http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\">is clunky</a>.\n        </p>\n        <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n    </li>\n        <li class=\"footnote\" id=\"fn:3\">\n            <p>\n            In addition to other performance enhancements if an app is structured in a way that it can be determined exactly which data changed.\n            </p>\n            <a href=\"#fnref:3\" title=\"return to article\"> ↩</a></p>\n        </li>\n</ol>\n</div>","fields":{"slug":"/2015/09/09/what-can-backbone-developers-learn-from-react"}}}],"topic":"React"}}