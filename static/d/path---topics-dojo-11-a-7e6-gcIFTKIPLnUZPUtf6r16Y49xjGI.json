{"pageContext":{"jsonName":"topics-dojo-11a","internalComponentName":"ComponentTopicsDojo","path":"/topics/Dojo","component":"/home/travis/build/benmccormick/benmccormickorg/src/templates/topic-page.js","componentChunkName":"component---src-templates-topic-page-js","context":{"posts":[{"node":{"frontmatter":{"readNext":null,"topics":["Dojo"],"category":"frameworks","key":null,"title":"Modern Dojo: Exploring declare","description":"A dive into the _base/declare module","layout":"post","path":"/2013/11/14/modern-dojo-exploring-dojo_basedeclare","date":"2013-11-14T23:15:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>This is part 2 of my ongoing exploration of <a href=\"http://dojotoolkit.org/\">Dojo</a>’s important modules and concepts.  Specifically this post will be examining dojo/_base/declare, Dojo’s object oriented programming helper module.</p>\n<h2>What is dojo/_base/declare used for?</h2>\n<p>dojo/_base/declare (henceforth “declare”) is the Dojo module for dom assisting with Object Oriented Programming.  It provides a function that allows for easy “classical style” inheritance, as well as mixins.  It is fairly flexible, and there seem to be several ways to use it.  I’m going to explore those here.</p>\n<h2>How do you use declare?</h2>\n<p>Dojo’s declare function takes up to 3 arguments.  The first argument, which is optional, gives a fully qualified namespaced class name <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.  The second argument is a string or an array specifying a class or set of classes that the new class will inherit from.  This argument can also be null.  The final argument is an object with the properties we want the new class to contain.  The full 3 argument syntax looks like the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//declare with a className argument</span>\n\n<span class=\"token comment\">//pull in the declare module</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//we're going to create a class in the global myApp namespace</span>\n  <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myApp.examples.Messenger\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//since our class was created globally, we can access it wherever</span>\n  <span class=\"token comment\">//we want, by refering to the namespace property</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myApp<span class=\"token punctuation\">.</span>examples<span class=\"token punctuation\">.</span>Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This syntax works fine, but to me it seems fairly contrary to the spirit of Modern Dojo.  Rather than keeping the class definition bound in a module, it is instead pushed out as a global, using namespacing techniques rather than AMD style modules for code organization.  It seems to be solely a product of supporting legacy implementations and Dojo’s declarative syntax.  As such I’m going to spend the rest of this piece focusing on the 2 argument syntax, where the above example would look like what we have below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//declare without the className argument</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//since our class was created locally, we can access it here</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//If we need access our class in other places, we can return it</span>\n  <span class=\"token comment\">//from a module and then load it as a dependency where needed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>So what is this simple example actually doing?  declare takes the object that you pass and adds it to the prototype chain of your class.  It’s important to understand that properties on the prototype are shared between all objects based on that class.  This is perfect for functions, as they only need to be created once.  It also works well for primitive values, since if we rewrite them the values will be added to the object itself rather than the prototype.  Putting properties on the prototype can lead to unexpected behavior when dealing with arrays and more complex objects though.  So its important to understand how the prototype chain works.  For example, the code below produces unexpected output since the messages array is shared between all Messengers.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    sendMessages<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//change the messages array on messenger</span>\n  messenger<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extra value\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//and the change has populated to all instances of Messages</span>\n  messenger2<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//logs [\"hello\", \"world\", \"extra value\"]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Fortunately Dojo provides an easy way to get around this issue with the special constructor property.  If you define the constructor property of your object as a function, dojo treats that property as the constructor for your class and runs it when instantiating your class.  This allows you to have local properties, and only share properties that should be shared.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Constructor example</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    sendMessages<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//change the messages array on messenger</span>\n  messenger<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extra value\"</span><span class=\"token punctuation\">)</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs [\"hello\",\"world\",\"extra value\"]</span>\n  <span class=\"token comment\">//and the change has not populated to other instances of Messages</span>\n  messenger2<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs [\"hello\",\"world\"]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Dojo also provides a special helper function to allow you to define arbitrary properties on a member of the class when an object is created.  You can use code like this to accept object arguments that you can map to properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//safeMixin example</span>\n\n<span class=\"token keyword\">var</span> TestObject <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">:</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n  constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//make the constructor arguments a mixin</span>\n    declare<span class=\"token punctuation\">.</span><span class=\"token function\">safeMixin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//then we can stick with the default value</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//or come up with our own</span>\n<span class=\"token keyword\">var</span> spicyTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span><span class=\"token string\">\"spicy\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>spicyTest<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"spicy\"</span></code></pre>\n      </div>\n<h4>Inheritance</h4>\n<p>declare also provides a flexible inheritance option.  In the examples above, we created a class without any inheritance by passing null as the superClass argument.  But we can also specify a class as a superclass.  For instance to create a new messenger that alerts your message instead of logging them, you could inherit the existing Messenger class like the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Basic Inheritance</span>\n\n<span class=\"token keyword\">var</span> AlertMessenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>Messenger<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> alerter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalerter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//alerts the message</span></code></pre>\n      </div>\n<p>In this example, AlertMessenger inherits the constructor property from Messenger, but overrides the sendMessage function.  So we change the functionality in a classical OO way.</p>\n<p>One nice feature of Dojo’s OO implementation is that it is easy to make calls up the prototype change even when we are overriding functions.  So for instance if we wanted our AlertMessenger class to send an alert while still logging the message in the console, we could use <code class=\"language-text\">this.inherited</code> to make it happen.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//this.inherited Example</span>\n\n<span class=\"token keyword\">var</span> AlertMessenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>Messenger<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//calls up the prototype chain to Messenger's sendMessage function</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inherited</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> alerter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalerter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//alerts and logs the message</span></code></pre>\n      </div>\n<p>So we still have access to overriden functions if used judiciously. Also, each constructor will be executed along the prototype chain, so there is no need to use <code class=\"language-text\">this.inherited</code> in a constructor context.</p>\n<h4>Mixins</h4>\n<p>But we’re not limited to a single inheritance instance.  We can still do more.  We can also pass an array of classes to the className argument, allowing us to inherit from multiple types at once. The first argument is the base of the prototype chain, and its extended from there, with the additional class properties being mixed in.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Multi-Inheritance Example</span>\n\n<span class=\"token keyword\">var</span> Lion <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Bird <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">,</span>\n  wings<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bird\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Human <span class=\"token operator\">=</span> <span class=\"token function\">declare</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"human\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Sphinx is declared with 3 mixins</span>\n<span class=\"token comment\">//lion is first, then bird, then human</span>\n<span class=\"token keyword\">var</span> Sphinx <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Lion<span class=\"token punctuation\">,</span>Bird<span class=\"token punctuation\">,</span>Human<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//head gets overriden by human last, wings body and legs are never overriden and stay with their first set values</span>\n\n  aboutMe<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have the head of a \"</span><span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">+</span>\n           <span class=\"token string\">\", the wings of a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wings <span class=\"token operator\">+</span>\n           <span class=\"token string\">\", and the body of a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> sphinx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sphinx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsphinx<span class=\"token punctuation\">.</span><span class=\"token function\">aboutMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//I have the head of a human, the wings of a bird, and the body of a lion</span></code></pre>\n      </div>\n<h2>When should I use dojo/_base/declare</h2>\n<p>declare seems like a great choice for creating reusable objects, and allows for either a classical inheritance style or a more flexible mixin style.  Its a bit of overkill for simple or one off objects, but for defining the structure of a complex model, it seems like a great fit.</p>\n<p>Personally I’m going to avoid the className syntax unless I find a use for it that I currently don’t see.  It seems to be a legacy option that is completely at odds with the rest of Dojo’s avoidance of global variables.  The 2 argument syntax on the other hand, seems like a great choice for creating maintainable and reusable classes.</p>\n<p>declare should be especially useful for programmers who want to implement a classical inheritance structure in JS.  It makes the syntax quick and straightforward.  The only gotcha I see is the need to be aware of how the prototype chain works under the covers so that there’s no being burned by unexpected sharing of changes.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href=\"http://dojotoolkit.org/documentation/tutorials/1.9/declare/\">Official Dojo tutorial on dojo/_base/declare</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/declare.html\">Dojo docs on dojo/_base/declare</a></li>\n<li><a href=\"/blog/2013/01/12/javascript-explained-object-oriented-javascript/\">JS Explained: Object Oriented Javascript</a></li>\n</ul>\n<h3>Other Modern Dojo Posts</h3>\n<ul>\n<li><a href=\"/blog/2013/11/13/modern-dojo-dojo-query/\">Exploring dojo/query</a></li>\n</ul>\n<div class=\"footnotes\"><ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        I'm not a fan of the dojo convention of having optional arguments be first in some cases.  It seems very strange that arguments might \"shift\" and not line up as expected.  I can understand in this case not wanting to have a small string parameter after a potentially large object listing the class properties, but it still makes for a confusingly inconsistent API.\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol></div>","fields":{"slug":"/2013/11/14/modern-dojo-exploring-dojo_basedeclare"}}},{"node":{"frontmatter":{"readNext":null,"topics":["Dojo"],"category":"frameworks","key":null,"title":"Modern Dojo: Exploring query","description":"A dive into the query module","layout":"post","path":"/2013/11/13/modern-dojo-exploring-dojoquery","date":"2013-11-13T23:15:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>It appears I’m going to be spending a significant amount of time working with <a href=\"http://dojotoolkit.org/\">the Dojo toolkit</a> for my next project at work, so I’ve spent some time over the last few days trying to familiarize myself with the library.  Its quickly become apparent that there are a few challenges with learning Dojo at the pace I wanted.  First, Dojo is built as a lightweight core with many small modules of functionality available as components.  It’s effectively completely modularized in a way that no other framework really is (though jQuery appears to be moving in that direction as well).  As such, learning it is a bit decentralized.  Second, Dojo, which has existed since 2005, made a big transition back in 2011 to move to an AMD format for managing its modular components.  This resulted in a significant change in basic syntax.  Since this change happened after jQuery’s rise (which led to a significant drop in Dojo usage), it seems many examples on the web still use the old syntax, and I haven’t seen any print resources published since the change.  As a result, the resources for learning modern Dojo seem somewhat piecemeal beyond the toolkit’s website.</p>\n<p>That being the case, I’ve decided to explore Dojo’s primary modules on a case by case basis and document what I’ve learned here.  Hopefully this can be a helpful modern reference to others who are learning.  I’m going to start by exploring dojo/query, one of the primary Dojo modules, which provides jQuery selector style functions for Dojo users.</p>\n<h2>What is dojo/query for?</h2>\n<p>dojo/query is the Dojo module for dom selection.  The core module provides basic CSS selection capability, with the ability to use CSS3 style selectors if needed.  It can be extended using other modules to provide more advanced DOM traversal and manipulation functionality, effectively matching jQuery’s feature set in that area.</p>\n<h2>How do you use dojo/query?</h2>\n<p>To use dojo/query, you first need to require the module, using an AMD style require or define call.  You can then call query (or whatever you’ve aliased it to), and pass it a CSS style selector.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Basic query example</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//select all elements with class special</span>\n    <span class=\"token keyword\">var</span> elementList <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".special\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//you can also add an optional second parameter to search</span>\n    <span class=\"token comment\">//under a single DOM element,rather than the whole DOM</span>\n    <span class=\"token keyword\">var</span> parentNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elementList <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".children\"</span><span class=\"token punctuation\">,</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The query function returns a dojo/NodeList object.  This is a basic array-like wrapper object, similar to a jQuery object.  By default it contains some basic array manipulation functions, but you can also extend it with plugin modules for dom manipulation, dom traversal, and other functions.  In fact you can even write your own extensions to the object.  These extensions are loaded in as additional AMD modules. For instance, we can load dojo/NodeList-dom to extend NodeList with some basic DOM functionality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Extending NodeList</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//add a btn class to all button elements</span>\n    <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>In that simple example, the <code class=\"language-text\">addClass</code> method was added as an extension to the NodeList type by the NodeList-dom module.  So adding that module brought extra functionality.  Its relatively simple to add custom functionality in this way.  An example from the Dojo docs looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Dojo extension example</span>\n\n<span class=\"token comment\">//definition (in myapp/NodeList-custom.js)</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/lang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  lang<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>NodeList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    makeRed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//usage (in another file)</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myapp/NodeList-custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".greenText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeRed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This is great for modularizing common patterns and functionality, and is a core Dojo concept, not just a dojo/query feature.</p>\n<h2>How does dojo/query perform?</h2>\n<p>I was curious about how dojo/query performance stacked up to jQuery.  So I set up some performance tests on <a href=\"http://jsperf.com/\">jsPerf</a> to take a look.  I compared Dojo to jQuery across a few common and simple selection and manipulation operations.  The results were informative.</p>\n<p>You can see the results here for</p>\n<ul>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors\">ID selection</a></li>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-search\">Class selection</a></li>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-manipulation\">DOM manipulation</a></li>\n</ul>\n<p>The results varied a bit from platform to platform, but a few things stood out.</p>\n<h4>When selecting on IDs, don’t use dojo/query</h4>\n<p>For the basic ID selection tests, dojo/query was blown away by almost everything. It is very very slow to handle it.  I was initially bothered by this, until I added the dojo/dom test.  dojo/dom’s byID function is the “dojo way” of selecting an element by ID.</p>\n<p>dom.byId appears to be a thin wrapper around the native API, with near native performance everywhere (and confusingly, better than native performance on IE11).  dojo/query meanwhile, lags way behind, literally 100x slower than a native query on Chrome 31.  You can still integrate with dojo/NodeList to get dojo/query’s chaining functionality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Method chaining with search by ID</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dojo/dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">NodeList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span><span class=\"token function\">byId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sidebar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onclick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4>For simple things operations, you can’t beat native selectors</h4>\n<p>On the basic tests, the native selectors blow away the library results, with little downside.  When you’re simply trying to access an element and, for instance, change its inner HTML, native selectors will scale much better.</p>\n<p>However, the situation begins to become more complicated when more complex queries are involved.  My manipulation example is still a relatively simple example, but the trade-offs start becoming a lot more substantial very rapidly.  For the manipulation example, native code requires significantly more code.  The simplest method of doing things is not supported on IE9, and requires you to understand the distinction between an HTMLCollection and a normal Javascript array.  A solution that supports IE9 and handles other edge cases involves even more code, and performs in the same range as Dojo and jQuery.</p>\n<h4>dojo/query seems to lag behind jQuery in performance, but its in the ballpark</h4>\n<p>dojo/query was consistently outperformed by jQuery in the testing that I did.  But while the gap between native selectors and library versions is very wide, the dojo/jQuery divide seems to be on the order of a 2-4x increase in speed on basic operations.  Thats significant, but hardly damning. If selector performance is your primary criteria for choosing a library, jQuery should be your pick.  But Dojo is competitive enough here, that it doesn’t seem disqualified for use if you have other reasons for doing so.</p>\n<h2>When should I use dojo/query?</h2>\n<p>To sum it all up, it looks like the query library is a great choice for providing jQuery selector style functionality for Dojo users.  It’s small, lightweight, and allows you to load only the things you need to get the job done.  If you only are looking for this type of selector functionality, a custom built jQuery package might be a better fit. But if you’re already using Dojo, dojo/query will get the job done very well.  Just don’t use it to search on id’s.  Use dojo/dom or native selectors instead.</p>\n<h2>More Resources</h2>\n<ul>\n<li><a href=\"https://dojotoolkit.org/documentation/tutorials/1.9/using_query/\">Official Dojo tutorial on dojo/query</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/query.html\">Dojo docs on dojo/query</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/NodeList.html\">Dojo docs on NodeList</a></li>\n</ul>","fields":{"slug":"/2013/11/13/modern-dojo-exploring-dojoquery"}}}],"topic":"Dojo"},"updatedAt":1529432535316,"pluginCreator___NODE":"Plugin default-site-plugin","pluginCreatorId":"Plugin default-site-plugin","componentPath":"/home/travis/build/benmccormick/benmccormickorg/src/templates/topic-page.js","posts":[{"node":{"frontmatter":{"readNext":null,"topics":["Dojo"],"category":"frameworks","key":null,"title":"Modern Dojo: Exploring declare","description":"A dive into the _base/declare module","layout":"post","path":"/2013/11/14/modern-dojo-exploring-dojo_basedeclare","date":"2013-11-14T23:15:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>This is part 2 of my ongoing exploration of <a href=\"http://dojotoolkit.org/\">Dojo</a>’s important modules and concepts.  Specifically this post will be examining dojo/_base/declare, Dojo’s object oriented programming helper module.</p>\n<h2>What is dojo/_base/declare used for?</h2>\n<p>dojo/_base/declare (henceforth “declare”) is the Dojo module for dom assisting with Object Oriented Programming.  It provides a function that allows for easy “classical style” inheritance, as well as mixins.  It is fairly flexible, and there seem to be several ways to use it.  I’m going to explore those here.</p>\n<h2>How do you use declare?</h2>\n<p>Dojo’s declare function takes up to 3 arguments.  The first argument, which is optional, gives a fully qualified namespaced class name <sup id=\"fnref:1\"><a href=\"#fn:1\" rel=\"footnote\">1</a></sup>.  The second argument is a string or an array specifying a class or set of classes that the new class will inherit from.  This argument can also be null.  The final argument is an object with the properties we want the new class to contain.  The full 3 argument syntax looks like the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//declare with a className argument</span>\n\n<span class=\"token comment\">//pull in the declare module</span>\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">//we're going to create a class in the global myApp namespace</span>\n  <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myApp.examples.Messenger\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//since our class was created globally, we can access it wherever</span>\n  <span class=\"token comment\">//we want, by refering to the namespace property</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">myApp<span class=\"token punctuation\">.</span>examples<span class=\"token punctuation\">.</span>Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This syntax works fine, but to me it seems fairly contrary to the spirit of Modern Dojo.  Rather than keeping the class definition bound in a module, it is instead pushed out as a global, using namespacing techniques rather than AMD style modules for code organization.  It seems to be solely a product of supporting legacy implementations and Dojo’s declarative syntax.  As such I’m going to spend the rest of this piece focusing on the 2 argument syntax, where the above example would look like what we have below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//declare without the className argument</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    message<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello world\"</span><span class=\"token punctuation\">,</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//since our class was created locally, we can access it here</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//If we need access our class in other places, we can return it</span>\n  <span class=\"token comment\">//from a module and then load it as a dependency where needed</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>So what is this simple example actually doing?  declare takes the object that you pass and adds it to the prototype chain of your class.  It’s important to understand that properties on the prototype are shared between all objects based on that class.  This is perfect for functions, as they only need to be created once.  It also works well for primitive values, since if we rewrite them the values will be added to the object itself rather than the prototype.  Putting properties on the prototype can lead to unexpected behavior when dealing with arrays and more complex objects though.  So its important to understand how the prototype chain works.  For example, the code below produces unexpected output since the messages array is shared between all Messengers.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    messages<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    sendMessages<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//change the messages array on messenger</span>\n  messenger<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extra value\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//and the change has populated to all instances of Messages</span>\n  messenger2<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//logs [\"hello\", \"world\", \"extra value\"]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Fortunately Dojo provides an easy way to get around this issue with the special constructor property.  If you define the constructor property of your object as a function, dojo treats that property as the constructor for your class and runs it when instantiating your class.  This allows you to have local properties, and only share properties that should be shared.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Constructor example</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/declare\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>declare<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">var</span> Messenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    sendMessages<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">var</span> messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> messenger2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//change the messages array on messenger</span>\n  messenger<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extra value\"</span><span class=\"token punctuation\">)</span>\n  messenger<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs [\"hello\",\"world\",\"extra value\"]</span>\n  <span class=\"token comment\">//and the change has not populated to other instances of Messages</span>\n  messenger2<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//logs [\"hello\",\"world\"]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Dojo also provides a special helper function to allow you to define arbitrary properties on a member of the class when an object is created.  You can use code like this to accept object arguments that you can map to properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//safeMixin example</span>\n\n<span class=\"token keyword\">var</span> TestObject <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  val<span class=\"token punctuation\">:</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span>\n  constructor<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//make the constructor arguments a mixin</span>\n    declare<span class=\"token punctuation\">.</span><span class=\"token function\">safeMixin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//then we can stick with the default value</span>\n<span class=\"token keyword\">var</span> test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//or come up with our own</span>\n<span class=\"token keyword\">var</span> spicyTest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>val<span class=\"token punctuation\">:</span><span class=\"token string\">\"spicy\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>spicyTest<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span> <span class=\"token comment\">//\"spicy\"</span></code></pre>\n      </div>\n<h4>Inheritance</h4>\n<p>declare also provides a flexible inheritance option.  In the examples above, we created a class without any inheritance by passing null as the superClass argument.  But we can also specify a class as a superclass.  For instance to create a new messenger that alerts your message instead of logging them, you could inherit the existing Messenger class like the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Basic Inheritance</span>\n\n<span class=\"token keyword\">var</span> AlertMessenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>Messenger<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> alerter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalerter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//alerts the message</span></code></pre>\n      </div>\n<p>In this example, AlertMessenger inherits the constructor property from Messenger, but overrides the sendMessage function.  So we change the functionality in a classical OO way.</p>\n<p>One nice feature of Dojo’s OO implementation is that it is easy to make calls up the prototype change even when we are overriding functions.  So for instance if we wanted our AlertMessenger class to send an alert while still logging the message in the console, we could use <code class=\"language-text\">this.inherited</code> to make it happen.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//this.inherited Example</span>\n\n<span class=\"token keyword\">var</span> AlertMessenger <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span>Messenger<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    sendMessage<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//calls up the prototype chain to Messenger's sendMessage function</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">inherited</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> alerter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nalerter<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//alerts and logs the message</span></code></pre>\n      </div>\n<p>So we still have access to overriden functions if used judiciously. Also, each constructor will be executed along the prototype chain, so there is no need to use <code class=\"language-text\">this.inherited</code> in a constructor context.</p>\n<h4>Mixins</h4>\n<p>But we’re not limited to a single inheritance instance.  We can still do more.  We can also pass an array of classes to the className argument, allowing us to inherit from multiple types at once. The first argument is the base of the prototype chain, and its extended from there, with the additional class properties being mixed in.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Multi-Inheritance Example</span>\n\n<span class=\"token keyword\">var</span> Lion <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span><span class=\"token punctuation\">,</span>\n  body<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span><span class=\"token punctuation\">,</span>\n  legs<span class=\"token punctuation\">:</span> <span class=\"token string\">\"lion\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Bird <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bird\"</span><span class=\"token punctuation\">,</span>\n  wings<span class=\"token punctuation\">:</span> <span class=\"token string\">\"bird\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> Human <span class=\"token operator\">=</span> <span class=\"token function\">declare</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  head<span class=\"token punctuation\">:</span> <span class=\"token string\">\"human\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Sphinx is declared with 3 mixins</span>\n<span class=\"token comment\">//lion is first, then bird, then human</span>\n<span class=\"token keyword\">var</span> Sphinx <span class=\"token operator\">=</span> <span class=\"token function\">declare</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>Lion<span class=\"token punctuation\">,</span>Bird<span class=\"token punctuation\">,</span>Human<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//head gets overriden by human last, wings body and legs are never overriden and stay with their first set values</span>\n\n  aboutMe<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I have the head of a \"</span><span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">+</span>\n           <span class=\"token string\">\", the wings of a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>wings <span class=\"token operator\">+</span>\n           <span class=\"token string\">\", and the body of a \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> sphinx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Sphinx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsphinx<span class=\"token punctuation\">.</span><span class=\"token function\">aboutMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//I have the head of a human, the wings of a bird, and the body of a lion</span></code></pre>\n      </div>\n<h2>When should I use dojo/_base/declare</h2>\n<p>declare seems like a great choice for creating reusable objects, and allows for either a classical inheritance style or a more flexible mixin style.  Its a bit of overkill for simple or one off objects, but for defining the structure of a complex model, it seems like a great fit.</p>\n<p>Personally I’m going to avoid the className syntax unless I find a use for it that I currently don’t see.  It seems to be a legacy option that is completely at odds with the rest of Dojo’s avoidance of global variables.  The 2 argument syntax on the other hand, seems like a great choice for creating maintainable and reusable classes.</p>\n<p>declare should be especially useful for programmers who want to implement a classical inheritance structure in JS.  It makes the syntax quick and straightforward.  The only gotcha I see is the need to be aware of how the prototype chain works under the covers so that there’s no being burned by unexpected sharing of changes.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href=\"http://dojotoolkit.org/documentation/tutorials/1.9/declare/\">Official Dojo tutorial on dojo/_base/declare</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/_base/declare.html\">Dojo docs on dojo/_base/declare</a></li>\n<li><a href=\"/blog/2013/01/12/javascript-explained-object-oriented-javascript/\">JS Explained: Object Oriented Javascript</a></li>\n</ul>\n<h3>Other Modern Dojo Posts</h3>\n<ul>\n<li><a href=\"/blog/2013/11/13/modern-dojo-dojo-query/\">Exploring dojo/query</a></li>\n</ul>\n<div class=\"footnotes\"><ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        I'm not a fan of the dojo convention of having optional arguments be first in some cases.  It seems very strange that arguments might \"shift\" and not line up as expected.  I can understand in this case not wanting to have a small string parameter after a potentially large object listing the class properties, but it still makes for a confusingly inconsistent API.\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol></div>","fields":{"slug":"/2013/11/14/modern-dojo-exploring-dojo_basedeclare"}}},{"node":{"frontmatter":{"readNext":null,"topics":["Dojo"],"category":"frameworks","key":null,"title":"Modern Dojo: Exploring query","description":"A dive into the query module","layout":"post","path":"/2013/11/13/modern-dojo-exploring-dojoquery","date":"2013-11-13T23:15:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>It appears I’m going to be spending a significant amount of time working with <a href=\"http://dojotoolkit.org/\">the Dojo toolkit</a> for my next project at work, so I’ve spent some time over the last few days trying to familiarize myself with the library.  Its quickly become apparent that there are a few challenges with learning Dojo at the pace I wanted.  First, Dojo is built as a lightweight core with many small modules of functionality available as components.  It’s effectively completely modularized in a way that no other framework really is (though jQuery appears to be moving in that direction as well).  As such, learning it is a bit decentralized.  Second, Dojo, which has existed since 2005, made a big transition back in 2011 to move to an AMD format for managing its modular components.  This resulted in a significant change in basic syntax.  Since this change happened after jQuery’s rise (which led to a significant drop in Dojo usage), it seems many examples on the web still use the old syntax, and I haven’t seen any print resources published since the change.  As a result, the resources for learning modern Dojo seem somewhat piecemeal beyond the toolkit’s website.</p>\n<p>That being the case, I’ve decided to explore Dojo’s primary modules on a case by case basis and document what I’ve learned here.  Hopefully this can be a helpful modern reference to others who are learning.  I’m going to start by exploring dojo/query, one of the primary Dojo modules, which provides jQuery selector style functions for Dojo users.</p>\n<h2>What is dojo/query for?</h2>\n<p>dojo/query is the Dojo module for dom selection.  The core module provides basic CSS selection capability, with the ability to use CSS3 style selectors if needed.  It can be extended using other modules to provide more advanced DOM traversal and manipulation functionality, effectively matching jQuery’s feature set in that area.</p>\n<h2>How do you use dojo/query?</h2>\n<p>To use dojo/query, you first need to require the module, using an AMD style require or define call.  You can then call query (or whatever you’ve aliased it to), and pass it a CSS style selector.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Basic query example</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//select all elements with class special</span>\n    <span class=\"token keyword\">var</span> elementList <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".special\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//you can also add an optional second parameter to search</span>\n    <span class=\"token comment\">//under a single DOM element,rather than the whole DOM</span>\n    <span class=\"token keyword\">var</span> parentNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"parent\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elementList <span class=\"token operator\">=</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".children\"</span><span class=\"token punctuation\">,</span>parentNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>The query function returns a dojo/NodeList object.  This is a basic array-like wrapper object, similar to a jQuery object.  By default it contains some basic array manipulation functions, but you can also extend it with plugin modules for dom manipulation, dom traversal, and other functions.  In fact you can even write your own extensions to the object.  These extensions are loaded in as additional AMD modules. For instance, we can load dojo/NodeList-dom to extend NodeList with some basic DOM functionality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Extending NodeList</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//add a btn class to all button elements</span>\n    <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span>btn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>In that simple example, the <code class=\"language-text\">addClass</code> method was added as an extension to the NodeList type by the NodeList-dom module.  So adding that module brought extra functionality.  Its relatively simple to add custom functionality in this way.  An example from the Dojo docs looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Dojo extension example</span>\n\n<span class=\"token comment\">//definition (in myapp/NodeList-custom.js)</span>\n<span class=\"token function\">define</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/_base/lang\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>lang<span class=\"token punctuation\">,</span> query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  lang<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">.</span>NodeList<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    makeRed<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">style</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> color<span class=\"token punctuation\">:</span> <span class=\"token string\">\"red\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//usage (in another file)</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"myapp/NodeList-custom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".greenText\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeRed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This is great for modularizing common patterns and functionality, and is a core Dojo concept, not just a dojo/query feature.</p>\n<h2>How does dojo/query perform?</h2>\n<p>I was curious about how dojo/query performance stacked up to jQuery.  So I set up some performance tests on <a href=\"http://jsperf.com/\">jsPerf</a> to take a look.  I compared Dojo to jQuery across a few common and simple selection and manipulation operations.  The results were informative.</p>\n<p>You can see the results here for</p>\n<ul>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors\">ID selection</a></li>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-search\">Class selection</a></li>\n<li><a href=\"http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-manipulation\">DOM manipulation</a></li>\n</ul>\n<p>The results varied a bit from platform to platform, but a few things stood out.</p>\n<h4>When selecting on IDs, don’t use dojo/query</h4>\n<p>For the basic ID selection tests, dojo/query was blown away by almost everything. It is very very slow to handle it.  I was initially bothered by this, until I added the dojo/dom test.  dojo/dom’s byID function is the “dojo way” of selecting an element by ID.</p>\n<p>dom.byId appears to be a thin wrapper around the native API, with near native performance everywhere (and confusingly, better than native performance on IE11).  dojo/query meanwhile, lags way behind, literally 100x slower than a native query on Chrome 31.  You can still integrate with dojo/NodeList to get dojo/query’s chaining functionality</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Method chaining with search by ID</span>\n\n<span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"dojo/query\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"dojo/dom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"dojo/NodeList-dom\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">,</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">NodeList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">.</span><span class=\"token function\">byId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    list<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sidebar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onclick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"this is the menu\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<h4>For simple things operations, you can’t beat native selectors</h4>\n<p>On the basic tests, the native selectors blow away the library results, with little downside.  When you’re simply trying to access an element and, for instance, change its inner HTML, native selectors will scale much better.</p>\n<p>However, the situation begins to become more complicated when more complex queries are involved.  My manipulation example is still a relatively simple example, but the trade-offs start becoming a lot more substantial very rapidly.  For the manipulation example, native code requires significantly more code.  The simplest method of doing things is not supported on IE9, and requires you to understand the distinction between an HTMLCollection and a normal Javascript array.  A solution that supports IE9 and handles other edge cases involves even more code, and performs in the same range as Dojo and jQuery.</p>\n<h4>dojo/query seems to lag behind jQuery in performance, but its in the ballpark</h4>\n<p>dojo/query was consistently outperformed by jQuery in the testing that I did.  But while the gap between native selectors and library versions is very wide, the dojo/jQuery divide seems to be on the order of a 2-4x increase in speed on basic operations.  Thats significant, but hardly damning. If selector performance is your primary criteria for choosing a library, jQuery should be your pick.  But Dojo is competitive enough here, that it doesn’t seem disqualified for use if you have other reasons for doing so.</p>\n<h2>When should I use dojo/query?</h2>\n<p>To sum it all up, it looks like the query library is a great choice for providing jQuery selector style functionality for Dojo users.  It’s small, lightweight, and allows you to load only the things you need to get the job done.  If you only are looking for this type of selector functionality, a custom built jQuery package might be a better fit. But if you’re already using Dojo, dojo/query will get the job done very well.  Just don’t use it to search on id’s.  Use dojo/dom or native selectors instead.</p>\n<h2>More Resources</h2>\n<ul>\n<li><a href=\"https://dojotoolkit.org/documentation/tutorials/1.9/using_query/\">Official Dojo tutorial on dojo/query</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/query.html\">Dojo docs on dojo/query</a></li>\n<li><a href=\"http://dojotoolkit.org/reference-guide/1.9/dojo/NodeList.html\">Dojo docs on NodeList</a></li>\n</ul>","fields":{"slug":"/2013/11/13/modern-dojo-exploring-dojoquery"}}}],"topic":"Dojo"}}