{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":null,"topics":["Career Advice"],"category":"software-productivity","key":"staying-productive","title":"Staying Productive","description":"Thinking through the environmental factors that lead to productivity","layout":"post","path":"/2016/01/25/staying-productive","date":"2016-01-25T04:41:46+00:00","dontfeature":null,"isDraft":null},"html":"<p>I’ve been thinking a lot lately about what makes me productive vs unproductive.  A lot of the time Software Developers tend to focus on their tools and environments when they think about productivity.  I’m certainly all into that, as you can see if you look <a href=\"http://benmccormick.org/learning-vim-in-2014/\">back</a>, <a href=\"http://benmccormick.org/2015/11/25/productive-javascript-development/\">through</a>, <a href=\"http://benmccormick.org/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far/\">my blog</a>.  But in my mind the most important factors in building productivity are non-software related.</p>\n<h3>Setting Goals</h3>\n<p>By far the most important thing I’ve found for being productive was setting clear goals for what I want to get done.  Without goal posts to aim for, it’s hard to tell what you’ve really accomplished, and easy to get pulled off onto suboptimal tasks.  Goals are best set with a wider context in mind.  The act of setting and measuring goals tends to make us focus on those areas, so make sure your goals reflect your priorities.  If you set all of your goals around work, it can be easier to justify neglecting your family.  If you set a goal of writing every day, that might overwhelm time for exercising and keeping yourself healthy.  Therefore its helpful to set goals in a holistic way that allows you to judge what you value in the big picture.</p>\n<h3>Mechanical / Creative Tasks</h3>\n<p>I saw a great <a href=\"https://news.ycombinator.com/item?id=10959022\">comment</a> on Hacker News the other day that differentiated between projects and chores. The idea is that when you’re feeling productive you should work on projects, when you’re not you should do chores.  One of the biggest boosts to my productivity I’ve found was when I started categorizing work in my head as “mechanical” vs “creative” tasks.  Mechanical tasks (ie chores) are things that require little mental energy.  They’re well defined and possibly onerous.  Examples include filing email, documenting code, code reviews, and low-thinking code tasks like reproducing a client issue or adding a small well-defined feature.  Creative tasks for me tend to look like more involved code changes designing new features, or debugging client issues that aren’t obvious.</p>\n<p>I’m not universally energetic or productive.  Some days I can focus intently on a problem, other days I have the attention span of <a href=\"https://www.youtube.com/watch?v=SSUXXzN26zg\">the dogs from UP!</a>.  When I’m able to focus, I intentionally put aside mechanical tasks, and leave them for times when I have less energy, continuous time or attention.  Oftentimes I’ll even put off higher priority mechanical tasks (or vice versa) to match my mental level to the task, because I end up getting more done sooner in the long run.</p>\n<h3>Productive Environments are a thing</h3>\n<p>It’s easy to think of productivity as a purely internal thing.  But the environment you’re in matters too.  For creative software work that means getting large blocks of non-distracting time.  That requires some intentionality.  I’ve been blessed with a workplace where I’m given plenty of flexibility.  That means that at times of high distraction-level (big projects, lots of meetings) I tend to actually do most of my work outside of the office, sometimes at weird times.  I use my time at the office for mechanical tasks and meetings, and do the creative work elsewhere.  That’s obviously suboptimal, and when I can I try to clear time during days to do creative work at the office and bunch the distractions.  However it works out for you, the key is to (as much as possible) group your distractions and leave large un-interrupted periods for creative work.</p>\n<p>Distractions can be self-inflicted as well as coming from others.  When I want to get stuff done, I try to listen to familiar music (oftentimes looping a single album for a few days).  I’ll also close Slack/Twitter/Email and other distracting apps.  Note that the distinction between mechanical and creative is important here.  When doing mechanical work, I’m fine having distractions around.  It’s only when I’m trying to harness mental energy that I care.</p>\n<h3>Day to Day work adds up</h3>\n<p>I’m a <a href=\"http://blog.codinghorror.com/the-magpie-developer/\">magpie</a>.  I love shiny new tools, projects, and ideas.  It’s very easy for me to get bored with a problem once I feel like I understand it.   I get excited by pouring effort into learning something new, not so much the hard work to finish the last 20% of what I’ve started.  What I’m slowly learning though is that it is my day-to-day work that makes an impact, not my crazy productivity binges.  Making things that last requires day to day dedication.  That also means maintaining focus.  The easiest way to waste day to day hard work is to spend it on a different thing each day.  There’s nothing wrong with trying new things.  But real productivity requires setting some priorities and sticking with them for a while.  </p>\n<h3>Team matters more than the project</h3>\n<p>Finally, individual productivity doesn’t happen in a vacuum.  Who we work with can undermine or boost our results.  I don’t believe that it’s a small difference either.  I’d rather have a great team with no individually brilliant members than a bad team with one or two great programmers any day.  One of <a href=\"http://www.windsorcircle.com/about-us/our-values\">Windsor Circle’s values</a> is that teams survive longer than individuals.  The same can be said of their results.  Teams can magnify what is possible for a product.  Any individual has limits on what he or she can create.  Teams allow for those limits to be lifted by building on each others skills. At the same time, teams can limit each other by fighting, mis-communicating, distracting, or pursuing different goals.  So all of the other productivities ideas here can be applied just as well to a team as they do to an individual.  The best work comes from teams consistently working together towards a common goal over a long period of time in a constant and productive environment.</p>","fields":{"slug":"/2016/01/25/staying-productive"}}},{"node":{"frontmatter":{"readNext":null,"topics":["Career Advice"],"category":"opinion","key":null,"title":"Career Fairs: How To Not Get Hired (And How To Give Yourself A Chance)","description":"What to do when you want a job","layout":"post","path":"/2013/01/25/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance","date":"2013-01-25T19:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>It was 9:15 and I had just arrived at the gym where the career fair was set to start at 10:00.  Company representatives were setting up their wares in the background and enjoying the provided bagels and coffee, chatting with each other before the rush set to begin at 10.  Arriving at my company’s booth, I tossed my bag down and leaned over to fill out a name tag.  As I stood up, I was greeted by a sheet of paper being shoved in my face.  “Here is my resume!” Bob said as he transferred the paper from my face to my hands.  I was then greeted with a 2 minute monologue explaining why Bob would be the perfect candidate to work for my company.  Eventually I was able to get a word in edgewise, introduce myself, and ask him to come back in 45 minutes when the fair started.  As I walked over to get my much needed bagel, I reflected to myself that Bob would really have to be super impressive to get an interview when he came back to our booth.</p>\n<p>Career Fairs should not be hard.  When recruiters come to a career fair, it is with the sole mission to find students who they can interview for jobs.  When students come to career fairs, they do so to find a company willing to give them a job.  But a lot of the time both sides leave disappointed. I received my first interview for my current company at a career fair, and have now worked at several as a recruiter. There is plenty that can be said about how recruiters can improve in how they reach out to students and other candidates.  But in this post I’d like to point out a few simple things that students can do (or not do) to stand out from the crowd and give themselves their best chance for an interview.</p>\n<h4>Prepare</h4>\n<p>This is repeated a lot by career counselors, and I think its hard to understand from the student point of view sometimes.  Students think of career fairs as a place to learn about companies.  And thats valid to some extent.  Certainly for younger students its a great way to see what options are out there.  But as a recruiter the first thing I want to know about a student is “what type of position are you interested in”  If they can’t answer that question, no matter how impressive they are, I would be hesitant to give them an interview.</p>\n<p>Preparing for a career fair means knowing what you want, and having at least some idea who might be able to help you get it.  There’s fairly little I can do to help a student who comes up to me and asks “So do you guys have any jobs that don’t involve technology?” which is actually probably the most common question we receive.  There’s much more that we can say to help a student who comes to us and tells us that they’re interested in marketing, or environmental concerns, or really anything else specific.  The second student lets us picture how they could fit in and help our organization, the first student just emphasizes how they don’t fit.</p>\n<h4>Never apologize for yourself</h4>\n<p>This may be the biggest problem that students have communicating with recruiters.  Perhaps because of the perception of a loaded job market, students seem much more aware of how their resumes fall short compared to their peers rather than how they stand out.  Unfortunately they tend to convey this to recruiters rather frequently.  Bob’s early morning greeting certainly had its issues, but one thing that he did really well was emphasize what he would bring to our company.</p>\n<p>Something that students fail to understand is that recruiters are usually looking for reasons to like an applicant.  They will take a chance on a candidate with weaknesses on his resume if he or she is genuinely able to show how they can fit into a company.  What is a lot harder to work with is a large assortment of candidates who all have good GPAs, some reasonable experience, and absolutely nothing to differentiate themselves from others.  In an interview setting a student will probably have to explain any weaknesses on their resume.  But a career fair is not an interview.  Its an opportunity to make an impression.  That happens when a student shows that they will bring something positive and useful to the company.</p>\n<h4>Take chances, and learn from your mistakes</h4>\n<p>One of the great things about career fairs is that you have the opportunity to instantly apply new lessons you’ve learned.  Recruiters don’t have some sort of group social network that they’re keeping profiles of you on.  If you go to one company’s booth and have a bad conversation, that doesn’t follow you around to the rest of your interactions with companies unless you let it.  Instead you can learn from your mistakes and hopefully get more comfortable and confident as you get more used to how career fair interactions work.</p>\n<h4>Don’t try to cheat the process</h4>\n<p>Our early morning encounter was not the last I saw of Bob that day.  He came back an hour later and I got to hear another, slightly toned down, explanation of why he would be perfect for my company.  I asked him a few questions and as we wrapped up I told him we would take his resume and be in touch if we were able to offer him an interview.  He asked if I would be able to sign him up for an interview right then.  When I said that I could not, he then asked if he could talk to my coworker who was also recruiting for the same position.  I politely told him that I couldn’t stop him, but that I’d prefer that he left him free to talk with other candidates, and that I’d be happy to answer any more questions he had.  He said that it was fine and walked away.  Five minutes later, I looked over to see my coworker being treated to Bob’s full explanation of why he would be a great candidate.</p>\n<p>Assertiveness is in no way a bad thing.  But being able to accept a no and learn from it is also important.  Recruiters will generally be happy to tell a candidate how they could work to be a better candidate for their job, and some may even be willing to meet or exchange emails outside the fair setting to work with a candidate.  If you don’t receive an interview, building a relationship can be an even better outcome of meeting with a recruiter at a career fair.  But trying to subvert the system will pretty much guarantee that you end up with neither.  Other examples of this include trying to badger a recruiter for information they’ve said they don’t know or can’t give, talking down other candidates, or (more obviously) lying about your qualifications.</p>\n<h4>Pay attention</h4>\n<p>I received this advice from a speaker at Carnegie Mellon before I went to the career fair that ended up leading to my first fulltime job.  It turned out to be the best thing he could have said to me.  When you’re in line to talk to a recruiter at a career fair, pay attention to the situation.  What type of questions are they asking candidates?  Are they mostly giving information, or trying to ask more interview style questions.  <a href=\"http://www.amazon.com/gp/jobs\">Some companies</a> will even ask technical questions at a career fair, and thats certainly something that you would want to know before you start talking to them.</p>\n<p>In my case by listening I was able to learn that the recruiter I was interviewing was frustrated by the lack of Computer Science candidates he was meeting that day, and particularly frustrated that he was having to turn away qualified international students because he had a limit on how many candidates his company could sponsor for overseas work.  When it was my turn to talk to him I was able to open by telling him that he could “accept or reject me on my own merits”, and then focused on telling him about my undergraduate computer science degree, with a lesser emphasis on my more management focused graduate program.  As a result I was able to open a personal connection and present myself as an answer to his frustrations,  whereas coming in unaware I may have set myself up as just another student in the wrong degree program who was less of a fit than the international students he was having to send away.</p>\n<h4>Don’t forget that recruiters are human</h4>\n<p>The first 5 points all point to this last one.  Preparation is a way of showing recruiters that you value their time.  When you present yourself as meeting a need rather than apologizing, you’re helping them solve their problem.  You can take chances at career fairs because recruiters are not automatons blindly picking the best resumes, and relationships and personal interaction actually matter.  You shouldn’t cheat the process, because in doing so you’re treating other human beings disrespectfully.  And you should pay attention because when you don’t you’re forgetting that this is a human interaction, and missing out on much of what is involved in it.</p>\n<p>Bob’s biggest mistake was forgetting that he was dealing with a human being.  When he approached me in the morning it was with no awareness of my frame of mind or personal preferences.  He was on a mission to get a job.  But he severely sabotaged his efforts by overlooking the human factors of context, mood, and etiquette.  If you can treat a recruiter as a human being, you’ll find that they are much more likely to be your ally in getting a job.</p>","fields":{"slug":"/2013/01/25/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance"}}},{"node":{"frontmatter":{"readNext":"ten-things-js,favorite-interview,jest-matchers-1","topics":["Conferences","Speaking","Career Advice"],"category":"opinion","key":"adequate-talk","title":"How To Give A Perfectly Adequate Conference Talk","description":"Tips for making your talk both useful and rewarding","layout":"post","path":"/2017/10/29/adequate-talks/","date":"2017-10-30T02:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>Tech talks at conferences or meetups generally end up being experienced in one of 4 ways by audience members.</p>\n<ol>\n<li>It’s a disaster, and that leads to <strong>rage</strong>.</li>\n</ol>\n<blockquote>\n<p>This person is not just wasting my time, I don’t even understand what he’s trying to tell me.  Is this a talk about Vue or just him telling his life story?</p>\n</blockquote>\n<ol start=\"2\">\n<li>The talk is executed just fine, but it misses the mark in some way for the audience, leading to <strong>boredom</strong>.</li>\n</ol>\n<blockquote>\n<p>The first 5 minutes seemed ok, but it didn’t catch my attention, and now I’ve been on Facebook for 20 minutes and woah are we already wrapping up?  I don’t really know how Vue relates to my work.  </p>\n</blockquote>\n<ol start=\"3\">\n<li>The talk is perfectly adequate, and the audience leaves with some new and useful <strong>knowledge</strong>.</li>\n</ol>\n<blockquote>\n<p>That was really interesting, I’ll have to check out Vue soon, it sounds like it would really help me write more maintainable web apps.</p>\n</blockquote>\n<ol start=\"4\">\n<li>The talk is incredible and memorable.  It leads to <strong>inspiration</strong>.</li>\n</ol>\n<blockquote>\n<p>Wow I’m looking at web development in a whole new way now.  This really changes how I think about my job!</p>\n</blockquote>\n<p>I have no idea how to give a talk that inspires people.  But after speaking a decent amount over the last few years, I’ve figured out what helps me give talks that can inform most people, and avoid having people leave bored or enraged.  I want to share what I know, because the truth is that giving a talk at a conference or meetup can be fun and rewarding, and I would love it if you too got the chance to enjoy that.  So here are my tips:</p>\n<h2>The Pitch</h2>\n<h4>1. Show up!</h4>\n<p>The only way to give a talk that will interest and inform other people is to actually attempt it.  If you live in a place that has meetups, those are often the easiest place to start.  They’re usually run by 1 or 2 people who are going to be grateful to find new folks who are willing to speak. Depending on format, you may be able to give a 5 or 15 minute talk along with other speakers at a meetup to ease into things.  If there’s no meetup, you can also apply to conferences.  Almost all conferences have open “Call for Papers” periods where they invite applications, and many of them try to save some spots for new speakers.  Conference speaking is more of a crapshoot though, since they often have many applications for few spots, and your best bet is to apply widely, and possibly suggest several different talk ideas.  This year I applied to speak at 6 conferences, and actually spoke at 2, and that was by far my best ratio since I started applying to speak a few years ago.  </p>\n<h4>2. Pick a topic that you’re interested in</h4>\n<p>Giving a talk can be a fun experience, but it can also be frustrating for both you and the audience.  The best way to suck all of the joy out it is to give a talk about something that you don’t care about.  If you’re uninterested in the topic, the work to prepare is either going to be a painful grind, or you won’t do it.  In which case sitting through your talk may well be a painful grind for your audience.  </p>\n<p>Note that I don’t say to pick a topic you’re passionate about.  Not every talk is going to be the pinnacle of your speaking career, and sometimes there may be nothing out there that is currently changing your life.  You can really help people by sharing the useful, interesting information you have, and this doesn’t need to be more than that.</p>\n<h4>3. Pick an audience for whom that topic is relevant</h4>\n<p>So you have a talk topic, and that’s great, but does your topic make sense for the people you’re speaking to?  Sometimes when you start speaking you may pick a topic before you’re sure where you’re going to give the talk, other times you may have a place you want to speak, and you need to pick a topic for it.  Either way, make sure that you end up with a topic and an audience that match.  If you’re talking to a group of beginner web programmers, a deep dive into the Rust memory model might not be the best choice.  If you’re speaking to veteran python programmers, a talk about the basics of object oriented programming might miss its mark.  </p>\n<p>Sometimes you may not know your audience exactly.  This is especially true for speaking at large multi-track conferences, where there may be developers (and/or non-developers) from a variety of backgrounds.  In this case, you’ll still want to pick the audience you want to target (some subset of the group you know may be there), and then make sure to do a good job of following point #6 below.</p>\n<h4>4. Pick a “main takeaway” for your audience</h4>\n<p>It’s not enough to just have a topic and audience that generally match.  You’re also going to want to know what you want the audience to get out of it.  Talking about “debugging” to a JavaScript audience could be a good talk, but do you want them to learn</p>\n<ul>\n<li>how to use Chrome devtools to find performance bugs?</li>\n<li>a repeatable step by step workflow for figuring out any bug?</li>\n<li>a story about how you solved a specific bug?</li>\n</ul>\n<p>Unlike the “topic”, the takeaway should be pretty specific.  Given the audience that you’re targeting, what piece(s) of new information do you want them to receive as they walk away from your talk?</p>\n<h4>5. Pick a talk format</h4>\n<p>There are a few main formats that most tech talks fall into:</p>\n<ul>\n<li>Present a problem, describe several possible solutions (possibly recommending one)</li>\n<li>Present a tool, explain what problems it solves and give examples of using it</li>\n<li>Present an idea or way of looking at things, and show how it applies in different situations</li>\n<li>Tell your story. Explain how a certain technology, idea, or problem in the tech community has affected your life.</li>\n</ul>\n<p>All of these formats can work, for a first talk I’d recommend one of the first 2, keeping things concrete and making it easier to get to that “main takeaway”.  </p>\n<h4>6. Write a description that tells your audience what to expect</h4>\n<p>The final step of putting together a pitch is writing a description that accurately lets attendees know what to expect.  A great title and description do a few things.  </p>\n<ul>\n<li>You actually have something to submit to a meetup organizer or a conferences call for papers.</li>\n<li>A good description helps ground you as you prepare the content of the talk.  You can look at your slides and see if you’re actually focusing on the things you wanted to communicate<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  </li>\n<li>A well written title and description will help attract your target audience to your talk.  If you’re giving a talk for beginners or advanced users, or users of a particular technology, make sure that’s clear in the description.  People go out of their way to go to talks where they know they’re the target audience, and nothing kills the mood of a talk than a situation where the talk isn’t relevant to most of the audience.  </li>\n</ul>\n<p>Note that in general, a good description matters more than the exact title of the talk, but if you’re at a multi-track conference, make sure to give a descriptive title, as conferences will often only include the talk name in their schedules, without a top-level description.  Naming your talk about the creative uses of Golang “Go-ing Crazy” is fine for a Go meetup, but if people are going to be choosing what session to attend based on your talks name, something more descriptive would be nice, even if it has a little less personality.</p>\n<h2>The Preparation</h2>\n<h4>7. Have slides</h4>\n<p>I’ve seen some amazing live-coding talks.  I’ve given one myself at a meetup.  There is definitely a place for them, as well as for minimally visual talks with 2-3 slides.  But if you’re aiming for informative, structuring your talk around a good slide deck is your best bet.  </p>\n<p>Slides shouldn’t have too much information: they’re the backbone of your talk, and aren’t meant to stand alone<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  Instead, they provide structure both for you and the audience as you move through your presentation.</p>\n<h4>8. Have a talk track</h4>\n<p>Slides are good, but they’re just the start.  You need a talk track that is more than just “reading off my slides”.  To feel really well prepared for a talk, I usually write out a complete script for the talk that I intend to follow, and then edit that after several practice run throughs.  For the actual talk I usually boil most of that script down to bullet points to keep me focused.  There will be some experimentation needed there to figure out what works best for you.</p>\n<h4>9. Make sure your A/V setup works!</h4>\n<p>I was reminded just last week about the importance of testing that you can give your talk in the venue you’re speaking at with the equipment you have as early as possible.  I was forced to give a talk last week on my manager’s laptop after mine failed to connect to the venue’s projector.  It ended up being a dumb problem on my side that I could have solved if I’d verified my setup earlier and had more time to figure things out.  So that’s my a/v setup parable.  The things to remember here:</p>\n<ul>\n<li>Show up early and test your setup if at all possible (event organizers are usually happy to help with this and may insist on this)</li>\n<li>Bring your own adapters.  In the US, at least be ready to connect to HDMI and VGA.  I can’t speak to what might be common internationally, but at the very least it’s good to be paranoid</li>\n<li>Make sure to bring a power cable.  Your slides going black in the middle of your talk is not a good look.</li>\n</ul>\n<h2>The Delivery</h2>\n<h4>10. Have notes</h4>\n<p>So now it is time to actually give your talk.  Make sure to bring notes.  Most presentation software programs like Powerpoint and Keynote have nice built in presenter note features for this (make sure to practice setting it up so that you see the notes and the audience just sees the slide). You also can just use paper notes in a notebook. Notes are important to keep you on track in case you freeze, and may be something you just want to read for portions of the talk.  </p>\n<p>Here again you have several choices for how to handle notes:</p>\n<ul>\n<li>You can read your talk from a script. This lowers your ability to connect with your audience, but it is low risk, and you’ll guarantee that you’ll hit the content you intend to.  As a native english speaker, I probably underrate this a bit too.  If you’re presenting in a second language and reading can help you confidently deliver the material, it may be worth doing so.  </li>\n<li>You can work off of bullet point notes, which were ideally pulled out of a full script that you wrote originally.  So you’re talking naturally, with some notes to give you structure and help pull you back in if you’re fumbling around.  </li>\n<li>You can memorize your talk verbatim.  This is hard and high risk (if you forget something it can become an awkward stumble as you try to get back to your script), but has a chance at being a very compelling experience</li>\n</ul>\n<p>I have found that bullet point notes work well for me, but if you’re great at memorizing things, or would be more comfortable reading and are ok with sacrificing some connection to the audience, all 3 can work.  </p>\n<h4>11. Give context and set expectations (again)</h4>\n<p>At the start of your talk, you want to answer 3 questions:</p>\n<ol>\n<li>Who are you?</li>\n<li>Who is this for?</li>\n<li>What are you going to be talking about?</li>\n</ol>\n<p>You may think you answered these questions with your description, but there will definitely be people at your talk who didn’t read your description, and others who misread it.  Giving context at the beginning of your talk helps people prepare to hear the things that matter in your talk.  If this is a conference, it lets people decide whether they want to stay for your talk or not.  Don’t be discouraged if some people walk out of your talk after your explanation.  That’s a sign that you’ve done a good job clarifying the scope of your talk, and honoring their time. Having those folks leave now will be a much better experience than having them staring at Facebook and distracting others through out your talk, and it is now more likely that the people in front of you are the audience you wanted to address.</p>\n<h4>12. Be Confident and Grateful</h4>\n<p>When you know your topic and you’ve prepared well, the actual speaking part will usually end up being the easiest part.  So be confident.  Not because you’re already a great speaker, or because of some feeling of baseless optimism, but because you’ve done the work to be ready and you have the structure around you to succeed.  Also make sure to be grateful.  A bunch of people showed up to hear you speak.  Appreciate them, give them your best and hopefully try to answer their questions.  Speaking is a great opportunity, and I hope you get the chance to try it.</p>\n<h3>More Resources</h3>\n<ul>\n<li>Rands has a <a href=\"http://randsinrepose.com/archives/out-loud/\">great post</a> on preparing for a presentation.  Lots of great little details in there.</li>\n<li><a href=\"https://www.papercall.io/events\">Papercall.io</a> is a great way to find conferences that are looking for speakers</li>\n<li>If you’re not already connected with local meetup/interest groups, take a look at <a href=\"https://www.meetup.com/\">Meetup.com</a> and see if there are any in your area.</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>It’s ok to change your description later if things change as you prep the talk.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>People will often ask for the slides of my talk after I give them.  I usually link them, since people ask, but the slides on their own really aren’t a substitute for the talk (and if they are informative to that level, the talk will probably suffer as the audience tries to take in too much information).</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/10/29/adequate-talks/"}}},{"node":{"frontmatter":{"readNext":"following-js-roadmap,jest-git,orthogonality-css-js","topics":["JavaScript","Career Advice"],"category":"javascript","key":"ten-things-js","title":"Ten Things A Serious JavaScript Developer Should Learn","description":"Some of the important things to pick up in the JS world","layout":"post","path":"/2017/07/19/ten-things-javascript/","date":"2017-07-19T04:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>There’s been an interesting Reddit thread circling my corner of the internet for the last week or so. It started with a question:</p>\n<blockquote>\n<p>I’m inviting pure opinion here, but what’s your list of ten things that everyone looking for a good javascript role should know and understand. Personally, I’m in a role where what I know is adequate, but I want to be somewhere better; somewhere that has some flippin standards. I’m learning outside of work requirements at the moment, but there is so much to learn out there.\nThe objective is to do good work in a good place.\nNarrow it down to your ten for me, or for you..\n<em>- From <a href=\"https://www.reddit.com/r/javascript/comments/6mlc9d/what_10_things_should_a_serious_javascript/\">“What 10 Things Should a Serious Javascript Developer Know Right Now?”</a></em></p>\n</blockquote>\n<p>I think this is a great question if you take it seriously, because when you think about it critically, it exposes all of the things JavaScript don’t really <strong>need</strong> to know.  Can you contribute productively as a mid-level JavaScript developer without knowing anything about <a href=\"https://github.com/prettier/prettier\">Prettier</a>, <a href=\"https://www.typescriptlang.org/\">Typescript</a> or <a href=\"https://facebook.github.io/react/\">React</a>?  Sure!  Can you contribute productively if you’re writing and testing your JavaScript using <em>&#x3C;awful uncool code editor that you the reader can’t stand></em>?  Definitely.  So here’s my take on answering the question.</p>\n<h2>Assumptions</h2>\n<p>I’m making the following assumptions about the question</p>\n<ol>\n<li>\n<p>I’m assuming the audience is a developer who has some level of professional programming experience and some existing JavaScript experience, and that they are primarily interested in “code skill” answers. Thus I’ll exclude things like communication ability, experience with version control, professional conduct, or basic coding ability that are very important to success in a JavaScript development environment but are out of the scope of this question.</p>\n</li>\n<li>\n<p>I’m optimizing for “what specific pre-existing knowledge will make the most difference between success and failure for a new hire in a mid-level JavaScript role”.  </p>\n<p><strong>Pre-existing</strong> means that these are things that somebody is expected to know before taking the job.  Learning the details of a company’s technology stack, style guide and engineering philosophy are all important, but you shouldn’t be expected to know them in advance, and in many cases doing so is impossible.</p>\n<p><strong>Specific knowledge</strong> means that these are things that you can learn with some effort and study.  They should not be broad categories like “security”, “design”, or “server-side development”.  They  should be things you know or know how to do, not things you “have experience with”.  And they should be specific enough that somebody can feel comfortable saying they understand the topic or don’t. Most of the things I list below are <em>topics</em>, but I try to lay out a specific set of things that you would need to know to understand it.</p>\n<p><strong>The most difference between success and failure</strong> means that these are the things that are really going to make a difference in how effective you are at understanding and completing the work assigned to you.  There are many such things, and their importance will vary situationally, so this is just my educated take on a generalists list.  </p>\n<p>When I say <strong>mid-level</strong>, I’m picturing hiring for a role that pays well but is not the most senior person on the team.  This would be a developer who would be expected to complete tasks with minimal help and oversight but wouldn’t necessarily be planning the architecture of everything right off the bat.  To be clear this list is not a set of things that you need to go to get paid to write JavaScript.  It is more along the lines of “next steps” for junior devs.  Its also not a step function where you need to know all of these at once to get to the next level.  These are just things that may limit you if you don’t have them.</p>\n<p>I’m taking the liberty to assume that <strong>JavaScript role</strong> implies using JavaScript in some sort of client/UI environment (Browser, React Native, Cordova, Electron, etc).  This list would be at least a bit different for a Node.js server-side role, and somebody else will have to write that post.</p>\n</li>\n</ol>\n<h2>The List</h2>\n<h4>1. You should know the core language</h4>\n<p>JavaScript is not a very complicated language at its core.  It can seem difficult to learn because of all of the noise around it.  Browser APIs, Library APIs, jQuery, React, TypeScript, the many npm packages out there, etc all can make the language syntax space seem huge.  And this isn’t helped by the fact that the language has evolved over time so you’ll see many different ways to do a single task spread out over the internet.  But the core language and standard libraries are actually pretty small compared to languages like Python and Java that have more features and larger standard libraries.  Eventually you’ll need the ecosystem.  But knowing the core language features that are implemented in most browsers is a great start.  </p>\n<p>This means you should know about basic language features like if/else, error handling with throw/try/catch, array manipulation with push/map/reduce/filter, and string manipulation methods like replace/slice/split.  You should also know about how JavaScript handles things like truthiness and falsiness<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, how to work with JSON data with the JSON object methods, and how variable scope works in JavaScript.  These days its also becoming more and more important to have at least a basic familiarity with the more important language features that were added in ES6 like Promises, modules, classes, template literals, generators and destructuring. Even if you choose not to use those features, being able to see and understand them will help you learn faster from others.</p>\n<p>This list is mostly unordered, but this comes first because learning everything else becomes a lot harder without this knowledge, mostly because it becomes difficult to learn from other people’s code since you won’t understand what it is doing.  If you’re starting from a weak base here I’d recommend finding a good book on the core language like <a href=\"http://amzn.to/2uD4R1Y\">Eloquent JavaScript</a><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> and digging in.  If you’ve been using JavaScript in an older code base or haven’t used it in a while and want to catch up, you can see <a href=\"https://benmccormick.org/2017/07/10/how-to-follow-the-javascript-roadmap/\">my post on keeping up with new language features</a>.</p>\n<h4>2. You should understand async code</h4>\n<p>One of the biggest leaps for new JavaScript developers, even those who are experienced with other languages is the amount of asynchronous code found in idiomatic JavaScript.  Asynchronous (async) code is code that is scheduled to run at a later time after some event, delay or response.  It can appear a bunch of different ways in JavaScript code, and it’s important to be able to interpret them.</p>\n<p>This means learning about <a href=\"https://benmccormick.org/2015/12/30/es6-patterns-converting-callbacks-to-promises/\">callbacks and promises</a> at least.   You should also learn about the JavaScript <a href=\"http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\">event loop</a> and how it works  Ideally some of the standard APIs that use them like <a href=\"https://developer.mozilla.org/en-US/docs/Talk:DOM/window.setTimeout\">setTimeout</a> and  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>.  If you’re ambitious you can learn about newer async syntax and library implementations like <a href=\"https://ponyfoo.com/articles/understanding-javascript-async-await\">async-await</a> or <a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a> But the most important thing is to spend time using and writing async code so that you get an intuitive understanding of how it works.</p>\n<h4>3. You should get comfortable with at least one set of developer tools</h4>\n<p>When developing JavaScript, its important to be able to debug problems and understand how existing systems work.  JavaScript has a fantastic ecosystem of developer tools for diagnosing bugs and examining application code.  For the most part they’re bundled with browsers (though some IDEs like VS Code and WebStorm have their own debuggers).  Learning how to use these tools well will turbocharge your JS dev skills.  If you can’t use them though, it will make everything much harder.  </p>\n<p>Competence in this means comfort with at least the JavaScript debugger panel of a browser’s devtools.  You should be able to set and use breakpoints, use watch mode and the console to test for the value of expressions, and understand the stack traces. But its also good to get comfortable using the elements panel to understand and manipulate the DOM, and the network panel to debug network requests.</p>\n<h4>4. You should be proficient with JavaScript functions</h4>\n<p>Functions are the core of the JavaScript language.  You should be able to use them fluently.  That means understanding function scope, closures, how <code class=\"language-text\">this</code> works, and the difference between normal functions and arrow functions. It also means knowing about how to process arrays with function using methods like map, filter, and reduce.  A good resource for “thinking in functions” is <a href=\"https://leanpub.com/javascriptallongesix/read\">JavaScript Allonge</a> by Reginald Braithwaite.</p>\n<h4>5. You should be comfortable with basic design tasks</h4>\n<p>No matter how well you learn JavaScript, you’ll be limited career-wise if you can’t manage basic design tasks.  This might not seem inherently true; after all isn’t that what professional designers are for?  But the truth is that unless you’re a purely server-side developer (excluded by our assumptions above), there will be times when you’re asked to fill in a visual gap that a designer doesn’t have time for, or there will be ambiguities in a designers spec that aren’t worth a meeting.  And learning the basics of design will help you communicate better with designers and product managers about technical constraints and design requirements.  </p>\n<p>When I talk design, I mean both the basics of implementing a visual design with HTML and CSS<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, and enough of an understanding of design basics to create a simple UI that looks ok and isn’t confusing.  That last requirement is harder than you’d think.  Design is hard and mostly orthogonal to the set of skills most folks pick up while learning to code.  For learning design theory, I’d recommend finding a simple resource on visual design first like <a href=\"http://amzn.to/2uz3vEG\">White Space is Not Your Enemy</a>, and ideally supplementing that with a more UX focused resource like <a href=\"http://amzn.to/2uvUrR7\">Don’t Make Me Think</a>.  The practical side of HTML/CSS is easiest to pick up with experience.  If you’re using devtools you can see what other people are doing with CSS and tweak and explore using the elements panel.  And there are lots of good online resources for learning about CSS and HTML syntax like <a href=\"https://developer.mozilla.org/en-US/\">MDN</a> for API info or <a href=\"https://css-tricks.com/\">CSS-Tricks</a> for ideas, tutorials and keeping up with new stuff.</p>\n<h4>6. You should have a basic understanding of networking and HTTP-based APIs</h4>\n<p>Because we’re assuming that this job involves using JavaScript in a browser or other client context, you should be able to understand the basics of networking.  You should know what a client and server is.  You should be able to explain a rough approximation of what happens when somebody enters a URL into the browser<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>. There’s a bunch of vocabulary thats good to know here. You should know what an HTTP request is and ideally know the conventions of what GET/PUT/POST/DELETE imply.  It will help you to have a working definition of what REST is and what AJAX is. It’s good to get experience working with some HTTP based APIs, either at work or playing around with an API like <a href=\"https://dev.twitter.com/rest/public\">Twitter</a> or <a href=\"https://developer.github.com/v3/\">Github</a>.  You should also get familiar with at least one way to make HTTP requests in JavaScript (XMLHttpRequest, fetch, jQuery’s ajax methods).  </p>\n<h4>7. You should be comfortable with Node.js based tooling</h4>\n<p>One of the biggest shifts in the last 5 years in the JavaScript world has been the explosive growth and consolidation of tools to help build JavaScript applications.  Tools like <a href=\"http://eslint.org/\">eslint</a>, <a href=\"http://babeljs.io/\">Babel</a>, <a href=\"https://www.typescriptlang.org/\">Typescript</a>, and <a href=\"https://webpack.js.org/\">Webpack</a> are essential to many teams workflows.  While you don’t necessarily have to be experienced writing applications for Node.js, it is important that you be able to use those tools.  That means knowing how to install Node and use npm to install and update packages.  It also means getting comfortable with build tools like Webpack, Rollup or Ember CLI and knowing how to use them.  Reasonable people can differ on how many tools and libraries you should be using, or what the right ones to use are, but having a basic familiarity with how the Node ecosystem works has become essential.</p>\n<h4>8. You should know how to use a framework to structure a moderately sized program</h4>\n<p>A critical requirement for a developer who is expected to complete work with minimum supervision or hand-holding is the ability to structure their code in a maintainable way.  That means having an understanding of (or helping define) the overall architecture of the system, and then writing code that fits into it.  It also means being able to identify and help solve situations where the current architecture or code base norms causes problems.  I put this in terms of frameworks because pretty much all medium to large JavaScript programs are using some sort of framework, whether it is an “official” framework like React, Angular, and Ember or a collection of helper files and functions cobbled together by a development team over time.  For learning purposes, the popular official frameworks will usually be better to learn, since the knowledge can translate elsewhere, the purposes behind the structure are documented on the internet, and at least some sense of best practice architecture should be embedded in the code.  To check this box I think it would be best to get experience with at least 2 frameworks/architectures, since it is difficult to tell which decisions a Framework makes are specific to its architecture and constraints without something to compare it with.</p>\n<p>This is probably the most controversial item on this list, since I know a lot of folks believe it’s better to learn architecture ideas outside the constraints of a framework.  My stance here is that frameworks are practical: they’re most likely to translate to an actual employment background and it’s easy to find practical explanations of how they solve architecture problems.  </p>\n<h4>9. You should know the basics of JavaScript program performance</h4>\n<p>Like design, performance is a deep well of things you can learn.  But knowing the basics is important and can go a long ways.  For performance “the basics” is more about process than knowledge.  You need to learn how to debug slow processes and understand where the problems are coming from.  For browser environments in particular there are some baseline things to understand.  You’ll want to be able to tell the difference between code that is running slowly due to parsing slowness, runtime slowness, and network latency.  It’s important to learn how to keep a UI responsive and not block rendering with other calculations.  And it’s great to understand how to cache data and avoid making too many requests to the server.  </p>\n<p>This is also an area where learning more about Computer Science theory can be beneficial.  Studying data structures and algorithms can help give you good intuitions on how to handle data, and learning about Big O notation gives you a language for discussing performance tradeoffs.  This is the type of background knowledge that pays off in occasional subtle ways though, not something that is always obvious applicable in the moment.</p>\n<h4>10. You should have a process for learning new things</h4>\n<p>JavaScript development has changed a lot over the last 10 years, and there’s no reason to think it won’t continue to evolve over the next 10.  There are also a lot of different technologies that fall under the umbrella of JavaScript, more than any one person can keep in their head.  So it’s important to be able to keep up with the new technologies as they come along, and also learn about new technologies quickly when you need them.  Ideally this means having at least one place where you can follow news about new JavaScript innovation.  Could be Twitter, a set of blogs, newsletters or an aggregator site like Reddit or Hacker News.  If you’re looking for an easy place to start, I’d recommend the <a href=\"http://javascriptweekly.com/\">JavaScript Weekly mailing list</a>.  </p>\n<p>You also need to get comfortable finding information about specific technologies, either to learn to use them or troubleshoot problems.  These resources will likely be more varied, but it’s important to learn to <a href=\"https://xkcd.com/627/\">Google well</a>, and also helpful to get familiar with <a href=\"http://stackoverflow.com/\">Stack Overflow</a> or some other resource for getting help when you have specific questions or problems.  </p>\n<hr>\n<p>Do you have a different list?  Feel free to post it and then link in the comments!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>If you don’t learn all the pitfalls here, at least learn that there are pitfalls.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Disclosure: Some of these book links are affiliate links</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or SASS/LESS/CSS in JS/whatever</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>This can be explained at several levels, but its good to at least know that a request is sent from the users computer to a server somewhere, and that server returns resources like HTML, CSS, JS, and image files.  </p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/07/19/ten-things-javascript/"}}}],"topic":"Career Advice"}}