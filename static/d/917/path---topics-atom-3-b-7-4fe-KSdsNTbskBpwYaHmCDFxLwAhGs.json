{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":null,"topics":["JavaScript","Atom"],"category":"opinion","key":"weekly-links-12-15-17","title":"Weekly Links: December 15th 2017","description":"The state of JavaScript, Glimmer, and updates to some cool software","layout":"weekly-links","path":"/2017/12/15/weekly-links-12-15-17/","date":"2017/12/15","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://stateofjs.com/\">The State Of JavaScript 2017</a> - This annual survey of JavaScript developers always has lots of interesting insights.  Since it is an internet survey, I view it less as a full snapshot of the industry, but more as a place to see what is new and trending in the JS world.  This year <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>, <a href=\"https://prettier.io/\">Prettier</a> and <a href=\"https://vuejs.org/\">Vue</a> caught my eye as spiking in popularity.</p>\n<p><a href=\"https://engineering.linkedin.com/blog/2017/12/the-glimmer-binary-experience\">The Glimmer Binary Experience | LinkedIn Engineering</a> - I had the privilege of seeing Yehuda Katz, one of the Ember core developers, give a talk about <a href=\"https://glimmerjs.com/\">Glimmer</a> and bytecode at this year’s All Things Open conference.  They’re doing some pretty serious software engineering in the Ember community right now.  This write-up covers a lot of the same ground and is worth a read.</p>\n<h3>Programming Tools and Practices</h3>\n<p><a href=\"http://blog.atom.io/2017/12/12/atom-1-23.html\">Atom 1.23</a> and <a href=\"https://code.visualstudio.com/updates/v1_19\">Visual Studio Code 1.19</a> were released this week, making this a big week for Electron based text editors.  If you use either of them, you’ll get to enjoy a nice set of performance improvements when you upgrade.</p>\n<p><a href=\"https://blog.bear-writer.com/bear-1-4-the-tags-edition-298d6fdc55dd\">Bear 1.4</a> - Speaking of software that I love to use getting updates, I’ve been using Bear as my primary notes app for the last year, and it is a delight.  Getting autocomplete on tags this week solved it’s last real annoyance for me, and I would definitely recommend it to anyone interested in a simple notes app.  It’s more powerful than Apple’s notes or text files, but cleaner and more elegant than <a href=\"https://evernote.com/\">Evernote</a>.  And even the paid level is very affordable.</p>","fields":{"slug":"/2017/12/15/weekly-links-12-15-17/"}}},{"node":{"frontmatter":{"readNext":"atom-tips,learning-vim,mariana","topics":["Atom","Text Editors"],"category":"tools","key":"interesting-atom","title":"The Most Interesting Atom Packages I've found (so far)","description":"A rundown of the coolest Atom packages I've seen","layout":"post","path":"/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far","date":"2016-01-11T02:25:49+00:00","dontfeature":null,"isDraft":null},"html":"<p>I’ve been using <a href=\"https://atom.io/\">Atom</a> as my primary text editor for the last 3 months.  I don’t completely love it.  There are elements (startup speed, maturity of some core editing components, not being able to run it in a terminal) that I miss from my experiences with Vim and/or Sublime Text.  I’m using Atom though because the core editing experience is now “good enough” and the way the editor is built allows for some very cool and unique experiences.  Atom (like <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>) is built on <a href=\"http://electron.atom.io/\">Electron</a>, Github’s JavaScript environment for building desktop apps.  Because it is built with web technologies and was designed from the beginning to be extensible, it is much easier for most developers to build rich visual extensions on top of Atom that provide unique UIs for editor functions than it is in Sublime Text, Vim, Emacs or an IDE.  The following are some of the “most interesting” Atom packages I’ve found.  Interesting in this case means that they really only could have been done as they are in Atom or a similarly flexible editor.</p>\n<h3>Pigments</h3>\n<p>At first use, <a href=\"https://github.com/abe33/atom-pigments\">Pigments</a> seems like a pretty run of the mill color highlighter.  There are similar projects for Sublime Text and Vim that look at color names in a CSS or LESS file and highlight them with the color they represent.</p>\n<img class=\"full-width\" alt=\"pigment-preview\" src=\"color_less_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom.png\">\n<p>But Pigments does much more than that.  In addition to highlighting text, Pigments searches your project and creates a directory of all the colors used in your projects.  You can look through your palette and quickly go to the definition of any individual color.  Because pigments tracks everything, it can highlight LESS/SCSS variables as well as plain color names, even if those variables were originally defined in a different file.  Pigments also hooks into Atom’s autocomplete, and displays a preview of the color options when autofilling colors.</p>\n<img class=\"full-width\" alt=\"Pigments project\" src=\"Palette_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom_and_Editor_-_benmccormick_org.png\">\n<p>It is a rich way of managing colors for a whole project, the best way of seeing at a glance every color used in your CSS project that I’ve ever seen.</p>\n<h3>Expose</h3>\n<p><a href=\"https://atom.io/packages/expose\">Expose</a> is a file management tool modeled after Mac OSX’s expose feature.  With it, you can instantly display all open files as small thumbnails, and switch quickly between them using the keyboard, which can be super helpful when tabs get out of control.</p>\n<img class=\"full-width\" alt=\"expose\" src=\"frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom_and_Editor_-_benmccormick_org.png\">\n<h3>Autocomplete-plus</h3>\n<p><a href=\"https://github.com/atom/autocomplete-plus/\">Autocomplete-plus</a> started as a community package but has now become part of the core editor.  It’s also probably the least unique idea I’m listing here.  It’s still worth including on this list though, for 2 reasons.  First, autocomplete plus has flexible visual context options, allowing autocomplete providers to show the type of the autocomplete option, a brief description, and potentially a more in depth description.  So users can distinguish between (for instance) completions offering a snippet, a function, a keyword, or an import.</p>\n<img class=\"full-width\" alt=\"autocomplete-plus\" src=\"frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom.png\">\n<p>Autocomplete-plus is also a great example of the flexible nature of Atom.  Because Atom itself is made up of packages, with a very small core package, it’s easy to replace key parts of the editor like the auto-complete package with a community version.  And if that version ends up being better in the long run, it’s possible to pull that into the editors core, as happened with autocomplete-plus.</p>\n<h3>Todo-show</h3>\n<p><a href=\"https://atom.io/packages/todo-show\">Todo-show</a> is a cool little package that searches your project for comments containing TODO, FIXME, CHANGED, REVIEW and other configurable comment strings, and lists them as a table.  It’s a simple idea that formalizes something that many developers do all the time.</p>\n<img class=\"full-width\" alt=\"todo-show\" src=\"frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom-1.png\">\n<p><strong>Update</strong>:  Twitter has pointed out this even crazier riff on this concept that I’d seen a while ago but had been unable to find when I dove back into Atom.  <a href=\"http://imdone.io/\">Imdone</a> is a trello-like experience in the editor for managing todos.</p>\n<blockquote class=\"twitter-tweet\" lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/ben336\">@ben336</a> <a href=\"https://twitter.com/AtomEditor\">@AtomEditor</a> You might also like imdone-atom. It&#39;s a drag and drop TODO task board with issue tracking integration!</p>&mdash; imdone.io (@imdoneIO) <a href=\"https://twitter.com/imdoneIO/status/686577997395013633\">January 11, 2016</a></blockquote>\n<h3>Linter</h3>\n<p>Similar to autocomplete-plus, you may think you’ve seen <a href=\"https://atom.io/packages/linter\">Linter</a> before.  It’s similar to Syntastic for Vim and SublimeLinter for Sublime Text.  But Atom’s flexibility allows it to be better than both of those.  Like Syntastic and SublimeLinter, Linter integrates with many different linting providers to show errors and warnings that tools pick up on through static analysis in files.  But rather than being limited to the line-by-line gutter warnings or showing collections of warnings through awkward use of UI elements meant for a different purpose, Linter shows you a live collection of errors at the bottom of the file and lets you easily switch back and forth between that and errors for all open project files.</p>\n<img class=\"full-width\" alt=\"linter\" src=\"frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom-2.png\">\n<h3>git-time-machine</h3>\n<p><a href=\"https://github.com/littlebee/git-time-machine\">git-time-machine</a> is the newest package on this list.  It’s only a month old, but is quite possibly my favorite example of Atom’s potential.  After setting it up, you can use a keyboard shortcut to see a bubble plot of that files git history, and then hover to see the commit messages, and click to see an old version of the file.  It is the most accessible UI I’ve ever seen for working with git history.</p>\n<img class=\"full-width\" alt=\"time-machine\" src=\"Fullscreen_1_10_16__9_24_PM.png\">","fields":{"slug":"/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far"}}},{"node":{"frontmatter":{"readNext":"interesting-atom,mariana,orthogonality-css-js","topics":["Atom","Text Editors"],"category":"tools","key":"atom-tips","title":"Atom Productivity Tips","description":"Getting the most out of Atom","layout":"post","path":"/2017/05/29/atom-tips/","date":"2017-05-30T03:20:00+00:00","dontfeature":null,"isDraft":null},"html":"<p><a href=\"https://atom.io\">Atom</a> is a modern hackable text editor.  I’ve been using it as my primary editor for a year and a half, and have picked up some tips along the way that I thought were worth sharing.  These tips assume that you have at least a passing familiarity with Atom: they’re the things that I’ve picked up over time that have made me more productive.</p>\n<h4>1. There is more to the Fuzzy Finder than meets the eye</h4>\n<p>Fuzzy finders have been a key feature on modern editors since TextMate first popularized the ⌘T command<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> for searching through project files.  ⌘T (or ⌘P) still works great in Atom, but what you may not know is that Atom provides 2 other versions of the command. ⌘B searches only among currently open files.  ⇧⌘B searches only among files that are “dirty” according to git<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  Both of those options are built in.  You can also find other uses for the fuzzy-finder if you start exploring plugins, including <a href=\"https://atom.io/packages/atom-fuzzy-grep\">atom-fuzzy-grep</a>, a plugin that lets you use the fuzzy-finder interface to search file contents using grep, <a href=\"https://benmccormick.org/2016/04/30/ack-tips/\">ack</a>, ag, or ripgrep.</p>\n<h4>2. Atom is a great Vim replacement</h4>\n<p>If you’ve been following this blog for a while, you know I’ve written a lot about <a href=\"https://benmccormick.org/learning-vim-in-2014/\">Vim</a>.  I still love the <a href=\"https://benmccormick.org/2014/07/16/learning-vim-in-2014-vim-as-art/\">philosophy of Vim</a>, and think that the text editing <a href=\"https://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/\">language</a> it implements is the best way to edit code quickly.  But Atom’s <a href=\"https://atom.io/packages/vim-mode-plus\">vim-mode-plus</a> is the best vi implementation I’ve seen outside of Vim, and unlike other editors, you don’t need to get frustrated with a halfway approach to Vi-keybindings, since you can make pretty much everything work in a vim-like way.  That’s because:</p>\n<h4>3. Atom’s keybindings are powerful and flexible</h4>\n<p>Any command exposed by the core editor or a plugin in Atom can be bound to a keyboard shortcut.  None of the default commands are hard-coded, and the editor provides powerful contexts for controlling what keys have lead to what action when.  That means if I want to use <code class=\"language-text\">ctrl-j/k/l/h</code> to control my navigation between split panes, but also use <code class=\"language-text\">ctrl-j/k</code> to move up and down in the autocomplete widget, I can just add these lines to my <code class=\"language-text\">keymap.cson</code> file</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\">\n      <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token string\">'atom-text-editor, body'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token string\">'ctrl-k'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'window:focus-pane-above'</span>\n  <span class=\"token string\">'ctrl-j'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'window:focus-pane-below'</span>\n  <span class=\"token string\">'ctrl-h'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'window:focus-pane-on-left'</span>\n  <span class=\"token string\">'ctrl-l'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'window:focus-pane-on-right'</span>\n\n<span class=\"token string\">'body atom-text-editor.autocomplete-active'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token string\">'ctrl-k'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'autocomplete-plus:move-up'</span>\n  <span class=\"token string\">'ctrl-j'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'autocomplete-plus:move-down'</span></code></pre>\n      </div>\n<p>Different commands are triggered in different context.  You can also take advantage of this with vim-mode to have “normal mode only” keyboard shortcuts like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"coffeescript\">\n      <pre class=\"language-coffeescript\"><code class=\"language-coffeescript\"><span class=\"token string\">'atom-text-editor.vim-mode-plus.normal-mode'</span><span class=\"token punctuation\">:</span>\n  <span class=\"token string\">'] b'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pane:show-next-item'</span>\n  <span class=\"token string\">'[ b'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'pane:show-previous-item'</span></code></pre>\n      </div>\n<p>That implements a behavior I’d missed from Vim’s <a href=\"https://github.com/tpope/vim-unimpaired\">unimpaired plugin</a> of moving between open files with <code class=\"language-text\">[b</code> and <code class=\"language-text\">]b</code>.</p>\n<h4>4. Make sure to sync your settings</h4>\n<p>One area where Atom is less ideal than Vim is setting portability.  It doesn’t have a single file where all configuration is stored, or a nice settings folder that can be synced.  Instead settings are intermingled with other data in a <code class=\"language-text\">~/.atom</code> folder, a fact that is obscured by the editor’s UI, which attempts to put a nice UI in front of all of these setting files and steer you away from editing them directly or caring about where they’re stored.  Which works great until you need to move your config to a new machine or sync between 2 machines.  </p>\n<p>Fortunately, there’s a great plugin <a href=\"https://github.com/atom-community/sync-settings\">sync-settings</a> that makes this simple.  It does require setting up a gist to serve as your repo, but after that the process is painless and allows you to continue on unaware of the implementation details behind settings.</p>\n<h4>5. Check Timecop and clean up plugins that you’re not using</h4>\n<p>Atom is built on web technologies.  This is both the best and worst thing about Atom.  It leads to its greatest strengths: hackability, a focus on UX early on since they didn’t have to build a whole UI engine from scratch, and quick iteration.  But it also has very real tradeoffs, the biggest of which are battery life and startup performance<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.  There’s not much to be done about the battery life drain; Atom is based on Chromium, and Chromium is a battery hog.  It is simply a tradeoff to understand when choosing an editor.  But startup performance is often greatly influenced by the packages that you choose to use.  Fortunately Atom includes a simple tool for tracking this called Timecop.</p>\n<p>You can find Timecop in the command palette (⇧⌘P by default).  When you run it, Timecop displays a report of all of your packages and themes and how they contribute to startup time.  It will look something like this:</p>\n<p><img alt=\"screenshot of timecop\" src=\"timecop.png\"\nclass=\"full-width\"></p>\n<p>I wouldn’t recommend obsessing too much over timecop.  For most packages the benefit you receive is going to significantly outweigh any startup burden.  But if your editor starts to feel sluggish, this is a great first step to figuring out if there’s anything you can drop to make an impact.</p>\n<h4>6. The UI is just HTML and CSS, and that means you can edit it</h4>\n<p>Everything you see in an Atom UI is an HTML element, with classes that you can use to select and style them. This fact is mostly relevant when creating themes, but you can also use it to make one-off UI adjustments.  For instance, when I edit Markdown files, the <a href=\"https://github.com/sindresorhus/atom-editorconfig\">editorconfig</a> plugin I have installed warns me about a possible conflict with another atom package. The warning shows up as a small colored mouse icon in the status bar.</p>\n<p><img alt=\"screenshot of editorconfig mouse icon in the status bar\" src=\"editor-mouse.png\"\nclass=\"full-width\"></p>\n<p>I find this warning distracting.  I know what its there for and have decided I don’t care about it, but I can’t dismiss it normally.  So instead I can take advantage of Atom’s flexibility to just get rid of it. All I need to do is open up devtools (⇧⌘I) and find the class.</p>\n<p><img src=\"editor-mouse-devtools.png\" alt=\"screenshot of editorconfig mouse icon in the status bar with devtools open\"></p>\n<p>Then we can edit our styles.less file.  Atom will open it for you if you click the <em>your stylesheet</em> link at the top of the Settings>Themes page.  My edit to remove the mouse icon looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"less\">\n      <pre class=\"language-less\"><code class=\"language-less\"><span class=\"token selector\">.aec-icon-mouse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<h3>More Resources</h3>\n<ul>\n<li>The <a href=\"https://atom.io/docs\">atom documentation</a> is really great, and worth diving into if you want to go deeper into Atom</li>\n<li>If you’re interested in learning more about keyboard driven text editing, check out <a href=\"https://benmccormick.org/learning-vim-in-2014/\">my series on Vim</a>.</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I’m using MacOS default keyboard shortcuts for this post.  Windows and Linux shortcuts are usually similar with <code class=\"language-text\">ctrl</code> often swapped for <code class=\"language-text\">⌘</code>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Dirty files are files that have been edited and not yet added to the index or committed.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>I’ve definitely seen post-startup perf issues at points as well, but I suspect that those are implementation problems that will continue to improve as the editor matures and the underlying Chromium platform continues to push on performance.  This may be naive.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/05/29/atom-tips/"}}},{"node":{"frontmatter":{"readNext":"learning-vim,interesting-atom,vim-files","topics":["Text Editors","Vim","Atom","JavaScript"],"category":"tools","key":null,"title":"Setting Up Your Text Editor For JavaScript Development","description":"A look at some tools and plugins that help create a productive JavaScript development workflow","layout":"post","path":"/2014/10/13/setting-up-your-text-editor-for-javascript-development","date":"2014-10-13T01:05:51+00:00","dontfeature":null,"isDraft":null},"html":"<p>The coding workflow for JavaScript developers gets better all the time.  Over the last 10 years, the JavaScript ecosystem has built up a rich set of tools to make your life easier.  Most of the buzz around tooling comes from browser devtools and the various build systems available for JavaScript projects, but you can also take advantage of improved tools within your code editor.  While there are some great IDEs for JavaScript development out there like WebStorm and Visual Studio, most JavaScript developers seem to prefer lighter-weight text editors.  So this post is going to be a quick look at the tools I use for more seamless JavaScript development in a text editor.</p>\n<h3>Basics</h3>\n<p>Before we get to anything JavaScript specific, there are a few important things to set up.  First, I’m assuming that you’re using a modern, extensible text editor. Those include, but are not limited to: <a href=\"http://www.sublimetext.com/\">Sublime Text</a>, <a href=\"http://www.vim.org/\">Vim</a>, <a href=\"https://atom.io/\">Atom</a> and <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a>. There is great support for all of the below tips in each of these editors<sup id=\"fnref:0\"><a href=\"#fn:0\">1</a></sup>.</p>\n<p>In addition you should have</p>\n<ol>\n<li>Reasonable default configurations<sup id=\"fnref:1\"><a href=\"#fn:1\">2</a></sup></li>\n<li>A fast system for navigating between files<sup id=\"fnref:2\"><a href=\"#fn:2\">3</a></sup></li>\n<li>Great code searching<sup id=\"fnref:3\"><a href=\"#fn:3\">4</a></sup></li>\n</ol>\n<p>If you’re still working through those things, make sure to take the time to learn a bit more about your editor along with any JavaScript specific tools you use.  There’s a ton of efficiency you can gain from having those 3 things in place.</p>\n<p>Finally the first two tips below require <a href=\"http://nodejs.org/\">node.JS</a> and npm to be installed, as they rely on node libraries to function.  If you’ve never installed those before, the process is pretty painless.</p>\n<p>Once you have all of that in place, we can move on to other things.</p>\n<h3>Syntax Linting</h3>\n<p>JavaScript is a dynamic, weakly-typed language.  It is also written by human beings.  As a result, it can be easy to start running bad code without realizing that it has problems.  Some types of problems you’ll find out about quickly.  Bad syntax will halt program execution for instance.  But others will linger, subtly effecting logic or just making the code hard to understand for future developers (including yourself).   </p>\n<p>JavaScript linters (also called syntax checkers) can provide some of the safety of a compiler, and also help enforce a consistent set of styles to help maintain readability.  They are not magic.  JavaScript is still a weakly typed language with some weird syntactical sinkholes. It’s relatively easy to make logic mistakes if you’re undisciplined.  But linters are a great safety tool, especially for developers newer to JavaScript and its conventions.  Run as part of a build process, they can prevent you shipping bad code and help standardize conventions across a team</p>\n<p>While it’s a great idea to make linters part of your build process, you get even more power from integrating them with your editor.  Almost all modern text editors include some sort of plugin for displaying syntax errors and warnings in the gutter to the left of the text.  You can check out the integration pages for <a href=\"http://eslint.org/docs/integrations/\">ESLint</a> and <a href=\"http://www.jshint.com/install/\">jsHint</a> to get a feel for the plugins available for your editor.  </p>\n<p><img src=\"lintingpic.png\" alt=\"linting picture\"></p>\n<h3>TernJS + Autocomplete</h3>\n<p>Linters are great for telling you what not to do, but can’t give you much guidance on what you actually are able to do.  Fortunately we have other tools for that.  <a href=\"http://ternjs.net/\">Tern.js</a> is a fantastic library that provides “intellisense” style autocompleting for JavaScript code, along with other IDE-like features including documentation links and refactoring support. It’s not perfect, since JavaScript’s nondeterministic syntax sometimes makes it hard to tell what properties a variable will actually have at runtime, but it takes a good shot at it and is able to go pretty far, especially for libraries where it can expose the full API to you within the editor.  To get the most out of Tern, you’ll need to set up a Tern project definition, where you can specify any files that you always want loaded, and any plugins you want to use. The preloaded files is useful if you’re making global references to a namespace or library, and the plugins can give you support for module systems, so that you can handle references that are passed into a module from a different file in code using requireJS or Angular.</p>\n<p><img src=\"ternjs.gif\" alt=\"ternjs picture\"></p>\n<h3>Snippets</h3>\n<p>JavaScript development, especially on the front end, can involve a lot of repetitive boilerplate code<sup id=\"fnref:4\"><a href=\"#fn:4\">5</a></sup>.  Whether it’s module boilerplate like AMD require/define wrappers, library boilerplate like directive definitions in Angular or a Model definition in Backbone, or our own favorite patterns that we repeat a lot, we end up writing a lot of code over and over again.  Snippets are a great way to accomplish that.  They were one of the key features of Textmate when it first became popular.  Today they’re built in to Sublime Text and Atom, and there are popular libraries for both <a href=\"https://github.com/SirVer/ultisnips\">Vim</a> and <a href=\"https://github.com/capitaomorte/yasnippet\">Emacs</a> to simulate the same functionality.</p>\n<p>Snippets allow you to define templates for common boilerplate code, allowing you to quickly insert repetitive content, including adding hooks for text that will vary across uses.  For instance here’s a snippet I have defined for creating a new AMD module<sup id=\"fnref:5\"><a href=\"#fn:5\">6</a></sup>.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">#A new AMD define module\nsnippet dfn\ndefine([$1],function($2) {\n    $0  \n});\nendsnippet</code></pre>\n      </div>\n<p>This allows me to type <em>dfn&#x3C;tab></em> at any time to expand out the template.  Initially my cursor will be in spot <code class=\"language-text\">$1</code>, and I can then enter text and tab to spot <code class=\"language-text\">$2</code>, with my final tab ending me at <code class=\"language-text\">$0</code>.  Snippet libraries can also provide other functionality like functions to show the current time, filename, or other contextual information.   Some can also mirror text so that you can enter a string once and have it appear throughout the template.  It can be a great time saver when you’re chugging through the boilerplate code of your project.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>If you want to implement JavaScript syntax checking definitely check out <a href=\"http://eslint.org/\">ESLint</a> or <a href=\"http://www.jshint.com/\">jsHint</a>.  They both offer a lot more options and flexibility than <a href=\"http://www.jslint.com/\">jsLint</a>, the pioneer in this area.  It’s pretty easy to find an integration plugin for most common editors through those websites or Google, but <a href=\"https://github.com/scrooloose/syntasticsu\">Syntastic</a> for Vim and <a href=\"https://github.com/SublimeLinter/SublimeLinter3j\">Sublime Linter</a> for Sublime Text come especially recommended and have the advantage of supporting all 3 major JavaScript linters as well as syntax checking for multiple languages.</p>\n</li>\n<li>\n<p><a href=\"http://ternjs.net/\">Tern’s website</a> has great documentation and links to the editor specific implementations for different editors.  If you’re a Vim user I’d also recommend taking a look at <a href=\"https://github.com/Valloric/YouCompleteMe\">YouCompleteMe</a> for an improved autocomplete interface that works well with Tern and UltiSnips.</p>\n</li>\n<li>\n<p>For snippet libraries, you can take a look at <a href=\"https://github.com/SirVer/ultisnips\">UltiSnips</a> for Vim and <a href=\"https://github.com/capitaomorte/yasnippet\">Yasnippet</a> for Emacs.  If you want an application agnostic snippet solution, <a href=\"http://kapeli.com/dash\">Dash</a> is a documentation management program for OSX that also has a rich snippet component you can use in any program the same way you’d use an editor specific solution.</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:0\">\n        <p> Other than the lack of an official Tern plugin for Atom\n        <a href=\"#fnref:0\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        Sublime Text and Atom provide pretty reasonable defaults. Vim users could consider checking out my piece on <a href=\"http://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim/\">configuring Vim</a>.  I don't know enough to advise for Emacs, you're on your own their, but google is your friend.\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:2\">\n        <p>\n        This really deserves a post of its own, not a footnote, but in general my approach to this is fuzzy search, split panes and a way to retrace my movements.   \n        <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:3\">\n        <p>\n        Sublime Text and Atom have reasonably nice built in search tools, but I'd recommend using a plugin that integrates with ack or ag, two <a href=\"http://benmccormick.org/2013/11/25/a-look-at-ack/\">very nice search tools</a>.  I don't see such a plugin for Atom on their repository site right now, but the other 3 certainly support it.\n        <a href=\"#fnref:3\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:4\">\n        <p>\n        Hopefully not too much obviously\n        <a href=\"#fnref:4\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:5\">\n        <p>\n        This is using the syntax for Vim's Ultisnips plugin.\n        <a href=\"#fnref:5\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2014/10/13/setting-up-your-text-editor-for-javascript-development"}}},{"node":{"frontmatter":{"readNext":"interesting-atom,config-portability,orthogonality-css-js","topics":["Atom","Text Editors"],"category":"tools","key":"mariana","title":"Mariana Syntax Theme For Atom","description":"Announcing a port of the Mariana color scheme to Atom","layout":"post","path":"/2017/05/28/mariana-syntax-atom/","date":"2017-05-28T04:05:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>Sometimes the best thing to do is steal somebody else’s good idea. I’ve been using <a href=\"https://atom.io\">Atom</a> as my primary text editor for a year and a half now, but I still occasionally play with other editors and keep up with their updates.  There are a crazy number of good cross platform editors these days, and they all have a bunch of good ideas that get shared and remixed across each other. This week Sublime Text came out with a new release <a href=\"https://www.sublimetext.com/3dev\">Dev Build 3132</a> that included 3 new color schemes.  One of them was Mariana, which I believe is a variation on the also great <a href=\"http://labs.voronianski.com/oceanic-next-color-scheme/\">Oceanic Next</a>, with possibly some influences from my previous favorite dark theme <a href=\"https://github.com/chriskempson/tomorrow-theme\">Tommorrow Night Eighties</a> <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  It stood out to me right away.</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">The Mariana syntax theme that shipped in the new Sublime Text is really nice <a href=\"https://t.co/xbmjBTNoWY\">pic.twitter.com/xbmjBTNoWY</a></p>&mdash; Ben McCormick (@ben336) <a href=\"https://twitter.com/ben336/status/868160533345841152\">May 26, 2017</a></blockquote>\n<p>Since I’m no longer using Sublime Text, I decided to port the theme to Atom.  I built on the work of the great <a href=\"https://github.com/atom-material/atom-material-syntax\">atom-material-syntax</a> package to build out a new theme.  It turns out to be surprisingly easy to build a color scheme in Atom.  Fork an existing theme, change some colors and the details in package.json, delete a bunch of git tags <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, and then run <code class=\"language-text\">apm deploy minor</code>, and you’re in business.  </p>\n<p>You can now download <a href=\"https://atom.io/themes/mariana-syntax\">mariana-syntax</a> in Atom.  This was a quick port.  I’ll be working to optimize it for the languages I use (JS, Python, CSS/Less, HTML and Markdown) over the next few weeks.  I would love to see pull requests for other languages or for anything that I’ve missed so far.  I look forward to this just getting better and better. <strong>Update:</strong> Version 0.2.0 has shipped with optimized syntax for JavaScript, Python, CSS, JSON and Markdown.</p>\n<p><img alt=\"screenshot of mariana-syntax\" src=\"mariana-screenshot.png\"\nclass=\"full-width\"></p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>To be clear, I’m not sure how great of an influence this was.  The scheme definitely bears a strong resemblance to both of those color schemes, and the release notes credit both authors as inspiration for the 3 new syntax-themes without naming specific schemes.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>This Stack Overflow article was helpful <a href=\"https://stackoverflow.com/a/15755041/1424361\">https://stackoverflow.com/a/15755041/1424361</a></p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/05/28/mariana-syntax-atom/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["Mobx","Atom"],"category":"opinion","key":"weekly-links-01-12-18","title":"Weekly Links: January 12th","description":"Making Atom faster, a good book, and Mobx-state-tree","layout":"weekly-links","path":"/2018/01/12/weekly-links-01-12-18/","date":"2018/01/12","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://egghead.io/courses/manage-application-state-with-mobx-state-tree\">Manage Application State with Mobx-state-tree| Michael Weststrate on Egghead</a>  - Mobx-state-tree is an opinionated state library built on top of the unopinionated Mobx library.  This is a free course explaining why it exists and how to use it.  I <a href=\"https://benmccormick.org/2017/01/09/mobx-first-impressions/\">wrote about Mobx last year</a> and am still enjoying using it a year later.  I’m excited to dive into Mobx-state-tree and hopefully sharpen my Mobx skills in the process.</p>\n<h3>Programming Tools And Practices</h3>\n<p><a href=\"http://blog.atom.io/2018/01/10/the-state-of-atoms-performance.html\">The State of Atom’s Performance | Atom Blog</a> - Atom continues to (slowly) become snappier.  I’m glad to see how organized they are on this.  It’s really hard to take something that was built with a slower architecture fast while it’s being used by tens of thousands of people every day.  They’re making great progress.</p>\n<p><a href=\"http://amzn.to/2DqBeSQ\">Clean Architecture | Robert C Martin</a> - I’ll probably be posting more on this soon, but I’ve been reading the new book on architecture by “Uncle Bob” Martin, and it’s fantastic.  It breaks down big architecture and program design concepts like the Single Responsibility Principle and Dependency Inversion, and explains them well individually, but also shows how they fit together when designing a large system.  I’ll write a full review when I finish the book, but for now just wanted to share that it is worth picking up.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://www.nytimes.com/2018/01/09/us/north-carolina-gerrymander.html\">North Carolina Is Ordered To Redraw Its Congressional Map | NY Times</a> - A little bit of local news here <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, but it is still important for everyone in the USA.  Redistricting is the type of problem where a simple rules based algorithm could be helpful.  Nothing opaque or deep-learning-y, just have a machine apply a published set of rules and work with the results.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>I’m a proud resident of Durham, North Carolina</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/01/12/weekly-links-01-12-18/"}}}],"topic":"Atom"}}