{"data":{"markdownRemark":{"html":"<h1>Diving into lodash: Iteration</h1>\n<p>One of the fundamental tasks that every programmer will encounter on a regular basis is iterating over a list of values.  JavaScript provides a simple functional utility for accomplishing this, the <code class=\"language-text\">forEach</code> function on arrays. You can see an example below of using it to solve the <a href=\"http://c2.com/cgi/wiki?FizzBuzzTest\">fizzbuzz problem</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">/*\nWrite a program that prints the numbers from 1 to 100. But for multiples of three print “Fizz” instead of the number and for the multiples of five print “Buzz”. For numbers which are multiples of both three and five print “FizzBuzz”.\n*/\n\n//Create an array from 1 - 100\nlet nums = _.range(1, 101);\n//check each one\nnums.forEach(num =&gt; {\n    let fizz = num % 3 === 0;\n    let buzz = num % 5 === 0;\n    return `${fizz ? &#39;Fizz&#39; : &#39;&#39;}${buzz ? &#39;Buzz&#39; : &#39;&#39;}${!fizz &amp;&amp; !buzz) ? num : &#39;&#39;}`;\n});</code></pre>\n      </div>\n<p>Following the pattern that we’ve seen in past posts of this series, lodash has its own variation on forEach <code class=\"language-text\">_.forEach</code>.  <code class=\"language-text\">_.forEach</code> (which is also aliased as <code class=\"language-text\">_.each</code>) matches the native forEach method, and takes 2 arguments, a collection and a function.    It executes the function once for each item in the collection, passing in 3 arguments, the value, the key/index, and the collection object.  It then returns the original collection.  Iteration can be short-circuited any time by returning false from the function.  The main differences from the native method are that it works on any <a href=\"\">collection</a>, not just arrays and that it takes the collection as an argument, while the native method is a method on Array.prototype that only takes a single function as an argument.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//script to add a uniqueID to each div on a page in the form &lt;n>of&lt;num divs></span>\n\n<span class=\"token comment\">// divs is a NodeList (which doesn't have native forEach)</span>\n<span class=\"token keyword\">let</span> divs <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'div'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addUniqueId</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>div<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> collection<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> div<span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>index<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">of</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>collection<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>divs<span class=\"token punctuation\">,</span> addUniqueId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>lodash also has <code class=\"language-text\">_.forEachRight</code> (<code class=\"language-text\">_.eachRight</code>) which works the same way as <code class=\"language-text\">_.forEach</code> but iterates right to left on a collection rather than left to right.  It’s hard to improve on the example from the <a href=\"\">lodash docs</a> to explain this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">_<span class=\"token punctuation\">.</span><span class=\"token function\">forEachRight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// → Logs `2` then `1`.</span></code></pre>\n      </div>\n<p><code class=\"language-text\">_.forEach</code> iterates over any collection, including objects.  But objects have several special cases.  First of all, <code class=\"language-text\">_.forEach</code> will attempt to iterate over anything that has a length property as an array, resulting in the following unintuitive bug:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 0 undefined</span>\n<span class=\"token comment\">// 1 undefined</span></code></pre>\n      </div>\n<p>lodash addresses this by providing a <code class=\"language-text\">_.forOwn</code> function, that acts the same as <code class=\"language-text\">_.forEach</code> but treats everything as an object and iterates over each of its properties, regardless of what they are.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    width<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    length<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n    height<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forOwn</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// width 3</span>\n<span class=\"token comment\">// length 2</span>\n<span class=\"token comment\">// height 4</span></code></pre>\n      </div>\n<p>Another edge case around objects is that they can inherit properties from their prototype object chain.  Both <code class=\"language-text\">_.forEach</code> and <code class=\"language-text\">_.forOwn</code> ignore properties on the prototype chain.  So shared properties get lost:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBox<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> <span class=\"token string\">'wood'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forOwn</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// width 3</span>\n<span class=\"token comment\">// length 2</span>\n<span class=\"token comment\">// height 4</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// width 3</span>\n<span class=\"token comment\">// length 2</span>\n<span class=\"token comment\">// height 4</span></code></pre>\n      </div>\n<p>lodash provides a separate function, <code class=\"language-text\">_.forIn</code>, which is identical to <code class=\"language-text\">_.forOwn</code> but iterates over inherited properties as well as “own” properties.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Box</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nBox<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> <span class=\"token string\">'wood'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> box <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n_<span class=\"token punctuation\">.</span><span class=\"token function\">forIn</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// width 3</span>\n<span class=\"token comment\">// length 2</span>\n<span class=\"token comment\">// height 4</span>\n<span class=\"token comment\">// material wood</span></code></pre>\n      </div>\n<p>Like <code class=\"language-text\">_.forEach</code> both <code class=\"language-text\">_.forIn</code> and <code class=\"language-text\">_.forOwn</code> have corresponding ‘Right’ methods, <code class=\"language-text\">_.forInRight</code> and <code class=\"language-text\">_.forOwnRight</code> that iterate over properties in the exact order.  Since property iteration in JavaScript is not guaranteed to be reliable, I’m not aware of any particular use for these methods, other than API consistency.  I’d love to hear from readers in the comments if you use those methods, and I’ll update this section with that information.  </p>\n<p>[collections]: Need a post on what lodash considers a collection\n[lodashdocsright]: <a href=\"https://lodash.com/docs#forEachRight\">https://lodash.com/docs#forEachRight</a></p>","frontmatter":{"title":"","keywords":null,"category":null,"date":null,"path":null,"layout":null,"hideFooter":null,"hideSidebar":null},"fields":{"slug":"/posts/drafts/old-drafts/lodash/lodash_iterating/"}}},"pageContext":{"slug":"/posts/drafts/old-drafts/lodash/lodash_iterating/","relatedPosts":[{"path":"/404.html","data":{"title":"","path":"/404.html","description":null,"date":null,"category":null}},{"path":"/a-note-to-recruiters","data":{"title":"A note to recruiters","path":"/a-note-to-recruiters","description":null,"date":"2015-06-04T13:42:18+00:00","category":null}},{"path":"/built-with","data":{"title":"Built With","path":"/built-with","description":null,"date":null,"category":null}}]}}