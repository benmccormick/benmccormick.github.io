{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"following-js-roadmap,callbacks-to-promises,clean-higher-order-functions","topics":["JavaScript","ECMAScript"],"category":"javascript","key":"ecma-explanation","title":"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?","description":"A summary of the naming conventions for the JavaScript language","layout":"post","path":"/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning","date":"2015-09-14T03:11:34+00:00","dontfeature":null,"isDraft":null},"html":"<p>JavaScript has a strange naming history. For its initial release in 1995 as part of Netscape Navigator, Netscape labeled their new language LiveScript, before renaming it to JavaScript a year later, hoping to capitalize on Java’s popularity at the time (<a href=\"http://www.coderanch.com/t/456377/a/401/javascript-java.jpg\">JavaScript has no actual relationship to Java</a>). In 1996 Netscape submitted JavaScript to <a href=\"http://www.ecma-international.org/\">ECMA International</a> for standardization.  This eventually resulted in a new language standard, labeled ECMAScript.  All major JavaScript implementations since have actually been implementations of the ECMAScript standard, but the term JavaScript has stuck for historical and marketing reasons <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>.  In the real world ECMAScript is usually used to refer to the standard while JavaScript is used when talking about the language in practice.</p>\n<p>This has mostly been trivia for JavaScript developers, because ECMAScript didn’t change much for the first 15 years of its existence, and real world implementations often differed significantly from the standard.  After the initial version of ECMAScript, work on the language continued and two more versions were quickly published.  But after ECMASCript 3 came out in 1999, there were no changes made to the official standard for a decade.  Instead various browser vendors made their own custom extensions to the language, and web developers were left to try and support multiple APIs.  Even after ECMAScript 5 was published in 2009, it took several years for wide browser support of the new spec, and most developers continued to write code in ECMAScript 3 style, without necessarily being aware of the standard.  </p>\n<p>Around 2012 things started to change.  There was more of a push to stop supporting old Internet Explorer versions, and writing code in ECMAScript 5 (ES5) style became much more feasible.  At the same time work was underway on a new ECMAScript standard, at which point it became much more common to start referring to JavaScript implementations in terms of their support for different ECMAScript standards.  The new standard was originally named ES.Harmony, before eventually being referred to as ECMAScript 6th Edition (ES6). In 2015 TC39, the committee responsible for drafting the ECMAScript specifications, made the decision to move to a yearly model for defining new standards, where new features would be added as they were approved, rather than drafting complete planned out specs that would only be finalized when all features were ready.  As a result ECMAScript 6th edition was renamed ECMAScript 2015 (ES2015) before it was published in June.</p>\n<p>Currently there are several proposals for new features or syntax to be added to JavaScript.  These include <a href=\"https://github.com/wycats/javascript-decorators\">decorators</a>, <a href=\"https://github.com/lukehoban/ecmascript-asyncawait\">async-await</a>, and <a href=\"https://gist.github.com/jeffmo/054df782c05639da2adb\">static class properties</a>.  These are often refered to as ES7, ES2016, or ES.Next features, but should realistically be called proposals or possibilities, since the ECMAScript 2016 specification hasn’t been written yet, and might include all or none of those features.  TC39 divides proposals into 4 stages.  You can see the current state of various proposals on <a href=\"https://github.com/tc39/proposals\">the TC39 Github repo</a>.</p>\n<p>So where does that leave us in terms of terminology?  The following list might be helpful:</p>\n<ul>\n<li><strong>ECMAScript</strong>: A language standardized by ECMA International and overseen by the TC39 committee.  This term is usually used to refer to the standard itself.</li>\n<li><strong>JavaScript</strong>: The commonly used name for implementations of the ECMAScript standard.  This term isn’t tied to a particular version of the ECMAScript standard, and may be used to refer to implementations that implement all or part of any particular ECMASCript edition.</li>\n<li><strong>ECMAScript 5 (ES5)</strong>: The 5th edition of ECMAScript, standardized in 2009.  This standard has been implemented fairly completely in all modern browsers</li>\n<li><strong>ECMAScript 6 (ES6)/ ECMAScript 2015 (ES2015)</strong>: The 6th edition of ECMAScript, standardized in 2015.  This standard has been partially implemented in most modern browsers.  To see the state of implementation by different browsers and tools, check out <a href=\"http://kangax.github.io/compat-table/es6/\">these compatibility tables</a>.</li>\n<li><strong>ECMAScript 2016</strong>: The expected 7th edition of ECMAScript. This is scheduled to be released next summer.  The details of what the spec will contain have not been finalized yet</li>\n<li><strong>ECMAScript Proposals</strong>: Proposed features or syntax that are being considered for future versions of the ECMAScript standard.  These move through a process of five stages: Strawman, Proposal, Draft, Candidate and Finished.</li>\n</ul>\n<p>Going forward in this blog, I’ll be referring to the recent ECMAScript version as ES6 (since that is how it is best known by most developers), next years spec as ES2016 (since that will be what it is called the whole way through its standardization process, unlike ES6/ES2015) and future language ideas that are not yet part of a draft or finalized spec as ECMAScript proposals or JavaScript proposals.  I’ll do my best to point back to this post in any cases that might be confusing.  </p>\n<h3>More Resources</h3>\n<ul>\n<li>If you’re wondering about the best way to keep up with JavaScript language changes, check out the resources <a href=\"/2017/07/10/how-to-follow-the-javascript-roadmap/\">in this post</a></li>\n<li>TC39 has a <a href=\"https://github.com/tc39/ecma262\">github repo</a> tracking all of their current open proposals.</li>\n<li>If you aren’t familiar with ES6 yet, Babel has a <a href=\"https://babeljs.io/docs/learn-es2015/\">great rundown of its features</a></li>\n<li>If you want to go deeper with ES6 I’ve heard great things  about 2 books on the subject: <a href=\"http://exploringjs.com/\">Exploring ES6</a> by Axel Rauschmayer and <a href=\"https://leanpub.com/understandinges6\">Understanding ECMAScript 6</a> by Nicholas Zakas<sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup>.  Axel’s blog <a href=\"http://www.2ality.com/\">2ality</a> is also a great ES6 resource.</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        And obviously because ECMAScript is an awful language name\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:2\">\n        <p>\n        Note that I have not read either of these books yet, though I have read plenty of other content from both authors and consider them experts on the JavaScript language. So take that recommendation with an appropriate grain of salt.\n        </p>\n        <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning"}}},{"node":{"frontmatter":{"readNext":null,"topics":["JavaScript","ECMAScript"],"category":"javascript","key":"rauchg-on-es6","title":"Guillermo Rauch on ECMAScript 6","description":"A link-log of Guillermo Rauch's look at ES6","layout":"post","path":"/2015/02/22/rauchg-on-es6","date":"2015-02-22T21:38:46+00:00","dontfeature":null,"isDraft":null},"html":"<blockquote>\n<p>ECMAScript 6, henceforth ES6 and formerly ES.next, is the latest version of the specification. As of August 2014 no new features are being discussed, but details and edge cases are still being sorted out. It’s expected to be completed and published mid-2015.</p>\n</blockquote>\n<blockquote>\n<p>Adopting ES6 has simultaneously resulted in increased productivity (by making my code more succinct) and eliminated entire classes of bugs by addressing common JavaScript gotchas.</p>\n</blockquote>\n<blockquote>\n<p>More importantly, however, it’s reaffirmed my belief in an evolutionary approach towards language and software design as opposed to clean-slate recreation.</p>\n</blockquote>\n<p><a href=\"http://rauchg.com/2015/ecmascript-6/\">http://rauchg.com/2015/ecmascript-6/</a></p>\n<p>A really great look at the highlights of ES6 in practice.  I’ve been working heavily with ES6 for the last month or so, and agree with him on the highlights.  The standardized module syntax (which I transpile to AMD modules), Promises and destructuring particularly stand out as useful syntax that produces better code than what I had before.  I also enjoy the <code class=\"language-text\">=&gt;</code> syntax, though I wish the language authors hadn’t combined a syntactic convenience (shorter syntax) with a semantic difference (fat arrow functions are bound to the current context by default, normal functions are not).</p>\n<p>Also of note is his repeated oblique references to <a href=\"https://babeljs.io/\">Babel</a> (formerly 6to5).  Since I wrote my post on  <a href=\"http://benmccormick.org/2014/11/24/alternative-javascript/\">Alternative JavaScript</a> 2 months ago, Babel has clearly emerged as the best way to use JavaScript features that are not yet widely supported today.  It integrates with a wide variety of tools, is reasonably performant speed-wise, and produces roughly 1-1 output, Coffeescript style.  Highly recommended for anyone looking to get started using or learning about new JavaScript features.</p>","fields":{"slug":"/2015/02/22/rauchg-on-es6"}}},{"node":{"frontmatter":{"readNext":"ecma-explanation,callbacks-to-promises,what-are-hocs","topics":["JavaScript","ECMAScript","Code Quality"],"category":"javascript","key":"clean-higher-order-functions","title":"ES6 Patterns: Clean Higher Order Functions","description":"A quick tip for clean functional syntax in ES6","layout":"post","path":"/2015/11/30/es6-patterns-clean-higher-order-functions","date":"2015-11-30T05:06:03+00:00","dontfeature":null,"isDraft":null},"html":"<div class=\"explanation\">\nI've been writing code using the new features defined in the ECMAScript 2015 version of JavaScript (<a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">more commonly known as ES6</a>) since January.  Throughout the year I've seen myself start using a few new patterns that I think make my code better.  I'm going to share them here with a few quick hitter articles, starting with a simpler way of writing higher order functions\n</div>\n<p>A higher order function is a function that either</p>\n<ol>\n<li>\n<p>Takes another function as an argument or</p>\n</li>\n<li>\n<p>Returns a function when called</p>\n</li>\n</ol>\n<p>Although many people have never heard of them, higher order functions are a key part of JavaScript development and something that most JavaScript developers will encounter every day, whether they know the term or not.  jQuery, Underscore, and many other JavaScript libraries are built on higher order functions.  Many of the core JavaScript APIs, like map, filter, forEach, and setTimeout are functions that take functions as arguments.  If you’re not comfortable with these patterns, learning about them can help you understand the JavaScript ecosystem better.  Hopefully this article will pique your interest.</p>\n<p>For this pattern, I’ll be focused on the second class of higher-order functions, functions that return other functions.  They can be useful in a variety of cases.  As an example, let’s consider a blog commenting application with a list of users.  Our task is to get a list of comments for each user.  We can do that with the builtin <code class=\"language-text\">map</code> and <code class=\"language-text\">filter</code> functions and a simple helper function like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> commentList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./comments'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCommentFromUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        user<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span>\n        comments<span class=\"token punctuation\">:</span>commentList<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">.</span>user <span class=\"token operator\">===</span> userId\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> userIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    userComments <span class=\"token operator\">=</span> userIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getCommentFromUser<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//do stuff with comments</span></code></pre>\n      </div>\n<p>We’ve now written some simple, working code.  We take a list of user ids and return a list of users with the ids mapped to their comments.  Everything is fine, and we can move forward to do things with the comments.  If we don’t need to maintain this code base, we could probably stop here.</p>\n<p>The problem is, while this example works for the simple case, it isn’t very flexible.  We pull the comments directly from a single source that we’ve made available to all of the code in our module.  We can’t add any additional filters on the comments used or pull comments from additional sources without rewriting our mapping logic. If we decide we only want comments that were written in the past year for instance, we’ll need to rewrite our function or mutate commentList in a way that could effect code in the rest of the file. That feels pretty sloppy, since mapping comments to users should be unrelated to determining what comments we’re including in our groupings.  Fortunately we can solve this using a higher order function.  If we rewrite the code so that <code class=\"language-text\">getCommentFromUser</code> takes a list of comments and returns a function that takes an id, we can then control exactly what comments are included in the grouping.  For now we’ll leave our full list, but it could be rewritten later to be a filtered list or to pull comments from multiple sources, without re-writing this logic.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> commentList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./comments'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">getCommentFromUser</span> <span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            user<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span>\n            comments<span class=\"token punctuation\">:</span> comments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> comment<span class=\"token punctuation\">.</span>user <span class=\"token operator\">===</span> userId\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> userIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    userComments <span class=\"token operator\">=</span> userIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCommentFromUser</span><span class=\"token punctuation\">(</span>commentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//do stuff with comments</span></code></pre>\n      </div>\n<p>Our code has gotten much more flexible, but at the cost of readability.  Most developers without significant functional programming experience will have to look twice at the 4 levels of nesting and multiple return statements in our helper function definition to understand what is going on.  We’ve added significant boilerplate in a way that muddies up the meaning of our function, when all we’re really trying to do is provide a way to make the comments list used in the function configurable.  That is extremely “beginner-unfriendly”.  At the same time using higher order functions like this is a useful pattern that serves a real need in the design of our application.  Fortunately, ES6 gives us the opportunity to clean up our syntax.  </p>\n<p>ES6 provides “arrow functions”, a shorthand for functions that have 2 main differences from the JavaScript <code class=\"language-text\">function</code> keyword.  First, they don’t bind a <code class=\"language-text\">this</code> value as a context, instead using the <code class=\"language-text\">this</code> of the parent scope.  Secondly, they can be written inline, with no parentheses and an implicit return.  So you can write a squaring function as <code class=\"language-text\">const square = (x) =&gt; x * x;</code>.  The first property of these functions has many consequences that have been covered in depth elsewhere around the internet.  But when writing non object oriented functions that don’t use <code class=\"language-text\">this</code> like our example above, it is mostly not relevant.  In this case though, the cleaner syntax that arrow functions provide allow us to write a clear and clean higher order function to solve our use case.  With arrow functions, our example from above now looks like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> commentList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./comments'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getCommentFromUser</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>comments<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    user<span class=\"token punctuation\">:</span> userId<span class=\"token punctuation\">,</span>\n    comments<span class=\"token punctuation\">:</span> comments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span>comment<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> comment<span class=\"token punctuation\">.</span>user <span class=\"token operator\">===</span> userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">let</span> userIds <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    userComments <span class=\"token operator\">=</span> userIds<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token function\">getCommentFromUser</span><span class=\"token punctuation\">(</span>commentList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//do stuff with comments</span></code></pre>\n      </div>\n<p>I like to call the <code class=\"language-text\">() =&gt; () =&gt;</code> pattern a “double function”, and have found it popping up all over the code I write since I began using ES6, especially when I’m using <code class=\"language-text\">map</code>, <code class=\"language-text\">filter</code>, and <code class=\"language-text\">reduce</code>.  Array transformations using those functions often require contextual information beyond the contents of the array.  A naive approach to this would involve having the function reference variables in the outer scope directly, like we did with commentList above.  More commonly that happens when a user inlines a function inside of a <code class=\"language-text\">map</code> call and references variables in the parent scope.  I’ve found that it is much clearer and less error prone to use a higher order function that takes only the variables that are needed for the transformation in, and returns a new function that can be used for the transformation.  This reduces the number of things that can effect the output of the function, allows for greater configurability without directly changing the transformation logic, and makes it clear to readers what values are expected to be used in the function.  Double functions make this easy, and they’ve easily been one of my favorite new code patterns with ES6.  </p>\n<h3>More Resources</h3>\n<ul>\n<li>If you’re interested in higher order functions and JavaScript, I know of no better reference than <a href=\"https://leanpub.com/javascriptallongesix\">JavaScript Allongé</a>.  It’s a fantastic deep dive into the JavaScript language with a functional flavor, building understanding from the bottom up and providing many ideas for code recipes along the way.  And it’s recently been rewritten to reflect the changes to the language that ES6 brought.</li>\n<li>Here’s a nice <a href=\"http://www.2ality.com/2012/04/arrow-functions.html\">deep dive on arrow functions at 2ality</a> by Axel Rauschmayer.  If you haven’t seen his blog, it’s a fantastic reference on ES6 and JavaScript in general</li>\n</ul>","fields":{"slug":"/2015/11/30/es6-patterns-clean-higher-order-functions"}}},{"node":{"frontmatter":{"readNext":"ecma-explanation,clean-higher-order-functions,backbone-devs-react","topics":["JavaScript","ECMAScript","Code Quality"],"category":"javascript","key":"callbacks-to-promises","title":"ES6 Patterns: Converting Callbacks to Promises","description":"How to convert a callback driven API to a Promise-based one","layout":"post","path":"/2015/12/30/es6-patterns-converting-callbacks-to-promises","date":"2015-12-30T03:30:47+00:00","dontfeature":null,"isDraft":null},"html":"<div class=\"explanation\">\nI've been writing code using the new features defined in the ECMAScript 2015 version of JavaScript (<a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">more commonly known as ES6</a>) since January.  Throughout the year I've seen myself start using a few new patterns that I think make my code better.  I'm going to share them here with a few quick hitter articles.  If you missed it, I wrote about <a href=\"http://benmccormick.org/2015/11/30/es6-patterns-clean-higher-order-functions/\">clean higher order functions</a> earlier this week.  This post focuses on working with asynchronous code in ES6.  \n</div>\n<h3>Background</h3>\n<p>One of the nicest new features of ES6 JavaScript is the standardization of Promises.  Promises are a method for managing asynchronous code that serve as an alternative to the standard callback function syntax that has been the JavaScript standard for years.  If you’re unfamiliar with them, a good example of a Promise based API is the new <code class=\"language-text\">fetch</code> api provided by browsers.  <code class=\"language-text\">fetch</code> is a replacement for the older callback based XMLHttpRequest API.  A quick example of an HTTP request with the 2 APIs provides a nice comparison of how Promises can lead to clearer code.</p>\n<p>A simple get request with XMLHttpRequest looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">reqListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">reqError</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Fetch Error :-S'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">//do stuff with data</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>  \n\nrequest<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onerror</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/api/foo/bar'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \nrequest<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>whereas with fetch we get this instead</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/foo/bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>jsonData<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//do stuff with the data</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'There was a problem with the request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>This is admittedly a slightly unfair example due to XMLHttpRequest’s clunky object oriented API, but the key take away here is that promises allow for easier visualization of a program’s flow, as well as the ability to easily chain both synchronous and asynchronous operations together into a unified API.</p>\n<p>Promises have been around for a little while in user-land.  There are a bunch of Promise libraries out there that eventually standardized on a spec called <code class=\"language-text\">Promises/A+</code>.  Promises/A+ compliant libraries include <a href=\"https://github.com/kriskowal/q\">Q</a>, <a href=\"https://github.com/petkaantonov/bluebird\">Bluebird</a>, and <a href=\"https://github.com/tildeio/rsvp.js\">rsvp</a>.  There are also many older libraries that provide Promise-like capabilities but are not completely spec compatible, most notably <a href=\"https://api.jquery.com/category/deferred-object/\">jQuery deferreds</a>.  But with ES6 Promises are being standardized.  Happily, since the implementation uses the standard that user-land libaries have agreed upon, the Promise spec is compatible with existing implementations, and existing code bases can remove their existing libraries in favor of the browser supplied version, or have code written to use the browser version interop cleanly with their existing code.  Support for Promises now exists in the latest versions of all major browsers, but it never made it to Internet Explorer and is Edge only for Microsoft browsers.  So most developers will still want to consider using a polyfill for the time being.</p>\n<h3>Converting callback-driven code to use Promises</h3>\n<p>If you believe that Promises are worthwhile, you’ll immediately encounter a problem in today’s JavaScript world.  Many JavaScript APIs, including most standard browser APIs and older but still popular libraries like jQuery and Backbone are heavily callback driven.  Rather than mixing 2 different styles of asynchronous code, wouldn’t it be nice if we could easily convert callback-based APIs to use Promises?  It turns out that it’s not that hard.  Let’s take the simplest example possible to start.  <code class=\"language-text\">setTimeout</code> is a straightforward browser API that waits for a specified period of time and then executes a callback.  A standard use looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">doStuff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>doStuff<span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>A Promise-based API for this function would likely look something like this code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>doStuff<span class=\"token punctuation\">)</span></code></pre>\n      </div>\n<p>We can create an API like that using setTimeout.  To do that, we’ll need a function <code class=\"language-text\">timeout</code> which takes a timeout variable and returns a Promise.  </p>\n<p>You can define A+ compliant Promises using the Promise constructor, which expects a single function as an argument.  That function takes 2 arguments, a <code class=\"language-text\">resolve</code> function and a <code class=\"language-text\">reject</code> function.  The wonderful thing is that under the covers these are just callback functions that the Promise api glosses over.  </p>\n<p>Since we already have an API that can handle callbacks, the implementation of our <code class=\"language-text\">timeout</code> function is pretty simple.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>We don’t use the reject callback, since setTimeout doesn’t provide any hooks for an error state. So we pass resolve as the callback to setTimeout, and that is all we need.  Now we have a great chainable setTimeout function that we could include in a Promise chain.</p>\n<p>Moving on to a more complicated example, let’s take our <code class=\"language-text\">XMLHttpRequest</code> code from above and see if we can create a simplified version of the <code class=\"language-text\">fetch</code> API using <code class=\"language-text\">XMLHttpRequest</code> under the covers.  In this case I’m going to use ES6 style arrow functions to reduce the boilerplate a bit.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fetch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>method<span class=\"token punctuation\">:</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    request<span class=\"token punctuation\">.</span>onload <span class=\"token operator\">=</span> resolve\n    request<span class=\"token punctuation\">.</span>onerror <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span>\n    request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>method<span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  \n    request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This is a simplified implementation that doesn’t come close to covering all the use cases of fetch, but it provides a great example of how simple it can be to transform a callback based api to a Promise based one, without having to rewrite the existing code<sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>.   </p>\n<p>For what it’s worth, it is equally easy to convert functions in the other direction.  For instance a callback based implementation of fetch can be a one liner.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">callbackFetch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> succ<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>succ<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>It’s useful to know that the various syntaxes for asynchronous code in JavaScript are effectively equivalent and interoperable.  When designing APIs for your code, both for public libraries with external libraries and components that you use in an application, these patterns can be useful for providing a consistent API, even if you’re using code under the covers that presents it’s asynchronous code in a different way than your API.  </p>\n<h3>More Resources</h3>\n<ul>\n<li>The free online version of Exploring ES6 by Axel Rauschmayer has a <a href=\"http://exploringjs.com/es6/ch_promises.html\">great chapter</a> on ES6 Promises explaining the API and how they fit in with the A+ standard.</li>\n<li>There was also a <a href=\"http://blogs.msdn.com/b/eternalcoding/archive/2015/09/30/javascript-goes-to-asynchronous-city.aspx\">great post by David Catuhe on one of the MSDN blogs</a> earlier this year highlighting how asynchronous code has evolved in JavaScript over the years, including a look at the new <code class=\"language-text\">async/await</code> patterns proposed for ES2016.</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        And even a full implementation of fetch using XMLHttpRequest is only<a href=\"https://github.com/github/fetch/blob/master/fetch.js\"> ~300 lines</a>\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2015/12/30/es6-patterns-converting-callbacks-to-promises"}}},{"node":{"frontmatter":{"readNext":"ecma-explanation,orthogonality-css-js,atom-tips","topics":["JavaScript","ECMAScript"],"category":"javascript","key":"following-js-roadmap","title":"How to follow the JavaScript roadmap","description":"Keeping up with the language's progress","layout":"post","path":"/2017/07/10/how-to-follow-the-javascript-roadmap/","date":"2017-07-10T12:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>It can be difficult to keep up with all the things going on in web development, especially since the JavaScript language itself has been changing over the last several years.  After several years of relative stability<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, the ECMAScript spec (<a href=\"https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ECMAScript is the specification for the JavaScript language</a>) has changed quite a bit over the last 3 years, with more changes on the way.  In this post I wanted to highlight a few of the resources I can recommend for keeping up with the language changes.</p>\n<h3>Learning ES6/ES2015</h3>\n<p>If you haven’t paid attention to any features that aren’t ready in all browsers yet, or you’re getting back to JavaScript development after being away for a while, you probably could use a resource to catchup on the ES6 JavaScript release from 2015.  ES6 is now <a href=\"https://kangax.github.io/compat-table/es6/\">almost completely</a> implemented in the latest versions of all major browsers, so if you’ve been ignoring it due to compatibility concerns, now is the time to learn.  Fortunately there are a lot of great resources for learning about ES6.  My favorite quick reference is the <a href=\"https://babeljs.io/learn-es2015/\">Learn ES2015 page</a> from <a href=\"https://babeljs.io/\">Babel</a>.  It’s a short, example filled page with explanations of all the major features of the language update. If you want something meatier, there have been several resources created by JS experts.  <a href=\"http://amzn.to/2tVcwaW\">Understanding ECMAScript 6</a> by <a href=\"https://www.nczonline.net/about/\">Nicholas Zakas</a> and <a href=\"http://exploringjs.com/es6.html\">Exploring ES6</a> by <a href=\"http://2ality.com/\">Axel Rauschmayer</a> are books that go through the new features in detail.  If you prefer video tutorials, <a href=\"http://wesbos.com/\">Wes Bos</a> has a <a href=\"https://es6.io/\">whole video course on ES6</a>.</p>\n<h3>Keeping up with new features</h3>\n<p>Things haven’t been changing as fast since the ES6 release.  The first 2 “annual releases” of the ECMAScript spec contained only a <a href=\"http://2ality.com/2016/01/ecmascript-2016.html\">combined</a> <a href=\"http://2ality.com/2016/02/ecmascript-2017.html\">8 features</a>. but there are still a lot of new features working their way through the ECMAScript pipeline.  If you want to get a quick overview of the features being considered for future releases, the best place to look is the <a href=\"https://github.com/tc39/proposals\">TC39 proposals repo on Github</a>.  TC39 is the organization that guides the future of the ECMAScript spec.  Proposals go through a 4 stage process, where stage 1 can best be understood as “ideas”, and stage 4 is “confirmed for the next ECMAScript release”.  <a href=\"https://ponyfoo.com/contributors/ponyfoo\">Nicolás Bevacqua</a> put up a <a href=\"https://ponyfoo.com/articles/tc39-ecmascript-proposals-future-of-javascript\">good post</a> last week describing this process in depth, as well as giving a brief description of the more advanced proposals in the queue. If you’re interested in keeping up with new proposals but want somebody to walk you through them, I recommend subscribing to Axel Rauschmayer’s <a href=\"http://2ality.com/\">2ality</a> blog.  In addition to writing the ES6 book mentioned above, he regularly writes blog posts highlighting new proposals with detailed explanations of the feature implementation and motivation.</p>\n<h3>Testing new features</h3>\n<p>Almost all of the higher stage proposals on the TC39 list have been implemented by <a href=\"https://babeljs.io/\">Babel</a> and you can try them out in the Babel <a href=\"https://babeljs.io/repl/#?babili=false&#x26;evaluate=true&#x26;lineWrap=false&#x26;presets=es2015%2Creact%2Cstage-2&#x26;targets=&#x26;browsers=&#x26;builtIns=false&#x26;debug=false&#x26;code_lz=Q\">REPL</a> or by setting up a small project that loads in Babel.  </p>\n<h3>Keeping up with the conversation</h3>\n<p>If you’re a twitter user, probably the easiest way to keep up with language evolution is to follow the people who are shaping and teaching the new language features.  Some twitter follow recommendations:</p>\n<ul>\n<li><a href=\"https://twitter.com/wycats\">Yehuda Katz</a> - TC39 member, Ember core developer</li>\n<li><a href=\"https://twitter.com/rauschma\">Axel Rauschmayer</a> - JS blogger and trainer</li>\n<li><a href=\"https://twitter.com/wesbos\">Wes Bos</a> - JS blogger and trainer</li>\n<li><a href=\"https://twitter.com/sebmarkbage\">Sebastian Markbåge</a> - TC39 member, React core developer</li>\n<li><a href=\"https://twitter.com/left_pad\">Henry Zhu</a> - Babel maintainer</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>From the release of the ECMAScript 5 spec to the ES6/ECMAScript2015 spec, the language wasn’t exactly stable in practice because browser implementations didn’t always move quickly, and there were still many incompatibilities.  But standard language syntax stayed stable for quite a while, which allowed the browser ecosystem to iron out some of those kinks prior to the adoption of ES6.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/07/10/how-to-follow-the-javascript-roadmap/"}}},{"node":{"frontmatter":{"readNext":"ecma-explanation,following-js-roadmap,ten-things-js","topics":["ECMAScript","JavaScript"],"category":"javascript","key":"proposals-in-production","title":"JavaScript Proposals In Production","description":"The problems with using proposed JavaScript features in production","layout":"post","path":"/2018/03/16/proposals-in-production/","date":"2018/03/16","dontfeature":null,"isDraft":null},"html":"<p><em>This post was adopted from a twitter thread that outgrew it’s medium today.  You can see the original thread <a href=\"https://twitter.com/ben336/status/974670479905705984\">here</a>.</em></p>\n<p>This morning I saw the following tweet:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">*TC39 proposes Array.flatten feature that breaks code that was working fine for 10 years*<br>&quot;IT&#39;S THEIR FAULT FOR DOING NONSTANDARD STUFF&quot;<br><br>*TC39 proposes changing classes feature not yet in standard*<br>&quot;IT&#39;S NOT FAIR I WROTE CODE USING THAT&quot;</p>&mdash; Dave Methvin (@davemethvin) <a href=\"https://twitter.com/davemethvin/status/974037352384430080?ref_src=twsrc%5Etfw\">March 14, 2018</a></blockquote>\n<p>The tweet refers to <a href=\"https://github.com/allenwb/js-classes-1.1\">this proposal</a> for replacing a number of other proposals for augmenting JS’s current class syntax, as well as recent backlash on twitter over <a href=\"https://github.com/tc39/proposal-flatMap/pull/56\">a proposal </a> to not use flatten or flatmap for future JS standard syntax due to their previous use in mootools.  </p>\n<p>Because people have been using Babel or other tools to transpile their code and use the proposed class syntax today, it would be frustrating for many devs if the proposal shifted under them.  I’ve been there.  And thus, story time:</p>\n<p>A few years ago I used a polyfill for a browser API that wasn’t yet fully supported in all browsers.  And I used it in production code.  Browser support didn’t pick up nearly as quickly as I expected, and then the spec changed.  Supporting that code has caused me problems repeatedly since, and there isn’t a lot of support, given that the syntax isn’t standardized.  Because <a href=\"https://benmccormick.org/2018/01/07/large-improvements-small-team/\">I am working with limited resources</a> I  still haven’t been able to get rid of the polyfill code completely.  It’s baked into one of the most critical portions of my production application.  And so I’ve had to live with it and deal with some of it’s non-ideal aspects for a long time.  Since then I’ve avoided putting anything in production that isn’t in a spec.  And I have absolutely no regrets about that.</p>\n<p><strong>The lesson I’ve learned:</strong> Polyfilling a partially supported spec for compatibility is fine.  Playing around with new proposals is fine (and actually a great idea if you want to influence the future of the language).  But I never want to use polyfills/transpiling for a <em>proposed spec</em> in production code. And yes that means no decorators/class properties/pipeline operators in my code for now.  But that’s ok.  JavaScript is a pretty decent language today.  A little patience will help you in the end.  Even libraries like MobX that encourage the use of “future specs” will still work without them if they’re reasonably well maintained.</p>\n<h3>Why Does This Happen?</h3>\n<p>To some folks the lesson of “Don’t use language features that aren’t standardized yet” probably looks obvious.  So why does this happen? I think there’s a community/culture aspect to some of this.  For instance, many of the early adopters of React really wanted to push the language forward to achieve better developer experience, and were more likely to propose and advocate for new syntax.  This was fine for them, because many of these folks were either</p>\n<p>a. Employees at large companies who had the resources to support whatever code extensions they wanted, and dedicate time to a large refactor if they got it wrong (not typical of most devs)\nb. Consultants/teachers who are always trying to stay on the bleeding edge for teaching purposes and who don’t build projects intended to be maintained long term (not typical of most devs)\nc. Involved in the language standards process and experimenting with new syntax for the purpose of influencing the language, rather than writing production code with it (not typical of most devs)</p>\n<p>Because of this, the need to compile JS for JSX purposes anyway and the heavy emphasis in the early React community on rethinking best practices, I’ve seen a lot more of this type of pre-standardization use of features in the React community than elsewhere.  The Ember community for instance doesn’t seem to have the same problems. But it started with early adopters in React, and spread when folks who were less informed about the standards process cargo-culted the code examples.  So here we are.</p>\n<h3>My suggestions</h3>\n<ol>\n<li><strong>Learn about the ECMAScript standards process.</strong>  <a href=\"https://benmccormick.org/2017/07/10/how-to-follow-the-javascript-roadmap/\">This post</a> can get you started.</li>\n<li><strong>Don’t use non-standard code in production.</strong>  It just isn’t worth the headaches you may get later.</li>\n</ol>","fields":{"slug":"/2018/03/16/proposals-in-production/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["ECMAScript","PWA"],"category":"opinion","key":"weekly-links-02-03-18","title":"Weekly Links: February 3rd","description":"ECMAScript2018, PWAs on iOS, and self driving cars","layout":"weekly-links","path":"/2018/02/03/weekly-links-02-03-18/","date":"2018/02/03","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"http://2ality.com/2017/02/ecmascript-2018.html\">ECMAScript 2018 | 2ality</a> - The spec for the 2018 version of <a href=\"https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ECMAScript</a> has been finalized and this is a good roundup of the new features and syntax available.  I’m personally excited for rest/spread properties to be an official part of the language.</p>\n<p><a href=\"https://medium.com/@firt/pwas-are-coming-to-ios-11-3-cupertino-we-have-a-problem-2ff49fd7d6ea\">PWAs are coming to iOS 11.3: Cupertino, we have a problem | Maximiliano Firtman</a> - Interesting look at what is and isn’t available in the newest version of Safari when it comes to PWAs and offline support</p>\n<h3>Tech and Business</h3>\n<p><a href=\"https://medium.com/99-mph/1-trillion-of-real-estate-is-on-the-move-heres-why-94ee9233e5eb\">1 Trillion of Real Estate is on the move | Phil Levin</a> - Almost everybody seems to agree that self driving cars are going to happen.  It’s only a question of when.  But the other question is what the second-level effects of self driving cars will be.  Those who can correctly predict the answer to those two questions are going to have opportunities to make money and create interesting businesses. This is an interesting take on how self-driving cars might affect real estate.</p>","fields":{"slug":"/2018/02/03/weekly-links-02-03-18/"}}},{"node":{"frontmatter":{"readNext":"bb-es6-1,backbone-devs-react,mn-series","topics":["JavaScript","ECMAScript","Backbone"],"category":"frameworks","key":"bb-es6-2","title":"Backbone and ES6 Classes Revisited","description":"A second look at using ES6 classes with Backbone","layout":"post","path":"/2015/07/06/backbone-and-es6-classes-revisited","date":"2015-07-06T11:22:22+00:00","dontfeature":null,"isDraft":null},"html":"<p>A few weeks ago I wrote <a href=\"http://benmccormick.org/2015/04/07/es6-classes-and-backbone-js/\">an article</a> explaining why the final spec for classes in the ES6/ES2015 version of JavaScript was not usable in Backbone applications.  That post got a lot of great feedback, including this <a href=\"https://github.com/jashkenas/backbone/issues/3560\">discussion</a> with the Backbone core team. The gist of that discussion has been that there are several ways to make ES6 classes work with Backbone now, though they may be less clean than the current <em>Backbone.extend</em> syntax.  But there’s hope for a really great experience: decorators, a <a href=\"https://github.com/wycats/javascript-decorators\">proposed feature for the ES7/ES2016 spec</a>, provide a much cleaner interface when working with Backbone and native classes.</p>\n<p>Let’s start with a quick reminder on the problem that Backbone developers face when adapting ES6 classes.  Both <em>Backbone.extend</em> and ES6 classes serve as syntactic sugar around traditional JavaScript inheritance methods.  So the following code snippets are effectively equivalent:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> ExampleView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    foo<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>and each corresponds roughly to this vanilla ES5 snippet</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nExampleView<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nExampleView<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">;</span>\nExampleView<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>All of that works fine.  The problem is that even though these abstractions are similar, they’re not quite the same.  Specifically ES6 class syntax supports an opinionated subset of what you can accomplish with plain prototype inheritance.  There’s good reason for this, since many developers don’t understand prototype inheritance and can shoot themselves in the foot.  But ES6 class restrictions don’t mesh well with Backbone’s conventions.  Specifically, Backbone relies on adding properties to a class’ prototype before a class’ constructor is invoked <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>.  ES6 classes don’t provide any way to define properties on the prototype as part of the class definition.  They also do not allow you to add instance properties to a constructor prior to calling super() to run a parent class’ constructor.  As a result, properties that are processed within Backbone objects’ constructors like <code class=\"language-text\">events</code>, <code class=\"language-text\">className</code>, <code class=\"language-text\">urlRoot</code> and others can’t be set within an ES6 class definition without resorting to some less than beautiful syntax.  There are however at least 3 different ways of dealing with this problem under the ES6 spec.  I’ll take a look at each of them.</p>\n<h3>ES6 solutions</h3>\n<p>The 3 main solutions I’ve seen proposed for using the current ES6 class spec with Backbone classes are passing properties to the <code class=\"language-text\">super</code> function, creating everything as a method, and adding properties to the prototype outside of the class definition.  I’ll go through those one by one, using <a href=\"https://github.com/tastejs/todomvc/blob/gh-pages/examples/backbone_require/js/views/todos.js\">a view from one of the Backbone TodoMVC implementations</a> as an example.</p>\n<h4>Pass properties to the super constructor</h4>\n<p>The first solution is to define a constructor function for each Backbone object that has properties, and pass the properties directly to the constructor.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Backbone <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> todosTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'text!templates/todos.html'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Common <span class=\"token keyword\">from</span> <span class=\"token string\">'common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            tagName<span class=\"token punctuation\">:</span>  <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n\n            template<span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>todosTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n            events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token string\">'click .toggle'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'toggleCompleted'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'dblclick label'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'click .destroy'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'keypress .edit'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'updateOnEnter'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'keydown .edit'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'revertOnEscape'</span><span class=\"token punctuation\">,</span>\n                <span class=\"token string\">'blur .edit'</span><span class=\"token punctuation\">:</span>       <span class=\"token string\">'close'</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> isCompleted <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">// hidden cases only</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isCompleted <span class=\"token operator\">&amp;&amp;</span> Common<span class=\"token punctuation\">.</span>TodoFilter <span class=\"token operator\">===</span> <span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token punctuation\">(</span>isCompleted <span class=\"token operator\">&amp;&amp;</span> Common<span class=\"token punctuation\">.</span>TodoFilter <span class=\"token operator\">===</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> trimmedValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trimmedValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> trimmedValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> trimmedValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">updateOnEnter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> Common<span class=\"token punctuation\">.</span><span class=\"token constant\">ENTER_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">revertOnEscape</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>which <span class=\"token operator\">===</span> Common<span class=\"token punctuation\">.</span><span class=\"token constant\">ESCAPE_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Also reset the hidden input back to the original value.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoView<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>There are a few advantages to this approach.  It keeps everything within the class definition, and lets Backbone itself manage attaching properties to the prototype, assuring compatibility with existing code.  However it adds a constructor call to a class that otherwise wouldn’t need one, making it less obvious when a developer is actually modifying the constructor to do something important.  It also isolates properties from methods, whereas Backbone philosophically has always treated them interchangeably.  In fact that philosophy is the key to the next solution.</p>\n<h4>Treat everything like a method</h4>\n<p>Backbone evaluates all of its properties using Underscore’s <code class=\"language-text\">_.result</code> function <sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup>. <code class=\"language-text\">_.result</code> checks to see if an object property is a function. If it is then <code class=\"language-text\">_.result</code> will evaluate it and return the result.  This allows Backbone to accept its properties as either an object or a function.  Very handy.  So one workaround to the constructor problem is to make everything a method, including properties.  We can actually go one better than this, and use the <code class=\"language-text\">get</code> keyword to make our methods serve as <em>getters</em> for a property.  This means they will be accessible as properties, but defined as methods, retaining compatibility with any existing references if you’re converting existing code.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">tagName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>todosTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">get</span> <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'click .toggle'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'toggleCompleted'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'dblclick label'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'click .destroy'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'keypress .edit'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'updateOnEnter'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'keydown .edit'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'revertOnEscape'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'blur .edit'</span><span class=\"token punctuation\">:</span>       <span class=\"token string\">'close'</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//... etc</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoView<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This approach uses only standard class syntax, which is great.  Getters and methods are highly idiomatic class structures, and work fine with Backbone right now.  They also enforce the immutability of these properties, a design concern with the current Backbone property implementation <sup id=\"fnref:3\"><a href=\"#fn:3\">3</a></sup>.  But lets be real, <code class=\"language-text\">get tagName() { return &#39;li&#39;}</code> is a significantly less clean interface than the <code class=\"language-text\">tagName: &#39;li&#39;</code> syntax you get with <em>Backbone.extend</em>.  </p>\n<h4>Defining properties directly on the prototype</h4>\n<p>The final example is the most straightforward.  Since there’s no special class syntax for adding properties to the prototype, we can just do so directly after we’ve defined the class.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//... etc</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nTodoView<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> <span class=\"token string\">'li'</span><span class=\"token punctuation\">;</span>\nTodoView<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>todosTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nTodoView<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'click .toggle'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'toggleCompleted'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'dblclick label'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'click .destroy'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'keypress .edit'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'updateOnEnter'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'keydown .edit'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'revertOnEscape'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'blur .edit'</span><span class=\"token punctuation\">:</span>       <span class=\"token string\">'close'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoView<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>This approach is unambiguous, but its also removes the advantages of using abstracted syntax to begin with.  Adding directly to the prototype takes properties out of the context of the class definition, making it harder to view the class as a holistic unit.  Forcing properties to appear after the class definition also breaks with Backbone community conventions.  Almost all examples of Backbone code that I’ve seen put properties at the top of Backbone class declarations, above any methods, since they’re usually important to read when trying to understand the purpose and role of an object.  They’re then followed by methods, which often contain extensive logic that is less helpful in understanding a class’ overall purpose.</p>\n<p>Of these 3 solutions, I personally prefer using methods and getters.  However I don’t see any of them as an improvement on the existing <em>Backbone.extend</em> syntax.</p>\n<h3>ES7 and Decorators</h3>\n<p>JavaScript is not staying stagnant however.  The TC39 committee recently approved the final spec for ES6 and is aiming to release a new spec on a yearly basis going forward.  One proposed feature for a future spec is <a href=\"https://github.com/wycats/javascript-decorators\">JavaScript decorators</a>.  Decorators are a declarative way of adding extra behavior to a class or class method.  They’re simple functions that take a class or method as an argument and then return an augmented version.</p>\n<p>For instance here’s a simple example from the proposal of a decorator that adds an isTestable property to classes that it decorates.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">@<span class=\"token function\">isTestable</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyClass</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">isTestable</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">.</span>isTestable <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Based on that example, it’s not hard to see how this is relevant to the syntax struggle we experienced above.  Here’s a naive solution to our properties problem that utilizes a <code class=\"language-text\">props</code> decorator to add a Backbone-esque hash of properties to the prototype.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//decorators.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">props</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Backbone <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> todosTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'text!templates/todos.html'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Common <span class=\"token keyword\">from</span> <span class=\"token string\">'common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'decorators'</span>\n\n@<span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    tagName<span class=\"token punctuation\">:</span>  <span class=\"token string\">'li'</span><span class=\"token punctuation\">,</span>\n\n    template<span class=\"token punctuation\">:</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>todosTemplate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n    events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'click .toggle'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'toggleCompleted'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'dblclick label'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'edit'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'click .destroy'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'clear'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'keypress .edit'</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">'updateOnEnter'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'keydown .edit'</span><span class=\"token punctuation\">:</span>    <span class=\"token string\">'revertOnEscape'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'blur .edit'</span><span class=\"token punctuation\">:</span>       <span class=\"token string\">'close'</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">//... etc</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoView<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>That’s a big improvement over our ES6 solutions above.  Our properties are added declaratively at the top of the class and are still clearly associated with the class.  Everything lines up reasonably well with both Backbone and native idioms. This is also reminiscent of the <a href=\"https://angular.io/docs/js/latest/quickstart.html#section-angular-create-account\">approach that Angular 2 is taking</a> with its interface, using decorators heavily for component configuration.  It turns out though that we can actually do better.</p>\n<p>I got a tweet from Steven Langbroek last week asking me to look at his <a href=\"https://gist.github.com/StevenLangbroek/6bd28d8201839434b843\">idea for using decorators to provide a cool new syntax for event binding in Backbone</a>.  I thought it was awesome and it inspired me to think in a more fine grained way about using decorators with Backbone.  How can we make the syntax better, as opposed to just replicating the current experience.  Here’s what a more “fine grained” decorators approach might look like with our example.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//decorators.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">tagName</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">template</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">decorator</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>template <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">on</span><span class=\"token punctuation\">(</span>eventName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> descriptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>target<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        target<span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">isFunction</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The on decorator is not compatible with an events method'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>eventName<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'The on decorator requires an eventName argument'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    target<span class=\"token punctuation\">.</span>events<span class=\"token punctuation\">[</span>eventName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> descriptor<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> $ <span class=\"token keyword\">from</span> <span class=\"token string\">'jquery'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Backbone <span class=\"token keyword\">from</span> <span class=\"token string\">'backbone'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> _ <span class=\"token keyword\">from</span> <span class=\"token string\">'underscore'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> todosTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'text!templates/todos.html'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Common <span class=\"token keyword\">from</span> <span class=\"token string\">'common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>tagName<span class=\"token punctuation\">,</span> template<span class=\"token punctuation\">,</span> on<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'decorators'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">tagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span>\n@<span class=\"token function\">template</span><span class=\"token punctuation\">(</span>todosTemplate<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">TodoView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'change'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'destroy'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">'visible'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>toggleVisible<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.edit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">toggleVisible</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">toggleClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">isHidden</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> isCompleted <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token comment\">// hidden cases only</span>\n            <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isCompleted <span class=\"token operator\">&amp;&amp;</span> Common<span class=\"token punctuation\">.</span>TodoFilter <span class=\"token operator\">===</span> <span class=\"token string\">'completed'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token punctuation\">(</span>isCompleted <span class=\"token operator\">&amp;&amp;</span> Common<span class=\"token punctuation\">.</span>TodoFilter <span class=\"token operator\">===</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .toggle'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">toggleCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dblclick label'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blur .edit'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> trimmedValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trimmedValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> title<span class=\"token punctuation\">:</span> trimmedValue <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!==</span> trimmedValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">trigger</span><span class=\"token punctuation\">(</span><span class=\"token string\">'change'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keypress .edit'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">updateOnEnter</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>keyCode <span class=\"token operator\">===</span> Common<span class=\"token punctuation\">.</span><span class=\"token constant\">ENTER_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'keydown .edit'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">revertOnEscape</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>which <span class=\"token operator\">===</span> Common<span class=\"token punctuation\">.</span><span class=\"token constant\">ESCAPE_KEY</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">removeClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">'editing'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Also reset the hidden input back to the original value.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$input<span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .destroy'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> TodoView<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>Now we’re getting somewhere.  Steven’s <code class=\"language-text\">on</code> decorator provides a really nice upgrade to Backbone’s event system.  Event handlers are now in the context of the methods they refer to, making it much easier to get context as you scroll through a large view.  Our tagName gets a nice declarative setter at the top of the view rather than being bundled into an object hash.  And our template processing gets standardized, with the call to <code class=\"language-text\">_.template</code> abstracted away into the decorator.  That last decorator would probably be project specific, but the other 2 could easily be incorporated into a general Backbone decorator library.  </p>\n<p>The main downside I see to this is one shared by a few of the other approaches.  Specifically that declaring a property like tagName as a method or as a property requires different implementation styles.  Backbone philosophically treats these scenarios as equivalent, and its not unusual to start with a static property for keys like <code class=\"language-text\">className</code>, <code class=\"language-text\">url</code>, or <code class=\"language-text\">template</code> and then refactor to use a function as code is reused in different situations.  Artificially separating out those scenarios is not very Backbone-like and might discourage that type of refactoring.</p>\n<h3>Recommendations</h3>\n<p>If you want to use ES6 classes with Backbone in production today, you should probably make everything a method, and make liberal use of the getter functionality.  That seems to be the most Backbone-like, with everything contained in a single class definition, and easy refactoring when a property begins to require logic around it.  If you’re experimenting though, you should definitely consider playing with decorators and see how you can make Backbone’s interface better.  </p>\n<p><em>If you have ideas about this, feel free to contribute on the <a href=\"https://github.com/jashkenas/backbone/issues/3560\">github issue</a></em></p>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        I completely screwed up explaining this in my first piece.  I was under the mistaken impression that Backbone was adding properties like `className` and `events` to each instance rather than to the prototype.  Which makes no sense in retrospect, since those properties need to be present before the Backbone.View is run.\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n        <li class=\"footnote\" id=\"fn:2\">\n            <p>\n            Well, almost all. iDAttribute <a href=\"https://github.com/jashkenas/backbone/pull/3684\">is still catching up</a>.\n            <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n        </li>\n        <li class=\"footnote\" id=\"fn:3\">\n            <p>\n            Oh you didn't realize that adding an item to the event hash for your view would add it to every instance of that View?  Whoops.\n            <a href=\"#fnref:3\" title=\"return to article\"> ↩</a></p>\n        </li>\n</ol>\n</div>","fields":{"slug":"/2015/07/06/backbone-and-es6-classes-revisited"}}},{"node":{"frontmatter":{"readNext":"bb-es6-2,backbone-eco,backbone-devs-react","topics":["JavaScript","ECMAScript","Backbone"],"category":"frameworks","key":"bb-es6-1","title":"Why Backbone.js and ES6 Classes Don't Mix","description":"A rundown of the challenges of using ES6 classes in Backbone","layout":"post","path":"/2015/04/07/es6-classes-and-backbone-js","date":"2015-04-07T03:19:44+00:00","dontfeature":null,"isDraft":null},"html":"<p>I’ve seen some confusion out there about how to use ES6 Classes with <a href=\"http://backbonejs.org/\">Backbone</a>.  In the original version of the ES6 class spec, this was actually a simple thing to do, though the syntax wasn’t great.  With the finalized specification for classes and subclassing though, it’s no longer practical to try and use the two together.  Here’s a short explanation of the issues, as well as a discussion on whether any of this matters.</p>\n<h3>What are ES6 Classes anyway?</h3>\n<p>ES6 <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup> is the newest version of JavaScript. It provides a variety of new features for JavaScript developers including native Promises, destructuring, modules and default function parameters.  One of these new features is a native JavaScript Class implementation.  It allows us to simplify class patterns that were formerly a bit verbose in JavaScript.  Take this example of JavaScript inheritance from <a href=\"http://www.amazon.com/gp/product/0596517742/ref=as_li_tl?ie=UTF8&#x26;camp=1789&#x26;creative=390957&#x26;creativeASIN=0596517742&#x26;linkCode=as2&#x26;tag=benmccormicko-20&#x26;linkId=XZEWUV7PCEO7DNTY\">Javascript: The Good Parts</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Mammal</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMammal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nMammal<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">says</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Cat</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">=</span> <span class=\"token string\">'meow'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nCat<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mammal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nCat<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">purr</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        s <span class=\"token operator\">+=</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nCat<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_name</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>It’s a bit verbose.  With ES6 classes we can instead write:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Mammal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Mammal</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>saying <span class=\"token operator\">=</span> <span class=\"token string\">'meow'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">purr</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                s <span class=\"token operator\">+=</span> <span class=\"token string\">'-'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            s <span class=\"token operator\">+=</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">says</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>This allows us to clean things up a lot, removing some boilerplate and focusing the code on our intended functionality.  ES6 classes work quite nicely for simple JavaScript classes like that.  But what about Backbone objects like Models and Views?</p>\n<p>We might think that we can just treat them as classes and the new syntax will “just work”, similar to how CoffeeScript classes function.  So we’d take this example from the <a href=\"http://backbonejs.org/\">Backbone website</a></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> DocumentRow <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n  tagName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">,</span>\n\n  className<span class=\"token punctuation\">:</span> <span class=\"token string\">\"document-row\"</span><span class=\"token punctuation\">,</span>\n\n  events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  initialize<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n  render<span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>and convert it to something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocumentRow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n  tagName<span class=\"token punctuation\">:</span> <span class=\"token string\">\"li\"</span>\n\n  className<span class=\"token punctuation\">:</span> <span class=\"token string\">\"document-row\"</span>\n\n  events<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//...</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Unfortunately this errors out.  So what’s the problem?  It turns out that ES6 classes don’t support adding properties directly to the class instance, only functions/methods.  This makes sense when you understand what is actually happening.  With JavaScript inheritance, properties are generally meant to be set on an instance when its created, while methods are set on the prototype object and shared between every instance.  If properties are added to the prototype directly they will also get shared between every instance, creating problems if the property is an object with mutable state like an array.  You can see that in the following simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\">\n      <pre class=\"language-text\"><code class=\"language-text\">var testClass = function(){};\ntestClass.prototype.foo = [];\n\nvar testA = new testClass();\nvar testB = new testClass();\n\nconsole.log(testA.foo.length); //0\nconsole.log(testB.foo.length); //0\ntestA.foo.push(&#39;x&#39;);\nconsole.log(testA.foo.length); //1\nconsole.log(testB.foo.length); //1</code></pre>\n      </div>\n<p>When we place a property on the prototype it can cause unexpected side effects.  Instead most of the time, we want to use the class’ constructor to add any properties to each new instance.  <del>Since that is a bit unwieldy when adding many properties, Backbone abstracts away this difference with its extend function.</del> <strong>Edit: Backbone actually does add properties directly to the prototype, going against conventions a bit.</strong> But ES6 classes are focused on the prototype, and the code that is shared between instances. They make the opinionated default properties for instances are handled in the constructor. This maps very cleanly to the current semantics for existing JavaScript class creation, but is different than Backbone’s abstraction. So using ES6 classes for Backbone, we’ll need to give up this nicety.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocumentRow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span>  <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"document-row\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Until recently, this was a valid way of defining a Backbone View with ES6 classes.  It’s questionable whether it was a real gain, given the relative ugliness of the syntax for defining instance properties, but it did work.   Unfortunately, in the final version of the ES6 spec for classes, this is no longer valid.  The final spec requires <code class=\"language-text\">super()</code> to be called before <code class=\"language-text\">this</code> is referenced in a constructor for classes that are extending another class.  So we have to change our constructor to look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocumentRow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span>  <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"document-row\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>Unfortunately this doesn’t do what we expect. Backbone does significant initialization processing in its constructor, and most properties that Backbone expects to be defined on a Model or View need to be pulled in prior to the constructor executing in order to be used properly.  So with the final ES6 spec we no longer have any way of using declarative properties on subclasses if we want them to be processed by the constructor.</p>\n<h3>So what are our options?</h3>\n<p>There are a few workarounds here, but they’re ugly.  First, Backbone allows any of of its instance properties to also be defined as methods.  So we can rewrite our View like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocumentRow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">tagName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">className</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"document-row\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">listenTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">,</span> <span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//...</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>We’re starting to get ridiculous here though.  First, this isn’t a one to one conversion, so if we’re converting existing code, we could develop bugs from any code that directly referenced a View’s properties.  And if that code modified those properties, its no longer as simple to modify them again.  Of course if it’s a property that isn’t processed within the constructor like the <code class=\"language-text\">url</code> property for Models, we can simply leave it as is.  But suddenly we’re requiring ourselves to know what properties are processed in the constructor or not, as well as wrapping and rewrapping properties in functions.  We’ve added a lot of complexity, and it’s not totally clear what we’ve gained.</p>\n<p>The second option is to simply re-run the Backbone View or Model constructor a second time after adding the initialization properties.  This has a few issues though.  First, it’s ugly.  Nobody wants to do this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">DocumentRow</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Backbone<span class=\"token punctuation\">.</span>View</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">=</span>  <span class=\"token string\">\"li\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>className <span class=\"token operator\">=</span> <span class=\"token string\">\"document-row\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>events <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">\"click .icon\"</span><span class=\"token punctuation\">:</span>          <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.edit\"</span><span class=\"token punctuation\">:</span>   <span class=\"token string\">\"openEditDialog\"</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">\"click .button.delete\"</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"destroy\"</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n      </div>\n<p>But it also opens an opportunity for more subtle bugs.  Constructors aren’t meant to be run twice.  Doing so, will among other things cause the Views initialization function to run twice, with a different <code class=\"language-text\">cid</code> (Backbone’s internal unique id system) set on the View each time. That violates a ton of expectations, again for no clear gain.  So the long and the short of it is that there’s no longer any viable way to use ES6 classes for Backbone objects without a clear loss in functionality and predictability.</p>\n<h3>So Does Any Of This Matter?</h3>\n<p>The idea of using ES6 classes for Backbone has some appeal.  The “class” keyword is nice syntax and there’s an appeal to using more standardized code and fewer library extensions.  Right now, many developers are also just curious about ES6 and how it fits into their workflow.  But does it really matter that this doesn’t work?  I think a case can be made either way, with 2 clear points in each sides favor.  The case for this being a problem:</p>\n<ol>\n<li>\n<p><strong>ES6 Classes are becoming the standard</strong></p>\n<p>By pretty much any standard, Backbone is currently one of the 4 most popular JavaScript frameworks/libraries for building web applications, along with <a href=\"https://angular.io/\">Angular</a>, <a href=\"http://emberjs.com/\">Ember</a>, and <a href=\"https://facebook.github.io/react/\">React</a>.  What do the Angular, Ember, and React teams all have in common?  They’re each working to make sure that current or future versions of their frameworks use ES6 classes to define objects.  As this style of code becomes ubiquitous, Backbone will start to look even more boilerplate heavy and non-standard.  Developers will also start learning about ES6 classes as part of standard JavaScript training, requiring them to map their knowledge about prototypes and class syntax to Backbone’s concepts, rather than just using things they already understand as in other libraries.</p>\n</li>\n<li>\n<p><strong>More Native == Less Library code</strong></p>\n<p>This is more of a far-future advantage, but at some point ES6 classes will be usable everywhere without library support, allowing libraries based on it to include less code for handling this themselves.<sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup></p>\n</li>\n</ol>\n<p>And the case that it doesn’t really matter:</p>\n<ol>\n<li>\n<p><strong>Just because its standardized doesn’t make it reusable</strong></p>\n<p>While it’s true that ES6 classes are a standard, realistically Backbone code written using a class syntax isn’t going to be easier or harder to convert to equivalent code using React for example.  Backbone’s way of using it’s standard functions and properties is a much bigger obstacle to code reuse than the particular way it defines classes.  ES6 classes and Backbone objects are in the end just different syntactic sugar over the same prototypical inheritance concepts.  A developer who understands the concepts will be able to use both, and code written in either style will not be easy to reuse outside the Backbone ecosystem.</p>\n</li>\n<li>\n<p><strong>Sometimes doing it yourself is just better</strong></p>\n<p>The truth is that sometimes there are advantages to writing your own APIs.  Backbone’s class code makes the things that are important to using Backbone easy, without any of the trade offs discussed in this article.  There’s something to be said for using the right interface for the job.  There are trade offs for this, just as their are trade offs in other libraries choice to require or encourage a build step for their code.  Both these choices improve the developer API at a cost (complexity, extra code, extra process, etc).  Whether those trade offs are worth it is a judgment call.</p>\n</li>\n</ol>\n<p>It will be interesting to see how the lack of standardization here effects Backbone in the long run, if it does at all.  Along with native Promises, ES6 now offers 2 major features that are similar to but incompatible with important Backbone features <sup id=\"fnref:3\"><a href=\"#fn:3\">3</a></sup>. Along with ES5’s get and set capabilities and ES7’s Object.Observe <sup id=\"fnref:4\"><a href=\"#fn:4\">4</a></sup>, a significant number of Backbone features that once required library code will someday soon be natively supported. Of course Backbone has never been a set of features as much as a way of writing programs.  Since Backbone is essentially finished and there are <a href=\"https://github.com/jashkenas/backbone/issues/3405\">no plans to significantly change the interface</a>, the continued improvements to the standard language serve as both a validation of Backbone’s core concepts as well as a challenge to its future.   </p>\n<p><strong>Update:</strong> <em>There’s been a <a href=\"https://github.com/jashkenas/backbone/issues/3560\">great discussion of this issue</a> on Backbone’s Github issue tracker.  Feel free to weigh in there if you’re interested in figuring this out.</em></p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>If you do want to use ES6 now, <a href=\"https://babeljs.io/\">Babel</a> is the best tool for making that happen.  The Babel website also contains a <a href=\"https://babeljs.io/docs/learn-es6/\">great rundown</a> of the various features that make up ES6.</p>\n</li>\n<li>\n<p>Axel Rauschmayer has <a href=\"http://www.2ality.com/2015/02/es6-classes-final.html\">a great article</a> describing the final spec for ES6 classes, including a description of the changes that made them incompatible with Backbone.</p>\n</li>\n<li>\n<p>React Developers have noted the same issues with property initializers that Backbone users encounter.  As part of version 0.13 of React, they’re supporting a special property initialization syntax for classes, which may eventually be standardized.  There’s more info on that in <a href=\"https://esdiscuss.org/topic/es7-property-initializers\">this ESDiscuss thread</a>.  This standard is still being worked out but an experimental support version is available in Babel 5.0.0.  Unfortunately that version defines class properties as being instantiated after the superclass constructor is run, so this doesn’t solve Backbone’s issues here.</p>\n</li>\n<li>\n<p>If you were confused by the discussion of prototypes and the code examples of non-ES6 JavaScript classes, I wrote a quick explanation of <a href=\"http://benmccormick.org/2013/01/12/explaining-javascript-object-oriented-programming/\">Object Oriented Programming in Javascript</a> back in 2012.</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        ECMAScript version 6, now officially ECMAScript 2015\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n        <li class=\"footnote\" id=\"fn:2\">\n            <p>\n            This is admittedly a bigger advantage for Ember, Angular 2.0, and React, which all encourage using a build step to convert ES6/Typescript/JSX to ES5 JavaScript.  That means they can all rely on ES6 class support now, since older browser support is handled through compilation.  \n            </p><p>\n            Backbone doesn't require or encourage a transpilation step (although CoffeeScript works very nicely for this case), and so it's more important for it to have a top-notch API supported by all JavaScript engines that it is likely to be run on.  It will be a long time before that is true of ES6 classes.\n            <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n        </li>\n    <li class=\"footnote\" id=\"fn:3\">\n        <p>\n        Promises are similar to jQuery deferreds, which are technically not a Backbone feature, but are a key part of Backbone development for many developers because they're used with Backbone sync.\n        <a href=\"#fnref:3\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2015/04/07/es6-classes-and-backbone-js"}}}],"topic":"ECMAScript"}}