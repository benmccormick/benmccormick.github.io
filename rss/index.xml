<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>benmccormick.org</title>
        <link>http://benmccormick.org</link>
        <description>A blog by Ben McCormick</description>
        <lastBuildDate>Tue, 23 Feb 2021 19:24:04 GMT</lastBuildDate>
        <docs>http://blogs.law.harvard.edu/tech/rss</docs>
        <generator>Feed for Node.js</generator>
        <image>
            <title>benmccormick.org</title>
            <url>https://benmccormick.org/logo.png</url>
            <link>http://benmccormick.org</link>
        </image>
        <copyright>All rights reserved 2016, Ben McCormick</copyright>
        <atom:link href="http://benmccormick.org/atom.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Engineering Management: Handling Accountability]]></title>
            <link>https://benmccormick.org/2021/02/23/ems-handling-accountability</link>
            <guid>https://benmccormick.org/2021/02/23/ems-handling-accountability</guid>
            <pubDate>Tue, 23 Feb 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>I’m currently taking some time away from my job on parental leave, and it seemed like a good time to reflect on the lessons I’ve learned the last few years about engineering management, this is my third post, you can see a list of past posts at the bottom of the article</em></p>
<p>When moving into an engineering manager role, one of the toughest transitions for me was mentally adjusting from being responsible for tasks and projects that I owned to being accountable for the output of a team.  As I discussed in <a href="https://benmccormick.org/2021/02/18/what-do-ems-do">What Engineering Managers Do</a>, I like using Andy Grove’s definition of a manager’s output: the output of their team as well as the output of any teams that they’re influencing.  Manager’s thus bring value by improving those outputs.  This potentially allows you as a manager to have a much larger sphere of impact than an individual contributor working on a single project at a time.  But it also means that you will be held accountable for actions that you may not have had direct control over.  This can be distressing for new EMs (it was for me!) as you realize that “working harder when things go wrong” may no longer be a viable strategy for avoiding failures.  </p>
<p>The first time a manager gets negative feedback for work that wasn’t personally in their control it is tempting to prevent it in the future by micromanaging or using themselves as a safety net.  Micromanaging has a horrible reputation, but it is actually a very natural reaction for engineers who are used to competently completing tasks and then being praised for it who face criticism when a task they know they could complete is not done adequately.  It is a very human response at this point to say “well I know how to do that, let’s make sure you’re doing it the way I would”.  When that is repeated over time it leads to the familiar and awful rhythm of low trust between the manager and teammate, low initiative from the teammate and frustratingly slow progress.  </p>
<p>Acting as a safety net for employees is a more subtle task for managers.  They may know they don’t want to micromanage, but instead they might choose to tackle the complex, likely-to-fail parts of a task themselves, or perform a “diving save” taking over a project when it looks like it might not complete successfully.  This appears better than micro-management — employees have ownership of their work, at least until it goes off the rails.  But it leads to many of the same issues as pure micromanagement: employees who don’t grow because they’re not learning to do the hard work themselves, a disconnection from consequences that means a lack of ownership from the team, and a lack of trust that will eventually erode morale.  Like micromanagement though, this approach doesn’t scale.  You and your team will both be locked to a limited amount of responsibility that is based on your capacity as a manager to be in the details of everything.  Growing as a leader and a team requires a different approach.  </p>
<p>The only solution for handling accountability that scales is developing a high performing team.  It isn’t a problem to be held responsible for the output of a group that you trust and believe in.  And high performing teams have a tendency to generate new leaders, allowing you to do less and/or focus on higher level work and grow your career. But creating a team like that requires effort and humility over time.  This means as managers we have to be willing to take some short term failures.  </p>
<p>While your team is in a growth stage (any of the <a href="https://en.wikipedia.org/wiki/Tuckman%27s_stages_of_group_development">forming, storming, norming steps in a group’s development</a>) you’ll need to expect that their output will not always meet your individual standards.  There are a few things you can do to mitigate this from an accountability perspective.</p>
<p>Firstly it is important to match your expectation setting and commitments to your team’s maturity.  If you’re not confident that a team can make a commitment without you doing the work yourself, don’t sign on for the work.  And certainly try to limit the number of simultaneous challenging projects you’re taking on so that you can focus on enabling your team when you do have challenges.  This may sound naive and frustrating to people who feel they <em>have</em> to take on the work.  The key thing to understand are that you can’t do this forever — eventually the team has to grow it’s capacity to something the organization can accept, or either you or your management is failing.  But in most circumstances it’s better to give an honest no up front than make excuses for a failed project 3 months down the road.  There are organizations which won’t reward that calculus — in which case you should probably document your concerns and continue anyway, hopefully developing some credibility for the next such discussion.  </p>
<p>When you’re in this type of growth stage, it’s also important to understand the impact of the work that is coming in.  I like the analogy that <a href="https://davidnovakleadership.com/blog/crystal-vs-rubber/">Gregg Dedrick shares here</a> of juggling crystal and rubber balls.  Some tasks are like crystal balls — if you drop them there are expensive consequences and no second chances.  But most tasks are more like rubber balls.  If you drop one you’ll get to pick it up and try again.  It’s important to understand which are which.  If your growing team is being asked to pick up crystal ball tasks it’s important to exercise caution.  This is where it’s extra important to be clear about your team’s capacity, and is a case where it may be appropriate to get more involved personally to ensure success.  Of course if most of the tasks coming your way seem like crystal balls, it’s worth digging into that more and understanding what is driving that, and if some of them are actually more droppable than you think.  </p>
<p>As your team grows you’ll be able to start shifting the work you take on and saying yes to more things.  At this point it’s important to nurture the ownership that your team is feeling.  Be generous with credit for successes while continuing to own accountability for failures.  Within the team, make sure you are holding high standards and giving clear feedback when needed.  Nothing undercuts an empowered team like somebody who isn’t contributing at the level of the rest of the team and isn’t held accountable for that.  That said, leave room for failures to continue happening.  Even high performing teams have room to grow, so the principles for a growing team still apply — let people take on rubber ball tasks that are a stretch, </p>
<h2>Accountability for a high performing empowered team</h2>
<p>Managing a team that feels ownership of their work and is growing into higher levels of capability is more rewarding, less stressful, more educational, and more powerful for your career than micromanaging.  It’s also ultimately morally good — you’re creating an environment where other people can thrive and use their gifts and abilities.  </p>
<h3>More Parental Leave Engineering Management Posts</h3>
<ul>
<li><a href="https://benmccormick.org/2021/02/18/what-do-ems-do">What EMs Do</a></li>
<li><a href="https://benmccormick.org/2021/02/21/ems-choosing-what-to-work-on">Choosing What To Work On</a></li>
</ul>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Engineering Management: Choosing What To Work On]]></title>
            <link>https://benmccormick.org/2021/02/21/ems-choosing-what-to-work-on</link>
            <guid>https://benmccormick.org/2021/02/21/ems-choosing-what-to-work-on</guid>
            <pubDate>Sun, 21 Feb 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>I’m currently taking some time away from my job on parental leave, and it seemed like a good time to reflect on the lessons I’ve learned the last few years about engineering management, this is my second post here, a followup to my post on <a href="https://benmccormick.org/2021/02/18/what-do-ems-do">What EMs do</a></em></p>
<p>In my last post I listed a <a href="https://benmccormick.org/2021/02/18/what-do-ems-do">bunch of different things</a> that engineering managers can do to produce value.  Given the sheer number of things that engineering managers can consider doing to help their teams and make an impact, the next question quickly becomes: how do I balance my time and work on the right things?  I think of this in terms of maintaining rhythms, finding high leverage work, and following some principles for maintaining sanity.</p>
<p>There are a number of <strong>rhythms</strong> that I try to maintain every week.  For me these include 1-1s with my team, our agile sprint rituals, preparing weekly updates for our VPE and CTO, and dedicated time set aside for strategic work.  I focus on protecting these times and as much as possible, but also maintain a pretty high bar for what type of thing I set up as a recurring meeting or obligation.  I draw a distinction here between things I do a lot, and things I try to do <em>every</em> day/week/sprint/month.  Making it a regular commitment prevents these things from being washed away by busy periods and unlocks the compounding benefits of something that is routinely practicied.  </p>
<p>Rhythms are a great fit for activities that are high value but low urgency, like maintaining important relationships, keeping up good information flow, and protecting time for longer term creative work.  The important thing here is being selective and as I’ll discuss more below, making sure to review regularly to make sure they’re still a good use of time.  Rhythms become an anti-pattern when they get disconnected from value — when you keep doing something that is no longer providing value — a zombie standup meeting or a regular meeting with another team that could just be handled through async communication.  I doubt that there is a universal ideal ratio of rhythms to unstructered time, but for me personally I end up having about 20 hours each week that is preblocked for the same activities every week, and that has felt like an appropriate tradeoff between the urgent and new with the consistent and important.</p>
<p>With my remaining time I try to focus as much as possible on <strong>high leverage activity</strong>.  As in my last post I’m borrowing language from Andy Grove’s <a href="https://amzn.to/2ZvSXnP">High Output Management</a> here — leverage is simply a term for an activity’s value relative to its cost in time/effort.  So training somebody to do repeating work is often higher leverage than doing it yourself; you pay a one time cost to get an ongoing benefit of the task being completed and growing one of your teammate’s careers.  If the term leverage doesn’t speak to you, you can think of the pareto principle and trying to work on the 20% of stuff that brings 80% of the value, or working “smarter not harder”.  The point is to figure out what activities are going to have outsized impact and push to prioritize them. </p>
<p>Will Larson has a good guide on identifying <a href="https://staffeng.com/guides/work-on-what-matters">work that matters</a>.  It’s focused on staff-plus engineers, but the principles apply to EMs equally well.  Once you’ve exhausted low effort high value efforts, there’s more value in taking on the bigger problems that will truly impact a company.  Swarm on existential issues, but otherwise try to find places to work where there’s room to make impact but you will get support.  You can scale your impact by investing in people and <em>nudging</em> or editing other folks approaches without having to own everything yourself or by helping them finish projects that need a bit of help getting to done.  And it’s important to see if there are only things that you can do.  I can’t phrase this better than Will did so I would highly recommend reading the whole thing on his site. I would add that for managers ultimately all of our value will disappear if we do not have a high-performing team that is able to stick together and make progress over time.  I’ve never regretted spending time investing useful time into my team.</p>
<p>Of course in real life, picking high leverage activities is not an exercise where we calmly sit back and pick from a neatly arranged menu of options.  Instead as an EM you will be bombarded with requests for your time; meetings with other teams and departments, project meetings, compliance documentation, onboarding new employees, performance reviews, mandatory company trainings, process improvement discussions, status update requests and more.  Some of these things will be high value and important, depending on the culture of your company almost all of them may appear urgent.  It isn’t a productive goal to only ever work on the most important things at all time.  There will always be urgent work that you’ll find you feel you need to do.  However there are better and worse ways to handle this flood of urgency.  </p>
<p>Effective managers know the importance of saying <em>no</em> to many things in order to focus on the essential.  There’s space to grow beyond that though — a <em>no</em> that preserves a manager’s integrity is better than a <em>yes</em> that they fail to follow through on, or one that leads to them working on the wrong things.  But even better is if they can work with the people making requests on their time to find ways to make the urgent request smaller, or help get it delegated to people who will grow through the work.  Ultimately managers are as effective as their relationships and finding ways to say yes without getting distracted from the most important work is a valuable advanced skill.  Of course the temptation can be to trade away these hard decisions and problems by simply giving more time.  </p>
<p>Working more hours is the ultimate short term time management power move.  It’s also a quick path to <a href="https://benmccormick.org/2020/08/31/simple-burnout-triage">burnout</a>.  I try to follow a few <strong>principles</strong> to keep my schedule sane. </p>
<p>First it’s important to reconsider your time commitments regularly, especially any recurring meetings/commitments.  Many recurring meetings degrade in usefulness over time, and even ones that should be a bedrock of a manager’s schedule like 1-1s may need to be adjusted as the needs of the participants change.  I try to reconsider my calendar as a whole at least once a quarter, and anytime I have what feels like an unproductive meeting or a scattered day I try to think through whether I can make any adjustments to my schedule to improve in the future.   This can be as simple as Lara Hogan’s concept of <a href="https://larahogan.me/blog/manager-energy-drain/#calendar-color-coding-and-defragging">defragging my calendar</a> to put similar things together and clear creative space, or involve reworking a meeting that has gone stale to be more useful for the team — maybe even reducing its frequency or canceling it and replacing it with an async process.  </p>
<p>My second principle is that constraints are good.  Any EM will have an essentially infinite amount of work.  There’s always more training, strategy, preparation and planning that can be done.  If you’re still comfortable coding that represents another near-infinite pool of potential contribution.  A <em>work till it’s all done</em> approach simply won’t succeed.  There is always more.  So I try to embrace a schedule and accept that schedule as a constraint to solve for in my work.  At points this has been a literal daily stopping time for me — more commonly in my career I’ve simply held a value of being there for my family and protecting family time, as well as protecting my health and time to take care of it.  That has meant that at times I have flexibility to pour a lot of time into work, and other times I’m more limited in my total time to devote to work.  In each case though I’m able to take a finite amount of time and do my best to optimize it for the challenges in front of me.  </p>
<h3>Stay Sane, Keep Your Integrity, and Remember That People Matter The Most</h3>
<p>Managing your time in more senior roles is hard.  You’re not given the direction that you may have gotten used to as an IC engineer, and a lot of the most important work won’t have a timer or anyone yelling at you to get it done.  If you’re struggling with this I recommend giving yourself grace.  And if you take anything from this piece I hope you remember to protect yourself with constraints so that you stay sane, avoid compromising your integrity by over-committing and ultimately err on the side of investing in people.  In 5 years it will be the people you’re interacting with today who are going to have the biggest impact on your career, and as I look at the scope of the rest of my life I expect it to be my impact on people that I remember for better or worse, much more than the results of a project or whether I nailed a certain process for my team.</p>
<h3>More Parental Leave Engineering Management Posts</h3>
<ul>
<li><a href="https://benmccormick.org/2021/02/18/what-do-ems-do">What EMs Do</a></li>
</ul>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Engineering Management: What do EMs do anyway?]]></title>
            <link>https://benmccormick.org/2021/02/18/what-do-ems-do</link>
            <guid>https://benmccormick.org/2021/02/18/what-do-ems-do</guid>
            <pubDate>Thu, 18 Feb 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p><em>I’m currently taking some time away from my job on parental leave, and it seemed like a good time to reflect on the lessons I’ve learned the last few years about engineering management, starting with a base assumption of what it is that engineering managers actually do</em></p>
<p>There are a lot of different ideas out there about what engineering managers actually do, from pithy one liners like “nothing” or “meetings” to detailed expectations that sound like a superset of tech lead, project manager, and people manager roles.  When I got started in management I quickly found that at fast growing companies people will happily flow as much work as possible to EMs, and it’s important to have a clear idea of what your job really is, because the workload will quickly become larger than one person can do — at which point effective managers excel primarily because of good time management and prioritization.  Those skills start by understanding your core responsibilities.  </p>
<p>In <a href="https://amzn.to/2ZvSXnP">High Output Management</a> Andy Grove summarizes a manager’s output as the sum of the output of his team and the output of neighboring teams that he influences.  A manager’s goal then is to maximize those outputs — a framing that is helpful to come back to when it comes to prioritizing work.  Making good choices of what to work on is a <a href="https://benmccormick.org/2021/02/21/ems-choosing-what-to-work-on">different article</a>, but for now I’d like to consider a semi-comprehensive list of the different areas a manager can focus to influence those outputs. In my career and reading I’ve seen a pretty consistent set of 3 high level areas that effective managers invest in: facilitating information flow, driving progress forward, and building a sustainably productive team. </p>
<p><strong>Facilitating information flow</strong> includes a mix of information gathering and information sharing.  Engineering Managers are responsible for doing the work to understand what is happening in their team and also understand what is happening in the broader organization.  Effective EMs then find useful ways to synthesize and share that information to help their teams be more effective and give other teams and executives clarity into what is happening with their team.  There are a multitude of anti-patterns here including undersharing or oversharing in either direction, manipulating people via information flow, and failing to extract and emphasize the most critical pieces of information.  But doing this right means bringing clarity to everyone an EM works with, pushing the most important information to the people who need it and making it easy for people to pull other information when needed.</p>
<p>Tools for facilitating information flow include 1 on 1 meetings, building or advocating for processes and tools that expose team and project status clearly, encapsulating decisions and reasoning in documents that can be shared widely and referenced later, and asking good questions in standups and project meetings that lead to better understanding of problems and any misalignments between the team and the business.  Getting good at this stuff means being a good written and verbal communicator, keeping an attitude of curiousity and humility that lets you learn from others and stay up to date with what is going on, and being intentional about building relationships with all of the key people you work with.  </p>
<p><strong>Driving progress forward</strong> breaks down into 3 parts: decision influencing, delegating/monitoring and “doing the work”.  The first item here is phrased as <em>decision influencing</em> rather than decision making because while you will have to make many decisions as an Engineering Manager it is even more common and in many cases more desirable that you’ll be providing input and influence on decisions but not ultimately “owning” the decision yourself.  Delegating work to others is an important part of getting things done and scaling yourself as a manager, but to again quote Andy Grove “delegation without follow-through is abdication”.  So even delegated tasks still require the work of monitoring and supporting, and thus take time.  Finally, EMs sometimes take on work that is actually directly part of their teams day to day — writing code for a feature, designing architecture for an upcoming project, or debugging a production issue.  That last point is the most controversial — there are plenty of “engineering managers shouldn’t code” zealots out there.  I simply add it here as something an EM <em>can</em> do to increase their team’s output.  Whether it is an effective or impactful activity is going to be highly context specific and is out of the scope of this article.  </p>
<p>Progress on a team’s work has the shortest feedback loop of the 3 top level areas: missing information can often go unnoticed for a while, and unhappy teams’ troubles may take a while to manifest.  But everybody notices when your team is not succeeding at it’s goals.  Thus the anti-patterns here are often trading off team and communication for an appearance of progress: doing too much work yourself at the expense of your team’s development and long term scalability, failing to take responsibility for your team’s output — often by delegating without supporting a teammate, or making decisions that optimize for making yourself look good at the expense of your team or other parts of your organization.  Getting really good at driving progress as an engineering manager means learning to delegate with an appropriate amount of support and monitoring, learning how to influence work usefully without having to own it end to end and being strategic about what you yourself try to own.  </p>
<p><em>Building a sustainably productive team</em> involves a mix of hiring, culture shaping, team development, and what <a href="https://twitter.com/rands">Michael Lopp</a> calls the <a href="https://randsinrepose.com/archives/bored-people-quit/#:~:text=care%20and%20feeding%20of%20engineers">care and feeding of engineers</a>.  Hiring new engineers is arguably the highest leverage activity we undertake as engineering managers — it’s a one time process that will have impacts on your team for years.  Engineering managers have outsized influence on their team’s culture: what work is valued, what the expectations are for meeting preparation and timeliness, how people are treated, what type of people and ideas are welcome.  This is often influenced as much by what EMs neglect as what they do.  EMs can help their teammates develop through thoughtful feedback, coaching, sponsorship and training.  And we work in an industry where our teammates usually have many great work options — setting aside the moral case for being a compassionate manager, managers that do not care for their employees, understand their needs, concerns and ambitions, and help them thrive are unlikely to develop a sustainably productive team over any length of time.  </p>
<p>The biggest anti-pattern here is simply neglecting the work — I’ve worked for and around managers who simply didn’t take the time to regularly talk with their team, were not mindful of the impact their actions had on culture, or treated their employees as replacable cogs in an industrial machine.  Even hiring is often not given the investment it deserves based on impact: many managers are content to offload sourcing and evaluation to other people or put minimal time into preparing for interviews and new job postings.  Getting really good at building a sustainable team means thinking of yourself as a role model for the behavior you want to see, investing heavily in hiring and supporting your current team, regularly giving and seeking meaningful feedback and being organized about helping your team in their career growth.  </p>
<h3>It’s all about outcomes</h3>
<p>I labeled this list as semi-comprehensive because while most of the valuable work I do as an engineering manager falls under one of the categories above, managing engineers is fundamentally different than the type of work someone who has just been promoted from a mid-senior engineering role might be used to.  Instead of taking tasks or projects to completion, you’re now operating at a level of an organization where the expected deliverables get a little hazier and you’re being asked to achieve higher level business outcomes.  </p>
<p>So don’t be afraid to shift the time you spend on different parts of this list over time or even do work that seems a bit far afield from your role.  If it’s grounded in a desire to produce good outcomes for the business and help your team and it won’t get done without you stepping in, consider it part of the job.  </p>
<h3>More Parental Leave Engineering Management Posts</h3>
<ul>
<li><a href="https://benmccormick.org/2021/02/21/ems-choosing-what-to-work-on">Choosing What To Work On</a></li>
<li><a href="https://benmccormick.org/2021/02/23/ems-handling-accountability">Handling Accountability</a></li>
</ul>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Driving Change Without Authority]]></title>
            <link>https://benmccormick.org/2021/01/19/driving-change-without-authority</link>
            <guid>https://benmccormick.org/2021/01/19/driving-change-without-authority</guid>
            <pubDate>Tue, 19 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently had a conversation with a coworker where they mentioned that they didn’t feel like they had the same power to change other people’s behavior that I did since I was a manager.  It’s a common sentiment that has some truth but usually will make a manager start laughing or crying if you suggest that it represents reality.  Managing people well involves very little imposing your will on a situation and a lot more driving change indirectly.  The good news is that most of the techniques for this type of indirect change not only can be used by non-managers, many of them are actually more effective coming from engineers directly.  A lot of these techniques deserve posts of their own and I intend to keep these short, so consider this a brainstorming list for the next time you want to change something on your team and don’t feel empowered to do so.</p>
<h3>Build the thing you want to exist</h3>
<p>A software engineer’s ultimate power move is the ability to create new things.  If you’re in an argument on the best path forward for a project, just going ahead and building the thing you think should exist can be incredibly powerful.  This could be a proof of concept for larger things, or the full thing for smaller features.  Opposition and bikeshedding often melts away in the face of a working example of the future.  This is especially effective if the argument has been about whether your preferred solution is possible.  </p>
<p>Note that this path can be overused, is helped along by a gentle touch, and I wouldn’t recommend it if you put so much time and effort into it that you’d be crushed if people still said no.  But it is a powerful way to move discussions forward.</p>
<h3>Make it easier</h3>
<p>Do you want everybody to write more/better tests?  Create some best practice examples and documentation.  Maybe make some training videos showing how you write tests.  Write some helpers to encompass common testing patterns.  Make sure your testing tools are updated to versions with the latest features, and consider whether there are different tools you can use to make adoption easier.  This type of work is also great for establishing yourself as an expert in the area (see below).</p>
<h3>Make your preference a default</h3>
<p>Similar to making it easier, you can often change behavior simply by making it the path of least resistance.  Want people to use spaces instead of tabs?  Encode that into a linter and set it to run against every Pull Request.  Want to make sure people add information to new issues?  Create an issue template.  Humans are very susceptible to <a href="https://amzn.to/3930gJz">nudges</a> and default behaviors, and are much more willing to accept new behaviors when they don’t require conscious action from them.</p>
<h3>Identify allies and opponents</h3>
<p>If you want to change behavior in your team, it can be helpful to have multiple people fighting for a change.  A great place to start here is just identifying who agrees with you.  Not everyone who is willing to accept a change might want to fight for it as much as you, but establishing an understanding of where people stand is helpful for you to identify potential allies as well as people who you may have to work harder to convince. </p>
<p>When you know who <em>disagrees</em> with you, those people can actually be the most helpful in helping you move a change forward if they’re willing to give clear feedback, since they’ll help establish the conditions under which a team might accept a change.  </p>
<p>If you find that you’re primarily fighting apathy rather than opposition, it can be a good time to pivot to other methods like “making it a default” or “show the future”.</p>
<h3>Show the future</h3>
<p>In his 1936 classic <a href="https://amzn.to/3oZu7Yx">How To Win Friends and Influence People</a>, Dale Carnegie said that one of the fundamental techniques in working with people was “Arouse in the other person an eager want”.  When we want to drive forward a change and are faced with apathy, often times the issue is that other people don’t understand why the change we’re advocating would be valuable for them. </p>
<p>A great technique in this case is to be crystal clear on what we expect to get from the change — and to do so in a way that resonates with them.  If we want to have more automated tests, we might explain to our fellow engineers that more tests can help prevent future rolled back releases, resulting in less crunch time work.  Meanwhile, our product manager might be more interested to know that it will result in fewer angry customers and missed deadlines due to rework.  </p>
<p>It’s important not to oversell here.  If you make it sound like adding a few tests will remove all quality issues with your product this route can backfire with the team quickly dropping support when the initial results underwhelm.  But understanding and explaining the “why” in a way that resonates with every relevant teammate is a powerful technique.</p>
<h3>Ask authentic questions</h3>
<p>When you are looking to change things and it feels like you’re the only one who sees the value in what you’re doing a great place to start can be asking authentic questions of others.  For instance, if we went back to our testing example you might ask “Do you think writing more tests would be valuable?”, “why do you think we don’t write more tests now”, or “how do you think our test suite should evolve from here?“.  </p>
<p>If asked sincerely those questions will help you refine your understanding of the challenge in front of you, will open the minds of the people you’re asking toward the challenge, and may win some converts just by including people.  The sincerely part is important here though - people can generally tell when you’re actually listening to what they have to say versus including perfunctory “feedback requests” on your way to pushing an agenda.</p>
<h3>Work in “public”</h3>
<p>When you’re trying to encourage a particular practice it can be helpful to demonstrate the work “in public”.  So if you want people writing more tests, share screenshares of yourself writing tests, run a brown bag lunch where you do some live coding, or share your test PRs in a public slack channel where people will see it.  You might even write public blog posts about the work you’re doing, or speak about it at a meetup.</p>
<p>There are a few goals here: to show people what it looks like to do the work, to “normalize” the practice, and to give it visibility.  Doing work publically like this can be a way to attract other interested folks who you might not have expected to be sympathetic, it can raise your own profile, and it can be a way to get great feedback.</p>
<h3>Explain your work</h3>
<p>One mistake I see people who are trying to drive change make is an assumption that everybody understands what they’re doing.  When you’re first introducing a new technology, process, or improvement to your team you should always assume that you need to make the case for it, starting with clearly explaining what the change is and what you’re intending to accomplish with it. </p>
<p>This technique can be combined with many of the other ones here, and can be accomplished in many ways.  A short RFC style document where you outline the change you want can be great.  Putting extra detailed comments and descriptions into pull requests where you’re implementing a desired change can be helpful, as can screencasts, blog posts, or brown bags.  For smaller changes this may just mean going out of your way to be extra explicit about the “why” when you make pull request comments requesting people to move in a certain direction.</p>
<h3>Establish your expertise</h3>
<p>As I said at the beginning, “change by authority” is not generally the best path.  People are happier doing things because they see the value, not because somebody told them to do so.  That said, sometimes change does need to come through authority.  When that is the case though, there are two types of relevant authority in most engineering organizations.  Hierarchical authority (IE directives from somebody with a managerial title above you in a reporting relationship) and expertise authority.  While hierarchical authority changes slowly and comes with all sorts of other pros and cons, anyone can develop the authority of expertise with a level of dedication and work.  </p>
<p>If you want to drive testing culture on your team it can be helpful to establish yourself as an expert on testing.  The bar for this might be quite high or quite low depending on your existing culture, but the path is similar either way; do the work consistently over time, educate yourself, and demonstrate the impact of the work you’re doing.  A little bit of this might not go very far, and if the organization explicitly doesn’t value the change you’re trying to make it is possible that expertise won’t change the equation here.  But if there is willingness to consider growth, establishing yourself as an expert will ensure that you will be part of the conversations when it is time to make a change, and you’ll get to contribute to making change happen.</p>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Play Other Positions!]]></title>
            <link>https://benmccormick.org/2021/01/01/play-other-positions</link>
            <guid>https://benmccormick.org/2021/01/01/play-other-positions</guid>
            <pubDate>Fri, 01 Jan 2021 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>This fall <a href="https://www.espn.com/nfl/story/_/id/29853800/i-was-wide-open-how-ben-roethlisberger-season-receiver-helped-qb">ESPN published an article</a> about Steelers QB Ben Roethlisberger’s high school stint as a Wide Receiver and how it benefited him as he moved forward in his career.</p>
<blockquote>
<p>Before he set records as a quarterback his senior year, before he became the Pittsburgh Steelers’ top draft pick out of Miami (Ohio), and before he won two Super Bowl rings as one of the NFL’s best signal-callers, Roethlisberger spent his junior year of high school playing wide receiver.</p>
</blockquote>
<blockquote>
<p>It gave Roethlisberger a deeper understanding of the game he took with him the rest of his career — something he found again last season as he stood on the sideline following a season-ending elbow injury in Week 2.</p>
</blockquote>
<blockquote>
<p>”[Findlay] coach [Cliff Hite] was always like, ‘It benefited you as a senior playing quarterback from playing wide receiver your junior year,’” Roethlisberger said. “I never understood it at the time, but I think it does to a certain extent because you can see the other side of it.</p>
</blockquote>
<p>The article highlights 2 advantages of the previous receiver experience for Roethlisberger.</p>
<blockquote>
<p>Roethlisberger’s stint as a receiver enables him to be clear with his instructions. Nothing gets lost in translation when the quarterback can give his directives in a way the receiver clearly understands.</p>
</blockquote>
<blockquote>
<p>“He can talk our language,” said Ryan Switzer, who played with Roethlisberger in Pittsburgh for two seasons. “He can talk leverage, he can talk technique, he can talk lean and press, he can talk all these things, which makes the communication a lot more fluid between us and him. … He’s able to communicate really well, which helps translate to being on the same page more often on the field.”</p>
</blockquote>
<blockquote>
<p>The carryover from one position to another goes beyond communication. Iriti sees it in the way Roethlisberger eludes the pass rush and finds a receiver on a broken play.</p>
</blockquote>
<blockquote>
<p>“It’s like he knows where he’s at, and he knows where you’re trying to go, so he can wait until that last second, just make that little move,” Iriti said. “It’s not fast, it’s not quick, but it’s like it’s premeditated that he knows where you’re going. So it makes him seem more agile and quick than he actually is. He’s not a blazing-fast guy, but instinctively he’s really smart.”</p>
</blockquote>
<p>Playing a position that he later had to collaborate with allowed Roethlisberger to communicate with his teammates better and make better adjustments when things went wrong and he needed to understand or anticipate his teammates reactions. </p>
<p>Reading Roethlisberger’s stories reminded me of some of my own practices as a high school basketball player. Our coaches would force us to switch positions around when practicing plays.  The theory was that you didn’t really know a play until you could execute on every position’s part of it.  As a tall but gawky and uncoordinated high schooler, I was never likely to move away from my forward position to become a full time point guard, but the exercise was useful both for the reasons called out above, as well as the flexibility it gave us to play different lineups for shorter stretches during a game.  If we had problems with injuries or foul trouble, we could get away with playing people at a different position for some stretch of time, or play different groupings of players that let us take advantage of matchups.  </p>
<p>So what does any of this have to do with the purported topic of this blog, productive software teams?  It turns out that modern software teams have a lot in common with sports teams.  They’re a collection of individuals with different skillsets who take on different roles to work together towards a set of goals over time.  Our work has less black and white scorekeeping, and the lines between “games” are a lot blurrier, but there is a lot we can learn from the world of sports. </p>
<p>The lessons from my high school basketball days have stuck with me as I’ve progressed through my software career.  I find that I collaborate better with my teammates when I have some sense of what it is like to do their job.  A benefit of spending the last 7 years in startups was the opportunity to wear a lot of different hats on a short term basis.  I’ve always done an mix of front end and backend development. I once was assigned the role of being primary test engineer for a major release while our normal QA lead was taking a few weeks off out of the country.  As my career advanced I got to get more involved with the product management side of things, collaborating closely with PMs to help shape how products got built.  I even spent a memorable and painful couple months as my team’s primary designer after a round of layoffs.  As both an individual contributor and an engineering manager, these experiences have helped me work well with a variety of different people, identify times when teammates in different roles were talking past each other, and plug gaps when the need arose. It also gives me empathy for people who are facing the tough parts of their job, and a level of humility when approaching discussions that comes from knowing there are always many perspectives on a particular problem or process.</p>
<p>Unlike sports, we don’t usually consciously “practice” in software development.  That may be a mistake, but given it is the world we live in, how do we actually develop this type of experience?  I’ve found 3 primary things helpful: doing the work, talking with people experienced in the role, and reading about the role.  This isn’t that different than the learning process if you actually wanted to pursue a particular role, the time commitment is just lower.</p>
<p>If you have the ability to just do a piece of a project in a different role or fill in for someone for a short time, that can be the easiest way to quickly develop some intuition about a role.  For some role combos that’s pretty easy.  A software engineer can always take a shot at doing more of a test engineer role.  Look at another developer’s code and think about how you would test it. You probably won’t be doing what a full time test engineer would do, but just getting into the mindset can be helpful.  It can feel harder to cover other roles - how would you “try out” being an engineering manager as a junior engineer?  But you might be able to ask the person in that role if there’s some part of their job you can help them with.  Then you get to try out a piece of the role and potentially get some guidance to go with it.  </p>
<p>One problem with “just doing it” is that when we first try a new skill or role, we don’t know what we don’t know.  It’s easy to perform a parody of the role if we don’t get any meaningful feedback on our performance.  So it is helpful to talk with somebody who is experienced in the role, ideally an expert.  They can give you feedback on your attempts or just tell you about what they do and how they see the world.  The ability to listen well and ask good questions can take you far here. </p>
<p>Finally, there are a lot of written resources out there for learning about different roles.  To help work with people in a certain role it can help to read some of the “classic” essays or books about a role.  A learning-focused person in the role will be able to make recommendations, but if you don’t have a good resource there you can get a similar effect with careful googling for “best books for product managers” or similar.  Some books I’ve found helpful for understanding different roles include <a href="https://amzn.to/2KVewdZ">Inspired</a> for product managers, <a href="https://amzn.to/3hx6Iee">The Manager’s Path</a> for engineering managers, and <a href="https://amzn.to/3hyC6ca">The Design of Everyday Things</a> for product designers.</p>
<p>For pretty much every piece of career advice out there, there are pathological variations that should be avoided.  Almost everything can be taken too far or stripped of context to the point where it becomes harmful.  I’ve seen at least one common way that the pursuit of understanding our teammates roles can go wrong.  That is simple ego; it can be tempting to believe that because we’ve walked a mile in somebody’s shoes we’re the experts and our voices should now hold heavy weight when making decisions in our teammates area of expertise.  We should always be listening to our teammates and taking in different opinions. However, it is still valuable to have “owners” for a role, and spending a week or a month or even a year working in a role is not the same as making it your career.  There are going to be times where a more experienced team will need to support somebody in their role, especially if they’re new.  But that’s not the same as you “being able to do it better” or “having veto power”.  This can get quite bad; I’ve known engineers who genuinely believed that they could step in and do any role in their company better than the people who had made it their careers.  This is the opposite of the empathy we’re trying to create.</p>
<p>I’m wary about aggrandizing this advice.  Trying other roles is a simple technique for working better with your teammates and it isn’t going to change the world.  But I’m writing this on the first day of 2021.  2020 was a year that was marked by a lot of suffering and struggle across our world, and also one that seemed to me to lead many people away from empathy and connection and toward conflict.  Consider this as a simple way to build empathy and connection with your teammates this year. </p>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[2020 Roundup]]></title>
            <link>https://benmccormick.org/2020-roundup</link>
            <guid>https://benmccormick.org/2020-roundup</guid>
            <pubDate>Wed, 30 Dec 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>2020 was the 7th full year of this blog, and it was by far the quietest in terms of output.  For reasons that are both obvious (global pandemic!) and personal (toddler, puppy, still learning a new job) writing has been on the backburner for a year.  I hope to change that in 2021, but with another child on the way in February I’m not foolish enough to make any promises here. </p>
<p>I only published 5 posts this year, with the posts generally focused on what I was reading and learning as an engineering manager.  </p>
<h3>Most Read Post Published in 2020</h3>
<p><a href="https://benmccormick.org/2020/08/31/simple-burnout-triage">Simple Burnout Triage</a> - This post got picked up by <a href="https://changelog.com/">The Changelog</a> which led to a pretty large spike — but it also is obviously a topic that a lot of people are working through in 2020.  Given that this got 70x more views than any of my other new posts this year, it can hog the summary spotlight all by itself this year. </p>
<h3>Languages and Libraries I used a lot of in 2020</h3>
<p>JavaScript (ES6 + TypeScript), React, Node + Express, lodash, Jest, Redux</p>
<p>But realistically this was my first year spending significantly more time focused on people &#x26; product management than hands on software work</p>
<h3>Tech I want to try in 2021</h3>
<p>My code time is limited these days — but I’d like to go deeper into some of the cool new stuff around React like Server Components, and also learn Terraform.  </p>
<h3>Blogs I started following in 2020</h3>
<p><a href="https://cutlefish.substack.com/">The Beautiful Mess by John Cutler</a></p>
<h3>Blogs I read every post from in 2020</h3>
<ul>
<li><a href="https://lethain.com/">Irrational Exuberance! by Will Larson</a> </li>
<li><a href="https://larahogan.me/">Lara Hogan’s Engineering Leadership blog and newsletter</a></li>
<li><a href="http://randsinrepose.com/">Rands In Repose</a> </li>
</ul>
<h3>Software I used (nearly) every day in 2020</h3>
<p>MacOS/iOS, Google Search, Chrome, GMail/MailPlane 3, Twitter/Tweetbot, Feedbin/Reeder, iMessage, Slack, Jira, 1Password, VS Code, iTerm, Fish Shell, Github, Fantastical, Spotify, Bear -> Roam Research, CloudApp, Dash, Postman, Complice</p>
<h3>Best Technical Books I read in 2020</h3>
<ul>
<li><a href="https://amzn.to/38OqT3l">Designing Data-Intensive Applications</a> - An information rich exploration of the technologies behind modern “data heavy” information systems.  I learned a lot from this and expect that I’ll be referencing it regularly in the future</li>
<li><a href="https://amzn.to/3mX7xyd">Site Reliability Engineering</a> - A set of essays describing how Google maintains their production systems that has served as a template for the SRE role at other companies.  Was an interesting read, even as I’m skeptical of applying “gigantic-corp” strategies at smaller or less technically savvy companies.  With essays like this I always find it more interesting to understand the problems that companies were seeing and how they approached finding a solution than I am with the details of the final solution, and this book does a good job laying that out.</li>
</ul>
<h3>Best Technical Leadership Books I Read in 2020</h3>
<ul>
<li><a href="https://amzn.to/3n3xhJb">How To Measure Anything</a> - This was a great read on how to think about measuring things that defy easy measurement.  It starts with a lot of great general principals before going into some more technical / detailed topics in the back half of the book.  Most people could probably benefit from reading at least the opening chapters of this book, with the rest open to skimming based on interests.</li>
<li><a href="https://amzn.to/382DK2W">Inspired</a> - This was probably my favorite “work book” I read all year.  It’s aimed at product managers, but was helpful for me as an engineering manager to understand what “great product process” looks like and think through how I can work with PMs well and collaborate on our shared goal of building a great product.</li>
<li><a href="https://amzn.to/34Z8ZtD">Making Work Visible</a> - A breezy walkthrough of the principles behind Kanban.  I don’t use Kanban to organize my teams at work, but because of the focus on foundational ideas I still found this bok extremely helpful.</li>
<li><a href="https://amzn.to/34ZfBIm">Team Topologies</a> - This is pretty specific and nerdy, but for engineering leaders looking to figure out the best way to evolve teams and split off new ones over time as their companies grow and change, this is a great read.  It argues persuasively for the importance of team structure to productivity and product success.  Highly recommended.</li>
</ul>
<h3>Best Non-Technical Books I read in 2020</h3>
<ul>
<li><a href="https://amzn.to/3rFWVXQ">Andrew Carnegie</a> - A detailed biography of a fascinating historical figure who defied easy characterization.  Carnegie was an immigrant born in poverty who through hard work and good timing became one of the richest men in the world, a union buster who viewed himself as a “friend of the workers”, a philantropist who wanted to give away his whole fortune, and a political force who aimed for world peace — and protection for his own interests.  It was a great reminder in the sometimes overly black and white world of 2020 that real humans are complicated and don’t fit neatly in our tight political boxes.</li>
<li><a href="https://amzn.to/2Juudbc">Salt, Fat, Acid, Heat</a> - I’m not the primary cook in my family — I’m blessed to regularly enjoy my wife’s far superior cooking.  But I enjoy it as an occasional activity and this book helped spark even more interest.  Unlike most cookbooks this book is focused on the science and “whys” of cooking rather than procedural formulas for making a particular dish.  It felt empowering and exciting rather than my typical frustration with recipes that didn’t turn out like the images in the cookbook.</li>
<li><a href="https://amzn.to/3aYB87U">Atomic Habits</a> -  Over the last few years I’ve made a personal transition to focusing more on the habits and routines I’m making part of my life and less on ambitious long term goals.  This book gave me a framework for thinking about that transition as well as practical tips for doing it better.  A quick and helpful read.</li>
<li><a href="https://amzn.to/3hs4lJM">How To Talk So Little Kids Will Listen</a> - An incredibly practical book for how to interact with toddlers.  I’ve found a bunch of helpful parenting books, but none beat this for giving parents practical actionable advice that will reduce stress in your house and help you build a relationship with your kids.  </li>
<li><a href="https://amzn.to/380fM8k">House of X / Powers of X</a> - For the comics fans out there, I’ve been really enjoying Jonathan Hickman’s run on the X-Men, starting with this graphic novel that soft-reboots the whole world of mutants</li>
</ul>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[How Teams Go Faster]]></title>
            <link>https://benmccormick.org/2020/09/05/how-teams-go-faster</link>
            <guid>https://benmccormick.org/2020/09/05/how-teams-go-faster</guid>
            <pubDate>Sat, 05 Sep 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I recently discovered John Cutler’s <a href="https://twitter.com/johncutlefish">Twitter</a> and <a href="https://cutlefish.substack.com/">blog</a>.  Everything I’ve read from him so far is excellent and highly recommended, but this table in particular felt like it was worth sharing.</p>
<blockquote class="twitter-tweet" data-conversation="none" data-theme="light"><p lang="en" dir="ltr">13/13 Feels like fast ... is actually faster <a href="https://t.co/c87USFeu6b">pic.twitter.com/c87USFeu6b</a></p>&mdash; John Cutler (@johncutlefish) <a href="https://twitter.com/johncutlefish/status/1145240762243698688?ref_src=twsrc%5Etfw">June 30, 2019</a></blockquote> 
<p>It’s amazing to me how unhelpful our intuition often is when we’re under pressure to speed up.  I’ve observed clear examples of several of these items personally over the last several years.</p>
<ul>
<li>
<p>I’ve seen my team go significantly faster <em>with less stress</em> by shifting projects to being serialized with pairing and collaboration rather than giving everyone their own project <sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup></p>
</li>
<li>
<p>I’ve watched attempts to get ahead on planning be thwarted by changing business priorities.  This can be frustrating in the moment until you realize the problem is a planning process that can’t adapt to new information cleanly. </p>
</li>
<li>
<p>I’ve been part of another team that doubled in size and then got cut back in half without much discernable impact in actual output over time.  </p>
</li>
<li>
<p>The most effective change my team has made this year has been de-emphasizing filling sprints in favor of being clear about what we’re trying to accomplish in the sprint.  I don’t think we’ve gone far enough in that direction yet.  </p>
</li>
</ul>
<p>Some items I’d add to John’s list:</p>
<ul>
<li>Manual QA / Deployments <strong>vs</strong> Test Automation as part of development<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></li>
<li>Senior devs filling up on feature work <strong>vs</strong> Senior devs mentoring, enabling and unblocking other devs<sup id="fnref-3"><a href="#fn-3" class="footnote-ref">3</a></sup> </li>
</ul>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>Besides the creative and redundancy benefits of pairing, shared resources like PMs/EMs/QA become bottlenecks as you parallelize.  </p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
<li id="fn-2">
<p>This relates to the “handing off” QA point in John’s list.  If the original people responsible for creating the feature aren’t writing automation as part of development, there is likely to be inefficiency or gaps in the testing. </p>
<a href="#fnref-2" class="footnote-backref">↩</a>
</li>
<li id="fn-3">
<p>Even worse if this is a manager doing this, something I struggled with as I transitioned from being a <a href="https://benmccormick.org/2019/03/25/manager-and-developer">dev-manager hybrid</a> to managing a larger team.  </p>
<a href="#fnref-3" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Simple Burnout Triage]]></title>
            <link>https://benmccormick.org/2020/08/31/simple-burnout-triage</link>
            <guid>https://benmccormick.org/2020/08/31/simple-burnout-triage</guid>
            <pubDate>Mon, 31 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I have a one question triage process when I’m concerned that I or one of my teammates is headed towards burnout:</p>
<blockquote>
<p>If you take the pace &#x26; quality of the last 2 months of your life and repeated it again and again, how long would you be able to sustain it?   </p>
</blockquote>
<p>Why 2 months?  It’s long enough to be a representative sample of your pace and cut out the rush of a specific project deadline or medium sized stressful life event<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>.  But it’s a small enough sample to check in regularly, and most people have a fairly clear sense of what their last 2 months have been like for them and can visualize what repeating it would look like.  </p>
<p>When I ask myself or a teammate this question, it tends to elicit one of 3 responses:</p>
<p><strong>”I can’t go on like this.”</strong>  The current pace is unsustainable and we’re probably already well into the burnout phase where tasks are being dropped, personal needs are not being met, and everyday life has become overwhelming.  </p>
<p><strong>”I can make this work, but…”</strong> The most interesting result of this question to me is that it often makes it clear where a priority is being dropped.  “I’m doing good, but I wish I was doing a better job making time for my kids”.  “I’m getting by, but I feel like I only have time for the urgent and I haven’t had a chance to invest in myself”.   “I can do this for a while longer, but I have to figure out a way to live in the moment in the evenings and leave my work at the office”.  The act of visualizing a plausible future often causes people to hone in on what they’re missing.</p>
<p><strong>”I love my life, and I can keep doing this forever.”</strong>  If this is where you’re at, treasure it and check in regularly to make sure it’s still the case. </p>
<h3>What next?</h3>
<p>The question above is laser focused on triage.  Exactly how to handle partial or complete burnout is situation dependent.  But I try to hold to principles of optimizing for the long term and tying my time to my values.  That means while it sometimes may make sense to live in an unsustainable place for a season, I’m always going to weigh that impact on myself, my family and my teammates against the longterm value and take it seriously<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup>.  And if my time spent doesn’t line up with my principles and values for a significant length of time, I know it’s time to implement a plan for change.   </p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>For large life changes like job switches, family emergencies, society-changing pandemics etc it is probably better to assume that short term data is not representative, err on the side of scaling back as needed, and take stock of things on a regular basis. </p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
<li id="fn-2">
<p>A note on taking things on for a season; It’s only a season if it has a defined endpoint or offramp.  If you and your spouse live in different cities to optimize for your career, or you’re working 70 hour work-weeks because your job demands it, and you don’t know when these things will end, you’re not in a season.  This is your life.</p>
<a href="#fnref-2" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[Better than a wild guess]]></title>
            <link>https://benmccormick.org/2020/08/23/better-than-a-guess</link>
            <guid>https://benmccormick.org/2020/08/23/better-than-a-guess</guid>
            <pubDate>Sun, 23 Aug 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>I’m currently reading Doublas Hubbard’s <a href="https://amzn.to/3lcY3yY">How To Measure Anything</a> and it is driving home a point I’ve observed anecdotally throughout my career; when people don’t know something exactly, they often throw away a ton of things that they do know.  You can see this in project estimation, where engineers often resist providing any estimate since “it’s hard to tell before we actually build it”.  You can see it in product planning, where teams I’ve worked with struggle to provide clear usage or business impact goals since “it is hard to tell how impactful this will be till we build it”.  </p>
<p>Hubbard’s advice for making properly calibrated estimates would probably help in multiple places in the software world:</p>
<ol>
<li><strong>Use 90% confidence intervals when there’s uncertainty, not point estimates or vague categories like “medium risk”</strong> - Saying a piece of software work is “large” is much less actionable and informative than “we’re 90% confident that it will take between 3 and 15 days to complete.  </li>
<li><strong>Use absurd scenarios and alternative bets to calibrate a confidence interval</strong> - You may think you have no idea how long a novel new software project will take, but even for projects with high uncertainty this is untrue.  You can start by asking questions like “is there any chance this will be done tomorrow” and “is there any chance this project will take more than 5 years”.  If the answer is no, then you’ve established a baseline confidence interval, and you can start working inward from there.  When you get to the point that something is feasible if unlikely, its a sign that you’re probably near the 90% confidence interval<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>.  Once you have a starting place, you can further consider a hypothetical bet where you had to choose between a lottery with a 90% payout of $1000 and a scenario where you got the $1000 when the item ended in your range.  If you would clearly prefer one of those scenarios to the other, your range is probably too tight or too loose.</li>
<li><strong>Model your estimates with simple monte carlo simulations</strong> - Hubbard recommends using Monte Carlo simulations (picking random numbers according to the distributions set up by your confidence intervals ~1000 times) in order to get a better intuition of what real world outcomes might look like.  Doing this right does mean understanding not just the confidence range, but also what the distribution looks like.  Estimating simple software feature work for instance, is likely not a normal distribution.  Many tasks will be straightforward and be completed quickly, but we’ll hit occasional tasks that require significant restructuring of a program to complete.  It’s a classic “long tail” scenario.</li>
<li><strong>Break down estimates into component parts</strong> - One of the most powerful techniques for making better estimates under uncertainty is “Fermi Decomposition”, the process of breaking an estimation problem into smaller estimation problems (which may be more tractable) and then combining the estimate.  In software this can mean breaking up a large project into the component pieces of work and then estimating those.  Doing this right of course means capturing our uncertainty on the sub-estimates, so that we can roll that up into the larger estimate.  If we optimistically point estimate every element of a project, we’re going to end up with a total estimate that is actually less likely, since we need <em>everything</em> to go well to hit that total estimate.  I commonly see engineers handle this by doing optimistic estimates and then adding a buffer period.  It would be better to be clear about uncertainty and do your decompositions with a range of values (although it does make sense to factor in uncertainty about tasks that may be missing).  </li>
<li><strong>Consider what measurements will be valuable</strong> - When we start viewing our estimation goal as reducing uncertainty rather than eliminating it, its easier to see that some easy measurements might go a long way toward improving our projections, even if they won’t take us to an exact value.  For instance if we want to know how many tickets we might close during an upcoming sprint, it can be easy to say that there’s no way to know.  The new work is unique and isn’t necessarily directly comparable to work we’ve done in the past.  However just because we can’t make an exact projection doesn’t mean we know nothing.  If we look at our last 10 sprints and see how many tasks we completed in each of them, we can feel confident that this upcoming sprint is likely to be between the minimum and maximum value in that range, or at least close.  If we’re currently planning like we will accomplish something outside of that range, this could be very useful information.</li>
</ol>
<p>All of this definitely has me thinking about the good and bad of software estimation, and how I might incorporate this into my team’s rhythms.  Would love to hear stories of effective estimation processes in software.  What do you do that is better than wild guessing?</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>Remember that 90% total interval means that there’s a 95% chance that a value is greater than the lower bound and a 95% chance that the value is less than the upper bound.</p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
        <item>
            <title><![CDATA[The Management Resources I Keep Coming Back To]]></title>
            <link>https://benmccormick.org/2020/07/25/management-resources-2-years</link>
            <guid>https://benmccormick.org/2020/07/25/management-resources-2-years</guid>
            <pubDate>Sat, 25 Jul 2020 00:00:00 GMT</pubDate>
            <content:encoded><![CDATA[<p>Although I don’t read Hacker News much these days, I do subscribe to <a href="https://hackernewsletter.com/">a newsletter</a> that rounds up the best links every week, and there are almost always one or two gems in there. </p>
<p>This week my favorite link was this roundup of <a href="https://www.benkuhn.net/progessays/">Essays on Programming I Think About A lot</a> by Ben Kuhn, cataloguing essays on the internet that he comes back to or references repeatedly.  </p>
<p>I’m now ~2 years into managing people and because <a href="https://www.fastcompany.com/90282088/why-being-a-manager-is-a-career-change-not-a-promotion">Engineering Management is not a promotion</a>, I’ve spent a lot of time leading up to that change and since reading about management in an attempt to avoid being completely clueless at my job<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>.  </p>
<p>Like Ben, I have a few key essays and books that I reference and go back to over and over again.  These are a mix of books and essays that have shaped how I think about the job of engineering leadership.  The books here are mostly well known, while the essays are more obscure, and might be a surprising choice to highlight if you asked their authors.  But each one has taught me something specific that has helped shape my leadership style. </p>
<h2>Essays</h2>
<p><a href="https://larahogan.me/blog/leadership-style-colors/">Leadership Style Colors | Lara Hogan</a></p>
<blockquote>
<p>It’s totally natural to embody one a lot—that’s your style! But it’s important to be aware of the other styles/approaches available in your leadership toolbox. A strong leader understands that different styles can be valuable when an environment or situation calls for it. As Herminia Ibarra says in my <a href="https://hbr.org/2015/01/the-authenticity-paradox">favorite article</a> on this subject, “Small changes—in the way we carry ourselves, the way we communicate, the way we interact—often make a world of difference in how effectively we lead.”</p>
</blockquote>
<hr>
<p><a href="https://randsinrepose.com/archives/act-last-read-the-room-and-taste-the-soup/">Taste The Soup | Rands</a></p>
<blockquote>
<p>In a meeting where an individual or team is presenting a complex idea or project, my job as the leader is soup tasting. It’s sampling critical parts of the idea to get a sense of how this soup has been or will be made. Who are the critical people? What are the critical parts? Which decisions matter? I don’t know. I do believe that a pre-requisite for leadership is that you have experience. You’ve had trials which have resulted in both impressive successes and majestic failures. These aggregate lessons define your metaphoric soup tasting ability, and when your team brings you a topic to review, it is this experience you apply to ask the critical soup questions.</p>
</blockquote>
<hr>
<p><a href="https://charity.wtf/2019/01/04/engineering-management-the-pendulum-or-the-ladder/">Engineering Management: The Pendulum Or The Ladder | Charity Majors</a></p>
<blockquote>
<p>If you like engineering management, your tendency is to go “cool, now I’m a manager”, and move from job to job as an engineering manager, managing team after team of engineers.  But this is a trap.  It is not a sound long term plan.  It leads too many people off to a place they never wanted to end up: technically sidelined.</p>
</blockquote>
<hr>
<p><a href="https://lethain.com/values-oasis/">Trapped in a Values Oasis | Will Larson</a>  </p>
<blockquote>
<p>  The rule of thumb here is to lead through ambiguity, and advocate through disagreement.
It’s important to diagnose your situation correctly, because when you get it wrong, it’ll still feel like you’re making progress, but it’s wholly dependent on you and it’s progress that is likely to come at the cost of undermining both you and your team within the broader organization. It can be extraordinarily frustrating to “disagree and commit” to a policy or value that goes against your personal values, but any worthwhile measure of successful leadership needs to consider your team’s success more highly than your own.</p>
</blockquote>
<hr>
<p><a href="https://kellanem.com/notes/friday-wins">Friday Wins &#x26; A Case Study in Ritual Design | Kellan Elliott-McCrea</a></p>
<blockquote>
<p>Culture is what you celebrate. Rituals are the tools you use to shape culture. Yet very few of us think much about ritual design.</p>
</blockquote>
<h2>Books</h2>
<p><a href="https://amzn.to/3jyxofc">Radical Candor | Kim Scott</a></p>
<blockquote>
<p>“It’s brutally hard to tell people when they are screwing up. You don’t want to hurt anyone’s feelings; that’s because you’re not a sadist. You don’t want that person or the rest of the team to think you’re a jerk. Plus, you’ve been told since you learned to talk, “If you don’t have anything nice to say, don’t say anything at all.” Now all of a sudden it’s your job to say it. You’ve got to undo a lifetime of training. Management is hard.”</p>
</blockquote>
<p>The best thing I’ve read on how to give feedback well.</p>
<hr>
<p><a href="https://amzn.to/2D4btMb">Death By Meeting | Patrick Lencioni</a></p>
<blockquote>
<p>The hard truth is, bad meetings almost always lead to bad decisions, which is the best recipe for mediocrity.</p>
</blockquote>
<p>A lot of this book is focused on very specific advice for specific types of meetings, but the philosophical takeaway it left me with was much simpler; meetings aren’t non-negotiable things that we all must endure.  They can be designed, and that design matters.</p>
<hr>
<p><a href="https://amzn.to/3f4EvbH">The Common Rule | James Early</a></p>
<blockquote>
<p>All those who want to be attentive to who they are becoming must realize that formation begins with a framework of habits.</p>
</blockquote>
<p>This is a book written through the lens of the author’s Christian faith, so if that bothers you, you might prefer <a href="https://amzn.to/3jInPdF">Deep Work</a>, which covers similar ground in a secular manner.  But for me personally, the rituals and worldview laid out in the Common Rule has been life changing, and has been my most helpful tool as I navigate the “Advanced Time Management 501” lifestyle of engineering management</p>
<hr>
<p><em>That’s the list for now, but I’m sure I’ll add more as time goes on.</em></p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>I would like to think this has worked, but Dunning-Kruger being what it is, I don’t know how I could really tell you with confidence.</p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content:encoded>
            <author>ben@benmccormick.org (Ben McCormick)</author>
        </item>
    </channel>
</rss>