webpackJsonp([43973905934457],{757:function(e,t){e.exports={data:{markdownRemark:{html:'<h3>JavaScript And The Web</h3>\n<p><a href="https://hph.is/coding/bitmasks-react-context">Bitmasks and the new React Context API | Haukur Hallvarðsson</a> - A nice rundown of one aspect of the new React Context API that is likely to be familiar to low-level developers but will probably be a new idea to many front end devs: using bitmasks to test a condition.</p>\n<p><a href="https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da">MobX 4: Better, simpler, faster, smaller | Michel Weststrate</a> - MobX continues to be a fantastic state management libary and this update looks like it will make it even better.</p>\n<p><a href="https://engineering.linkedin.com/blog/2018/03/how-we-built-the-same-app-twice-with-preact-and-glimmerjs">Lighter than Lightweight: How We Built the Same App Twice with Preact and Glimmer.js | LinkedIn Engineering</a> - This is a really cool real world comparison of 2 JavaScript frameworks, where they actually built the same app in 2 separate frameworks, with core contributors to each framework involved in the implementation.  To be honest, my main takeaway is that among modern frameworks “framework performance” can be a bit overrated, and not a great reason to choose a specific library or framework, as compared to factors like developer experience, community, and fit with the existing codebase.</p>\n<h3>Rust And WebAssembly</h3>\n<p>I’ve been thinking about taking the time to learn a new language for the first time in a while.  I think WebAssembly and Rust transpiled to WebAssembly in particular are going to become an important part of high performance JavaScript applications and frameworks/libraries.  So I’m starting to check it out.  Here are a few  recent relevant links</p>\n<p><a href="https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/">Making WebAssembly better for Rust &#x26; for all languages – Mozilla Hacks – the Web developer blog</a> - This outlines a plan to improve the developer experience of what I think is the future of WebAssembly in most web apps: interop with JavaScript to improve performance of open source libraries and some core performance sensitive code.</p>\n<p><a href="https://github.com/atom/xray">GitHub - atom/xray: An experimental next-generation Electron-based text editor</a> - A non-webassembly example of using Rust selectively to increase performance of an application built primarily using web technologies.</p>\n<p><a href="https://blog.rust-lang.org/2018/03/12/roadmap.html">Rust’s 2018 Roadmap | Rust Blog</a> - A good rundown of the areas of focus for Rust this year.  I’m particularly interested in their target use cases, since 3 of them (CLI tools, Network Services and WebAssembly/the web) are things that I have built before and will build again.</p>',frontmatter:{title:"Weekly Links: March 16th",keywords:"React MobX Context Preact Glimmer Rust WebAssembly",category:"opinion",date:"2018/03/16",path:"/2018/03/16/weekly-links-03-11-16/",layout:"weekly-links",hideFooter:null},fields:{slug:"/2018/03/16/weekly-links-03-11-16/"}}},pathContext:{slug:"/2018/03/16/weekly-links-03-11-16/",relatedPosts:[{path:"/2012/11/09/bayesian-witch-hunt",data:{title:"Bayesian Witch Hunt",path:"/2012/11/09/bayesian-witch-hunt",description:"A nerd tribute from a friend",date:"2012-11-09T12:00:00+00:00"}},{path:"/2012/12/29/i-hate-computing-ecosystems",data:{title:"I hate computing ecosystems",path:"/2012/12/29/i-hate-computing-ecosystems",description:"Why does nothing work together?",date:"2012-12-29T23:06:00+00:00"}},{path:"/2012/12/25/medium-the-end-of-history-and-the-last-website",data:{title:"Medium: The end of History and the last website",path:"/2012/12/25/medium-the-end-of-history-and-the-last-website",description:"Is there any use in personal websites anymore?",date:"2012-12-25T21:00:00+00:00"}}]}}}});
//# sourceMappingURL=path---2018-03-16-weekly-links-03-11-16-8db19cc55358f519a22d.js.map