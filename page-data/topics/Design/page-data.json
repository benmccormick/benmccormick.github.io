{"componentChunkName":"component---src-templates-topic-page-js","path":"/topics/design","result":{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"clean-architecture-book,es6-the-bad-parts,react-confessions","topics":["book-review","design"],"category":"reviews","key":"atomic-design-book","title":"Book Review: Atomic Design","description":"A great read on implementing design systems","layout":"review","path":"/2018/07/02/book-review-atomic-design/","date":"2018/07/02","dontfeature":null,"isDraft":null},"html":"<p>The Unix philosophy for designing software, “Make each program do one thing well”, is a piece of wisdom that goes beyond just programming.  For instance, it also applies to non-fiction writing.  When learning, I find that I gravitate towards small focused resources, rather than monolithic books or websites that aim to teach everything about a specific topic.</p>\n<p><a href=\"http://atomicdesign.bradfrost.com/\">Atomic Design</a> by Brad Frost is a book that does one thing really well: it explains what a design system is, and how you can implement one in your organization.  It doesn’t try to be a book about CSS, design styles or any of the other myriad topics that touch against design systems.  That focus serves it well, and I found it to be well worth my time.</p>\n<p><a href=\"http://bradfrost.com/blog/link/design-systems/\">Design Systems</a>  are an organized toolkit for creating digital products.  They’re a set of elements, widgets, patterns, and layouts (atoms, molecules, organisms and templates in the language of the book) that can be combined to build complex sites and applications.  The idea is pretty simple.  But there are some real challenges in implementing one.</p>\n<ol>\n<li><em>What content belongs in a design system?  Where do we draw the boundary as to what belongs and what doesn’t?</em></li>\n<li><em>How do you build a tool for your design system so that patterns are easily findable, usable, and understandable?</em></li>\n<li><em>How do you keep a design system relevant over time as the product(s) change?</em></li>\n<li><em>How do you convince budget-conscious organizations that maintaining a design system is a good use of time and money?</em></li>\n</ol>\n<p>After a brief introduction to the ideas behind design systems and pattern libraries, these are the challenges that Atomic design tackles.  It discusses a hierarchy for patterns, and methods for pulling them out of existing applications, then moves on to talking about tools for implementing a pattern library, and techniques for navigating organizational politics when starting and maintaining a design system.</p>\n<p>So this book <strong>will be helpful</strong> for you if you are</p>\n<ol>\n<li>Struggling to deal with inconsistencies in your interfaces, or constantly doing custom UI work for each new feature</li>\n<li>Considering implementing a design system/pattern library for your organization</li>\n<li>Hoping to learn more about design systems because somebody else in your organization is pushing for one</li>\n<li>Having trouble maintaining an existing pattern library</li>\n</ol>\n<p>It <strong>won’t be helpful</strong> for you if you are</p>\n<ol>\n<li>Looking for tips on how to make your interface beautiful</li>\n<li>Seeking hands on information about specific design, CSS or JavaScript techniques</li>\n</ol>\n<p>I enjoyed Atomic Design a lot, and hope that I’ll get to use what I’ve learned in the near future.  As far as I can tell, Atomic design is only available on <a href=\"http://atomicdesign.bradfrost.com/\">Brad Frost’s site</a>.  You can read the book online there, or buy the paperback version.  If you fall into one of the 4 categories I listed above, I’d highly recommend checking it out.</p>","fields":{"slug":"/2018/07/02/book-review-atomic-design/"}}},{"node":{"frontmatter":{"readNext":"clean-architecture-book,large-improvements-small-team,react-confessions","topics":["book-review","design"],"category":"reviews","key":"inmates-book","title":"Book Review: The Inmates Are Running The Asylum","description":"Don't judge a book by its first few chapters","layout":"review","path":"/2018/04/11/book-review-inmates-are-running-the-asylum/","date":"2018/04/11","dontfeature":null,"isDraft":null},"html":"<p>For the past few months I’ve been working through a goal of reading 30 books in a year.  I made a list sourced from books that I’d wanted to read in a while, and books that friends recommended, and I’ve been working through it.  For the most part I’ve gotten through books pretty quickly as they’ve been generally fascinating.  Last month was the first time I hit a book that I struggled to get through a bit.  Fortunately I stuck with it, and it was worth it in the end.</p>\n<p><a href=\"https://amzn.to/2qeSTYz\">The Inmates Are Running The Asylum</a> by Alan Cooper is a book that I’d seen recommended all over the place by design-savvy developers and product folk.  Cooper is the creator of Visual Basic, a highly regarded programmer who became an even more high regarded designer, pioneering the field of interaction design (laid out in his other book <a href=\"https://amzn.to/2IItvkP\">About Face</a>) and the use of personas in software design.  While <em>About Face</em> is his explanation of the techniques behind interaction design, <em>The Inmates Are Running The Asylum</em> is his case for why interaction design is necessary as part of the software development process.  As somebody who has been working in a partial design role for the past year, it seemed like a great fit.</p>\n<p>Unfortunately, the first few chapters were a struggle.  The first 4 chapters of the book are devoted to laying out the poor “current situation” for technology when the book was written in the late 90s.  Cooper goes through a long list of poor experiences in devices and software like TVs, email clients, car remotes, alarm clocks and more.  The problem is that almost universally his examples are out of date.  People certainly still write software with bad UX, and struggle especially with software that is replacing hardware.  But they struggle in different ways now than they did 15 years ago.  Possibly due to the influence of the author, and partially due to some maturation in the field and changes in technology, the particular examples listed in these chapters fail to land. It’s possible to extrapolate some things to present day, but it makes for choppy reading.  At minimum the book would benefit greatly from a second edition.</p>\n<p>A second issue that made the book harder to apply was also related to the publish date.  This is a book that is firmly rooted in a <a href=\"https://en.wikipedia.org/wiki/Waterfall_model\">waterfall</a>/long release cycle view of the software development process. In fact if anything it is advocating for a more waterfall-like approach than the waterfall status quo of 2004.  I’m genuinely curious how the author would choose to communicate his critiques today in light of the normalization of agile techniques.</p>\n<p>If I haven’t scared you off yet, you’re at the same place I was 4 chapters in, wondering if I should cut my losses and give up on a great but outdated work.  Fortunately I stuck with it and reaped the benefits. The last 10 chapters are as relevant as ever in todays world.</p>\n<p>Chapter 5 describes the complementary roles of design, engineering, and business acumen in successful businesses.  Chapters 6-8 make the case for interaction designers being a distinct field that can’t easily be filled by industrial designers, visual designers, marketers or programmers. There is a particular focus on the problems of developers designing the code that they’re implementing.  Chapters 9-11 are a high level view of the principals of interaction design.  Finally chapters 12-14 describe what implementing design into a software culture looks like.  There is a ton of great content in these chapters.</p>\n<p>As a programmer who has been designing and implementing for the last year, the critiques of chapters 6-8 rang quite true.  I see all the tendencies outlined in the book dragging me away from user-focused design, and it’s a constant battle to remind myself to build for the user and not development convenience.</p>\n<p>I was familiar with many of the ideas in chapters 9 through 11 as techniques but these chapters did a really good job of laying out the heart behind them as well as making a business case for their use.  Frankly they also made me much more interested in reading <a href=\"https://amzn.to/2IItvkP\">About Face</a>, so hopefully I’ll be able to get a review of that up sometime soon (after I finish my current list of books).</p>\n<p>Finally, while the implementation chapters at the end struggled a bit due to being written in a pre-agile world, it holds up because it focuses a lot on creating a design culture and isn’t just stuck on prescriptive steps for integrating designers.</p>\n<p>Overall I can definitely recommend this book if you’re interested in learning more about the role of design in a healthy software development organization and you know enough about the industry to contextualize the 90s-era advice in 2018.  It is definitely a high-level book; Cooper describes it as the “business case for interaction design”, and it is written at a “business level”.  If you want a more practical and in the weeds design resource, then <a href=\"https://amzn.to/2IItvkP\">About Face</a> is probably a better bet.  But <a href=\"https://amzn.to/2qeSTYz\">The Inmates Are Running The Asylum</a> is still solid reading.</p>","fields":{"slug":"/2018/04/11/book-review-inmates-are-running-the-asylum/"}}}],"topic":"design"}},"staticQueryHashes":[]}