{"componentChunkName":"component---src-templates-topic-page-js","path":"/topics/javaScript","result":{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"mn-series,backbone-devs-react,bb-radio","topics":["backbone","javaScript"],"category":"frameworks","key":null,"title":"The Life of a Marionette View","description":"A breakdown of the lifecycle of Marionette Views","layout":"post","path":"/2015/01/05/marionette-view-life-cycles","date":"2015-01-05T04:01:45+00:00","dontfeature":null,"isDraft":null},"html":"<p><em>This is the fourth post in a series on <a href=\"http://marionettejs.com/\">Marionette.js</a>, a framework for developing apps with <a href=\"http://backbonejs.org/\">Backbone.js</a>.  For more background on what Marionette is, check out the series page: <a href=\"http://benmccormick.org/marionette-explained/\">Marionette Explained</a>  Also note that this article was written about Marionette v2.  The current latest version of Marionette is v3, and while most of the high level concepts remain the same, the specific syntax has changed in some cases.</em></p>\n<p>When building Single Page Applications, it’s important to manage UI components throughout their existence on the page, making sure they’re properly created, attached, and destroyed.  Marionette.js helps Backbone developers manage that by providing life cycle methods that developers can use when defining their Views.  These life cycle functions fit nicely with the rest of Marionette’s features, and can help simplify UI development with Backbone.</p>\n<p>Building scalable user interfaces is hard.  It’s a challenge that sits at the intersection of fields requiring very different skill sets: Software Development, Graphic Design, User Experience and Information Architecture.  Because interface code is concerned with both presentation and interaction logic and is exposed directly to user input, it can be difficult to reason about.  Fortunately, as modern web developers, we have 30+ years of industry knowledge to fall back on.  One lesson learned is the value of Object Oriented Programming concepts in UI design; specifically, the idea of breaking interfaces into a set of independent components, and giving each component a consistent “life cycle”, a set of events that occur between a component’s creation and destruction.</p>\n<p>Having a clear life cycle for UI components makes a developer’s life easier in a few ways:  It eases the process of reasoning about changes in a component over time, and how it interacts with other elements of the UI.  It creates consistent hooks to add behaviors, which promotes readability and reduces boilerplate code.  Finally, it smooths integrations with outside code that may need to be run when the component is in a specific state, without needing a bunch of conditional logic to detect when it should run.  Marionette Views provide a life cycle for Backbone Views that help give all of these benefits.</p>\n<p>The Marionette View life cycle is made up of a list of events and conventions.  Events are fired at each signficant step in a View’s life cycle.  Each event has a corresponding View method associated with it that Marionette automatically runs when the event is fired. These events and callbacks follow a consistent naming convention.  An event that occurs before a moment in the life cycle is fired in the form <code class=\"language-text\">before:&lt;eventname></code> and the callback is called <code class=\"language-text\">onBeforeEventName</code>. An event that is fired after the same moment in the life cycle will have the form <code class=\"language-text\">eventname</code> and the callback will be called <code class=\"language-text\">onEventName</code>.  By default the callback functions for each event do nothing, but developers can overwrite them to define behavior for a specific View instance.  For instance, defining the callback functions for the <code class=\"language-text\">render</code> and <code class=\"language-text\">before:render</code> events on a new View would look like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> ExampleView <span class=\"token operator\">=</span> Mn<span class=\"token punctuation\">.</span>ItemView<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    <span class=\"token function-variable function\">onRender</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do stuff after the View is rendered</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function-variable function\">onBeforeRender</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// do stuff before the View is rendered</span>\n    <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Render is only one of the relevant moments in a View’s life cycle.  This is the full list of relevant methods and events, with a brief explanation of how each one might be used.</p>\n<h4>Initialize</h4>\n<p>The first function in a View’s life cycle is <code class=\"language-text\">initialize</code>. <code class=\"language-text\">initialize</code> isn’t a Marionette-specific method. It’s part of Backbone, but it’s important to make sure you understand where it fits into the View’s life.  Backbone provides two functions that are run when a View is instantiated, <code class=\"language-text\">constructor</code> and <code class=\"language-text\">initialize</code>.  <code class=\"language-text\">constructor</code> is used for Backbone and Marionette’s internal setup, and shouldn’t normally be overridden.  <code class=\"language-text\">initialize</code> is the suggested function for defining behavior on View setup.  It’s a great place for setting up event listeners, and allows workings directly with the options passed to the View on creation <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>. Unlike the other methods on this list, <code class=\"language-text\">initialize</code> only provides a single method with no associated event.</p>\n<h4>onRender/onBeforeRender</h4>\n<p>The second step in the Marionette View life cycle is the render step, which exposes two events <code class=\"language-text\">render</code> and <code class=\"language-text\">before:render</code>, corresponding to the <code class=\"language-text\">render</code> and <code class=\"language-text\">onBeforeRender</code> callbacks.  These events fire before and after the View template is rendered.  In a Marionette View, rendering means that the View has generated a fragment of HTML, but it may or may not be visible or attached to the DOM.  onRender is useful for any direct manipulation of the generated HTML that doesn’t require it to be visible or attached to the DOM.</p>\n<h4>onAttach/onBeforeAttach (Marionette 2.3+)</h4>\n<p>After rendering, the next set of events that might fire in a Marionette View’s life cycle is <code class=\"language-text\">before:attach</code> and <code class=\"language-text\">attach</code>.  These events are fired whenever showing a View in a region causes it to be attached to the DOM.  Because Views can be rendered independently of Regions, and some Regions may not be attached to the DOM when a View is shown, this event may not always be fired immediately (or at all).  But if you’re using Regions to render all your Views, it can be very useful for setting up jQuery plugins or other operations that require HTML to be attached to the DOM before being acted on.  A nice aspect of the attach events is that they will propagate down a tree of LayoutViews if you’ve set up a View hierarchy as described in <a href=\"http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/\">my last post</a>, so you can count on the event firing even if you build the View tree and then attach the top View to the DOM later.</p>\n<h4>onShow/onBeforeShow</h4>\n<p>Another Region-specific set of events, <code class=\"language-text\">show</code> and <code class=\"language-text\">before:show</code> fire before and after a View is shown within a region.  These events are great for rendering child Views.  The Marionette docs recommend using <code class=\"language-text\">onBeforeShow</code> specifically for rendering children, since it allows for only a single DOM paint when rendering nested Views, and prevents attach events from firing multiple times, which might happen if the child Views are attached to the parent after the parent View has already been shown.</p>\n<h4>onDomRefresh</h4>\n<p>The <code class=\"language-text\">dom:refresh</code> event is the last Region-specific event  It’s triggered after an already shown View is rerendered.  Like onAttach, this can be useful for managing UI plugins that manipulate the DOM, if they need to be reinitialized when the HTML tree is refreshed. It differs from <code class=\"language-text\">onRender</code> in that it will not run the first time the View is rendered, and you can count on the View always being attached to the document when it fires.  So if an operation requires the View to be attached to the DOM, you can run any initial logic in <code class=\"language-text\">onShow</code>, and then put any refresher logic into an <code class=\"language-text\">onDomRefresh</code> callback.  If you’re running Marionette 2.3 or later though, onDomRefresh is less useful because onAttach provides similar functionality in a more consistent way.</p>\n<h4>onBeforeAddChild/onBeforeRemoveChild/onAddChild/onRemoveChild (CollectionView Only)</h4>\n<p>CollectionViews get their own special life-cycle events to manage adding and removing Models to the Collection.  CollectionViews automatically display a new ChildView when a Model is added to its Collection, and destroy the View when the Model is removed.  They fire events before and after each of these changes, to allow you to customize the behavior around each.  You could for instance hide specific Views if necessary. You could also modify them based on some logic, though that type of thing may be more appropriate within the child View’s code itself.</p>\n<h4>onDestroy/onBeforeDestroy</h4>\n<p>The final Marionette life-cycle event set is <code class=\"language-text\">destroy</code> and <code class=\"language-text\">before:destroy</code>.  Appropriately, these events are fired when a View is destroyed and serve as a place to handle any custom cleanup.  The most common use case for these functions is unbinding any events not covered by Marionette’s built-in event cleanup<sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup>. It’s worth noting that you cannot use <code class=\"language-text\">onBeforeDestroy</code> to prevent the View being destroyed.  The Marionette team’s position here is basically that you should not call destroy directly on any View you don’t want destroyed.  If you’re swapping a View out of a region but don’t want it to be destroyed, Marionette provides a <code class=\"language-text\">preventDestroy</code> option to its show method that allows you to preserve the existing View.</p>\n<h3>Cogs In A Machine</h3>\n<p>The nice thing about Marionette’s View life cycles is the consistency it shares with the rest of Marionette.  The life cycles are built to work with the Region and Layout system I described in my last post.  If you lay out your Views using the system described in that post, you’ll be able to take advantage of all of the above functions consistently across your application.  Regions themselves have similar life cycle methods, with callbacks that run before and after showing Views, swapping Views and emptying the region. Finally, Marionette Applications, the object that Marionette uses to initialize the app, also has a single set of life-cycle events, <code class=\"language-text\">onStart</code> and <code class=\"language-text\">onBeforeStart</code> that can be hooked into when setting up your application.  This sense of cohesiveness in a set of components that share conventions makes Marionette easy to learn without obscuring what happens with the type of magic you see in other frameworks.</p>\n<h3>Take What You Need</h3>\n<p>Like everything else in Marionette and Backbone, life cycles are a pattern that you can choose to use or ignore.  If you want to define your own way of managing a Views life cycle, it’s perfectly possible to do so.  But the advantages provided by Marionette’s implementation are quite nice.  It presents a simple mental model of what occurs to a View over time, fits in with the other patterns provided by Marionette, and doesn’t require any extra boilerplate when you choose not to use them.  I personally use some of these methods a lot, and have never used a few of them at all.  But it’s helpful to know what is available so that you can keep that simple model of how a View changes over time and choose the appropriate hook for any given View code.  Code is scalable when you can take a few simple concepts and use them repeatedly to build up to something big.  That’s what Marionette can do for you.</p>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        Marionette also exposes those options later using the <code>view.getOption()</code> method\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:2\">\n        <p>\n        Marionette cleans up events created through its event hash objects, and any defined using listenTo.  But any custom eventing stuff you do will need to be cleaned up directly\n        </p>\n        <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2015/01/05/marionette-view-life-cycles"}}},{"node":{"frontmatter":{"readNext":null,"topics":["javaScript","productivity"],"category":"software-productivity","key":"productive-js-dev","title":"Productive JavaScript Development","description":"An examination of what makes JavaScript development productive","layout":"post","path":"/2015/11/25/productive-javascript-development","date":"2015-11-25T14:43:46+00:00","dontfeature":null,"isDraft":null},"html":"<p>I’ve been thinking a lot lately about how we as a JavaScript community can enable more productive JavaScript development.  Most of the major JavaScript libraries were created or popularized to further a theory of how we can be more productive.  jQuery emerged when the biggest productivity challenge for web developers was the incompatible implementations of JavaScript and browser APIs in different browsers.  It largely solved that problem.  Since then, Backbone advocates have pushed for greater productivity through libraries with minimal abstraction where users can understand the source code, Ember has created an ecosystem around the idea that “shared solutions” lead to greater productivity, Angular aimed to make developers (and designers) more productive by adding more power to concepts that were already familiar to them, and React is trying to improve productivity by simplifying the programming model around interfaces.  Meanwhile, tangential to the big frameworks, there has been work to enable more productive development through transpile-to-JavaScript languages (CoffeeScript, TypeScript, Elm, ClojureScript etc), replacing JavaScript on the web period (Dart, WebAssembly, ASM.js), and improving the core JavaScript language while allowing developers to use new features early (ES6 and beyond, as well as Babel).  There’s also work to improve tooling around JavaScript with projects like <a href=\"http://ternjs.net/\">Tern.js</a>, <a href=\"https://github.com/gaearon/react-hot-loader\">Time Machine/React Hot Loader</a>, and continued improvements to Chrome and Firefox developer tools (along with Framework specific developer tools). So there’s no shortage of work being done in this area.  But let’s pull out for a moment.  What are the big picture things that affect productivity?</p>\n<p>Most of the time productivity tools are focused on one of 6 areas.  They make it easier to learn concepts,  easier to write code, easier to read code, easier to architect applications, easier to maintain applications, or easier to debug applications. Here are some examples of each</p>\n<h4>Easy To Learn</h4>\n<p>Angular and Backbone both try to improve programmer productivity by being easy to learn, each in different ways.  Angular puts much of its view logic inside HTML, a medium that many server-side developers and designers are already familiar with.  Therefore it’s a reduced learning curve than something like React, where the UI tends to be more spread across files and is mixed with JavaScript logic <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>.  Angular also provides extensive documentation, which helps programmers come up to speed faster.  </p>\n<p>Backbone on the other hand, attempts to be easy to learn in two ways.  First, there just isn’t that much to learn.  Backbone is a small library with only 6 core concepts (Models, Collections, Views, Events, and Router) each of which should be familiar to developers coming to it from other UI focused frameworks.  That simplicity reduces the load on new users.  At the same time Backbone strives to have libary source code that is both short and readable.  It’s quite possible to read the code for the whole library in under an hour, and the core concepts are obvious when looking through the code.</p>\n<h4>Easy to Write</h4>\n<p>Ember.js aims to make it easy to write application code in at least 2 ways.  First it provides <a href=\"http://www.ember-cli.com/\">tooling</a> to help generate the boilerplate necessary for an ember application.  You can give ember-cli a model name and it will generate the file for that model in the correct place.  In addition Ember abstracts away many of the connections between classes so that you can load the correct files simply using naming conventions, resulting in less code.  </p>\n<p>The recent updates to the JavaScript language are about much more than just making it easier to write JavaScript, but several of the features are focused on providing cleaner syntax for common idioms.  Arrow functions in particular allow for maintaining the outer scope of a function in a clean way, when previously it required jumping through hoops that were easy to mess up.</p>\n<p>Redux and React Hot loader are an attempt to develop a programming idiom that allows for drastically reduced latency between making a change and seeing a result.  A React app using redux and a hot loader can be updated instantly without losing state and cycle backwards and forward through state updates.  Lower latency between writing code and seeing the results makes it much easier to iterate quickly towards good code.</p>\n<h4>Easy to Read</h4>\n<p>One of the biggest gains provided by React is an increase in the readability of code by combining all of the elements of a component (JavaScript, HTML and in some cases CSS) into a single file where the component can be read as a coherent whole without flipping through code.</p>\n<p>CoffeeScript is an attempt to strip out the unnecessary syntax bloat of JavaScript and focus on the pure logic.  Whether it succeeds is a totally different question, but it’s a great example of attempting to satisfy this side of the productivity problem by reducing the distractions in code.</p>\n<p>Type annotation tools like TypeScript and Flow also aim to increase code readability, but not by clearing out bloat (annotations can actually make the code feel more crowded and less readable at first).  Instead they add additional information to the code, making the structure and expectations of the code more apparent to a reader.</p>\n<h4>Easy to Architect</h4>\n<p>Ember really shines when it comes to making it easy to architect apps.  By providing clear guidance on how to structure apps, it can increase productivity by reducing bike-shedding.  In Ember every state of the UI is tied to a URL and each route is tied to controllers that display components.  Communication between components happens with actions and data is managed by Ember Data.  Thats a reasonable architecture thats general enough to work for most large web applications (Embers target).</p>\n<p>Unfortunately examples of innovation in this area are much more sparse than the others here, probably because it’s hard to demonstrate in a todo app.  There’s been a recent spate of interest in application architecture from all of the Flux implementations that have popped up for React apps.  I’ve also seen interest in the architecture model of <a href=\"http://elm-lang.org/\">Elm</a>.  But most of the major MVC frameworks have much less community agreement on architecture than they do on smaller scoped issues.</p>\n<h4>Easy to Maintain</h4>\n<p>There are a lot of technologies around JavaScript that promise to make your code more maintainable.  Module loaders like requireJS, browserify and webpack, linters like ESLint and JSHint, type checkers like TypeScript and Flow, and test runners like Mocha and Karma all provide tooling around maintainability.</p>\n<p>At the framework Backbone addresses the idea of maintainability by keeping small and flexible enough to remain usable as requirements change.  React deals with it by simplifying the programming model enough that its easier for new developers to see whats going on.  And Ember deals with it by maintaining a disciplined process for continually improving the framework to “keep up with the web” without leaving developers behind.</p>\n<h4>Easy To Debug</h4>\n<p>In recent years a lot of work has gone into improving developer tools for debugging JavaScript. This has happened at 3 levels.  First browser vendors, especially Google and Mozilla,  have made a huge investment in improving the developer tools that ship with browsers.  It’s now possible to identify many errors quickly that would have been mere guesswork before.  Secondly, frameworks have worked on building their own developer tools.  React and Ember both have incredibly powerful debugging tools with first class support from the framework team.  Marionette (a framework for Backbone apps) has a similarly rich debugging tool, and Angular also has tools for debugging.  Finally, linters and transpilers are also helping to catch some classes of errors at compile time rather than waiting to discover them at run-time.</p>\n<p>Other than tools though, Frameworks can have some features that make them easier or harder to debug.  React and Angular both make a big deal of being easy to write tests for.  In Angular this is true because of their dependency injection system.  In React this works out because React components are basically pure functions that take state and properties and return DOM.  Pure functions are easy to test, especially compared to traditional UIs that are tied to the global mutable DOM. Backbone also contributes to easier debugging by presenting a relatively straightforward and readable source that developers can trace through without becoming baffled by “library mystery meat”.</p>\n<h3>Choices, Choices</h3>\n<p>When picking a toolset in JavaScript it’s helpful to think about all 6 of the above areas.  Any library or framework that has gotten past the minimum threshold of solving a problem will claim to help you in at least one of these areas.  But a useful comparison will run across all six.  What do you think are the best tools for a truly productive workflow in the JavaScript community today?</p>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        Not saying that this is the best way to make things easy to learn, just that it is a goal.\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n</ol>\n</div>","fields":{"slug":"/2015/11/25/productive-javascript-development"}}},{"node":{"frontmatter":{"readNext":"following-js-roadmap,jest-git,orthogonality-css-js","topics":["javaScript","career"],"category":"javascript","key":"ten-things-js","title":"Ten Things A Serious JavaScript Developer Should Learn","description":"Some of the important things to pick up in the JS world","layout":"post","path":"/2017/07/19/ten-things-javascript/","date":"2017-07-19T04:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>There’s been an interesting Reddit thread circling my corner of the internet for the last week or so. It started with a question:</p>\n<blockquote>\n<p>I’m inviting pure opinion here, but what’s your list of ten things that everyone looking for a good javascript role should know and understand. Personally, I’m in a role where what I know is adequate, but I want to be somewhere better; somewhere that has some flippin standards. I’m learning outside of work requirements at the moment, but there is so much to learn out there.\nThe objective is to do good work in a good place.\nNarrow it down to your ten for me, or for you..\n<em>- From <a href=\"https://www.reddit.com/r/javascript/comments/6mlc9d/what_10_things_should_a_serious_javascript/\">“What 10 Things Should a Serious Javascript Developer Know Right Now?”</a></em></p>\n</blockquote>\n<p>I think this is a great question if you take it seriously, because when you think about it critically, it exposes all of the things JavaScript don’t really <strong>need</strong> to know.  Can you contribute productively as a mid-level JavaScript developer without knowing anything about <a href=\"https://github.com/prettier/prettier\">Prettier</a>, <a href=\"https://www.typescriptlang.org/\">Typescript</a> or <a href=\"https://facebook.github.io/react/\">React</a>?  Sure!  Can you contribute productively if you’re writing and testing your JavaScript using <em>&#x3C;awful uncool code editor that you the reader can’t stand></em>?  Definitely.  So here’s my take on answering the question.</p>\n<h2>Assumptions</h2>\n<p>I’m making the following assumptions about the question</p>\n<ol>\n<li>\n<p>I’m assuming the audience is a developer who has some level of professional programming experience and some existing JavaScript experience, and that they are primarily interested in “code skill” answers. Thus I’ll exclude things like communication ability, experience with version control, professional conduct, or basic coding ability that are very important to success in a JavaScript development environment but are out of the scope of this question.</p>\n</li>\n<li>\n<p>I’m optimizing for “what specific pre-existing knowledge will make the most difference between success and failure for a new hire in a mid-level JavaScript role”.  </p>\n<p><strong>Pre-existing</strong> means that these are things that somebody is expected to know before taking the job.  Learning the details of a company’s technology stack, style guide and engineering philosophy are all important, but you shouldn’t be expected to know them in advance, and in many cases doing so is impossible.</p>\n<p><strong>Specific knowledge</strong> means that these are things that you can learn with some effort and study.  They should not be broad categories like “security”, “design”, or “server-side development”.  They  should be things you know or know how to do, not things you “have experience with”.  And they should be specific enough that somebody can feel comfortable saying they understand the topic or don’t. Most of the things I list below are <em>topics</em>, but I try to lay out a specific set of things that you would need to know to understand it.</p>\n<p><strong>The most difference between success and failure</strong> means that these are the things that are really going to make a difference in how effective you are at understanding and completing the work assigned to you.  There are many such things, and their importance will vary situationally, so this is just my educated take on a generalists list.  </p>\n<p>When I say <strong>mid-level</strong>, I’m picturing hiring for a role that pays well but is not the most senior person on the team.  This would be a developer who would be expected to complete tasks with minimal help and oversight but wouldn’t necessarily be planning the architecture of everything right off the bat.  To be clear this list is not a set of things that you need to go to get paid to write JavaScript.  It is more along the lines of “next steps” for junior devs.  Its also not a step function where you need to know all of these at once to get to the next level.  These are just things that may limit you if you don’t have them.</p>\n<p>I’m taking the liberty to assume that <strong>JavaScript role</strong> implies using JavaScript in some sort of client/UI environment (Browser, React Native, Cordova, Electron, etc).  This list would be at least a bit different for a Node.js server-side role, and somebody else will have to write that post.</p>\n</li>\n</ol>\n<h2>The List</h2>\n<h4>1. You should know the core language</h4>\n<p>JavaScript is not a very complicated language at its core.  It can seem difficult to learn because of all of the noise around it.  Browser APIs, Library APIs, jQuery, React, TypeScript, the many npm packages out there, etc all can make the language syntax space seem huge.  And this isn’t helped by the fact that the language has evolved over time so you’ll see many different ways to do a single task spread out over the internet.  But the core language and standard libraries are actually pretty small compared to languages like Python and Java that have more features and larger standard libraries.  Eventually you’ll need the ecosystem.  But knowing the core language features that are implemented in most browsers is a great start.  </p>\n<p>This means you should know about basic language features like if/else, error handling with throw/try/catch, array manipulation with push/map/reduce/filter, and string manipulation methods like replace/slice/split.  You should also know about how JavaScript handles things like truthiness and falsiness<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, how to work with JSON data with the JSON object methods, and how variable scope works in JavaScript.  These days its also becoming more and more important to have at least a basic familiarity with the more important language features that were added in ES6 like Promises, modules, classes, template literals, generators and destructuring. Even if you choose not to use those features, being able to see and understand them will help you learn faster from others.</p>\n<p>This list is mostly unordered, but this comes first because learning everything else becomes a lot harder without this knowledge, mostly because it becomes difficult to learn from other people’s code since you won’t understand what it is doing.  If you’re starting from a weak base here I’d recommend finding a good book on the core language like <a href=\"http://amzn.to/2uD4R1Y\">Eloquent JavaScript</a><sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> and digging in.  If you’ve been using JavaScript in an older code base or haven’t used it in a while and want to catch up, you can see <a href=\"https://benmccormick.org/2017/07/10/how-to-follow-the-javascript-roadmap/\">my post on keeping up with new language features</a>.</p>\n<h4>2. You should understand async code</h4>\n<p>One of the biggest leaps for new JavaScript developers, even those who are experienced with other languages is the amount of asynchronous code found in idiomatic JavaScript.  Asynchronous (async) code is code that is scheduled to run at a later time after some event, delay or response.  It can appear a bunch of different ways in JavaScript code, and it’s important to be able to interpret them.</p>\n<p>This means learning about <a href=\"https://benmccormick.org/2015/12/30/es6-patterns-converting-callbacks-to-promises/\">callbacks and promises</a> at least.   You should also learn about the JavaScript <a href=\"http://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/\">event loop</a> and how it works  Ideally some of the standard APIs that use them like <a href=\"https://developer.mozilla.org/en-US/docs/Talk:DOM/window.setTimeout\">setTimeout</a> and  <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\">fetch</a>.  If you’re ambitious you can learn about newer async syntax and library implementations like <a href=\"https://ponyfoo.com/articles/understanding-javascript-async-await\">async-await</a> or <a href=\"https://github.com/Reactive-Extensions/RxJS\">RxJS</a> But the most important thing is to spend time using and writing async code so that you get an intuitive understanding of how it works.</p>\n<h4>3. You should get comfortable with at least one set of developer tools</h4>\n<p>When developing JavaScript, its important to be able to debug problems and understand how existing systems work.  JavaScript has a fantastic ecosystem of developer tools for diagnosing bugs and examining application code.  For the most part they’re bundled with browsers (though some IDEs like VS Code and WebStorm have their own debuggers).  Learning how to use these tools well will turbocharge your JS dev skills.  If you can’t use them though, it will make everything much harder.  </p>\n<p>Competence in this means comfort with at least the JavaScript debugger panel of a browser’s devtools.  You should be able to set and use breakpoints, use watch mode and the console to test for the value of expressions, and understand the stack traces. But its also good to get comfortable using the elements panel to understand and manipulate the DOM, and the network panel to debug network requests.</p>\n<h4>4. You should be proficient with JavaScript functions</h4>\n<p>Functions are the core of the JavaScript language.  You should be able to use them fluently.  That means understanding function scope, closures, how <code class=\"language-text\">this</code> works, and the difference between normal functions and arrow functions. It also means knowing about how to process arrays with function using methods like map, filter, and reduce.  A good resource for “thinking in functions” is <a href=\"https://leanpub.com/javascriptallongesix/read\">JavaScript Allonge</a> by Reginald Braithwaite.</p>\n<h4>5. You should be comfortable with basic design tasks</h4>\n<p>No matter how well you learn JavaScript, you’ll be limited career-wise if you can’t manage basic design tasks.  This might not seem inherently true; after all isn’t that what professional designers are for?  But the truth is that unless you’re a purely server-side developer (excluded by our assumptions above), there will be times when you’re asked to fill in a visual gap that a designer doesn’t have time for, or there will be ambiguities in a designers spec that aren’t worth a meeting.  And learning the basics of design will help you communicate better with designers and product managers about technical constraints and design requirements.  </p>\n<p>When I talk design, I mean both the basics of implementing a visual design with HTML and CSS<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, and enough of an understanding of design basics to create a simple UI that looks ok and isn’t confusing.  That last requirement is harder than you’d think.  Design is hard and mostly orthogonal to the set of skills most folks pick up while learning to code.  For learning design theory, I’d recommend finding a simple resource on visual design first like <a href=\"http://amzn.to/2uz3vEG\">White Space is Not Your Enemy</a>, and ideally supplementing that with a more UX focused resource like <a href=\"http://amzn.to/2uvUrR7\">Don’t Make Me Think</a>.  The practical side of HTML/CSS is easiest to pick up with experience.  If you’re using devtools you can see what other people are doing with CSS and tweak and explore using the elements panel.  And there are lots of good online resources for learning about CSS and HTML syntax like <a href=\"https://developer.mozilla.org/en-US/\">MDN</a> for API info or <a href=\"https://css-tricks.com/\">CSS-Tricks</a> for ideas, tutorials and keeping up with new stuff.</p>\n<h4>6. You should have a basic understanding of networking and HTTP-based APIs</h4>\n<p>Because we’re assuming that this job involves using JavaScript in a browser or other client context, you should be able to understand the basics of networking.  You should know what a client and server is.  You should be able to explain a rough approximation of what happens when somebody enters a URL into the browser<sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>. There’s a bunch of vocabulary thats good to know here. You should know what an HTTP request is and ideally know the conventions of what GET/PUT/POST/DELETE imply.  It will help you to have a working definition of what REST is and what AJAX is. It’s good to get experience working with some HTTP based APIs, either at work or playing around with an API like <a href=\"https://dev.twitter.com/rest/public\">Twitter</a> or <a href=\"https://developer.github.com/v3/\">Github</a>.  You should also get familiar with at least one way to make HTTP requests in JavaScript (XMLHttpRequest, fetch, jQuery’s ajax methods).  </p>\n<h4>7. You should be comfortable with Node.js based tooling</h4>\n<p>One of the biggest shifts in the last 5 years in the JavaScript world has been the explosive growth and consolidation of tools to help build JavaScript applications.  Tools like <a href=\"http://eslint.org/\">eslint</a>, <a href=\"http://babeljs.io/\">Babel</a>, <a href=\"https://www.typescriptlang.org/\">Typescript</a>, and <a href=\"https://webpack.js.org/\">Webpack</a> are essential to many teams workflows.  While you don’t necessarily have to be experienced writing applications for Node.js, it is important that you be able to use those tools.  That means knowing how to install Node and use npm to install and update packages.  It also means getting comfortable with build tools like Webpack, Rollup or Ember CLI and knowing how to use them.  Reasonable people can differ on how many tools and libraries you should be using, or what the right ones to use are, but having a basic familiarity with how the Node ecosystem works has become essential.</p>\n<h4>8. You should know how to use a framework to structure a moderately sized program</h4>\n<p>A critical requirement for a developer who is expected to complete work with minimum supervision or hand-holding is the ability to structure their code in a maintainable way.  That means having an understanding of (or helping define) the overall architecture of the system, and then writing code that fits into it.  It also means being able to identify and help solve situations where the current architecture or code base norms causes problems.  I put this in terms of frameworks because pretty much all medium to large JavaScript programs are using some sort of framework, whether it is an “official” framework like React, Angular, and Ember or a collection of helper files and functions cobbled together by a development team over time.  For learning purposes, the popular official frameworks will usually be better to learn, since the knowledge can translate elsewhere, the purposes behind the structure are documented on the internet, and at least some sense of best practice architecture should be embedded in the code.  To check this box I think it would be best to get experience with at least 2 frameworks/architectures, since it is difficult to tell which decisions a Framework makes are specific to its architecture and constraints without something to compare it with.</p>\n<p>This is probably the most controversial item on this list, since I know a lot of folks believe it’s better to learn architecture ideas outside the constraints of a framework.  My stance here is that frameworks are practical: they’re most likely to translate to an actual employment background and it’s easy to find practical explanations of how they solve architecture problems.  </p>\n<h4>9. You should know the basics of JavaScript program performance</h4>\n<p>Like design, performance is a deep well of things you can learn.  But knowing the basics is important and can go a long ways.  For performance “the basics” is more about process than knowledge.  You need to learn how to debug slow processes and understand where the problems are coming from.  For browser environments in particular there are some baseline things to understand.  You’ll want to be able to tell the difference between code that is running slowly due to parsing slowness, runtime slowness, and network latency.  It’s important to learn how to keep a UI responsive and not block rendering with other calculations.  And it’s great to understand how to cache data and avoid making too many requests to the server.  </p>\n<p>This is also an area where learning more about Computer Science theory can be beneficial.  Studying data structures and algorithms can help give you good intuitions on how to handle data, and learning about Big O notation gives you a language for discussing performance tradeoffs.  This is the type of background knowledge that pays off in occasional subtle ways though, not something that is always obvious applicable in the moment.</p>\n<h4>10. You should have a process for learning new things</h4>\n<p>JavaScript development has changed a lot over the last 10 years, and there’s no reason to think it won’t continue to evolve over the next 10.  There are also a lot of different technologies that fall under the umbrella of JavaScript, more than any one person can keep in their head.  So it’s important to be able to keep up with the new technologies as they come along, and also learn about new technologies quickly when you need them.  Ideally this means having at least one place where you can follow news about new JavaScript innovation.  Could be Twitter, a set of blogs, newsletters or an aggregator site like Reddit or Hacker News.  If you’re looking for an easy place to start, I’d recommend the <a href=\"http://javascriptweekly.com/\">JavaScript Weekly mailing list</a>.  </p>\n<p>You also need to get comfortable finding information about specific technologies, either to learn to use them or troubleshoot problems.  These resources will likely be more varied, but it’s important to learn to <a href=\"https://xkcd.com/627/\">Google well</a>, and also helpful to get familiar with <a href=\"http://stackoverflow.com/\">Stack Overflow</a> or some other resource for getting help when you have specific questions or problems.  </p>\n<hr>\n<p>Do you have a different list?  Feel free to post it and then link in the comments!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>If you don’t learn all the pitfalls here, at least learn that there are pitfalls.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Disclosure: Some of these book links are affiliate links</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or SASS/LESS/CSS in JS/whatever</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>This can be explained at several levels, but its good to at least know that a request is sent from the users computer to a server somewhere, and that server returns resources like HTML, CSS, JS, and image files.  </p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/07/19/ten-things-javascript/"}}},{"node":{"frontmatter":{"readNext":"codemod-survival,ten-things-js,es6-the-bad-parts","topics":["javaScript"],"category":"javascript","key":"code-golf-array-holes","title":"Code Golf: Sparse Arrays","description":"Solving a fun little coding challenge","layout":"post","path":"/2018/06/19/code-golf-sparse-arrays/","date":"2018-06-19T06:00:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>Today on Twitter, <a href=\"http://2ality.com/index.html\">Axel Rauschmayer</a> posted a fun little coding challenge:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">Code golf: check if an Array has holes. I’ll reply with two ideas of mine in a few minutes.</p>&mdash; Axel Rauschmayer (@rauschma) <a href=\"https://twitter.com/rauschma/status/1009053456123027463?ref_src=twsrc%5Etfw\">June 19, 2018</a></blockquote>\n<p>For context, <em>code golf</em> is a type of challenge where participants attempt to find the shortest possible way to express a program.  Arrays that have holes, or sparse arrays, refer to arrays that don’t have values at every index between their maximum and minimum values.  You can define a sparse array like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// arr.length is 100</span></code></pre></div>\n<p>or like this</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// arr.length is 3</span></code></pre></div>\n<p>This is different from <code class=\"language-text\">let arr = [1, undefined, 2]</code>, because the index keys are not defined.  If this is difficult to understand, you can picture arrays as simple objects, with access to the <code class=\"language-text\">Array.Prototype</code> methods and a special <code class=\"language-text\">length</code> property that is aware of numeric keys.  The important thing is not whether a value is defined for a specific index, but whether a key was ever explicitly set.  Axel’s suggested solutions take advantage of that distinction:</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">// Does someArray have holes?<br><br>someArray.findIndex((x,i,arr) =&gt; x === undefined &amp;&amp; !(i in arr)) &gt;= 0<br>Object.keys(someArray).length &lt; someArray.length<br>someArray.filter(_ =&gt; true).length &lt; someArray.length</p>&mdash; Axel Rauschmayer (@rauschma) <a href=\"https://twitter.com/rauschma/status/1009056501095428096?ref_src=twsrc%5Etfw\">June 19, 2018</a></blockquote>\n<p>I’m going to standardize these into a function syntax for the purpose of comparison.  I’m only going to consider one liners, so we’ll define a simple arrow function <code class=\"language-text\">isSparse</code>, and compare the length of the function bodies.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Solution 1</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">someArray</span> <span class=\"token operator\">=></span> someArray<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span>\n<span class=\"token comment\">// Solution 1 condensed (49 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>x<span class=\"token operator\">===</span><span class=\"token keyword\">undefined</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>i <span class=\"token keyword\">in</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span><span class=\"token number\">0</span>\n<span class=\"token comment\">// Solution 2</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">someArray</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>someArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> someArray<span class=\"token punctuation\">.</span>length\n<span class=\"token comment\">// Solution 2 condensed (30 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length\n<span class=\"token comment\">// Solution 3</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">someArray</span> <span class=\"token operator\">=></span> someArray<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> someArray<span class=\"token punctuation\">.</span>length\n<span class=\"token comment\">// Solution 3 condensed (33 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token operator\">=></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p>Axel’s solutions all rely on the fact that sparse items don’t have keys, and that Object.keys and Array.prototype methods therefore don’t iterate over them.  That’s a good insight and a good foundation for getting even more concise.  We can use a few tricks to do that.</p>\n<p>Let’s start with his second solution, which was the shortest and clearest in practice and modify it a bit</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// We're comparing the length of the list of keys to the array length</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length\n<span class=\"token comment\">//But we can use reduce to do this instead (28 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span></code></pre></div>\n<p>So our first step is to use <code class=\"language-text\">reduce</code> to save 2 characters.  If you haven’t seen <code class=\"language-text\">reduce</code> before, I recommend checking out <a href=\"https://css-tricks.com/understanding-the-almighty-reducer/\">this great explainer</a> by Sarah Drasner that I linked to in my <a href=\"https://benmccormick.org/2018/06/15/weekly-links-06-15-18/\">Weekly Links post</a> last week.  Essentially though, reduce is a generic method for iterating through an array to produce a new value.  It takes a function and an initial value, and uses the items of the array to iteratively transform the initial value.  In this case, I’m just decrementing the value for each defined item in the array, starting at length and seeing if it equals 0.  Which ends up being shorter than taking the length of the keys array.  But we can still do better!</p>\n<p>Our next step will take advantage of a property of numbers in JavaScript.  When converting numbers to booleans, <code class=\"language-text\">0</code> is considered <em>falsy</em>, while every other number is considered <em>truthy</em>.  Since we want our function to produce a boolean, we can take advantage of this property, and write our function like this.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Boolean version (27 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span></code></pre></div>\n<p>That seems like a bit of a local maximum.  But getting to this point made me realize that we weren’t actually saving anything by using the boolean version over a comparison, since we can increment instead and end up at the same length.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Counting up to length (27 characters)</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p><del>Doing it this way though, we can actually save 2 more characters, because if reduce doesn’t have an initial value, it just uses the unmodified first element in an array as its initial value, and goes from there:</del></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Final (broken) Version (25 characters)</span>\n<span class=\"token comment\">// UPDATE: This doesn't work</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">isSparse</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span>x<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span>a<span class=\"token punctuation\">.</span>length</code></pre></div>\n<p><strong>Update: This last solution only works in situations where the array starts with <code class=\"language-text\">1</code>.  So 27 is the best generic solution I can find at this point.  Thanks to <a href=\"https://twitter.com/rauschma/status/1009149034622275585\">Axel</a> for correcting me. Code golf is hard 😔.</strong></p>\n<p>So there you have it.  27 characters to identify sparse arrays.  I’d love to hear from you if you can do better.  Hit me up on <a href=\"https://twitter.com/_benmccormick\">Twitter</a> or by <a href=\"ben@benmccormick.org\">email</a>.</p>","fields":{"slug":"/2018/06/19/code-golf-sparse-arrays/"}}},{"node":{"frontmatter":{"readNext":"mobx-first,ten-things-js,following-js-roadmap","topics":["javaScript"],"category":"frameworks","key":"mobx-state-machine-flags","title":"MobX Patterns: State Machines & Flags","description":"Getting the best of state machine and flag patterns","layout":"post","path":"/2018/05/14/mobx-state-machines-and-flags/","date":"2018/05/14","dontfeature":null,"isDraft":null},"html":"<p>A few weeks ago, I was listening to the <a href=\"https://changelog.com/reactpodcast\">React Podcast</a>, specifically their <a href=\"https://changelog.com/reactpodcast/5\">episode on State Machines</a> with <a href=\"https://twitter.com/davidkpiano\">David Khourshid</a>.  About 20 minutes into the podcast, there was a discussion on the benefits of using enums over flags to model the state of objects that can change across multiple dimensions.  It reminded me of one of the nice patterns that <a href=\"https://mobx.js.org/\">MobX</a> makes possible, and I thought I’d share it here.</p>\n<h3>Background</h3>\n<p>To set the stage here, the podcast discussion centered around modeling an async process like a promise. One possible way given was to use a mix of flags and if statements like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isLoading <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>using one of these objects might look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show error state</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show loading state</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show data State</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In the podcast David Khourshid criticized this as a haphazard way to manage state, that doesn’t show the whole picture.  Because we can’t easily see how the various flags combine, it’s tough to keep track of all possible states.  For instance, in the above example, did we really want to show the error state if we had an error, but have called <code class=\"language-text\">load()</code> again and both <code class=\"language-text\">hasError</code> and <code class=\"language-text\">isLoading</code> are now true?  Maybe that was the intention, but maybe that was just a state that was missed during the original construction of the program.  It’s hard to tell.  </p>\n<p>As an alternative to full blown state machine modeling, David advocated for an easy first step of swapping out flags for enums.  In that case the code above might look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token constant\">STATES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">INITIAL</span><span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOADING</span><span class=\"token operator\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOADED</span><span class=\"token operator\">:</span> <span class=\"token string\">'loaded'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INITIAL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">LOADING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOADED</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">LOADING</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">LOADED</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token constant\">ERROR</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>with usage like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show error state</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOADING</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show loading state</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOADED</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show data State</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INITIAL</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show blank state</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can see just from using an enum, we’ve cleared some ambiguity: now it is clear that we should be showing a loading state when we’re loading data, even if a previous load resulted in an error.  And we’ve also been forced to remember another state distinction that was missed originally, the difference between a successful load and the initial state before load is called.  This type of Enum-based approach is really helpful for modeling complex systems and especially async process state. But it’s not perfect.  While ENUMs are great for listing out every possible state, sometimes we just need to know if an object is in a particular state.  For instance, we might have a special help-prompt component that should only show if our data is in an error state, but is otherwise divorced from the details of the data.  In that case <code class=\"language-text\">loader.hasError</code> is simpler and  cleaner than <code class=\"language-text\">loader.state === STATES.ERROR</code>.  It’s a straight forward named expression that doesn’t require importing a constant from another file or matching up to a string value.  Enums add some verbosity and ceremony to code that can otherwise be very simple.  Fortunately MobX allows us to have our cake and eat it too.</p>\n<h3>MobX</h3>\n<p>MobX is a state management solution created by <a href=\"https://twitter.com/mweststrate\">Michael Weststrate</a>.  It grew out of the React community but can be used with other frameworks or on it’s own.  One of its nicest features are its intelligently updated <a href=\"https://mobx.js.org/refguide/computed-decorator.html\">computed properties</a>.  With MobX we can write our loader object like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>extendObservable<span class=\"token punctuation\">,</span> computed<span class=\"token punctuation\">,</span> action <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">INITIAL</span><span class=\"token operator\">:</span> <span class=\"token string\">'initial'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOADING</span><span class=\"token operator\">:</span> <span class=\"token string\">'loading'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">LOADED</span><span class=\"token operator\">:</span> <span class=\"token string\">'loaded'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// loading object</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleLoader</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">INITIAL</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOADING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ERROR</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">extendObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          state<span class=\"token operator\">:</span> <span class=\"token constant\">INITIAL</span><span class=\"token punctuation\">,</span>\n          isLoading<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token constant\">LOADING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          hasError<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">===</span> <span class=\"token constant\">ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          updateState<span class=\"token operator\">:</span> <span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//fetch data from server and return it here</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">async</span> <span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span><span class=\"token constant\">LOADING</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">ERROR</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOADED</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOADING</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">LOADED</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateState</span><span class=\"token punctuation\">(</span><span class=\"token constant\">ERROR</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we have both our state enum, and we can check specific properties.  So both of the below examples work:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// ENUM example</span>\n<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">ERROR</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show error state</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOADING</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show loading state</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">LOADED</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show data State</span>\n  <span class=\"token keyword\">case</span> <span class=\"token constant\">STATES</span><span class=\"token punctuation\">.</span><span class=\"token constant\">INITIAL</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n  <span class=\"token comment\">// show blank state</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//Flags example</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loader<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// show help component</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And because MobX takes care of the details of efficiently updating our flags based on state, we know everything will stay in sync and remain performant, without a bunch of ugly code to make sure of that.</p>","fields":{"slug":"/2018/05/14/mobx-state-machines-and-flags/"}}}],"topic":"javaScript"}},"staticQueryHashes":[]}