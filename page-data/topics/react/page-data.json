{"componentChunkName":"component---src-templates-topic-page-js","path":"/topics/React","result":{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"mobx-first,mn-series,backbone-eco","topics":["Backbone","React","Marionette"],"category":"frameworks","key":"backbone-devs-react","title":"Lessons Backbone Developers Can Learn From React","description":"A look at the lessons that Backbone developers can learn from React","layout":"post","path":"/2015/09/09/what-can-backbone-developers-learn-from-react","date":"2015-09-09T11:19:43+00:00","dontfeature":null,"isDraft":null},"html":"<p>Since I started programming professionally, I’ve always kept an informal list of technologies I want to check out.  Things that I thought would be useful for my career, would expose me to new ideas, or just looked plain cool.  I spent a chunk of my Labor Day weekend working through that list a bit by learning more about <a href=\"http://facebook.github.io/react/\">React</a>, the JavaScript View library from Facebook. React is a fascinating piece of technology, and a strong ecosystem of tools and libraries is growing up around it.  For developers starting brand new front-end projects in 2015, it ranks as one of the 2 main libraries I’d suggest looking into as a base, along with <a href=\"http://emberjs.com/\">Ember</a>.  Most developers though are not starting brand new projects.  We’re maintaining existing code, or starting a new project while trying to reuse components of an old one.  Fortunately, React is about ideas as much as it is technology.  For this piece, I’m going to go through the big ideas of React and look at 3 of them that developers working on other frameworks (and <a href=\"http://backbonejs.org/\">Backbone</a> in particular) can learn from.  There’s a lot more to React and its community than just these 3 ideas, so I’ll also include some extra resources at the bottom for those interested in learning more about it.</p>\n<h3>Idea 1: Interfaces should be a tree of composable components</h3>\n<p>React interfaces are constructed by combining many small “components”, each of which can be created by combining other smaller components.  In the end a normal React interface will resemble a tree, with a top level component that encompasses the whole app and many smaller components nested inside of it.  It’s a model that should be familiar; the browser DOM works the same way.</p>\n<p>Building interfaces this way lets you reuse more code and also makes code easier to reason about.  Because you’re composing your interfaces rather than using inheritance or monolithic page objects to build your pages, you can write common code for items like buttons, date-pickers and lists once and then re-use them all over place, even creating larger components like a dialog box out of smaller components like buttons, inputs and an overlay.  And since components are small and focused, it’s much easier to dive into them and understand what is going on.  Since react components are built to work in this standardized ways, you can be comfortable knowing that no other code is going to be changing the area of the UI controlled by that component.</p>\n<p>Backbone doesn’t enforce a specific way to organize your UI code.  You can create a single Backbone View for a whole page, have different non-nested views control different portions of a page, or use a nested scheme.  For simple sites or apps, each of these can make sense.  You probably don’t need a nested component tree for a simple content page with one or two pieces of interactive behavior.  But for large rich apps, small composable Views (or other building blocks) can provide much more flexibility, allowing you to mix and match pieces of your application to build diverse pages without becoming overwhelmed with code.</p>\n<p>Building this sort of tree system in Backbone is one of the main selling points of <a href=\"http://marionettejs.com/\">Marionette</a>, the most popular of several libraries that add conventions on top of Backbone’s structure.  Marionette provides collection Views and layout Views that <a href=\"http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/\">let you build rich View trees</a> that are very similar in structure to a React app, while maintaining compatibility with Backbone’s code and the Backbone communities conventions.  It’s also possible to compose an applications interface with a mix of Backbone and other “components”; for instance using <a href=\"http://webcomponents.org/\">web components</a>, React Components, or even jQuery UI widgets to represent individual pieces in an application and then tying together their layout using Backbone Views.   </p>\n<p>That’s not to say there are no problems with implementing this style in Backbone though.  For one thing, when nesting one Backbone view inside of another, Backbone does not provide strong encapsulation of child views.  Because Backbone Views act on HTML directly, when a parent view listens to an event or modifies HTML directly, it is possible for the view to listen to events on elements controlled by a child view and even modify those elements directly.  That can create confusing side effects, since in a deeply nested view tree it means an event could lead to code being triggered in one of many different Views, and the state of that piece of DOM could be affected by many different areas of code at once.  In Backbone these problems must mostly be solved with programmer discipline, a weight that adds to the difficulty of deeply nested UIs, but doesn’t prevent them.</p>\n<h3>Idea 2: Modern JavaScript leads to cleaner code</h3>\n<p>Using modern JavaScript is less a core idea of React, and more a value of its community.  When researching React, almost every example of React code I found was written using <a href=\"https://babeljs.io/docs/learn-es2015/\">ES6 style JavaScript code</a> and a modern module system (commonJS or ES6 modules using either <a href=\"https://webpack.github.io/\">webpack</a> or <a href=\"http://browserify.org/\">browserify</a>).  Many React developers are even pushing the boundaries of todays browsers and standards and experimenting with how their code could be improved by proposed ES7 features.  I rarely see Backbone code examples using these styles.  They’re usually in ES5 style or <a href=\"http://coffeescript.org/\">Coffeescript</a> and use AMD modules or global namespaces to structure code.  Some of this is a natural function of the hype cycle: most Backbone code examples were written 3-4 years ago when it was the hot new JavaScript framework, while most React examples are written now.  But the net result is that most people who use Backbone today aren’t being exposed to these new styles and tools.  Since things like JavaScript APIs and module loaders can be chosen separate from what framework you choose <sup id=\"fnref:1\"><a href=\"#fn:1\">1</a></sup>, this is an opportunity to take advantage of innovation from other places without giving up an investment in Backbone.</p>\n<p>Take the following code examples for instance.  This is the same View written in 3 styles: ES5 with namespaces, ES6 and ES7.  Compare the readability and usability in each case.  The example is just a simple view that takes a template, logs a message when it is created and shows a different modal when 2 different buttons are clicked, with a callback function after the modal is closed.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES5 with namespaces</span>\n<span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">App<span class=\"token punctuation\">,</span> Backbone<span class=\"token punctuation\">,</span> Modal<span class=\"token punctuation\">,</span> _</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    App<span class=\"token punctuation\">.</span>ExampleView <span class=\"token operator\">=</span> Backbone<span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n        template<span class=\"token punctuation\">:</span> App<span class=\"token punctuation\">.</span>templates<span class=\"token punctuation\">[</span><span class=\"token string\">'exampleview'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">events</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showSuccess'</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showError'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">constructor</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Backbone<span class=\"token punctuation\">.</span><span class=\"token function\">View</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">render</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">showSuccess</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">showError</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">showModal</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> title</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> title <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                title <span class=\"token operator\">=</span> <span class=\"token string\">'Alert'</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onModalClose</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token function-variable function\">onModalClose</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>App <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> Backbone<span class=\"token punctuation\">,</span> Modal<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Obviously the scenario is a bit contrived here (we’d want to generalize any logging in the constructor in real life, and we would listen for model changes to re-render rather than just blindly doing it in a callback).  But notice how many confusing things are going on that are completely incidental to what the code is doing.  A JavaScript beginner would have a lot to work through in this example.  Why is the whole file wrapped in a function?  Where do Backbone and Modal come from?  What’s going on with <code class=\"language-text\">Backbone.View.apply(this, [].slice.call(arguments));</code>?  That’s even aside from the incidental complexity of having to know what order your files are loaded in when using this particular module style.  We can do so much better.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES6</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>View<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> Backbone<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'utils/modal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>template<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ExampleViewTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'templates/exampleview'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ExampleView <span class=\"token operator\">=</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">extend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    template<span class=\"token punctuation\">:</span> ExampleViewTemplate<span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">events</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showSuccess'</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'showError'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">View</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Alert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>ES6 allows us to clean up our original example a lot!  We’re able to ditch the wrapping function, and instead pull our dependencies directly at the top of the file, with clear pointers to module paths so that new developers can easily go find the code we’re referencing.  At a smaller level, we’ve cleaned up many of the annoyances from the original code.  We no longer have to slice arguments; instead we can use the rest operator to collect all of the arguments as an array and pass them to the constructor directly.  Similarly, we don’t need to explicitly check for undefined anymore in showModal since we can display default arguments.  Finally, we can get rid of some function boilerplate, removing the function keyword completely for object methods and changing the <code class=\"language-text\">bind(this)</code> from onModalClose to use an ES6 lambda function.  All of this is helpful, and represents the best of what is stable for production at the moment.  But if we want to look ahead to the current proposed ES7 additions, we’ll be able to clean this code up even more.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//ES7</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>View<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> Backbone<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Modal <span class=\"token keyword\">from</span> <span class=\"token string\">'utils/modal'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>template<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> ExampleViewTemplate <span class=\"token keyword\">from</span> <span class=\"token string\">'templates/exampleview'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExampleView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">View</span> <span class=\"token punctuation\">{</span>\n\n    template <span class=\"token operator\">=</span> ExampleViewTemplate<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Created a Example View'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$el<span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token function\">template</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>template<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>model<span class=\"token punctuation\">.</span>attributes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .example-button'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showSuccess</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You did it'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    @<span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click .example-button2'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">showError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span><span class=\"token string\">'You failed'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">showModal</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token operator\">=</span><span class=\"token string\">'Alert'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Modal<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>onModalClose<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">onModalClose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'re-rendering after modal closes to capture any changes'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ES7 allows us to clean up more boilerplate using classes <sup id=\"fnref:2\"><a href=\"#fn:2\">2</a></sup>, static properties, and <code class=\"language-text\">::</code> as a special shorthand for function binding.  But it also allows us to start actually improving the interface of Backbone itself.  The example above uses decorators to define extra behaviors that wrap the View’s methods. In this case decorators <a href=\"http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\">allow us to contextualize the events to function mapping</a> for our View, improving on the default events hash that Backbone provides.  There are many examples of similar convenient conventions that are being experimented with in the React community. Backbone developers can learn a lot here by looking through React code.  Since React components are syntactically similar to Backbone Views (even though the underlying model is quite different), it’s easy to learn a lot of new JavaScript techniques that can be used in Backbone in the process.</p>\n<h3>Idea 3: Don’t use DOM as a source of state</h3>\n<p>The final big idea that Backbone developers can learn from React is its insistence on not using the DOM as a source of state.  React encourages a programming model where in theory, any component can be re-rendered at any time based on a change in data.  That means that any UI state must be captured in code and not in the UI.  This is another approach that requires programmer discipline in Backbone.  It means that instead of just typing out <code class=\"language-text\">this.$(&#39;.main-content&#39;).addClass(&#39;highlighted&#39;)</code>, you’ll want to set an <code class=\"language-text\">contentIsHighlighted</code> variable somewhere and then either re-render your view or do a structured update based on your state.  That way, instead of having to read the DOM later to know the state of your application it is all copied in code.  This leads to better testability, more predictable code and fewer edge cases when the structure of your HTML changes.  </p>\n<p>This idea was historically the primary benefit for Backbone apps over pure jQuery applications.  But the truth is that while Backbone does a good job of pulling application data into code with models and collections, it makes it very tempting to encode UI state info in the DOM by exposing jQuery helpers and not providing a canonical way to store view state.  Still, a little discipline goes a long way.  By using a separate Backbone Model as a view-model or just storing your state as properties on the view object itself, you can pull your state out of the DOM and make it much easier to inspect and reason about when you’re debugging your code or trying to refactor.</p>\n<p>You probably can’t take this idea to the full extent that React takes it using Backbone.  The extreme end of the React philosophy is to use React components as stateless functions that simply take application data and ui state as arguments and return an HTML representation of the UI.  This means that React interfaces can be re-rendered completely after any change without losing information.  React supports this and makes it performant by using a “virtual DOM” to generate the new HTML that would result from a data or state change, compare it to the existing HTML, and then only make the changes that are required in the actual DOM <sup id=\"fnref:3\"><a href=\"#fn:3\">3</a></sup>.  That works well in React since it has a clear concept of what is controlled by each component.  As previously noted, Backbone does not strongly encapsulate its Views, which complicates doing the type of virtual DOM analysis that React manages.  So it’s more practical to focus on pulling state out of Views and managing re-renders based on Backbone’s event system (the idiomatic Backbone approach).  If you want to pursue the UI as pure functional programming paradigm, you’d probably do better moving off Backbone to a system designed for that like React, <a href=\"http://cycle.js.org/\">cycle.js</a>, <a href=\"https://github.com/omcljs/om\">Om</a>, or <a href=\"https://github.com/Reactive-Extensions/RxJS\">rxjs</a>.  But even if you can’t go all in on functional UI programming in your current code base, understanding the problems inherent with using DOM to manage state will help you write better Backbone apps.</p>\n<h3>React Resources Round-up</h3>\n<p>If you’re interested in learning more about React, many others have put together better resources than I’m capable of.  Here’s a quick roundup of some of the resources I’ve found helpful.</p>\n<h4>Intro</h4>\n<ul>\n<li>If you want to get a big picture view of what React is about, I’d recommend starting with this <a href=\"https://www.youtube.com/watch?v=x7cQ3mrcKaY\">2013 conference video</a> where a member of the React team, addresses some of the criticisms that React received early on and lays out the ideas behind the library.  Some of the details have changed since, but the big picture view remains.</li>\n<li>The React documentation is also exceptionally well-written and accessible.  This blurb on <a href=\"http://facebook.github.io/react/docs/thinking-in-react.html\">thinking in react</a> is a good place to start.</li>\n</ul>\n<h4>Talks</h4>\n<ul>\n<li>If you want to see some of the nice potential side effects that React can provide <a href=\"https://www.youtube.com/watch?v=xsSnOQynTHs\">this talk</a> by Dan Abramov, the creator of Redux, shows how easy it is to create developer tools that significantly improve a developers feedback loop and user experience while writing code.</li>\n<li>The <a href=\"https://www.youtube.com/watch?v=PAA9O4E1IM4\">keynote from React Europe</a> gives a good feel for the current state of the ecosystem around React.</li>\n</ul>\n<h4>Articles</h4>\n<ul>\n<li><a href=\"http://rauchg.com/2015/pure-ui/\">Pure UI</a> by Guillermo Rauch is the best explanation I’ve read of the benefits of the UI model that React encourages, though it is not specifically about React.</li>\n<li>One of the biggest instinctive objections many developers have when they first see React code is the mixing of JavaScript and the HTML syntax of JSX inside a single file.  <a href=\"https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918\">Eric Elliot has a nice post on medium</a> examining those objections and explaining why JSX makes sense.</li>\n</ul>\n<h4>Projects</h4>\n<ul>\n<li><a href=\"https://facebook.github.io/flux/\">Flux</a> is one of the 2 main data management frameworks that Facebook and the React team recommend for use with React.  The second newer one, <a href=\"https://facebook.github.io/relay/\">Relay</a> is a bit more crazy advanced and requires a very specific type of backend API to implement.  If you’re interested in Flux, also make sure to check out <a href=\"https://github.com/rackt/redux\">Redux</a>, an opinionated flux implementation focused pure functional programming concepts.</li>\n<li><a href=\"https://github.com/rackt/react-router\">React Router</a> is a router for React applications based on Ember’s router.  It provides a nice declarative model for defining routes based on JSX, the JS language extension that Facebook created along with React</li>\n<li><a href=\"https://babeljs.io/\">Babel</a> isn’t a react specific technology, but its important to understand it if you want to digest most of the React examples out there, or build a React app yourself, since it is now recommended as the tool for writing React code in an idiomatic style.</li>\n</ul>\n<div class=\"footnotes\">\n<ol>\n    <li class=\"footnote\" id=\"fn:1\">\n        <p>\n        Well at this point many frameworks are doubling down on \"1st class experiences\" with Babel (React/Ember) or Typescript (Angular2).  But Backbone at least doesn't care what transpilers you use or don't, and the other libraries are all still usable with vanilla ES5 JavaScript.\n        </p>\n        <a href=\"#fnref:1\" title=\"return to article\"> ↩</a></p>\n    </li>\n    <li class=\"footnote\" id=\"fn:2\">\n        <p>\n        Yes I know that classes are an ES6 feature.  But without decorators, using them with Backbone <a href=\"http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/\">is clunky</a>.\n        </p>\n        <a href=\"#fnref:2\" title=\"return to article\"> ↩</a></p>\n    </li>\n        <li class=\"footnote\" id=\"fn:3\">\n            <p>\n            In addition to other performance enhancements if an app is structured in a way that it can be determined exactly which data changed.\n            </p>\n            <a href=\"#fnref:3\" title=\"return to article\"> ↩</a></p>\n        </li>\n</ol>\n</div>","fields":{"slug":"/2015/09/09/what-can-backbone-developers-learn-from-react"}}},{"node":{"frontmatter":{"readNext":"friday-links-11-10-17,ten-things-js,adequate-talk","topics":["React"],"category":"opinion","key":"friday-links-11-10-17","title":"Weekly Links: November 10th 2017","description":"React, Social Media, and Comments","layout":"weekly-links","path":"/2017/11/10/friday-links/","date":"2017/11/10","dontfeature":null,"isDraft":null},"html":"<p>I started this new thing last week, <em>Friday Links</em>.  There’s a <a href=\"https://goo.gl/forms/MwEtFrDwFWzXSRv13\">feedback form</a> if you’re a regular reader and want to tell me what you think of it.  Otherwise, enjoy the links!</p>\n<h3>JavaScript And The Web</h3>\n<p> <a href=\"https://medium.com/javascript-inside/slaying-a-ui-antipattern-in-react-64a3b98242c\">Slaying a UI Antipattern in React – JavaScript Inside</a> - This is an interesting case study of how to work through an architectural problem using React.  I love seeing posts like this that take real world scenarios (I deal with this case of having data that might be in one of several loading states all the time), and identify re-usable patterns for solving them.</p>\n<p> <a href=\"https://jakearchibald.com/2017/netflix-and-react/\">Netflix functions without client-side React, and it’s a good thing - JakeArchibald.com</a> - A nice look at what Netflix’s experience removing client-side react from their landing page means and doesn’t mean.  I’m going to be really curious to see how the JS community gets better at enabling fast initial experiences while still having full rich interactivity when the users need it.</p>\n<h3>Programming Tools and Practices</h3>\n<p><a href=\"https://prettier.io/\">Prettier</a> - Prettier put out a new release this week and now supports Markdown as well as JavaScript, TypeScript, CSS, and GraphQL.  It has been my favorite new tool of 2017, solving a problem I didn’t know I had: the mental overhead of constantly reformatting my own code.  </p>\n<p><a href=\"http://amzn.to/2zvm12Z\">The Pragmatic Programmer - Andy Hunt &#x26; Dave Thomas</a> - Not a new book at all, but I like to recommend it at every opportunity.  It’s my favorite resource on the practice of Software Engineering and well worth checking out if you’ve never read it.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://www.economist.com/news/briefing/21730870-economy-based-attention-easily-gamed-once-considered-boon-democracy-social-media\">Once considered a boon to democracy, social media have started to look like its nemesis - The Economist</a> - This is a wide-ranging take on the downsides of social media with a focus on it’s deleterious effects on our political systems.  If you’re on social media and/or you care about the future of politics in your place of living, it is worth a read.  </p>","fields":{"slug":"/2017/11/10/friday-links/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-12-08-17","title":"Weekly Links: December 8th 2017","description":"React RFCs, Advanced React Componetns, and Moderating Internet scale content","layout":"weekly-links","path":"/2017/12/08/weekly-links-12-08-17/","date":"2017/12/08","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://reactjs.org/blog/2017/12/07/introducing-the-react-rfc-process.html\">Introducing the React RFC Process | React Blog</a> - React is now using a public process for proposing and designing new features, starting with a new context API.</p>\n<p><a href=\"https://blog.neufund.org/why-we-have-banned-default-exports-and-you-should-do-the-same-d51fdc2cf2ad\">Why we have banned default exports in Javascript and you should do the same | Krzysztof Kaczor</a> - This lines up pretty well with my own experience when it comes to native JS modules.  The named exports are pretty much always better than the default ones.</p>\n<p><a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns | Egghead.io/Kent C. Dobbs</a> - This is a new Egghead course on React Component patterns, and is the best “advanced” React resource I’ve seen.  If you’re a React developer, you should either watch it this weekend while it is still free, or pay up to Egghead (it will be behind their subscriber wall starting Monday).  He also released a <a href=\"https://egghead.io/courses/the-beginner-s-guide-to-reactjs\">beginner level React course</a> this week that will remain free.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://stratechery.com/2017/the-pollyannish-assumption/\">The Pollyannish Assumption | Stratechery</a> - Ben Thompson gives a pretty good breakdown here of the problems companies face moderating Internet scale content.  Human beings capable of both greater heights and darker depths than we like to think.  </p>","fields":{"slug":"/2017/12/08/weekly-links-12-08-17/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-11-18","title":"Weekly Links: March 11th","description":"Classic React Links","layout":"weekly-links","path":"/2018/03/11/weekly-links-03-11-18/","date":"2018/03/11","dontfeature":null,"isDraft":null},"html":"<p>Rather than posting random stuff that popped up this week like usual, I wanted to instead post a set of “classic” links instead. The theme this week is Learning React.  Here are some of the links that helped me to learn different React concepts as I was first tackling it.  Note that these are links that helped me learn the concepts behind different parts of the React ecosystem.  Some are intro level, while some assume basic familiarity with the concepts they discuss.</p>\n<h3>The Motivation Behind React</h3>\n<p><a href=\"https://reactjs.org/docs/thinking-in-react.html\">Thinking In React</a> - It’s strange, but I never expect the official docs for a project to be the best explanation of their purpose.  Official documentation tends to lean towards the “how” rather than the “why”, and the motivations of the maintainers aren’t always the motivations of the community anyway.  But this article from the React docs remains the best explanations of the problems that React is solving as well as the way that it solves them.</p>\n<p><a href=\"https://rauchg.com/2015/pure-ui\">Pure UI</a> - Even moreso than <em>Thinking in React</em>, this 2015 article nails the paradigm shift that React represented.  The power of UI as a function of data has been the biggest change I’ve experienced in my career building UIs, and this article was like a message in the bottle from the future when it was first written 3 years ago.</p>\n<h3>Flux, MobX and Redux</h3>\n<p><a href=\"https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207\">A cartoon guide to Flux | Lin Clark</a> - This was a nice early run through of the Flux concepts.  Lin Clark is one of the best “front end explainers” out there, and she does a good job here.</p>\n<p><a href=\"https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8\">The Fundamental Principles Behind MobX | Michael Weststrate</a> - Like most of the other links here, this is a theory link, not a practical introduction.</p>\n<p><a href=\"https://egghead.io/courses/getting-started-with-redux\">Getting Started With Redux | Dan Abramov on Egghead.io </a> - Like <em>Thinking with React</em>, this is a great introduction to a library that starts with the problems to be solved and shows how a new library solves that problem, rather than simply telling you what a tool does.</p>\n<p><a href=\"https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367\">You Might Not Need Redux | Dan Abramov</a> - Another helpful article for understanding what Redux is and isn’t solving for, helpful if you’re trying to decide whether to include it in a project.</p>\n<h3>React Patterns</h3>\n<p><a href=\"https://egghead.io/courses/advanced-react-component-patterns\">Advanced React Component Patterns | Kent C Dobbs on Egghead.io</a> - This is my one paid content link, but its so good that its worth sharing.  This was a fantastic course that covers patterns like Higher Order Components, Render props and more.  It discusses both the implementation concerns and motivation behind each.</p>\n<h3>Future Stuff</h3>\n<p><a href=\"https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b\">React’s New Context API | Kent C Dobbs</a> - This is fairly recent, but Kent Dobbs gave a great explanation of React’s new context API</p>\n<p><a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16 | React Blog</a> - I posted this last week as well, but this is a great inspirational talk on where React is going next.</p>","fields":{"slug":"/2018/03/11/weekly-links-03-11-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-16-18","title":"Weekly Links: March 16th","description":"React Context, Mobx, and Rust","layout":"weekly-links","path":"/2018/03/16/weekly-links-03-11-16/","date":"2018/03/16","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://hph.is/coding/bitmasks-react-context\">Bitmasks and the new React Context API | Haukur Hallvarðsson</a> - A nice rundown of one aspect of the new React Context API that is likely to be familiar to low-level developers but will probably be a new idea to many front end devs: using bitmasks to test a condition.</p>\n<p><a href=\"https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da\">MobX 4: Better, simpler, faster, smaller | Michel Weststrate</a> - MobX continues to be a fantastic state management libary and this update looks like it will make it even better.</p>\n<p><a href=\"https://engineering.linkedin.com/blog/2018/03/how-we-built-the-same-app-twice-with-preact-and-glimmerjs\">Lighter than Lightweight: How We Built the Same App Twice with Preact and Glimmer.js | LinkedIn Engineering</a> - This is a really cool real world comparison of 2 JavaScript frameworks, where they actually built the same app in 2 separate frameworks, with core contributors to each framework involved in the implementation.  To be honest, my main takeaway is that among modern frameworks “framework performance” can be a bit overrated, and not a great reason to choose a specific library or framework, as compared to factors like developer experience, community, and fit with the existing codebase.</p>\n<h3>Rust And WebAssembly</h3>\n<p>I’ve been thinking about taking the time to learn a new language for the first time in a while.  I think WebAssembly and Rust transpiled to WebAssembly in particular are going to become an important part of high performance JavaScript applications and frameworks/libraries.  So I’m starting to check it out.  Here are a few  recent relevant links</p>\n<p><a href=\"https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/\">Making WebAssembly better for Rust &#x26; for all languages – Mozilla Hacks – the Web developer blog</a> - This outlines a plan to improve the developer experience of what I think is the future of WebAssembly in most web apps: interop with JavaScript to improve performance of open source libraries and some core performance sensitive code.</p>\n<p><a href=\"https://github.com/atom/xray\">GitHub - atom/xray: An experimental next-generation Electron-based text editor</a> - A non-webassembly example of using Rust selectively to increase performance of an application built primarily using web technologies.</p>\n<p><a href=\"https://blog.rust-lang.org/2018/03/12/roadmap.html\">Rust’s 2018 Roadmap | Rust Blog</a> - A good rundown of the areas of focus for Rust this year.  I’m particularly interested in their target use cases, since 3 of them (CLI tools, Network Services and WebAssembly/the web) are things that I have built before and will build again.</p>","fields":{"slug":"/2018/03/16/weekly-links-03-11-16/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React","Computer Science"],"category":"opinion","key":"weekly-links-03-02-18","title":"Weekly Links: March 2nd","description":"The future of React, Makefiles, state machines and blindness","layout":"weekly-links","path":"/2018/03/02/weekly-links-03-02-18/","date":"2018/03/02","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html\">Sneak Peek: Beyond React 16| React Blog</a> - This is a preview of where React is going next.  I’m still processing through this, and how I can use it, but Suspense seems like something that will make dealing with async data much easier in React.  Loading states are something I deal with all the time, and having cleaner primitives for expressing them will be a big win.</p>\n<h3>Programming Tools</h3>\n<p><a href=\"http://www.olioapps.com/blog/the-lost-art-of-the-makefile/\">The Lost Art of the Makefile |Jesse Hallett</a> - An interesting case for using Makefiles to manage modern JavaScript builds on projects that don’t need the overhead of webpack.  I don’t think this is going to be the next trend in JS, but I am interested to see where the JS world leans next when it comes to task automation.  When I started using JS, I saw people using Make or tools from other language ecosystems to build projects.  Grunt and Gulp really changed that and moved folks towards using the node ecosystem for task automation.  Now the community seems to have settled on webpack for build related tasks, and npm scripts for everything else.  I’m all good with webpack for builds, it’s complicated but powerful.  But npm scripts are frustrating as a task automation solution.  There’s no ability to comment, and long operations in nested JSON strings are a bit unwieldy.  I’d love to see some standardization on something more like make that allows comments and powerful task composition.</p>\n<h3>Computer Science In JS</h3>\n<p><a href=\"http://raganwald.com/2018/02/23/forde.html\">Forde’s Tenth Rule, or, “How I Learned to Stop Worrying and ❤️ the State Machine” | Reginald Braithwaite</a> - A really nice explanation of state machines, and how they can be used in JavaScript development.  The article is written at a very conceptual level and really explains the topic well.  I was thinking afterwards about how the state machine concepts reminded me of Redux, and fortunately I found another link that expanded on that connection…</p>\n<p><a href=\"https://medium.freecodecamp.org/how-to-model-the-behavior-of-redux-apps-using-statecharts-5e342aad8f66\">How to model the behavior of Redux apps using statecharts | Luca Matteis</a> - I hadn’t heard of statecharts before reading this, but they look like a really interesting tool for talking about large systems.  I’d be really curious to play with the redux middleware for automatically generating them and see if the artifacts it produces are useful.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://mobile.nytimes.com/2018/02/23/opinion/eyesight-going-blind.html\">Am I Going Blind? | Frank Bruni</a> - This is absurdly well written, and it hit me personally since the idea of going blind has always been a personal fear of mine.  I think everybody has their one bad thing that they irrationally fear will happen to them and this is mine.  The article was good perspective in mutliple ways, reminding me how blessed I am and how resilient humans (and our bodies) are.  (Via <a href=\"https://daringfireball.net/linked/2018/02/23/bruni-going-blind\">Daring Fireball</a>)</p>","fields":{"slug":"/2018/03/02/weekly-links-03-02-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-03-16-30","title":"Weekly Links: March 30th","description":"ES Modules, Command Line tools, and Privacy","layout":"weekly-links","path":"/2018/03/24/weekly-links-03-11-30/","date":"2018/03/30","dontfeature":null,"isDraft":null},"html":"<p>A big pile of links for Easter weekend.  Happy Easter everybody!</p>\n<h3>JavaScript and the Web</h3>\n<p><a href=\"https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/\">ES modules: A cartoon deep-dive | Lin Clark</a> - As usual, Lin Clark offers a great approachable explanation of a complex topic.  Here she gets into the weeds of how ES modules are implemented in browsers, and how the module syntax differs from CommonJS.</p>\n<p><a href=\"http://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/\">Redux - Not Dead Yet! | Mark Erickson</a> - A good explainer of where Redux fits into the React landscape today.</p>\n<p><a href=\"https://reactjs.org/blog/2018/03/27/update-on-async-rendering.html\">Update on Async Rendering | Brian Vaughn</a> - Important read for React devs.  There are changes coming to the core lifecycle methods.</p>\n<p><a href=\"https://furbo.org/2018/03/28/system-fonts-in-css/\">System Fonts in CSS | Craig Hockenberry</a> - I’m always happy to see improvements to the default font situation on the web<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.   I don’t love relying on custom loaded fonts for this blog and I wish there were more high quality fonts that were reliably available without resorting to loading your own.  This particular feature doesn’t pass the “caniuse test” for now though; Chrome and Safari support it, but there’s nothing from Edge or Firefox yet.</p>\n<h3>Command Line Tips</h3>\n<p><a href=\"https://zwischenzugs.com/2018/03/26/git-log-the-good-parts/\">git log – the Good Parts | Ian Miell</a> - A good rundown of some of the things you can do with git log.  It misses that you can use <code class=\"language-text\">--author</code> to filter by the committer though, which is a flag I use all the time when I know who did a specific piece of work but am vague on what actually changed.</p>\n<p><a href=\"https://rachelbythebay.com/w/2018/03/26/w/\">Why I usually run ‘w’ first when troubleshooting unknown machines</a> - Here’s a useful command line command I didn’t know about.  <code class=\"language-text\">w</code> shows you a list of users currently on a machine and what they’re doing.</p>\n<h3>Code Style, Documentation and Code Reviews</h3>\n<p><a href=\"http://bradfrost.com/blog/post/just/\">“Just” | Brad Frost</a> - A good reminder to not assume everybody has our accumulated knowledge.  I’ve found a good cure for this is to spend some time working with programming tools I have no experience in.  Trying to install gems in Ruby for instance always reminds me how confusing npm was when I started using it.</p>\n<p><a href=\"http://blog.timoxley.com/post/47041269194/avoid-else-return-early\">Avoid Else, Return Early | Tim Oxley</a> - I’ve found this pattern of short-circuiting functions to produce very readable code.  I’ve also seen these referred to as <em>guard statements</em>.</p>\n<p><a href=\"https://blog.janestreet.com/putting-the-i-back-in-ide-towards-a-github-explorer/\">Putting the I back in IDE: Towards a Github Explorer| Jane Street Tech Blog </a> - This is an interesting idea, although I was a bit weirded out by the idea of commenting in the source files to leave code review comments.  The idea of deeper editor integration is excellent though, and I’d love to see Github evolve further in this direction with their Atom plugin.</p>\n<h3>Privacy in the news</h3>\n<p><a href=\"https://arstechnica.com/information-technology/2018/03/facebook-scraped-call-text-message-data-for-years-from-android-phones/\">Facebook scraped call, text message data for years from Android phones | Ars Technica</a> - It’s been a bad few weeks for Facebook.  You can maybe get away with trying to get everyone’s data, and you can maybe get away with being careless with user data, but when you’re as big as Facebook is, you absolutely can’t do both.</p>\n<p><a href=\"https://www.theverge.com/2018/3/28/17172548/gdpr-compliance-requirements-privacy-notice\">How Europe’s new privacy rule is reshaping the internet | The Verge</a> - GDPR is a big deal.  If you’re involved in web products that store user information, you should understand this.  I’m excited to see meaningful regulation on privacy issues that seems to be reasonably well written.</p>\n<h3>Humor</h3>\n<p><a href=\"https://www.johndcook.com/blog/2018/03/28/cow-astrology/\">Cow Astrology | John Cook</a> - When a mathematician examines the implications of astrology’s claims.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Or I would always be happy if there was ever anything to be happy about.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/03/24/weekly-links-03-11-30/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-04-07-30","title":"Weekly Links: April 7th","description":"React Lifecycles, Refactoring, Uber and Seagulls","layout":"weekly-links","path":"/2018/04/07/weekly-links-04-07-18/","date":"2018/04/07","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://twitter.com/dan_abramov/status/981712092611989509\">React Lifecycle Diagram | Dan Abramov</a></p>\n<p>Dan shared a really great illustration of the React lifecycle methods on twitter that can help you internalize how they work if you’re unfamiliar.</p>\n<p><a href=\"https://martinfowler.com/articles/201803-refactoring-2nd-ed.html\">Announcing the Second Edition of “Refactoring”</a></p>\n<p>The upcoming second edition of <a href=\"https://amzn.to/2IzhmhS\">Refactoring</a> will have it’s code examples written in JavaScript.  I’d love to see more architecture-level books written for JavaScript developers.  I don’t think we have great definitive resources for those questions yet, and rewriting a classic with JS examples is a great first step.</p>\n<p><a href=\"https://developers.google.com/web/updates/2018/04/present-web-pages-to-secondary-attached-displays\">Present web pages to secondary attached displays | Google Developers</a></p>\n<p>This is a small thing, but I thought Chrome’s experimental support for external display controls was cool, and may eventually lead to me actually using one of the many JS based presentation tools instead of Keynote.</p>\n<h3>Tech</h3>\n<p><a href=\"https://www.citylab.com/transportation/2018/03/former-uber-backup-driver-we-saw-this-coming/556427/\">Former Uber Backup Driver: We Saw This Coming | Citylab</a></p>\n<p>May be some sour grapes here, but the piece raises some interesting questions about the transition from our current state to a self-driving car future, and whether a <a href=\"https://www.caranddriver.com/features/path-to-autonomy-self-driving-car-levels-0-to-5-explained-feature\">Level 3</a> self driving car is even a feasible goal.</p>\n<p><a href=\"https://www.joelonsoftware.com/2018/04/06/the-stack-overflow-age/\">The Stack Overflow Age | Joel Spolsky</a></p>\n<p>Stack Overflow had a huge influence on my early days learning JavaScript.  I love seeing the history here from one of the founders.</p>\n<h3>Humor</h3>\n<p><a href=\"https://www.facebook.com/photo.php?fbid=10156523301334739&#x26;set=a.10150885243919739.471335.523144738&#x26;type=3&#x26;theater\">Returning To The Empress Hotel | Nick Burchill (Facebook)</a></p>\n<p>One of the funnier stories I’ve read on the internet in a while.</p>","fields":{"slug":"/2018/04/07/weekly-links-04-07-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-10-18","title":"Weekly Links: June 10th","description":"React Complexity, Proxies, and more Microsoft-Github reactions","layout":"weekly-links","path":"/2018/06/10/weekly-links-06-10-18/","date":"2018/06/10","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://daverupert.com/2018/06/the-react-is-just-javascript-myth/\">The React is “just” JavaScript Myth | Dave Rupert</a></p>\n<p>I’ve been thinking a lot about the reasons that JavaScript development is perceived as intimidating and over-complicated the past few weeks.  Might have a full post on that soon, but for now, there’s a good point here.</p>\n<p>React is relatively simple at it’s core, but it’s difficult to find examples of using it in the wild, that don’t require you to learn Webpack/Babel/npm at minimum, and many “starting points” will also toss in Redux/React Router/Jest/etc as well.</p>\n<p><a href=\"https://medium.com/@mweststrate/mobx-5-the-saga-continues-4852bce05572\">MobX 5: the saga continues… | Michael Weststrate</a></p>\n<p>MobX is the first major library I’ve seen to take advantage of proxies to give normal looking JavaScript objects/arrays magic powers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  This sort of “just make it work in the prettiest way possible” API is the type of thing that tends to produce really cool results as long as it works correctly 100% of the time, but becomes a huge pain as soon as it’s flaky.  I’ve never had any problems with MobX after using it for 2 years, so I’m hopeful seeing them as an early adapter here.  Will be interested to see if they start getting used more widely going forward.  If so, I hope that browser start thinking about how they can expose these types of patterns well in developer tools.  How do you drop into a side effect caused by a proxy in a debugger?  It’s an interesting problem</p>\n<p><a href=\"http://2ality.com/2014/12/es6-proxies.html\">Meta programming with ECMAScript 6 proxies | 2ality</a></p>\n<p>In case I lost anybody with my discussion of the last link, here’s an old but good walkthrough of what Proxies are and how you can use them to create some pretty magical APIs.</p>\n<h3>Microsoft Buying Github</h3>\n<p><a href=\"https://changelog.com/spotlight/14\">🔥 Our reactions to Microsoft buying GitHub |Adam Stacoviak &#x26; Jerod Santo</a></p>\n<p>A <a href=\"https://changelog.com/\">Changelog</a> podcast that summarizes the reaction of the 2 primary Changelog hosts to the annoucement as well as collecting reactions from around the internet.</p>\n<p><a href=\"https://github.com/martenbjork/github-xp\">github-xp | Mårten Björk</a></p>\n<p>This is just fun.  A Chrome extension to render Github in the style of Windows XP.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Even if they chose to announce that in the silliest way possible</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/06/10/weekly-links-06-10-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-23-18","title":"Weekly Links: June 23rd","description":"Gatsby, programming practices, and book reviews","layout":"weekly-links","path":"/2018/06/23/weekly-links-06-23-18/","date":"2018/06/23","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.gatsbyjs.org/blog/2018-06-16-announcing-gatsby-v2-beta-launch/\">Announcing Gatsby v2 beta launch! | GatsbyJS</a></p>\n<p>Gatsby continues to be one of the most exciting things happening in web development.  If you’re unfamiliar, Gatsby is a tool for building performant content-focused sites with React and GraphQL.  This blog has been built on it for the last 18 months or so.  Updating to V2 is pretty straightforward, I’ve been running it on here for the past week with no problems.  And V2 offers some nice improvements in terms of hot loading speed, library updates (it’s React 16, Babel 7 and Webpack 4 friendly) and API improvements.  It’s also obvious that since they <a href=\"https://benmccormick.org/2018/05/27/weekly-links-05-27-18/\">announced that Gatsby contributors were forming a company</a> the docs and marketing materials have been quickly moving from “indy open source” level to “real company” level, which is cool to see.</p>\n<h3>Programming Practices</h3>\n<p><a href=\"http://laputan.org/mud/\">Big Ball of Mud |  Brian Foote and Joseph Yoder </a></p>\n<p>This is an older piece (1999), but a cool reflection on “Big Balls of Mud”: computer systems that have been designed haphazardly and are now difficult to change.  Besides giving these systems a great name, Foote and Yoder are thoughtful about why these systems come to be, and how and when that may be appropriate.</p>\n<p><a href=\"https://amasad.me/intuition\">Overcoming Intuition in Programming</a></p>\n<p>Some interesting reflections here on how we use frameworks to reduce the cognitively challenging parts of programming.  I can definitely recall feeling less useful outside of my comfort zone when I’ve spent too much time working with “intuitive” code.</p>\n<h3>Books</h3>\n<p><a href=\"https://leanpub.com/javascriptallongesix/read\">JavaScript Allongé | Reg Braithwaite</a></p>\n<p>I realized the other day that I had never written a review of one of my favorite JavaScript books on this site.  This won’t count as a full review, but suffice it to say that if you’re interested in functional programming, want to get a deeper understanding of JavaScript, or really like JavaScript <strong>and</strong> coffee, this is the book for you.</p>\n<p><a href=\"https://amzn.to/2MiGMSV\">On Writing Well | William Zinsser</a></p>\n<p>Over the past year, I’ve been going through a challenge to read 30 books in a year.  I am well aware of my limitations as a writer, so one of the books I added to the list was “On Writing Well”, recommended from multiple sources as the best resource for non-fiction writing.</p>\n<p>Reading a 42 year old book<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> about writing is a nice view into what has changed over the last half century and what hasn’t.  The basic principles the book lays out are as applicable as ever, however its specific examples often feel a bit dated.  It lacks any direct instruction about the type of writing that now happens in emails, slack and social media<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, but it pointed me back to a time where our public writing was created with more care and resulted in more eloquence than you usually find in today’s frenzied discourse.  Parts of the book felt dated to me, but there was plenty of practical advice to glean, and even more sections I found inspiring.  I finished up wanting my writing to be better and had some practical ideas about how to make that happen.  And I learned a little bit about painting birds and the salt caravans of the Sahara along the way.  What more can you ask for?</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>It was last updated in 2006, so it’s not completely that old.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>There is a great opportunity sitting out there for somebody to write the definitive book on modern business writing skills.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/06/23/weekly-links-06-23-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-06-30-18","title":"Weekly Links: June 30th","description":"Headless UIs, Performance Monitoring, and Carpool Karaoke","layout":"weekly-links","path":"/2018/06/30/weekly-links-06-30-18/","date":"2018/06/30","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript &#x26; The Web</h3>\n<p><a href=\"https://www.merrickchristensen.com/articles/headless-user-interface-components/\">Headless User Interface | Merrick Christensen</a></p>\n<p>UI mixins are one of the hardest problems to solve.  Sharing “behavior” across multiple UI components is difficult to do right.  Merrick has documented an emerging pattern for doing this with React.</p>\n<p><a href=\"https://medium.com/airbnb-engineering/react-native-at-airbnb-f95aa460be1c\">React Native at Airbnb | Airbnb Engineering</a></p>\n<p>This has gotten plenty of attention around the internet, but Airbnb is moving away from React Native after years of heavy use and contributions to the community.  Worth reading as an explanation of the pluses and minuses of React Native, probably not worth reading too much into the move beyond that.</p>\n<p><a href=\"https://remysharp.com/2018/06/26/an-adventure-in-sparse-arrays\">An Adventure in Sparse Arrays | Remy Sharp</a></p>\n<p>For anyone who read my <a href=\"https://benmccormick.org/2018/06/19/code-golf-sparse-arrays/\">“sparse array code golf” post</a> the other day, this is a better holistic look at sparse arrays in JavaScript.  I learned several new things here.</p>\n<h3>Programming Practices</h3>\n<p><a href=\"https://medium.com/@ricomariani/understanding-performance-regions-e4b6e09a94da\">Understanding Performance Regions | Rico Mariani</a></p>\n<p>This is a nice high level post about a different way to think about performance monitoring and improvement.</p>\n<h3>Fun</h3>\n<p><a href=\"https://www.youtube.com/watch?v=QjvzCTqkBDQ&#x26;feature=youtu.be\">Paul McCartney Carpool Karaoke</a></p>\n<p>An incredibly fun video.  Paul McCartney showing James Corden around Liverpool.</p>\n<p><a href=\"https://www.bloomberg.com/news/features/2018-06-21/how-nintendo-s-switch-helped-the-japanese-gaming-giant-win-again\">The Legend of Nintendo | Bloomberg</a></p>\n<p>A great writeup on Nintendo’s last few years and where they stand now.</p>","fields":{"slug":"/2018/06/30/weekly-links-06-30-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-04-05-19","title":"Weekly Links: May 19th","description":"The React Podcast, Guess.js, and The Vision","layout":"weekly-links","path":"/2018/05/19/weekly-links-05-19-18/","date":"2018/05/19","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://changelog.com/reactpodcast\">The React Podcast | Michael Jackson</a></p>\n<p>I listen to a decent amount of podcasts, but I’ve usually found it tough to get into programming podcasts.  Without visually being able to see code, they’re usually either ultra high level, or get hard to follow when going into the details.  The changelog family of podcasts has generally been my favorite though, and the new<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup> React podcast has been consistently excellent over it’s first 9 episodes.  Worth a listen.</p>\n<p><a href=\"https://blog.mgechev.com/2018/05/09/introducing-guess-js-data-driven-user-experiences-web/?utm_source=ponyfoo+weekly&#x26;utm_medium=email&#x26;utm_campaign=115\">Guess.js | Minko Gechev</a></p>\n<p>This is a crazy look at what I suspect will be the next step in static site performance stuff.  This blog does some of the cool stuff mentioned here (we prefetch links on the page thanks to Gatsby, and I use google analytics at build time to determine popular pages and populate the Most Read Articles list on the main page) but this is next level, using analytics to efficiently prefetch.  Excited to try it on the site.</p>\n<h3>Non-Tech</h3>\n<p><a href=\"https://amzn.to/2LdnoXK\">The Vision | Tom King</a></p>\n<p>Ok so I’m pretty late on this one<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, but Tom King’s <em>The Vision</em> is the best comic book I’ve read in years.  He’s got a <a href=\"https://amzn.to/2IwlMq1\">pretty</a> <a href=\"https://amzn.to/2LcYQ0U\">good</a> <a href=\"https://amzn.to/2Lh3ZFd\">run</a> going on Batman now as well, but this is a brilliant self-contained story that holds up as well as anything I’ve seen. Great art as well.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Newly relauched? I’m not totally sure of the history</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>The single edition Vision comics were originally released in 2015, though the hardcover that I purchased was just released this year.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/05/19/weekly-links-05-19-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-08-18-18","title":"Weekly Links: August 18th","description":"Performance, React resources, and Radical Candor","layout":"weekly-links","path":"/2018/08/18/weekly-links-08-18-18/","date":"2018/08/18","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript and the Web</h3>\n<p><a href=\"https://ethanmarcotte.com/wrote/bits/\">Bits | Ethan Marcotte</a></p>\n<p>I’ll pretty much always link performance posts that do a good job laying out the challenges in a way that respects both the technical and business POV.  Ethan advocates here for a more structural view to performance problems on the web and wonders how we can find more performant ways to solve businesses revenue problems.</p>\n<p><a href=\"https://egghead.io/browse/frameworks/react\">React Community Resources | Egghead</a></p>\n<p>Egghead has accumulated a pretty amazing set of beginner React resources that are free for non-members.  If you’re trying to get into React, this is a pretty good place to start.</p>\n<h3>Books</h3>\n<p><a href=\"https://amzn.to/2vX6yGo\">Radical Candor | Kim Scott</a></p>\n<p>I may write this up as a full review later, but Radical Candor was the best book I’ve read this year.  It’s a book for managers, but it really was just one of the best books I’ve ever read on communication and relationships.  If you want to work better with others, Radical Candor is worth buying.</p>","fields":{"slug":"/2018/08/18/weekly-links-08-18-18/"}}},{"node":{"frontmatter":{"readNext":null,"topics":["React"],"category":"opinion","key":"weekly-links-09-01-18","title":"Weekly Links: September 1","description":"Reverse Engineering React, Python refactoring, and Bat","layout":"weekly-links","path":"/2018/09/01/weekly-links-09-01-18/","date":"2018/09/01","dontfeature":null,"isDraft":null},"html":"<h3>JavaScript And The Web</h3>\n<p><a href=\"https://blog.angularindepth.com/practical-application-of-reverse-engineering-guidelines-and-principles-784c004bb657\">Reverse Engineering React | Angular In Depth</a></p>\n<p>A really cool look at how you can approach a new code base and start learning how it works quickly</p>\n<h3>Programming Tools</h3>\n<p><a href=\"https://pybowler.io\">Bowler | Facebook Open Source</a></p>\n<p>This looks like “JSCOdeshift for Python” to me: a way to quickly update codebases to use new patterns and practices.  I love it. You can <a href=\"https://benmccormick.org/2018/06/18/codemod-survival/\">check out my experience using JavaScript Codemods here</a></p>\n<p><a href=\"https://github.com/sharkdp/bat\">bat</a></p>\n<p>bat is a prettier <a href=\"https://en.wikipedia.org/wiki/Cat_(Unix)\">cat</a>:  dump a file into the terminal, but use syntax highlighting and line numbers.  Good stuff for anyone who lives on the command line.</p>","fields":{"slug":"/2018/09/01/weekly-links-09-01-18/"}}}],"topic":"React"}},"staticQueryHashes":[]}