{"componentChunkName":"component---src-templates-topic-page-js","path":"/topics/react","result":{"pageContext":{"posts":[{"node":{"frontmatter":{"readNext":"jest-first,backbone-devs-react,callbacks-to-promises","topics":["react","javascript"],"category":"frameworks","key":"react-component-styles","title":"Digging Into React: Choosing Component Styles","description":"An examination of the various styles for defining React components","layout":"post","path":"/2016/05/02/digging-into-react-choosing-component-styles","date":"2016-05-02T02:32:36+00:00","dontfeature":null,"isDraft":null},"html":"<p>Over the past month I’ve been building my first production features using React.  One of the first things I’ve noticed is the amount of choices that come into a new React project.  A lot of this is about the ecosystem around React (Webpack vs Browserify? Redux vs Relay? Do I need CSS modules or Immutable.js?) but many of the choices are just part of the library, figuring out the best, or at least a consistent, way to do things.</p>\n<p>One such choice is the syntax for defining components that you choose to use.  In React, you can define components in at least 3 different styles: the React.createClass style, the ES6 class style, and the pure functional style <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Each has some advantages and disadvantages.</p>\n<h3>React.createClass</h3>\n<p>React.createClass is the original style for defining React components, and is still the preferred style in the React documentation.</p>\n<p>Here’s what a theoretical SaveButton component looks like in this style.  It is a simple component that listens for clicks and then uses a separate dispatcher object to send a request to save the data on the page.  After saving the button will either show some specified saved text or “Saved”.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React from ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> from ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> SaveButton <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n\n    propTypes<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//text to show after the component is saved</span>\n        savedText<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">//primary text to show on the button</span>\n        text<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">getDefaultProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n             savedText<span class=\"token operator\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">getInitialState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> saved<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>saved<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span>“button” onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>saved <span class=\"token operator\">?</span> savedText <span class=\"token operator\">:</span> text<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>One of the best things about this style is its cohesive nature.  Everything about the component is described as a single object passed to React.createClass.  Since it is just an object that React processes, it is also able to accommodate more usage styles than ES6 classes and functional components.  Specifically we can use <a href=\"https://facebook.github.io/react/docs/reusable-components.html#mixins\">mixins</a> and add declarative properties like propTypes directly to the component definition.</p>\n<p>The downside of the createClass approach is the custom nature of it.  External tools can’t inspect a component declaration and know what functions and methods will be available on the final component without either some deep inspection of the React source code or pre-existing knowledge of React.createClass that somebody has to document and maintain.</p>\n<h3>ES6 Classes</h3>\n<p>Last March, with React v0.13, the React team introduced a second syntax for React components using ES6 classes.  The constraints of the ES6 class definition change the component API in a few ways.  With ES6 classes there is no way to add properties to the class property as part of the main definition, they need to be added afterwards <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  Some niceties that are possible with React.createClass don’t work with ES6 classes as well.  Mixins aren’t possible, and React will no longer “autobind” your functions to the component instance, so when passing class methods as callbacks in your components it is necessary to bind it to the current context, either by using arrow functions like\n<code class=\"language-text\">&lt;span onClick= {() => this.save()} ></code> or by binding the function like <code class=\"language-text\">this.save = this.save.bind(this)</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React from ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> from ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SaveButton</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> saved<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>saved<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> <span class=\"token operator\">></span>\n           <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>saved <span class=\"token operator\">?</span> savedText <span class=\"token operator\">:</span> text<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    text<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token operator\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>While this approach makes some syntactic compromises and loses mixins, it has the advantage of standardization and tooling support.  A good JavaScript tool can easily tell that a SaveButton should have render and save methods, as well as detecting the methods it inherits from React.Component.  This is useful for things like auto-complete and linting, as well as (theoretically) run-time performance.</p>\n<h3>Pure Functional Components</h3>\n<p>Last fall with React 0.14, React added a 3rd component style.  Functional components dispose of many of the secondary features of React, and focus on the <code class=\"language-text\">render</code> function.  They are the least powerful of all the component syntaxes.  In addition to losing mixins, pure functional components don’t have the life-cycle functions of the class based syntaxes and also don’t have any internal state.  For these components, all state must be managed externally through something like Redux, or parent components that do have state.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React from ‘react’<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>dispatcher<span class=\"token punctuation\">}</span> from ‘<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>lib<span class=\"token operator\">/</span>dispatcher’<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SaveButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>text<span class=\"token punctuation\">,</span> savedText<span class=\"token punctuation\">,</span> isSaved<span class=\"token punctuation\">,</span> setSaved<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">save</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        dispatcher<span class=\"token punctuation\">.</span><span class=\"token function\">sendMessage</span><span class=\"token punctuation\">(</span>‘saveData’<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setSaved</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>span className<span class=\"token operator\">=</span>“button” onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>save<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n       <span class=\"token punctuation\">{</span>isSaved <span class=\"token operator\">?</span> savedText <span class=\"token operator\">:</span> text<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//text to show after the component is saved</span>\n    savedText<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">//primary text to show on the button</span>\n    text<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// has the data already been saved?</span>\n    isSaved<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>bool<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// a function to update the application state and mark the page as saved</span>\n    setSaved<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>PropTypes<span class=\"token punctuation\">.</span>func<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nSaveButton<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    savedText<span class=\"token operator\">:</span> ‘Saved’<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Despite being the least powerful of the 3 component styles, functional components do have some advantages.  First of all, they’re very simple.  It is easy to see what is going on with them, and easy for React to optimize for them.  Like ES6 classes, they’re easy to understand for 3rd party tools since they’re “just functions”, and easy to explain to new developers for the same reason.  They also work well with systems like Redux which already encourages pulling state out of components into global stores.</p>\n<h2>Choosing a component style</h2>\n<p>So given these 3 styles, how do you choose which style to use for a component?  Balance a desire for consistency with a respect for the <a href=\"https://en.wikipedia.org/wiki/Rule_of_least_power\">Principle of Least Power</a>.</p>\n<p>For consistency purposes, don’t use more than 2 of these styles within a single project.  This mostly breaks down to “don’t use createClass and ES6 classes” together in the same project.  There are significant differences in capability and complexity between the first 2 styles and functional components. But the class based styles are similar enough that using both adds complexity but fails to do much in terms of signaling intent.  Switching between 2 different styles of communicating a concept should also indicate a meaningful difference in intent.</p>\n<p>Of course the most consistent approach would be to always use createClass, since it is the most powerful and any component that can be implemented in the other 2 styles can be implemented using createClass.  This is where the principle of least power comes in.  Here is Tim Berners-Lee’s initial description of that principle:</p>\n<blockquote>\n<p>Computer Science in the 1960s to 80s spent a lot of effort making languages which were as powerful as possible. Nowadays we have to appreciate the reasons for picking not the most powerful solution but the least powerful. The reason for this is that the less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative from, anyone can write a program to analyze it in many ways. The Semantic Web is an attempt, largely, to map large quantities of existing data onto a common language so that the data can be analyzed in ways never dreamed of by its creators. If, for example, a web page with weather data has RDF describing that data, a user can retrieve it as a table, perhaps average it, plot it, deduce things from it in combination with other information. At the other end of the scale is the weather information portrayed by the cunning Java applet. While this might allow a very cool user interface, it cannot be analyzed at all. The search engine finding the page will have no idea of what the data is or what it is about. This the only way to find out what a Java applet means is to set it running in front of a person.</p>\n</blockquote>\n<p>The less powerful react components styles are the more readable styles, both for humans and computers. That readability also limits the classes of errors and unexpected behaviors we can enact. So we should strive for simple components where we can, while balancing that with our desire for consistency.</p>\n<p>For projects looking into this, there are a few simple questions that you can answer to decide which style to use.</p>\n<ol>\n<li>Do you need to integrate with non-React libraries that modify the DOM?</li>\n<li>Do you need to manage state within your components (IE are you not using an external state management library like Redux)?</li>\n<li>Do you need to use mixins for anything in your project?</li>\n</ol>\n<p>If you answered yes to any of these questions, then you need to include a class based component style in your options for your projects.  If you answered yes to #3, then you will need to use React.createClass.</p>\n<p>Once you’ve made those decisions at the project level, the decisions are easy for an individual component.  If you answered no to all of the questions above (unlikely for a large project, but possible), you should always use functional components.  If not, you can ask the same 3 questions for each new component.  If the answer to all of the questions are no for a component, use a functional component, otherwise use the class based style you’ve chosen for your project.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href=\"https://facebook.github.io/react/docs/reusable-components.html#es6-classes\">The React documentation</a> is the best place to look at the benefits and tradeoffs of the different component styles</li>\n<li><a href=\"http://jamesknelson.com/should-i-use-react-createclass-es6-classes-or-stateless-functional-components/\">James Nelson wrote a similar guide last year</a> focused on the decision tree of what style to use for a component.  He dismisses the createClass style completely and has a similar but slightly different set of questions to ask.</li>\n<li><a href=\"https://github.com/facebook/react/issues/5677\">This github thread</a> makes the important distinction that functional components are not yet optimized in any special way, though they may be in the future.</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Technically you can also use an ES5 class based style, but I’m going to ignore that.  It is not a common idiom for React programs as far as I can tell.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>There is a proposal for adding static properties to ES6 classes, but it is still in early stages right now and is not guaranteed to end up as part of the ECMAScript spec.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2016/05/02/digging-into-react-choosing-component-styles"}}},{"node":{"frontmatter":{"readNext":"saving-time-jest,backbone-devs-react,mobx-first","topics":["jest","testing","react"],"category":"tools","key":"jest-first","title":"Testing with Jest Snapshots: First Impressions","description":"First impression of testing UI components using Jest snapshots","layout":"post","path":"/2016/09/19/testing-with-jest-snapshots-first-impressions/","date":"2016-09-19T12:41:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>Over the past 6 months my team at work has been slowly transitioning a large Backbone application to React.  One of the main goals of the transition has been to build out unit tests as we transition components.  As part of that we switched from using Karma to using Jest for managing our tests.</p>\n<p>Our new setup with Jest has several advantages over our previous setup. All Jest tests run through node using a fake DOM implementation.  We don’t need to start up a browser so tests are faster and less flaky <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.  Jest makes it possible to mock all modules by default <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>, which works well for us since our code base currently contains a large amount of code that is difficult to test for one reason or another.  Jest provides great integration with Babel, which is helpful since all of our Backbone and React code uses ES6 that we transpile for the browser.  Finally Jest provides a wonderful watch mode that runs only the tests that are relevant to the changes you’ve made and makes it easy to see the result.</p>\n<p>About a month ago, Jest debuted a new feature: Snapshot testing.  It works a bit differently than a normal unit test.  Instead of executing some code and comparing the output against a value provided by a developer, the first time a test is run, the output passed into the test is saved to a “snapshot file”.  Then when the test is run in the future, the output is compared to the snapshot file.  If the output matches the file, the test passes, if the output is different then the file, the test fails and Jest prints a diff.  We’ve been using Jest snapshots for a few weeks now and I wanted to share my initial impressions.</p>\n<h3>What is it like to use a snapshot test ?</h3>\n<p>The process for snapshot testing is a bit different than normal tests.  Most snapshot tests look fairly simple.  Something like this example from the <a href=\"https://github.com/facebook/jest/tree/master/examples/snapshot\">Jest repository</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Link.react.js</span>\n<span class=\"token comment\">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">STATUS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">NORMAL</span><span class=\"token operator\">:</span> <span class=\"token string\">'normal'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">HOVERED</span><span class=\"token operator\">:</span> <span class=\"token string\">'hovered'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Link</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onMouseEnter</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_onMouseLeave</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onMouseEnter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">HOVERED</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">_onMouseLeave</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token constant\">STATUS</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NORMAL</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>a\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>class<span class=\"token punctuation\">}</span>\n        href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n        onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter<span class=\"token punctuation\">}</span>\n        onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Link.react-test.js  (partial)</span>\n<span class=\"token comment\">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n<span class=\"token comment\">/* eslint-disable no-unused-vars */</span>\n\n<span class=\"token string\">'use strict'</span>\n\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> Link <span class=\"token keyword\">from</span> <span class=\"token string\">'../Link.react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> renderer <span class=\"token keyword\">from</span> <span class=\"token string\">'react-test-renderer'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'renders correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> renderer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Link page<span class=\"token operator\">=</span><span class=\"token string\">\"http://www.facebook.com\"</span><span class=\"token operator\">></span>Facebook<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Link<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toJSON</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toMatchSnapshot</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first time the test is run, a snapshot file is produced.  In this case, running the previous test produces a snapshot file that looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// Link.react-test.js.snap  (partial)</span>\nexports<span class=\"token punctuation\">[</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">test renders correctly 1</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n&lt;a\n  className=\"normal\"\n  href=\"http://www.facebook.com\"\n  onMouseEnter={[Function bound _onMouseEnter]}\n  onMouseLeave={[Function bound _onMouseLeave]}>\n  Facebook\n&lt;/a>\n</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This gives us a baseline for what we expect the UI to look like.  The snapshot is generated in a folder in your <code class=\"language-text\">__tests__</code> directory, so that it can be checked into source control.</p>\n<p>The next time a test is run, if nothing has changed, the test passes.  However, if we change something (let’s say we add a class), the test fails and shows us a diff.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// updated link render method</span>\n\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>a\n      className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">link-item </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>class<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n      href<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>page <span class=\"token operator\">||</span> <span class=\"token string\">'#'</span><span class=\"token punctuation\">}</span>\n      onMouseEnter<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseEnter<span class=\"token punctuation\">}</span>\n      onMouseLeave<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_onMouseLeave<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"diff\"><pre class=\"language-diff\"><code class=\"language-diff\"># jest output\n\nFAIL  __tests__/Link.react-test.js\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">✕ renders correctly (16ms)\n</span></span>\n● renders correctly\n\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   Received value does not match the stored snapshot 1.\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   - Snapshot\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">   + Received\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     &lt;a\n</span></span><span class=\"token deleted-sign deleted\"><span class=\"token prefix deleted\">-</span><span class=\"token line\">       className=\"normal\"\n</span></span><span class=\"token inserted-sign inserted\"><span class=\"token prefix inserted\">+</span><span class=\"token line\">       className=\"link-item normal\"\n</span></span><span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       href=\"http://www.facebook.com\"\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       onMouseEnter={[Function bound _onMouseEnter]}\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       onMouseLeave={[Function bound _onMouseLeave]}>\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">       Facebook\n</span><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     &lt;/a>\n</span></span>\n<span class=\"token unchanged\"><span class=\"token prefix unchanged\"> </span><span class=\"token line\">     at Object.&lt;anonymous> (__tests__/Link.react-test.js:14:16)</span></span></code></pre></div>\n<p>We can then choose to accept this change by running <code class=\"language-text\">jest -u</code> to update the snapshot, or update our code to fix the regression.  If we update the snapshot file, the test will start passing again.</p>\n<h3>Snapshot tests are a complement for conventional tests not a replacement</h3>\n<p>The first thing that became clear to me while using snapshot testing is that they’re not for everything.  They are optimized for a different case than normal assertion-based tests.</p>\n<p>Classic assertion based tests are perfect for testing clearly defined behavior that is expected to remain relatively stable.</p>\n<p>Snapshot tests are great for testing less clearly defined behavior that may change often.</p>\n<p>Snapshot testing is perfect for things that in the past would have raised concern for “overly brittle” tests that slow development teams down.  The classic example of this (and the main focus of discussion around Jest snapshots so far) is UI testing.</p>\n<p>UI components often change in small and trivial ways.  Copy is changed, whitespace is added, a border color is modified. Generally this means that developers have to choose between detailed tests that catch any regression but require constant updates, or less detailed tests that focus on core behaviors but miss smaller regressions.</p>\n<p>Snapshot tests provide a new way of approaching these problems in unit tests.  Because they are easy to write and effortless to update, and provide a clear view of what changed after each update, whether it is major or minor.</p>\n<p>This isn’t without any disadvantage. Snapshot tests preserve a starting point, but don’t give any indication of developer intent to future developers.  Like any other test, if the initial snapshot passes with bugs, or doesn’t capture the full range of cases, the test won’t adequately cover those behaviors.  But unlike traditional tests, snapshot tests don’t provide specific guidance for what the original developer expected beyond the “actual behavior”.  If there are multiple sub-behaviors that interact to produce output, its not clear which of those are essential, and which are incidental.  That’s not something you want for your critical application logic, especially complicated logic with many subtle cases.  But for UI components and other application elements that are likely to change a lot over time, this is a good set of tradeoffs.</p>\n<h3>Snapshot tests are more useful with a healthy code review process</h3>\n<p>I’ve pointed out several times now that snapshot tests are easy to update.  One of the downsides of the current design is that they can be almost too easy to update.  When a snapshot test fails, you have the option of modifying the output so that the test passes again, or updating the snapshot to reflect the new output.  Unfortunately, Jest currently provides no granularity for this updating.  Running <code class=\"language-text\">jest -u</code> to update the snapshots will update all snapshots.  So if  a single change causes many snapshots to break, it can be easy to accidentally update all of them, and possibly difficult to work through the whole diff to find changes.</p>\n<p>A robust code review process minimizes these problems.  Because snapshots are checked into source, the diffs in the snapshots are checked into source control.  Viewing diffs in a dedicated code review tool like Github, Bitbucket or Gitlab, it’s easier to see exactly what changed over many files than it might be when updating snapshots from the command line, and if you update a snapshot multiple times in a single branch, you can see the net effect on the snapshot through source control diffs better than you can through Jest.</p>\n<h3>Snapshot tests work well with auto-mocking</h3>\n<p>Auto-mocking has been one of Jest’s more controversial features.  Prior to version 15, Jest mocked every module used in tests by default.  To run the actual module code, it was necessary to manually unmock each module used or change Jest configurations.  Though it is now disabled by default, auto-mocking actually works very well with snapshot tests.  One problem with tests that rely on generating DOM in React is the fact that most components of any complexity are actually made up of smaller components, that often use external functions with complex logic to determine what to show.  If we fully render everything, changing any of those pieces can break tests for many components, moving us away from the concept of a “unit test”.  If we mock child components and helper functions and then test them individually though, we can focus our tests to only change based on the logic of the individual component being tested.  This is incredibly easy with Jest, and especially helpful in large code bases that don’t have complete test coverage.  Auto-mocking is considered an “advanced feature” of Jest, but it’s not hard to use.  Most mocked modules produce something non-harmful by default, and when its necessary to override, its not difficult to produce something meaningful without getting too involved.  Just add a file with the same name as the file to be mocked into a <code class=\"language-text\">__mocks__</code> folder in that directory, and give the mocked module the same interface as the mocked component.  You can either write it from scratch or use <a href=\"http://facebook.github.io/jest/docs/api.html#jest-genmockfrommodule-modulename\">jest.genMockFromModule</a> as a starting place.</p>\n<h3>Summary</h3>\n<p>I’m impressed by Jest snapshots.  When combined with React, they’re providing my first non-frustrating experience unit testing UI components.  I’m excited to use them more going forward, and will be interested to see how they evolve from here.</p>\n<hr>\n<h3>Extra: A few miscellaneous Jest Thoughts</h3>\n<ul>\n<li>The UI output from Jest 15 tests is the best I’ve ever seen from a testing framework.  Aside from the nice diffs on snapshots, they do a good job explaining how output differed from expectations in assertion based tests, and communicating context for test failures, warnings and logging messages.  They also give great guidance when making configuration changes:</li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\"><a href=\"https://twitter.com/cpojer\">@cpojer</a> This is lovely, thank you! <a href=\"https://t.co/CX1v11CAVc\">pic.twitter.com/CX1v11CAVc</a></p>&mdash; Ben McCormick (@_benmccormick) <a href=\"https://twitter.com/_benmccormick/status/772906536154894336\">September 5, 2016</a></blockquote>\n<ul>\n<li>\n<p>I’ve also been super impressed with Jest’s watch mode in Jest 15.  <code class=\"language-text\">--watch</code> makes it easy to focus on a few files or run tests on all files, and stays up to date as you change code.  If you haven’t worked with Jest in a while, the developer experience alone makes it worth trying out.</p>\n</li>\n<li>\n<p>One potential future annoyance with snapshot tests:  The snapshot format can’t be iterated on without breaking all current tests.  Make sure not to mix functional changes with Jest updates!</p>\n</li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"en\"><p lang=\"en\" dir=\"ltr\">We&#39;ll update the snapshot format sometimes in minor/major releases. When updating Jest, please update snapshots<br><br>See <a href=\"https://t.co/gPE63dMz8P\">https://t.co/gPE63dMz8P</a></p>&mdash; Christoph Pojer (@cpojer) <a href=\"https://twitter.com/cpojer/status/776623521069805568\">September 16, 2016</a></blockquote>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Randy Coulman has a <a href=\"http://randycoulman.com/blog/2016/09/06/snapshot-testing-use-with-care/\">nice article</a> on some of the reasons to be careful about embracing snapshot testing.  He makes good points about the requirement of human involvement in verifying a change in time-crunched situations and also the potential value of snapshot tests for legacy code.</p>\n</li>\n<li>\n<p>My team uses a mix of <a href=\"https://github.com/airbnb/enzyme\">enzyme</a> and snapshot tests for unit testing React Components.  <a href=\"https://github.com/trayio/enzyme-to-json?utm_content=buffer6b78b&#x26;utm_medium=social&#x26;utm_source=twitter.com&#x26;utm_campaign=buffer\">This repo</a> combines them, allowing you to use enzyme to generate the snapshot output to diff against rather than the renderer provided by Jest. I personally haven’t felt the need to integrate these two tools, but if your team uses enzyme and wants consistency/fewer (used) dependencies, this could be a cool option.</p>\n</li>\n<li>\n<p>Finally here’s <a href=\"https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript\">another article</a> on how Snapshot testing convinced one team to migrate to Jest from Tape</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>PhantomJS was a tremendous source of pain in our Karma setup.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>This used to be the default setting, with Jest 15 it can be configured to work that way.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2016/09/19/testing-with-jest-snapshots-first-impressions/"}}},{"node":{"frontmatter":{"readNext":"react-component-styles,callbacks-to-promises,mobx-first","topics":["react"],"category":"frameworks","key":"what-are-hocs","title":"What are Higher Order Components?","description":"An explanation of React's higher order components","layout":"post","path":"/2016/12/14/what-are-higher-order-components","date":"2016-12-14T14:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>If you spend much time at all reading through articles and documentation around React, you’re likely to run into the term “Higher Order component”, often abbreviated HoC.  Since it is often used without context in React discussions, and is not a particularly intuitive term for many (most?) developers, I thought it was worth publishing a quick and simple explanation of what Higher Order Components are.</p>\n<p>Higher Order Components are functions that take a React Component, and return a React Component.  The “higher order” phrasing is borrowed from the term “higher order function”, a more widely used term in Mathematics and Computer Science that refers to a function that either takes one or more functions as an argument, returns a function, or does both.  Since React Components can be thought of as functions that take data and return ui elements, the naming and usage make sense.  Let’s look at an example of a higher order component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">ExtraPropsComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">WrappedComponent<span class=\"token punctuation\">,</span> componentType</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtraPropsChild</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">importantFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n        componentType<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a pretty basic HoC that takes a component and returns a new version of that component that will always be passed 2 extra props <code class=\"language-text\">importantFunction</code> and <code class=\"language-text\">componentType</code>. One is statically generated in this case, but the other is dynamically passed in when the component is generated.  The ability to pass dynamic content in when defining the component is one of the key wins of HoCs in the real world.  For instance, this is how Redux’s <a href=\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\">connect</a> function works.</p>\n<p>Note that this is different from a normal React Component that renders a subcomponent passed as an argument like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> componentType <span class=\"token operator\">=</span> <span class=\"token string\">'???'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ExtraPropsComponent</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> ChildComponent <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">let</span> props <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">importantFunction</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span>\n        componentType<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">delete</span> props<span class=\"token punctuation\">.</span>ChildComponent<span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>ChildComponent <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>props<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These 2 examples are roughly equivalent for this case, but accomplish things in different ways.  The HoC is a function that takes a component and data when it is created and generates another component.  The normal component example is a component that takes a component as a property and accesses a variable that is in its scope at creation time to generate the element tree that it renders.  The HoC is more flexible as you could theoretically create multiple versions of a component using the single HoC.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> FancyButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'fancy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> CrazyButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'crazy'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> BoringButton <span class=\"token operator\">=</span> <span class=\"token function\">ExtraPropsComponent</span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">,</span> <span class=\"token string\">'boring'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For the equivalent functionality without using an HoC, you would have to define the whole component for each case.</p>\n<h3>Higher Order Components in the real world</h3>\n<p>I’ve already mentioned connect from <a href=\"https://github.com/reactjs/react-redux\">react-redux</a> as an example of a higher order component.  Other popular libraries that use HoC as part of their APIs include:</p>\n<ul>\n<li><a href=\"http://formidable.com/open-source/radium/\">Radium</a>: a library for inline styles in React that uses a higher order component to transform in-line styles added to a component into a more robust-css like system</li>\n<li><a href=\"https://github.com/ReactTraining/react-router\">React Router</a>: a routing library for React that uses <code class=\"language-text\">withRouter</code> a HoC that injects access to the router into components that it wraps</li>\n<li><a href=\"https://facebook.github.io/relay/\">Relay</a>: Facebook’s library for connecting to GraphQL APIs includes Relay.Container, a HoC that allows developers to declare the data requirements for a component</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>This was intentionally a very high level look at Higher Order Components.  If you want to go deeper, <a href=\"https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.yhbug3ohe\">this medium article</a> is a great deep dive into all the use cases they allow.</li>\n<li>If you’re interested in using HoCs in your own code base, <a href=\"https://github.com/acdlite/recompose\">recompose</a> is a utility library for making the syntax around defining and using them painless</li>\n</ul>","fields":{"slug":"/2016/12/14/what-are-higher-order-components"}}},{"node":{"frontmatter":{"readNext":"jest-first,backbone-devs-react,react-component-styles","topics":["javascript","react"],"category":"frameworks","key":"mobx-first","title":"MobX: First Impressions","description":"First impression of managing data with MobX","layout":"post","path":"/2017/01/09/mobx-first-impressions/","date":"2017-01-09T13:30:00+00:00","dontfeature":null,"isDraft":null},"html":"<p>I spent some time around the holidays this year playing with <a href=\"https://mobx.js.org/\">MobX</a>, a state management library for JavaScript.  MobX is an unopinionated library that provides a layer over normal JavaScript data structures that allow other code to efficiently observe data changes and update based on what has changed.  It’s an interesting tool for handling state in web applications, especially in existing projects that might need to update state handling iteratively.  Here are some first impressions.</p>\n<h3>What is MobX?</h3>\n<p>MobX has 3 core concepts developers need to understand:</p>\n<ol>\n<li><strong>Observable state</strong> - MobX provides functions to make data <em>observable</em>.  Observable data can be watched by other pieces of code which may efficiently update when the state changes.  Observable data is primarily created in MobX using the <code class=\"language-text\">observable</code> function.</li>\n<li><strong>Derivations</strong> - Functions that <em>watch</em> observable data are called derivations.  MobX has 2 primary types of derivations: <em>computed values</em> and <em>reactions</em>.  Computed values update a value based on other data, while reactions produce side effects: updates to a UI, a network call, or a logging statement for example. MobX provides a <code class=\"language-text\">computed</code> function for defining computed values; in most cases reactions will likely be mostly defined using a framework specific helper library like <a href=\"https://github.com/mobxjs/mobx-react\">mobx-react</a> or <a href=\"https://github.com/500tech/ng2-mobx\">ng2-mobx</a>.  MobX does provide some lower level libraries for reactions though, including <code class=\"language-text\">autorun</code> and <code class=\"language-text\">when</code>.</li>\n<li><strong>Actions</strong> - Code that updates observable state is known as an action.  MobX has a formalized version of actions which can be defined using the <code class=\"language-text\">action</code> function, but it is also possible to modify state directly using any normal JavaScript code and maintain observable behavior.</li>\n</ol>\n<p>In practice this looks something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> digits <span class=\"token operator\">=</span> <span class=\"token function\">observable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> DigitPrinter <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>DigitPrinter digits <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>digits<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* prints 1, 2 */</span>\n\n\ndigits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* DOM re-renders to print 1, 2, 3 */</span>\n\ndigits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* DOM re-renders to print 1, 2, 4 */</span></code></pre></div>\n<p>The component is able to passively <em>observe</em> changes in the data, and re-render when it changes.  But MobX is actually even smarter than this example shows.  Let’s look at another example, this time using a more complex data structure (a class).</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>extendObservable<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>observer<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mobx-react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> moment <span class=\"token keyword\">from</span> <span class=\"token string\">'moment'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Appointment</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">extendObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      dueDate<span class=\"token operator\">:</span> <span class=\"token string\">'01-01-2017'</span><span class=\"token punctuation\">,</span>\n      title<span class=\"token operator\">:</span> <span class=\"token string\">'Dinner with Joe'</span>\n      location<span class=\"token operator\">:</span> <span class=\"token string\">'Chik-Fil-A'</span><span class=\"token punctuation\">,</span>\n      isToday<span class=\"token operator\">:</span> <span class=\"token function\">computed</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>dueDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'MM-DD-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> @ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">const</span> TodayBox <span class=\"token operator\">=</span> <span class=\"token function\">observer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">TodayBox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>isToday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>     \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> appointment <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Appointment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>TodayBox appointments <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>appointment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* prints an empty div */</span>\n\nappointment<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'Dinner with Bob'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Nothing relevant has changed. The component does not re-render */</span>\n\nappointment<span class=\"token punctuation\">.</span>dueDate <span class=\"token operator\">=</span> <span class=\"token string\">'01-09-2017'</span><span class=\"token punctuation\">;</span>  \n\n<span class=\"token comment\">/*  assume that 01-09-2017 is \"today\" */</span></code></pre></div>\n<p>MobX has the “magical” ability to determine what changes actually affect the observer and not make unnecessary calls of reaction functions.  In practice, that magic allows you to write less, more efficient code for updating your UI based on data.</p>\n<h3>How Does MobX work?</h3>\n<p>I have a learned skepticism of magical solutions like this.  Generally I find that time-saving magic like this ends up costing time when it comes to maintenance, and explicit relationships between code saves time over less-boilerplate heavy code. Fortunately, while the libraries code itself is fairly complex, it isn’t too hard to understand the logic behind how MobX works.  </p>\n<p>On the Observer side, MobX uses <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ES5</a> setters and getters to proxy updates to observable data structure and listen in when data is updated.  This allows the type of event listening that <a href=\"http://backbonejs.org/\">Backbone</a> and other libraries provide, without requiring the user to go through special <code class=\"language-text\">set</code> or <code class=\"language-text\">get</code> methods to update an object’s properties.  Most of the time you should be able to just be able to write code as you normally would, and MobX will make it work.  There are some exceptions though that mean its important to actually understand how the library work.  Getters and Setters only work when looking up an existing property on an object, so when using primitive values or adding new values to an existing object, some special syntax (the return of <code class=\"language-text\">get</code> and <code class=\"language-text\">set</code> methods) may be required.  In Mobx primitive observables are referred to as <em>boxed</em> values, and objects that require new values over time can be handled by using observable Maps, which use the API of <a href=\"http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/\">ES6</a> Maps.</p>\n<p>On the derivative side, reactions and computed values are always defined as functions.  MobX wraps these functions and is able to determine (through the method described above) what properties were accessed during each function run.  It then only listens for changes to these properties.  Thus it doesn’t matter if you theoretically could access thousands of observable properties in a function, if you wrap those references in an if statement to a single property, and that property returns false on first run, the derivative function will only listen for changes on that property before running again. When an observable is updated, all derivative code is run synchronously and atomically so there is no concern of getting into bad intermediate states.</p>\n<p>Most of the “magic” is covered by the 2 paragraphs above, and once you understand the ideas behind them (see the resources at the bottom of this post for more in-depth explanations), it is fairly easy to understand the reasoning behind the cases where the magic fails.</p>\n<h3>Decorators</h3>\n<p>Developers who actually use MobX are probably questioning my examples by now, because I’ve been using a different syntax than the primary MobX documentation for showing my examples.  So let’s talk about decorators.  The preferred way (according to the documentation) to write MobX code is to use decorators to define observers and observables.  Decorators are a <a href=\"http://tc39.github.io/proposal-decorators/\">proposed new JavaScript feature</a> for declaratively adding extra behavior to classes, class properties and class methods.  Using them with MobX, my above example would look like this <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Appointment</span> <span class=\"token punctuation\">{</span>\n\n  @observable dueDate <span class=\"token operator\">=</span> <span class=\"token string\">'01-01-2017'</span>\n  @observable title <span class=\"token operator\">=</span> <span class=\"token string\">'Dinner with Joe'</span>\n  @observable location <span class=\"token operator\">=</span> <span class=\"token string\">'Chik-Fil-A'</span>\n\n  @computed <span class=\"token keyword\">get</span> <span class=\"token function\">isToday</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span>dueDate<span class=\"token punctuation\">,</span> <span class=\"token string\">'MM-DD-YYYY'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">diff</span><span class=\"token punctuation\">(</span>moment<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'days'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> @ </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>location<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n@observer <span class=\"token keyword\">class</span> <span class=\"token class-name\">TodayBox</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>appointments<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> a<span class=\"token punctuation\">.</span>isToday<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>     \n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That obviously looks a lot cleaner than my example.  So what’s the problem?  Again, decorators are a <em>proposed</em> JavaScript feature.  Currently they’re in Stage 2, which means roughly that they are very likely to eventually make it into the language, but may change in non-trivial ways before that happens.  Currently decorators are implemented in <a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\">TypeScript</a>, as well as a <a href=\"https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy\">3rd party babel plugin</a>, but as of January 2017 <a href=\"http://kangax.github.io/compat-table/esnext/#test-class_decorators\">are not implemented in any browser engines</a>, and are not implemented in any first party babel plugins <a href=\"https://github.com/babel/babel/issues/2645\">due to spec instability</a>.  Decorators are a key part of Angular2, and are used by other frameworks including <a href=\"http://aurelia.io/\">Aurelia</a> and <a href=\"https://github.com/rwjblue/ember-computed-decorators\">Ember</a>, so I don’t think they’re going away.  But I also don’t see them as ready for production use for teams that don’t have the capacity to dedicate the time to update existing code if/when the spec changes<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  If for one reason or other you’re comfortable with the risks however, decorators are a great way to clean up the MobX API, and I’m excited for the spec to get to the point where I can use them.</p>\n<h3>Comparison to Redux and setState</h3>\n<p>As a state management library that was built to be used with React, the obvious questions to ask about MobX are how it improves over React’s built in state handling, and how it compares to <a href=\"http://redux.js.org/\">Redux</a>, the current most popular state management solution for React. MobX takes a different approach to each.</p>\n<p>It’s important to say at the start that MobX isn’t mutually exclusive with using setState.  It’s possible to use them together, with MobX managing application data and setState handling individual component/UI state.  But there is some advantages to using MobX for UI state as well.  The biggest reason is that MobX is smarter than setState about when re-rendering is required.  By default React Components re-render on any call to setState, regardless of whether the state change actually affects what is rendered or not. MobX’s creator <a href=\"https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.x0o6y4rxv\">wrote more about this on Medium</a>.</p>\n<p>Comparing MobX and Redux could be a whole article on its own, so I’m not going to go too deep here, but suffice it to say that MobX is more flexible than Redux, but as a result loses some of the benefits of Redux’s structured approach.  Specifically, it is easy to convert a single object to become a MobX observable and use it in an existing React component.  It can be easily inlined in an existing file and used for one component even.  You also don’t have to deal with the ceremony of using <a href=\"http://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2/\">immutable data</a>.  Redux is intended as a solution that will take over all your state, and doesn’t scale down nearly as well or mix with other solutions <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>.  However, Redux’s structure also has benefits.  It allows easy testings of each component of an app individually, the creation of powerful tooling that will work with any Redux app, and reliable guarantees of how state will be updated.  These things are mostly possible with MobX <sup id=\"fnref-4\"><a href=\"#fn-4\" class=\"footnote-ref\">4</a></sup>, but require more developer discipline, and/or can’t be written as easily as universal tools. Overgeneralizing, I would prefer Redux in a new application, but would look to MobX for improving data management in an existing application.  MobX also has advantages in applications where you’re displaying a large amount of UI elements based on a relatively small amount of data, or have a lot of derived data (something like a spreadsheet), whereas Redux has benefits for applications that need to be extremely reliable and well tested.  </p>\n<h3>Stray Thoughts</h3>\n<ul>\n<li>If you do want more discipline in MobX, make sure to use <code class=\"language-text\">useStrict</code> to require updates to use Actions</li>\n<li>MobX has a nice set of <a href=\"https://github.com/mobxjs/mobx-react-devtools\">devtools</a> that are useful if you’re opting in to using actions, and using React with MobX.</li>\n<li>If this isn’t clear yet, I definitely recommend hacking around with Mobx’s low level APIs to learn more about how it works before integrating it straight into a framework</li>\n<li><del>Also note that MobX 3.0 is imminent, there is a release candidate that you can play with now.</del> <strong>Update:</strong> That didn’t take long.  <a href=\"https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443#.mk6mdypt2\">MobX 3.0 is out</a>.</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>The two most helpful resources I found for conceptually understanding MobX were in-depth articles by the library’s author <a href=\"\">Michael Westrate</a>: <a href=\"https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.jd4hgh2zi\">Becoming fully reactive: an in-depth explanation of MobX</a> on Medium and <a href=\"https://mobx.js.org/intro/concepts.html\">Concepts &#x26; Principles</a> from the MobX documentation</p>\n</li>\n<li>\n<p>This <a href=\"https://twitter.com/AdamRackis/status/775706291259908096\">tweet thread</a> and the linked article, are a good breakdown of the tradeoffs between MobX and Redux</p>\n</li>\n</ul>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Technically this also uses class properties as well, another proposal that works well with decorators</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>It’s possible any spec changes will be trivially fixable with a code mod script, but right now there is more uncertainty than I am personally comfortable with.  I’m grateful to people who are willing to take more risks here than me, they push the language forward.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>I’m talking here about what is encouraged and easy, not what is possible.  It is of course possible to mix in Redux with other solutions.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-4\">\n<p>MobX has some nice <a href=\"https://github.com/mobxjs/mobx-react-devtools\">devtools!</a></p>\n<a href=\"#fnref-4\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2017/01/09/mobx-first-impressions/"}}},{"node":{"frontmatter":{"readNext":"large-improvements-small-team,ten-things-js,ll-context","topics":["react","architecture","javascript"],"category":"fe-architecture","key":"react-confessions","title":"React Architecture Confessions","description":"The mistakes I made while learning React and why I made them","layout":"post","path":"/2018/02/07/react-confessions/","date":"2018/02/07","dontfeature":null,"isDraft":null},"html":"<p>I’ve been reading through <a href=\"http://amzn.to/2mKoejo\">Clean Architecture</a> by Robert “Uncle Bob” Martin this month<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>, and while it is great it has had the unpleasant effect of reminding me of all of the mistakes I’ve made over the past few years while learning and using <a href=\"https://reactjs.org/\">React</a>.  I’ve absolutely loved using React at work, and it has made so many things easier.  But it’s a very unopinionated tool when it comes to structuring applications, and I made a lot of mistakes as I was using it to build some small side projects, and then transitioned a major production app to React from Backbone/Marionette.  These mistakes are all architectural; how I broke out components, communicated between components, and managed data and dependencies within components.</p>\n<p>I thought it would be useful to lay out the architecture mistakes I made as I was learning React, both as a solid reflection exercise for myself, and a warning to those of you who are just starting down the “component based UI” road.</p>\n<h3>My Mistakes</h3>\n<h4>1. Including API calls directly in components</h4>\n<p><strong>What I did wrong</strong>: This is an embarrassing one, but essentially in several places I had components directly fetching data from the server in their constructors or mount calls, and using that information to determine what to render.</p>\n<p><strong>Why I did it</strong>: This was to some extent a lack of planning.  I had all my core “business objects” modeled in some sort of separate object oriented way (either as Backbone or MobX objects) and was able to coordinate syncing them to the server outside of the component layer.  But some data in the system hadn’t been modeled in that way, and when I encountered a need for those components (such as some types of system configurations) instead of stepping back and coming up with a design for modeling those configurations on the front end, I instead sometimes fell back to an ad-hoc API call.   This was also sometimes a result of lazily copying legacy code that had bad patterns while converting components to React, and other developers copying bad patterns when trying to figure out the new React code.</p>\n<p><strong>What I should have done instead</strong>: This could be a whole series of blog posts in itself, but essentially I should have been observing a few principles that would have set off alarm bells.</p>\n<ol>\n<li>Components in a system of any size shouldn’t know about the server. UI Components are about as “low level detail” as it gets in a UI architecture, and should be passed the data they need from a higher level portion of the system.</li>\n<li>If the front end code needs data from the server, it is worth the time to properly model that data in terms of whatever data layer the front end is using.</li>\n</ol>\n<h4>2. Breaking the “props as the component interface” abstraction</h4>\n<p><strong>What I did wrong</strong>: One of the best things about React is the clear interfaces components provide with their list of props.  If properly documented with PropTypes or a type system like Flow or Typescript, it’s easy to look at any React component and tell what data it expects to receive, and therefore how other code is expected to interact with it.  99% of the time, good React components act as a function of <code class=\"language-text\">(props, state) => UI</code>.  It is however, possible to get access to a component instance, and call functions on them.  There are  rare situations where this is the right way to do things, for instance <a href=\"https://stackoverflow.com/questions/28889826/react-set-focus-on-input-after-render\">focusing an input</a>.</p>\n<p>When I first started creating React components though, I overused that pattern, and accessed the interface directly to access or change its internal state.  I’d have components like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">inputValue</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">inputValue</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>SpecialInput ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>input <span class=\"token operator\">=</span> el<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Why I did it</strong>:  Early on I was using this pattern in a way that copied other frameworks I was familiar with.  A parent component would need the state of it’s child component, so it would maintain a reference to the child and query the child about the state.  When I converted Backbone components to React, sometimes I was basically just copy and pasting existing code, and making it work.</p>\n<p><strong>What I should have done instead</strong>:  React doesn’t really encourage parents pulling state from their children.  Instead, if there is state that needs to be shared between components, it should be moved up to the parent component and then the state and an updater function should be passed down to the child component.  So my example above would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SpecialInput</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>input\n      className<span class=\"token operator\">=</span><span class=\"token string\">'fancy-input'</span>\n      defaultValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span>\n      onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">event</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span><span class=\"token function\">updateValue</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>that I would access from parent container like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputUser</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      inputValue<span class=\"token operator\">:</span> <span class=\"token string\">'abc'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">methodThatGotCalledOnSomeEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomethingWith</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>SpecialInput\n             value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>inputValue<span class=\"token punctuation\">}</span>\n             updateValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">inputValue</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>inputValue<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n          <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>3. Interacting with 3rd party components directly</h4>\n<p><strong>What I did wrong</strong>: My first year and a half using React, when I was using 3rd party UI components like <a href=\"https://github.com/facebookarchive/fixed-data-table\">react-fixed-data-table</a> I would always use them directly in my components, and take full advantage of their APIs.</p>\n<p><strong>Why I did it</strong>: Because every React library in the world has documentation showing how to use its components directly in code for a variety of different use cases, and nobody ever tells you to put an abstraction around their code</p>\n<p><strong>What I should have done instead</strong>: I should have wrapped the 3rd party libraries in one or more wrapper components.  This has a few advantages:</p>\n<ol>\n<li>When we’re using a UI component like a table in a new place in our App, if I’ve created a wrapper component that has presets for most common settings, I only need to configure the things that are meaningful to this new use case in my app</li>\n<li>Targeted wrapper components like a <code class=\"language-text\">SortableTable</code> component or a <code class=\"language-text\">DropdownWithAutoComplete</code> component are easy to understand to a new reader of the code.  Instead of digging through configuration props, they can read the component name and understand the purpose of that component then focus on the data being passed to it</li>\n<li>When making updates to a library it is much easier to test that the changes are safe if the uses of the library are limited to a few focused components, rather than being spread across a whole application</li>\n<li>Similarly, if we need to switch to a new library, that is much easier with a limited footprint</li>\n<li>It can be easier to create reliable automatic tests using a wrapper component, since you have more control of things like how mocking works and when the component interface changes than you do for 3rd party code</li>\n</ol>\n<h4>4. Importing other parts of the system directly into display components</h4>\n<p><strong>What I did wrong</strong>: The main application I work on uses a messaging system to allow communication between different parts of the system.  It’s a legacy piece from when it existed as a Backbone application, and isn’t a very React-y way of doing things, but that isn’t really a problem.  This situation would be the same for a logging component or a data store.  What isn’t great is that when I need to use the messaging system, I always import it directly into the component file.</p>\n<p><strong>Why I did it</strong>: Direct imports are convenient, the messaging system is a core part of my system, and it seemed like a normal way of accessing it.  I also wasn’t aware of any better way to do it.</p>\n<p><strong>What I should have done instead</strong>:  The disadvantage of direct imports is that they’re harder to test.  If I had passed my messaging system as a prop to whatever component needed it, it would be much easier to test that it was called in the way I expected, without having to mock out the whole messaging system library.  I also could abstract away the whole power of the messaging system, and only provide the specific functionality needed by a component.  When I first began working on this system though, I didn’t know a practical way to do this.  The messenger system was often used by deeply nested components, and it seemed bad to pass it down a whole component tree.</p>\n<p>The answer is to use the <a href=\"https://www.robinwieruch.de/react-provider-pattern-context/\">Provider pattern</a>.  The provider pattern is a way to use React’s context API to provide top level properties from a high level parent component to deeply nested child components.  It is a perfect pattern for providing important high level pieces of your application to low level components without tightly coupling them, while maintaining testability.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<h4>5. Changing too many things at once</h4>\n<p><strong>What I did wrong</strong>: When my team began converting our application from Backbone to React, it was tempting to try and change many things at once.  All the React examples you see online are using Babel/ES6, Webpack, Redux, React Router and tons of other shiny but complicated things.  Trying to implement it all in an existing project<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup> can be overwhelming and lead to <a href=\"http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html\">lava layers</a>.  We actually started out with good discipline and converted files to use ES6 first, then added Webpack, then slowly started to convert UI components to React.  Unfortunately as we continued to convert React, we began replacing our Backbone data models with MobX, and began using CSS Modules in some places.  When our team size was reduced last year, we were left in a situation where the same functions were performed in different ways throughout the codebase.</p>\n<p><strong>Why I did it</strong>: It’s easy to see things that could be better in a web application and immediately want to fix them!  Especially if parts of that change seem easier than other changes you’re working on</p>\n<p><strong>What I should have done instead</strong>: I wrote about this <a href=\"https://benmccormick.org/2018/01/07/large-improvements-small-team/\">at length</a> last month, but there really is no substitute for taking things one at a time.  While it’s tempting to think that it will be easier to convert to React if you’re using other “react-y” tools and libraries, your code will ultimately be more maintainable if it is consistent throughout an application.  The only reliable way to do that is to make changes completely before you start making other changes.  It isn’t sexy, and it will leave you at least a little ways off the bleeding edge, but it’s the way to build large, reliable systems and keep them up to date.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>At the time of writing this, it was super on sale on <a href=\"http://amzn.to/2mKoejo\">Amazon</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the Context API that the provider pattern is based on is changing, so I’d isolating out any provider code you write into a reusable component so that it is easy to update later</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Or even a new project for that matter!</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2018/02/07/react-confessions/"}}},{"node":{"frontmatter":{"readNext":"consistency,reusable-react,book-review-five-dysfunctions","topics":["react","architecture"],"category":"fe-architecture","key":"derived-state","title":"Avoiding Derived State In React","description":"What derived state is, what problems it can cause, and how to avoid it","layout":"post","path":"/2019/06/24/derived-state","date":"2019/06/24","dontfeature":null,"isDraft":null},"html":"<p>A lot of advice in the React community is focused around avoiding explicitly storing “derived state” of some type or another.  Some examples of this type of “derived state” that the community warns against:</p>\n<h4>Storing data that is directly derived from another piece of data in redux</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token function\">createReducer</span><span class=\"token punctuation\">(</span>initialState<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">ADD_USER</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    state<span class=\"token punctuation\">.</span>users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// numUsers is derived state: it will always be tied to users</span>\n    state<span class=\"token punctuation\">.</span>numUsers <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>users<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h4>Storing state that is directly derived from a prop in a component</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Widget</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// the hasError state is derived from the error prop</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>hasError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>props<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//... continued ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>Storing state that is directly derived from another piece of state</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">NameForm</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            firstName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n            lastName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n            fullName<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// because fullName is directly associated with firstName and lastName, we have to update it</span>\n    <span class=\"token comment\">// any time they are updated</span>\n    <span class=\"token function\">updateFirstName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newFirstName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n            firstName<span class=\"token operator\">:</span> newFirstName<span class=\"token punctuation\">,</span>\n            fullName<span class=\"token operator\">:</span> newFirstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> state<span class=\"token punctuation\">.</span>lastName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">updateLastName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newLastName</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n            lastName<span class=\"token operator\">:</span> newLastName<span class=\"token punctuation\">,</span>\n            fullName<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>firstName <span class=\"token operator\">+</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> newLastName<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// ... continued ....</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>These examples are all based on real-world code I’ve seen.  And they all were in code that <em>worked</em>, the program executed as expected.  But they’re still problematic.  This type of derived state is error-prone; when new code is written to update the state, each new programmer touching the code has to understand the relationship, or the whole thing can get out of sync.  When state is coming from props, like the error example above, you have to make sure that the state gets updated properly when the props change. And when the state gets out of sync, it is possible to end up in strange states where a programmer’s expectations are violated.  A program shows a blank state saying no users have been added, even though one has already been created. A form is expecting to have an error, but the error text is empty or set to a default value.  Or a site has 2 different names for an individual that show up differently in separate parts of the interface.</p>\n<p>This type of problem isn’t a new thing in Computer Science.  When programmers do it by accident they usually call it a <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\">DRY violation</a>.  When they do it intentionally they call it caching.  And when they do it intentionally but screw things up, they <a href=\"https://twitter.com/secretGeek/status/7269997868\">make jokes about off by one errors</a>.  Fortunately, that means that the tradeoffs are pretty well understood here.  So how do we handle situations where it looks like derived state may be necessary?</p>\n<h4>Just Derive State At Render Time</h4>\n<p>For many many things, including the 3 examples above, if you need information at render time that can be derived from other pieces of state, it’s totally fine to just calculate it at render time.  For the first name example above, you can just include a <code class=\"language-text\">let fullName = this.state.firstName + ' ' + this.state.lastName;</code> line at the top of your render function and move on<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. Storing derived information is unnecessary and harmful when calculating it at runtime adds minimal performance overhead or repetition.</p>\n<h4>Memoization</h4>\n<p>But Ben, my component is slow now!</p>\n<p>…are you sure it’s actually slow?  Have you tested it?  Have you proven that the derived state calculation is actually a meaningful part of this?</p>\n<p>Deriving state can be slow when you have to do complicated calculations or reformatting of data.  This is still not usually a problem, but if you’re in a performance sensitive area of code and have proven it to be a problem, you can start considering caching solutions. You still don’t want to store your cached values in state or your redux stores though.  Instead, you want to use a computed value that is recalculated when its inputs change.  The exact code will depend on your state management strategy, but some examples out there include</p>\n<ul>\n<li><a href=\"https://github.com/reduxjs/reselect\">Reselect for Redux</a></li>\n<li><a href=\"https://mobx.js.org/refguide/computed-decorator.html\">Computeds in MobX</a></li>\n<li><a href=\"https://reactjs.org/docs/hooks-reference.html#usememo\">useMemo in React Components</a></li>\n</ul>\n<p>All of these methods use <em>memoization</em>, a type of caching where arguments are passed to a function, and if the function has been called with those arguments before, it returns the previous result rather than recomputing.  If for instance we had a component and wanted to get the names of all <code class=\"language-text\">users</code> with the current <code class=\"language-text\">type</code> based on props, and we knew that <code class=\"language-text\">users</code> was sometimes quite large, making the calculations slow, and we expected the component to re-render often for some reason or another we might write code like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">UsersList</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>users<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">let</span> userNames <span class=\"token operator\">=</span> <span class=\"token function\">useMemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> users<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">user</span> <span class=\"token operator\">=></span> user<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>users<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// ... continued ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now userNames will automatically be recalculated only when users or type changes<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  The MobX and Redux solutions work similarly.  Memoization isn’t a performance silver bullet: at some point, you might have to look at how you can make your calculations less expensive or take them off of the rendering path completely.  But for most simple data transformation tasks, deriving state at render time and using memoization to keep it performant where needed should help you tame any derived state problems you encounter.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>But you should probably read about all the ways that <a href=\"https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/\">names can be more complicated than you think</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that useMemo (and most memoization solutions generally) doesn’t guarantee the function will never run more than once.  Most solutions have a limited number of results they will store, so if the inputs change often, the result might get recalculated.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2019/06/24/derived-state"}}},{"node":{"frontmatter":{"readNext":"react-confessions,fe-concerns,valuable-code-reviews","topics":["architecture","react"],"category":"fe-architecture","key":"reusable-react","title":"Reusable Code In React: Inheritance, Composition, Decorators and Mixins","description":"How React uses multiple code sharing patterns to create a great developer experience","layout":"post","path":"/2019/02/11/reusable-react","date":"2019/02/11","dontfeature":null,"isDraft":null},"html":"<p>Once you get past the initial complexity it creates by bucking conventions, React is the most developer friendly UI library I have ever used.  A big reason for that is the way it uses and encourages a variety of patterns to share codes and concepts across a code base. Let’s look at how 4 traditional code re-use patterns are used by React and in the React ecosystem, using a simple counter example to explore why each pattern is used.</p>\n<h4>Inheritance</h4>\n<p>Inheritance is a code-reuse technique associated with object oriented programming.  If you’re like me and learned to program in school using Java, it probably is one of the very first Computer Science concepts you learned.  For self-taught JavaScript devs it may be much less familiar.  Inheritance is a pattern for extending an existing class or object with additional methods or data, possibly overriding the implementations of other methods in the process.  A classic example of inheritance looks like this in JS:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> automobile<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">This </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> has </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> wheels</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Car</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> <span class=\"token string\">'car'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Bicycle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Automobile</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>vehicleName <span class=\"token operator\">=</span> <span class=\"token string\">'bike'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numWheels <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> car <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bike <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bicycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncar<span class=\"token punctuation\">.</span><span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This car has 4 wheels</span>\nbike<span class=\"token punctuation\">.</span><span class=\"token function\">printNumWheels</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// This bike has 2 wheels</span></code></pre></div>\n<p>Inheritance is useful for highly structured objects where you have a lot of shared behavior across similar but slightly different objects and you want to be able to treat all of the objects as interchangeable from an API perspective. This is especially valuable when that interchangeable API is well defined and unlikely to change too much.  However it tends to lead to brittle structures when nested across multiple levels, and is a poor fit when dealing with dissimilar objects that need to share a few behaviors.</p>\n<p>React Components are objects that we want to treat as interchangeable from an outside API perspective, and they have well defined points where behavior may need to be different between components but don’t always need to differ: the lifecycle methods like render, componentDidMount, componentWillUnmount, etc.  Thus React relies on a single level of inheritance as the foundation of its class components.  Class components inherit from React.Component, and only implement the life cycle methods that they’re interested in.  But all of them inherit useable setState and forceUpdate functions, and React can verify that by checking the <code class=\"language-text\">isReactComponent</code> property on the object.</p>\n<p>Here is a basic counter component.  Notice how we don’t have to define <code class=\"language-text\">setState</code> on our <code class=\"language-text\">Counter</code> class.  Instead it inherits it from React.Component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//counter.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-layout\"</span><span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-display\"</span><span class=\"token operator\">></span>\n                Current Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>button\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn fancy-btn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Outside of this single layer of inheritance for defining Class components, inheritance isn’t used much in React development.  It turns out that better patterns have emerged for sharing application code.</p>\n<p><strong>Inheritance Pattern</strong>: Used sparingly to share common code across React class components.</p>\n<h4>Composition</h4>\n<p>Composition is a code reuse technique where a larger object is created by combining multiple smaller objects.  Composition is in some ways the natural pattern of the browser, as HTML uses it.  We build a table in html, not by adding a bunch of configuration to a single table object, but by combining a <code class=\"language-text\">table</code> tag with <code class=\"language-text\">tr</code>s, <code class=\"language-text\">td</code>s, and <code class=\"language-text\">th</code>s like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Web Framework<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Language<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Rails<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Ruby<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Django<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Flask<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Python<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Scala<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Play<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Java<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>Express<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>JavaScript<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>React has fully embraced the HTML style of composing UI components, and it takes thing to the next level by allowing components to be stateful and pass values down into children.  For instance, if we wanted to split the counter component above into a separate control and display, perhaps using a standard set of UI components we could do it by extracting <code class=\"language-text\">FancyLayout</code>, <code class=\"language-text\">FancyButton</code> and <code class=\"language-text\">FancyDisplay</code> elements out into their own components and then composing them back into a single counter component.  This type of thing is useful for creating and reusing standard UI elements, and might look something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// UI components defined elsewhere</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyLayout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-layout\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyDisplay</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"fancy-display\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">FancyButton</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">,</span> className<span class=\"token punctuation\">,</span> onClick<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>button\n    className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">fancy-layout </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>className<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">}</span>\n    onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onClick<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// counter.js</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n                Current Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyButton\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this example we now have 4 components instead of one.  Three of them are laser-focused on defining a specific element type, and are “display only” with no logic of their own.  The 4th contains all of our logic and defines how the display pieces come together.</p>\n<p>In the seminal 1994 book <a href=\"https://amzn.to/2WDhncv\">Design Patterns</a> the authors argue that composition should be strictly preferred over inheritance where possible because it creates less tightly coupled objects, and encourages designs where objects are small, focused and readable.  Composition also lets us hide complexity inside of child objects, because parent components only have to concern themselves with the APIs exposed by those child objects.  One of the keys to React’s success has been making this type of composition clean and painless by encouraging strong component interfaces and utilizing JSX to provide a comfortable syntax for describing composed UIs while keeping all component concerns in the same place<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p>It is worth noting that after this refactor, our counting logic is still tightly tied to the layout of our counter component.  Let’s explore 2 more patterns that can help us extract our logic from the display completely.</p>\n<p><strong>Composition Pattern</strong>: The core pattern for separating concerns while creating complex UIs with React.</p>\n<h4>Decorators</h4>\n<p>Decorators are a pattern for editing an instance of a class to give it additional behaviors than it had previously.  In contrast to inheritance, decorators are not part of the class definition, but are modifications to the class at run time to allow a subset of objects to have additional data or behavior <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup>.  In classic object oriented programming, this was implemented by having a decorator class that shared an interface with the class to be decorated, and called its methods through to that class, with additional behavior before or after the pass-through.  The React community has generally implemented this pattern slightly differently, by writing functions that take a component class and return a new component class that calls through to the original component, possibly with additional props passed in, extra components rendered around it, or conditional logic that causes it not to render in some cases.  The React community generally refers to this pattern as <a href=\"https://reactjs.org/docs/higher-order-components.html\">Higher Order Components</a>.</p>\n<p>Here’s an example of using a higher order component called <code class=\"language-text\">withCounter</code> to separate out the display and logic portions of our Counter component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">withCounter</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">WrappedComponent</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComponentWithCounter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            count<span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n               count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n         <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n         <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span>\n         <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>WrappedComponent count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> increment<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>increment<span class=\"token punctuation\">}</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ComponentWithCounter<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// counter.js</span>\n\n<span class=\"token comment\">// this is a display only version of the component with no logic</span>\n<span class=\"token comment\">// very easy to test and simple to change</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">CounterDisplay</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n                Current Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n            <span class=\"token operator\">&lt;</span>FancyButton\n                className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n                onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// this adds the logic back to the display only version</span>\n<span class=\"token keyword\">const</span> Counter <span class=\"token operator\">=</span> <span class=\"token function\">withCounter</span><span class=\"token punctuation\">(</span>CounterDisplay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we’ve taken our refactored <code class=\"language-text\">Counter</code> and split it into 2 more pieces.  The display logic remains in a simplified <code class=\"language-text\">CounterDisplay</code> component that doesn’t have any state or business logic of its own.  <code class=\"language-text\">CounterDisplay</code> takes 2 new props, <code class=\"language-text\">count</code> and <code class=\"language-text\">increment</code> that allow it to implement the counting logic without having to know how it is implemented.</p>\n<p>Meanwhile, we split the counting logic out into a Higher Order Component.  <code class=\"language-text\">withCounter</code> takes a React component and wraps it with another component that is solely responsible for keeping track of counts and providing the increment function.  In this case that is our CounterDisplay component, but if we decided we wanted to also have fancy counters that incremented when the user clicked a checkbox or hovered over a box or typed the word increment, it would be easy to reuse this logic.</p>\n<p>Higher Order Components helped many React libraries like Redux and React Router define elegant APIs when they first came on the scene, but they’ve always been a power user technique.  There are many ways to screw them up, and although they allow for theoretical loose coupling, they still require a certain level of shared understanding between the decorator and decoratee, including knowing what props to make available, whether any methods have to be proxied through to the decorated component, and more.  The community as a whole has tended to favor render props over the past year<sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup>, and now looks poised to move towards our 4th pattern: mixins.</p>\n<p><strong>Decorator Pattern</strong>: Used to provide a nice interface for separating out logic shared by multiple components and centralizing it.</p>\n<h4>Mixins</h4>\n<p>The newest pattern that React has added to its bag of code reuse tricks is also one of the oldest.  In older versions of React there was a feature called “mixins” that was <a href=\"https://reactjs.org/blog/2016/07/13/mixins-considered-harmful.html\">later deprecated due to its ease of mis-use</a>.  “Mixins” are gone now, but the “Mixin pattern” is back!  React is in the process of introducing <a href=\"https://reactjs.org/docs/hooks-intro.html\">hooks</a>, a new way of doing mixins.</p>\n<p>So first, what is a mixin?  It is yet another way of defining shared behavior onto a class, in this case providing methods and/or data that are “mixed in” to one or more classes.  It differs from inheritance because a class using a mixin doesn’t have to use the mixin as a parent class, and the class may use several mixins at once.  Mixins that are used together in one class may not be used together in another.  Mixins also different from the decorator pattern, because the mixin is part of the class definition, not something that is applied dynamically later.</p>\n<p>Mixins are useful when you have classes with different purposes that shouldn’t share an inheritance tree but do have some shared behavior.  In practice though they have historically been tricky to use because it is easy to tightly bind mixin code to the implementation of the code that it is mixed into.  Poorly implemented Mixins can result in naming collisions, inflexible code, and hard to trace errors.</p>\n<p>React Hooks may not look like mixins, since they are used in a function, not a class.  But they fill the exact same role as traditional mixins, while avoiding some of the footguns (no naming collisions!).  Let’s look at an example from Dan Abramov’s blog post <a href=\"https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889\">introducing hooks</a>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>width<span class=\"token punctuation\">,</span> setWidth<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleResize</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setWidth</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>innerWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      window<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> handleResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> width<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This is a hook that provides the width of the current window to a React component, updating each time the window is resized.  You would use it in practice like this example of a header bar that replaces its menu items with a hamburger menu on smaller screens:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Header</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> windowWidth <span class=\"token operator\">=</span> <span class=\"token function\">useWindowWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> showHamburgerMenu <span class=\"token operator\">=</span> windowWidth <span class=\"token operator\">&lt;</span> <span class=\"token number\">800</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>Logo<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">{</span>showHamburgerMenu <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>HamburgerMenu<span class=\"token operator\">/</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span>MenuItems<span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This usage is different from a normal helper function, because it enhances the component; because this is using React’s state code within the hook, this component will automatically update when needed.  So it is a way of reusing component behavior like Higher Order Components.  But we lose a lot of the disadvantages of HOCs.   <code class=\"language-text\">useWindowWidth</code> and <code class=\"language-text\">Header</code> are extremely loosely coupled.  <code class=\"language-text\">useWindowWidth</code> doesn’t know anything about the header bar structure or logic, or the rules for when things should show.  It is only providing information.  At the same time, if we refactored it to get the window size in some other way, or to throttle updates, we wouldn’t have to change anything about <code class=\"language-text\">Header</code>, since all it knows is that <code class=\"language-text\">useWindowWidth</code> will occasionally provide it an updated windowWidth.</p>\n<p>The functional style makes this look different than a traditional object oriented “mixin pattern” example, but it is using the same concepts and solving the same problems.  This way of doing things has advantages; because it is “just a function” that gets called, we never need to worry about it having a naming collision with a different class method, or having to be aware of the structure of the outer component.  If it needs component specific information, we can just pass it an argument.</p>\n<p>With Hooks, we can create a much cleaner version of our Higher Order Component example from the decorators section.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// defined in a library file</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useIncrement</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">initial <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> val <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> initial<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// counter.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>FancyLayout<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>FancyDisplay<span class=\"token operator\">></span>\n            Current Count<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyDisplay<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>FancyButton\n            className<span class=\"token operator\">=</span><span class=\"token string\">\"incrementCounterBtn\"</span>\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>Increment<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyButton<span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>FancyLayout<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As with decorators we’ve extracted the logic in a reusable form, but we’ve done so with much less boilerplate.  I’ve removed the intermediate <code class=\"language-text\">CounterDisplay</code> here, because if we’re not using it for anything else, it is easy enough to just include the hook directly in the definition.  But if we wanted, we could easily use that <code class=\"language-text\">CounterDisplay</code> component with a hooks enabled wrapper component:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Counter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> increment<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>CounterDisplay count<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> increment<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>increment<span class=\"token punctuation\">}</span><span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>Mixin Pattern</strong>: Hooks use a variation on the Mixin pattern to allow sharing related behavior and data between unrelated function components easily.</p>\n<h3>Summary</h3>\n<p>If I took one thing out of this analysis personally, it was a renewed appreciation for considering the needs of a situation and finding the right approach for the job, rather than trying to fit every problem to my favorite solution.  I’m over 2000 words and I haven’t even addressed all the different strategies React and the React community use for code re-use. <em>Sorry render props</em> 😢.   So next time you run into an architecture problem, consider a few different solutions and their tradeoffs.</p>\n<p><strong>TL;DR</strong></p>\n<p>React uses a variety of patterns for code reuse.\n<strong>Inheritance Pattern</strong>: Used sparingly to share common code across React class components.\n<strong>Composition Pattern</strong>: The core pattern for separating concerns while creating complex UIs with React.\n<strong>Decorator Pattern</strong>: Used to provide a nice interface for separating out logic shared by multiple components and centralizing it.\n<strong>Mixin Pattern</strong>: Hooks use a variation on the Mixin pattern to allow sharing related behavior and data between unrelated function components easily.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Clunky JS based interfaces for specifying child components are visually difficult to scan and understand, while solutions that use external template files spread logic about a single component to multiple files, making it harder to keep everything in the developers head.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>Note that the decorator pattern is not the same thing as the TC39 proposal to <a href=\"https://github.com/tc39/proposal-decorators\">add a decorator syntax to JavaScript</a>, or the TypeScript feature of the same name.  Both are related to modifying class behavior, but the mechanisms are not the same.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-3\">\n<p>Render props ultimately qualify as an advanced composition technique and so didn’t get their own heading here, but they’re definitely worth understanding.</p>\n<a href=\"#fnref-3\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","fields":{"slug":"/2019/02/11/reusable-react"}}},{"node":{"frontmatter":{"readNext":"readable-async,how-to-learn,react-confessions","topics":["javascript","react"],"category":"software-productivity","key":"utility-functions","title":"Utility Functions","description":"A few helpful functions that I bring along to all of my projects","layout":"post","path":"/2019/03/11/utility-functions","date":"2019/03/11","dontfeature":null,"isDraft":null},"html":"<p>As I’ve gone through projects over time, I’ve found a few functions that I end up creating for every significant project that I’ve worked on.  Some of the details differ from project to project, but the basic function remains the same.  I thought it would be helpful to do a rundown:</p>\n<h3>React/JSX</h3>\n<p>Some of my utils are focused on making JSX nicer to deal with.  2 situations that I’ve run into a lot in JSX are conditionally showing an item in JSX, and determining which of several classes to add to an element based on logic.  Scenarios like these:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>shouldShowCreateButton <span class=\"token operator\">?</span> <span class=\"token operator\">&lt;</span>Button\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>createWidget<span class=\"token punctuation\">}</span>\n            type <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span>\n            size <span class=\"token operator\">=</span> <span class=\"token string\">'Large'</span>\n            disabled <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>createEnabled<span class=\"token punctuation\">}</span>\n            className<span class=\"token operator\">=</span><span class=\"token string\">'create-button'</span>\n        <span class=\"token operator\">></span>\n            Create Widget\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> classNames <span class=\"token operator\">=</span> <span class=\"token string\">'create-button'</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>extraClass<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames <span class=\"token operator\">+=</span> <span class=\"token string\">' '</span> <span class=\"token operator\">+</span> extraClass<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>createEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames <span class=\"token operator\">+=</span> <span class=\"token string\">' is-disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasCreateError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames <span class=\"token operator\">+=</span> <span class=\"token string\">' has-error'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>createWidget<span class=\"token punctuation\">}</span>\n        type <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span>\n        size <span class=\"token operator\">=</span> <span class=\"token string\">'Large'</span>\n        disabled <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>createEnabled<span class=\"token punctuation\">}</span>\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>classNames<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        Create Widget\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span></code></pre></div>\n<p>These are both ok, and you’ll see plenty of examples of code like them out there, but the first puts a big chunk of code in a ternary, and it’s not always going to be clear to a reader where that <code class=\"language-text\">: null</code> came from at the end, or why it’s there by the time they reach the end.</p>\n<p>In the second example, we’re dealing with a lot of ugly string concatenation.  There are other ways to handle this, like using template strings + ternaries but generally they each provide their own messy pieces.</p>\n<p>To solve these situations, I like to define these 2 small functions:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> isString <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash-es/isString'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> filter <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash-es/filter'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// A helper for React Components to reduce ternary use</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">showIf</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">condition<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>condition <span class=\"token operator\">?</span> element <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// A helper for handling class lists where some values may be undefined</span>\n<span class=\"token comment\">// filters out anything that isn't a string and then adds spaces</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">classes</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">classList</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>classList<span class=\"token punctuation\">,</span> <span class=\"token parameter\">c</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">isString</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> c<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first just formalizes the most common use of ternaries in JSX (conditionally showing an item) and adds an easy to understand name to it.</p>\n<p>The second lets us work with an array of classNames instead of handling string concat ourselves, and will automatically filter out undefined or empty classNames.  This implementation does silently swallow errors on anything that is not a string, which may not be your preference.  Usage looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span><span class=\"token function\">showIf</span><span class=\"token punctuation\">(</span>shouldShowCreateButton<span class=\"token punctuation\">,</span> <span class=\"token operator\">&lt;</span>Button\n            onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>createWidget<span class=\"token punctuation\">}</span>\n            type <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span>\n            size <span class=\"token operator\">=</span> <span class=\"token string\">'Large'</span>\n            disabled <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>createEnabled<span class=\"token punctuation\">}</span>\n            className<span class=\"token operator\">=</span><span class=\"token string\">'create-button'</span>\n        <span class=\"token operator\">></span>\n            Create Widget\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>the showIf reads much more clearly than the previous ternary, especially for language newbies who might not be used to ternaries.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> classNames <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'create-button'</span><span class=\"token punctuation\">,</span> extraClass<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>createEnabled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'is-disabled'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hasCreateError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    classNames<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'has-error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>Button\n        onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>createWidget<span class=\"token punctuation\">}</span>\n        type <span class=\"token operator\">=</span> <span class=\"token string\">'primary'</span>\n        size <span class=\"token operator\">=</span> <span class=\"token string\">'Large'</span>\n        disabled <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>createEnabled<span class=\"token punctuation\">}</span>\n        className<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token function\">classes</span><span class=\"token punctuation\">(</span>classNames<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">></span>\n        Create Widget\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Button<span class=\"token operator\">></span></code></pre></div>\n<p>Here we’ve gotten rid of the extra string code and are working on arrays, which is a nicer data structure for dealing with lists of stuff. Also since we’re auto-filtering falsy stuff, we don’t have to worry about whether extraClass was defined if it was passed as a prop to our component or something.</p>\n<h3>Formatting</h3>\n<p>So the next few may be different for everyone.  The details here aren’t important, the important thing is that you centralize your formatting of numbers and dates.  For instance, here are functions for formatting dates, normal numbers and percentages from a current project:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> format <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'date-fns'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> isNumber <span class=\"token keyword\">from</span> <span class=\"token string\">'lodash-es/isNumber'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// takes either a string or a date object and formats it as a standard date with time</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">stdFormat</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dateStr</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dateStr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> dateStr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">,</span> <span class=\"token string\">'MM/DD/YY hh:mm A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">commafy</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> minDecimals <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            minimumFractionDigits<span class=\"token operator\">:</span> minDecimals<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">percentify</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num<span class=\"token punctuation\">,</span> minDecimals <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isNumber</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token string\">'en-US'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n            style<span class=\"token operator\">:</span> <span class=\"token string\">'percent'</span><span class=\"token punctuation\">,</span>\n            minimumFractionDigits<span class=\"token operator\">:</span> minDecimals<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The first one will take a date object and format it to something like <code class=\"language-text\">05/30/17 01:16 PM</code>.  The second will take a number and return a string formatted with appropriate commas: <code class=\"language-text\">1234567 -> '1,234,567'</code>.  The last one will convert a decimal to a percentage string: <code class=\"language-text\">0.5 -> '50%'</code>.</p>\n<p>Note that none of these functions are very long.  I’m relying on a date library for the first piece and <code class=\"language-text\">toLocaleString</code> for the other 2.  So I could inline this in most places and not have it get much longer.  The benefit of these types of functions is not in saving typing.  It’s in standardizing how you format or don’t format things throughout an application.  This has 2 benefits:</p>\n<ol>\n<li>It’s easy to fix bugs, add features or switch between libraries for these common tasks across your application because all of the logic is centralized.  If I needed to start supporting more locales than just the US for percentage formatting, or use moment for my date formatting library I could easily do so with edits to only one file.  That file is also well unit tested, so those transitions would be safe.</li>\n<li>It lets us control which formats are allowed.  For instance we’re allowing the function caller to specify how many decimal points to show for the numeric functions, but not giving options to change the date format for the formatting function, because we want that to be the same everywhere.  If we need to support multiple formats for different scenarios, like a date-only format or a format for communicating with the API, we can add options for that which don’t open up all formats, or expose them as separate functions.  With dates in particular, I want imports of libraries like moment or date-fns to be limited to 2 or 3 files at the most, and not used ad-hoc throughout the codebase.</li>\n</ol>\n<p>Note that all my examples so far have utilized other utility libraries like lodash and date-fns.  The best utility functions are those that you don’t have to maintain yourself.  I do recommend looking for libraries that you can tree-shake and only take what you need though.  Other ones like moment.js can make a big difference on your JavaScript bundle size if you let them.</p>\n<h3>Timing</h3>\n<p>Timeout functions are useful, but the browsers built in functions are callback based and don’t play well with promises or async await.  We can fix that:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sleep</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">secs</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> secs <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">pause</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>I now have a promisified version of setTimeout (<code class=\"language-text\">sleep</code>) and a special case version with a 0 timeout (useful for things that should happen as soon as possible after the current event loop executes. I prefer dealing with things in seconds over milliseconds, so I changed the API to use that.  That is probably not everyone’s cup of tea, so feel free to copy and modify.</p>\n<p>Usage looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// function to kick off a \"job\" of some type and then</span>\n<span class=\"token comment\">// check every 30 seconds to see if the job is complete</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">createJobAndShowResults</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">createJob</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// don't do this without a timeout/failure</span>\n    <span class=\"token comment\">// condition in real life!</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> jobStatus <span class=\"token operator\">=</span> <span class=\"token function\">checkIfJobIsCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>jobStatus<span class=\"token punctuation\">.</span>complete<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> jobStatus<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>And Even More!</h3>\n<p>This is just a sample of the small functions I usually create in projects.  Pretty much all of them exist for one or more of the reasons that were already discussed:</p>\n<ol>\n<li>Smoothing over awkward library syntax like multiple classes in JSX or HTML templates</li>\n<li>Making user intention clear with a well named function, like showIf or stdDateFormat</li>\n<li>Ensuring consistent application-specific behavior across common low-level operations like formatting or logging</li>\n<li>Making it easy to replace 3rd party utility libraries  like date-fns by wrapping them in an application specific function</li>\n<li>Improving browser level APIs, or shaping them to have useful defaults for the current application, like we did with toLocaleString and setTimeout.</li>\n</ol>","fields":{"slug":"/2019/03/11/utility-functions"}}}],"topic":"react"}},"staticQueryHashes":[]}