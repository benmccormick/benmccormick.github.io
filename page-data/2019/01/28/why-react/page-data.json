{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/2019/01/28/why-react",
    "result": {"data":{"markdownRemark":{"html":"<p>As React continues to evolve and grow in popularity, it can be easy to forget why it has been successful.  I’ve been working with React for 4 years now, and it’s been the best tool I’ve used for UI programming.  This is my attempt to explain why.</p>\n<h3>Composition Done Right</h3>\n<p>Software Engineers have discovered several methods of sharing logic across multiple scenarios over the years.  One of the most popular is composition, the process</p>\n<p>Prior to React, composing UI in JavaScript sucked.  It’s not that no technology let you do it: composition has been a staple of UI libraries.  But previous JavaScript UI libraries suffered from a variety of issues:</p>\n<ul>\n<li>\n<p>Non-standard composition interfaces</p>\n</li>\n<li>\n<p>Heavy boilerplate for component creation</p>\n</li>\n<li>\n<p>Composition needs to be coordinated across several files</p>\n</li>\n<li>\n<p>Prior to React, composition sucked</p>\n</li>\n<li>\n<p>React is good because</p>\n<ul>\n<li>Simple composition is obvious</li>\n<li>Its easy to extract and refactor composition</li>\n<li>It’s easy to compose with different simple patterns (child, list, areas)</li>\n<li>It’s possible to compose with complex patterns (decorated children, conditional children)</li>\n<li>Composition works through interfaces, you don’t need to understand implementations</li>\n</ul>\n</li>\n</ul>\n<h3>Declarative State makes everything easier</h3>\n<ul>\n<li>Prior to React it was often difficult to know how a particular situation occurred</li>\n<li>React’s (props, state) => UI model makes it much easier to understand what is happening on the screen</li>\n<li>Also makes it easier to think in terms of state machines at run time</li>\n</ul>\n<h3>Separating the right concerns</h3>\n<ul>\n<li>Everything you need is in one file</li>\n</ul>\n<h3>Small and focused enough to encourage creativity</h3>","frontmatter":{"title":"Why React?","keywords":"code reviews","category":"frameworks","date":"2019/01/28","path":"/2019/01/28/why-react","layout":"post","hideFooter":null,"hideSidebar":null},"fields":{"slug":"/2019/01/28/why-react"}}},"pageContext":{"slug":"/2019/01/28/why-react","relatedPosts":[{"path":"/2018/02/07/react-confessions/","data":{"title":"React Architecture Confessions","path":"/2018/02/07/react-confessions/","description":"The mistakes I made while learning React and why I made them","date":"2018/02/07","category":"fe-architecture"}},{"path":"/2019/01/07/the-concerns-of-fe-architecture/","data":{"title":"What's involved in Front End Architecture?","path":"/2019/01/07/the-concerns-of-fe-architecture/","description":"6 areas of interest in front end software design discussions","date":"2019/01/07","category":"fe-architecture"}},{"path":"/2019/01/14/value-from-code-reviews","data":{"title":"6 Keys To Valuable Code Reviews","path":"/2019/01/14/value-from-code-reviews","description":"Getting the most out of your code review process","date":"2019/01/14","category":"soft-skills"}}]}},
    "staticQueryHashes": []}