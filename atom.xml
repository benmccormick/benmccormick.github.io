<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://benmccormick.org</id>
    <title>benmccormick.org</title>
    <updated>2018-09-18T12:25:46Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Ben McCormick</name>
        <email>ben@benmccormick.org</email>
    </author>
    <link rel="alternate" href="http://benmccormick.org"/>
    <link rel="self" href="http://benmccormick.org/atom.xml"/>
    <subtitle>A blog by Ben McCormick</subtitle>
    <logo>https://benmccormick.org/logo.png</logo>
    <icon>https://benmccormick.org/favicon.ico</icon>
    <rights>All rights reserved 2016, Ben McCormick</rights>
    <contributor>
        <name>Ben McCormick</name>
        <email>ben@benmccormick.org</email>
        <uri>http://benmccormick.org</uri>
    </contributor>
    <entry>
        <title type="html"><![CDATA[Weekly Links: September 16]]></title>
        <id>https://benmccormick.org/2018/09/16/weekly-links-09-16-18/</id>
        <link href="https://benmccormick.org/2018/09/16/weekly-links-09-16-18/">
        </link>
        <updated>2018-09-16T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>Javascript &#x26; the Web</h3>
<p><a href="https://medium.freecodecamp.org/the-12-things-you-need-to-consider-when-evaluating-any-new-javascript-library-3908c4ed3f49">The 12 Things You Need to Consider When Evaluating Any New JavaScript Library | Sacha Greif</a></p>
<p>This is a smart set of criteria to consider when looking at new tools.  I’d add that it’s always worth comparing a library to a “do it without the library” approach, to make sure you understand the benefits that you’re getting for your specific project.</p>
<h3>Leadership</h3>
<p><a href="https://us2.campaign-archive.com/home/?u=1f50ce22f02ed0ffc80c10aff&#x26;id=8c0f947e69">Newsletter | Lara Hogan</a></p>
<p>I’ve already linked several of <a href="https://larahogan.me/">Lara Hogan’s</a> blog posts in this space, and now she’s started an email newsletter.  Worth checking out.</p>
<h3>Book Review</h3>
<p><a href="https://amzn.to/2xfflEi">Ready Player One | Ernest Cline</a></p>
<p>I’m about 7 years late on this (and even 6 months late for the movie hype), but Ready Player one was a great little sci-fi novel that uses 80’s pop culture as a background for a bunch of insightful commentary about our modern tech culture and where it may be heading.  A lot of fun, and worth reading if you’ve missed it for this long like me.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: September 7]]></title>
        <id>https://benmccormick.org/2018/09/07/weekly-links-09-07-18/</id>
        <link href="https://benmccormick.org/2018/09/07/weekly-links-09-07-18/">
        </link>
        <updated>2018-09-07T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="https://stateofjs.com/">State of JS Survey | Raphaël Benitte, Sacha Greif &#x26; Michael Rambeau</a></p>
<p>This survey is always a great look into the JavaScript community, and it just opened for this year.  If you’re reading this, please fill it out.  I’ll look forward to seeing what they’ve learned in a few months.</p>
<h3>Books For Programmers</h3>
<p>It’s a bit of a slow week links wise, so this week I want to share some of my favorite “timeless” programming books.  These are books that will still be relevant in 10 years.</p>
<p><a href="https://amzn.to/2wVjXyi">The Pragmatic Programmer | Andy Hunt &#x26; David Thomas</a></p>
<p>My favorite book on general programming “tactics”.  Lots of code level tips and tricks here, as well as some higher level architecture thinking.  Some of the specific examples have aged out, but the general concepts discussed in this book are timeless.</p>
<p><a href="http://amzn.to/2mKoejo">Clean Architecture | Robert Martin</a></p>
<p>I reviewed this one <a href="https://benmccormick.org/2018/02/14/book-review-clean-architecture/">earlier this year</a>, and it’s a relatively new book, but I’m confident that it is built to last.  This is a great book on programming “strategy”, the high level construction of maintainable programs.</p>
<p><a href="https://amzn.to/2NpJyK7">How To Win Friends And Influence People | Dale Carnegie</a></p>
<p>Not a programming book, but for most programmers who have achieved a minimal level of technical proficiency, the best thing they can do to get better in their career is not more technical growth, but instead growth on their “soft” skills.  Communicating complex topics, helping teams work well together, working through interpersonal issues, negotiation and persuasion are all huge skills for professional software developers.</p>
<p>There are lots of “business” books out there that are worthwhile, but this is the best book I’ve ever read on the simple yet endlessly deep topic of relating to our fellow human beings.  It has been relevant and helpful for 82 years, and I wouldn’t expect that to change soon.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: September 1]]></title>
        <id>https://benmccormick.org/2018/09/01/weekly-links-09-01-18/</id>
        <link href="https://benmccormick.org/2018/09/01/weekly-links-09-01-18/">
        </link>
        <updated>2018-09-01T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="https://blog.angularindepth.com/practical-application-of-reverse-engineering-guidelines-and-principles-784c004bb657">Reverse Engineering React | Angular In Depth</a></p>
<p>A really cool look at how you can approach a new code base and start learning how it works quickly</p>
<h3>Programming Tools</h3>
<p><a href="https://pybowler.io">Bowler | Facebook Open Source</a></p>
<p>This looks like “JSCOdeshift for Python” to me: a way to quickly update codebases to use new patterns and practices.  I love it. You can <a href="https://benmccormick.org/2018/06/18/codemod-survival/">check out my experience using JavaScript Codemods here</a></p>
<p><a href="https://github.com/sharkdp/bat">bat</a></p>
<p>bat is a prettier <a href="https://en.wikipedia.org/wiki/Cat_(Unix)">cat</a>:  dump a file into the terminal, but use syntax highlighting and line numbers.  Good stuff for anyone who lives on the command line.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: August 18th]]></title>
        <id>https://benmccormick.org/2018/08/18/weekly-links-08-18-18/</id>
        <link href="https://benmccormick.org/2018/08/18/weekly-links-08-18-18/">
        </link>
        <updated>2018-08-18T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript and the Web</h3>
<p><a href="https://ethanmarcotte.com/wrote/bits/">Bits | Ethan Marcotte</a></p>
<p>I’ll pretty much always link performance posts that do a good job laying out the challenges in a way that respects both the technical and business POV.  Ethan advocates here for a more structural view to performance problems on the web and wonders how we can find more performant ways to solve businesses revenue problems.</p>
<p><a href="https://egghead.io/browse/frameworks/react">React Community Resources | Egghead</a></p>
<p>Egghead has accumulated a pretty amazing set of beginner React resources that are free for non-members.  If you’re trying to get into React, this is a pretty good place to start.</p>
<h3>Books</h3>
<p><a href="https://amzn.to/2vX6yGo">Radical Candor | Kim Scott</a></p>
<p>I may write this up as a full review later, but Radical Candor was the best book I’ve read this year.  It’s a book for managers, but it really was just one of the best books I’ve ever read on communication and relationships.  If you want to work better with others, Radical Candor is worth buying.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: August 5th]]></title>
        <id>https://benmccormick.org/2018/08/05/weekly-links-08-05-18/</id>
        <link href="https://benmccormick.org/2018/08/05/weekly-links-08-05-18/">
        </link>
        <updated>2018-08-05T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript and the Web</h3>
<p><a href="https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4">The Cost Of JavaScript in 2018 | Addy Osmani</a></p>
<p>This was a great breakdown of how exactly large JavaScript bundles cause sites to be slow and how that impacts business needs.  These type of advocacy pieces have a tendency to clump all businesses together a bit too much<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>, but Addy is pretty reasonable about that and it’s important for every front end dev to understand these tradeoffs and problems, even if they don’t need to make them top priority for every project.</p>
<h3>Programming Tools</h3>
<p><a href="https://css-tricks.com/on-switching-code-editors/">On Switching Code Editors | Chris Coyier</a></p>
<p>I’m in the middle of possibly switching to VSCode from Atom, which I switched to from Vim, which I switched to from Sublime Text, which originally introduced me to a world beyond overweight IDEs like Eclipse.  So I can relate to this article, and it’s a great framework for thinking through switches.  I will say, I don’t necessarily think I’ve made the best choices here.  I’m not sure that since I’ve learned Vim keybindings, any of my switches have actually increased my productivity.  There’s a cost to learning new tools, even when they have shiny new stuff. <em>grumbles a bit and then goes back to chasing the shiny</em>.</p>
<p><a href="https://blog.prototypr.io/people-are-going-crazy-over-framer-x-9576448daa18">People Are Going Crazy Over Framer X | Aaron Adler</a></p>
<p>My twitter feed was blowing up with people talking about Framer X this week, a tool for designers to build interactive designs/prototypes based on React.  This post is a little old but was the best summary of the concept I could find.  Framer X is still in a private beta, so it will be interesting to see what happens when it goes public.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>Even in 2018, not everyone is serving 3rd world businesses or gets a large chunk of their traffic from mobile.  And performance always needs to be traded off against other business goals.</p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feedback Loops]]></title>
        <id>https://benmccormick.org/2018/08/02/feedback-loops/</id>
        <link href="https://benmccormick.org/2018/08/02/feedback-loops/">
        </link>
        <updated>2018-08-02T00:00:00Z</updated>
        <content type="html"><![CDATA[<p><em>How do we get better faster?</em>  It’s amazing to consider the amount of money, thought and effort that has gone into solving that one simple problem in software development over the past 2 decades.  Here’s a small sample of buzzwords, trends and methodology that are concerned with reducing the time between making a change to software and seeing the results:</p>
<p><strong>Agile -</strong> Agile is all about delivering working software sooner, so that you produce value faster and learn lessons quickly.</p>
<p><strong>Test Driven Development (TDD) -</strong> Test driven development is a process designed to let you know as soon as possible when a change has had the desired effect during development, and also sets up the conditions under which you know as soon as possible when a change has had an undesirable side effect.</p>
<p><strong>Devops -</strong> Devops has been a push over the past decade to automate and control all parts of the software creation, deployment and maintenance life cycle.  Automation like continuous integration servers that run your test after every commit, chat bots that alert you based on site performance metrics, and servers that automatically build a copy of every branch for testing in a virtual machine are all examples of Devops being used to speed up the point when you know that a change worked or didn’t work.</p>
<p><strong>Developer Experience -</strong> This is a more recent buzzword that I’ve seen thrown around a lot in the JavaScript community, talking about improving developer tools.  Developer tool features like hot reloading, nicer error messages, specialized debugging and profiling tools, and fast build times all fight this same problem of getting a result as fast as possible.</p>
<h3>Feedback Loops</h3>
<p>All of these tools are concerned with <em>feedback loops</em>, the process by which developers, designers and product managers make changes, learn about the effect of those changes, and then iterate.  Teams with slow feedback loops spend a lot of time planning and thinking about every change, making sure to get everything right. They feel the cost distinctly each time they make a mistake, and it generally leads to a more cautious mindset.  Teams with fast feedback loops can plan too.  But they also have the option of taking a more experimental attitude and learning from their attempts. This can happen at multiple scales:</p>
<ul>
<li>A <strong>developer</strong> can try out 5 different CSS rules in the UI in a few seconds if his UI is hot reloading and he doesn’t have to wait for a whole SCSS bundle to recompile</li>
<li>A <strong>QA team</strong> can immediately know if somebody pushes a change that would breaks tests if they have a CI server set up to run tests against every new commit to each branch.</li>
<li>A <strong>product team</strong> can see quickly that a new feature is problematic if he’s able to see detailed analytics on usage, instead of waiting to do enough user interviews to get a full picture</li>
<li>A <strong>company</strong> can change direction if they ship an MVP early instead of attempting to wait and release the perfect product</li>
</ul>
<h3>Closing Your Loops</h3>
<p>As a developer who wants to make your product better, one of your best power moves is finding ways to speed up feedback loops.  Here are 4 suggestions for how to do that:</p>
<ol>
<li><strong>Ask Questions Early:</strong> One of the most important feedback loops for a developer is between yourself and the individual in charge of defining what you’re building.  If you simply take requirements from your PM/Manager/Lead/Designer/CEO/Client and go off and build your giant amazing piece of beautiful software, without any clarification, there’s a pretty good chance you’re going to get to build it again, this time twice as fast without the budget.  Asking clarifying questions early prevents you wasting your time and exposes understanding gaps and technical barriers while there’s still a chance to deal with them.</li>
<li><strong>Get Feedback as you go:</strong> Similarly, anytime you have a chance to get feedback on work while it is still in process from somebody who might object in the end, do it.  This means instead of building everything at once, work on smaller chunks.  This often takes time and thought, but the earlier you create <em>complete</em> chunks of code that can be evaluated and ideally shipped on their own, the more likely you are to ship something great in the end.</li>
<li><strong>Optimize your environment:</strong> Have you spent time figuring out how to work as efficiently as possible?  Have you done it recently?  If not it might be worth re-evaluating your setup on a quarterly basis or so, figuring out what tools you can use to get quicker feedback, and also learning the shortcuts, tricks and new features for the tools that you do use.</li>
<li><strong>Ship Code:</strong> Ultimately the best feedback comes when people are using what you’ve written.  Whether that’s compliments, bug reports, feature requests, anger or viral adoption, shipping will tell you things that you would never have been certain of while iterating on your own.  If you’re struggling to get code out, always fix that first.</li>
</ol>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: July 28th]]></title>
        <id>https://benmccormick.org/2018/07/28/weekly-links-07-28-18/</id>
        <link href="https://benmccormick.org/2018/07/28/weekly-links-07-28-18/">
        </link>
        <updated>2018-07-28T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript and the Web</h3>
<p><a href="https://csswizardry.com/2018/07/getting-to-know-a-legacy-codebase/">Getting to Know a Legacy Codebase Harry Roberts</a></p>
<p>I like this advice on approaching a new codebase.  Some of it is CSS specific but the general ideas of tackling the important bits, experimenting with changes, and using tools as much as possible to catch regressions apply across the board.</p>
<p><a href="https://medium.com/@Pinterest_Engineering/a-one-year-pwa-retrospective-f4a2f4129e05">A one year PWA retrospective | Zach Argyle</a></p>
<p>TL;DR: Pinterest saw great results from supplementing their mobile apps with a PWA web app.</p>
<p><a href="https://medium.com/ben-and-dion/mission-improve-the-web-ecosystem-for-developers-3a8b55f46411">Mission: Improve the Web Ecosystem for Developers | Dion Almaer</a></p>
<p>I don’t know Dion, but this was a wonderful list of challenges that people looking to improve the web platform might want to tackle.  I’m excited to see people tackling this stuff.  I’m especially interested in what better tools for creating performant sites would look like.</p>
<h3>Technical Deep Dives</h3>
<p>These are long technical articles, and more back end focused then I usually write about on this blog but both touch on things I’m interested in and I found them fascinating.</p>
<p><a href="https://segment.com/blog/introducing-centrifuge/">Centrifuge: a reliable system for delivering billions of events per day || Calvin French-Owen</a></p>
<p>I had to build an event handling system like this a few years ago, and it’s fun to see how the optimal solution changed for Segment as they scaled.  On the backend designs that make no sense for small projects start becoming very real options as a project scales.  That’s why it’s always worth having some skepticism over the idea that because AppAmaGooFaceSoft are using a technology it must be “best in class” and we should use it in our small 20 person development team that is facing problems of a completely different scale.</p>
<p><a href="https://blog.burntsushi.net/ripgrep/">ripgrep is faster than {grep, ag, git grep, ucg, pt, sift} | Andrew Gallant</a></p>
<p>This piece is structured as a comparison of performance between cli file search tools, but the cool part is the deep insight into text search algorithms and performance tricks littered throughout the benchmark discussions.  It’s fascinating to see how heavily optimized for speed these tools are.  Also, I’ve been using Ack for 5 years even though I know it’s not the fastest tool for searching, because for me it was always “fast enough” to avoid searching.  But ripgrep appears to be dramatically enough faster in the relatively rare circumstances where I’m searching truly large directories of files, that I may finally be up for converting to a new tool.</p>
<h3>Book Review</h3>
<p><a href="https://amzn.to/2mPr3zV">Front-End Reactive Architectures | Luca Mezzalira</a></p>
<p>I’ve been very excited to check out this book since I first saw the title pre-release.  I finally had a chance to purchase and read it last month, and I’m sad to report that I had fallen prey to the classic mistake of judging a book by it’s cover.  I had hoped that this would be a deep dive into architecture and how we structure front end applications, and how reactive programming concepts can impact that.  There’s a real dearth of quality high level UI architecture resources out there, so I was genuinely excited about this.</p>
<p>Unfortunately the book is structured more like a series of loosely related blog posts, first with an overview of older architectural models like MVC, MVP and MVVM, followed by sections looking at several different libraries that use reactive principles: RxJS, Cycle, and MobX.  The latter sections focused more on the nuts and bolts of using the libraries to create simple example apps and less on the impact that using them would have on a large application.  So this is a good book if you want to see some simple code examples of how these libraries work in practice.  But I’m still waiting for a great high level front-end architecture book.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: July 20th]]></title>
        <id>https://benmccormick.org/2018/07/20/weekly-links-07-20-18/</id>
        <link href="https://benmccormick.org/2018/07/20/weekly-links-07-20-18/">
        </link>
        <updated>2018-07-20T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript and the Web</h3>
<p><a href="https://medium.com/google-design/google-photos-45b714dfbed1">Building the Google Photos Web UI | Antin Harasymiv</a></p>
<p>An amazing detail-laden look at the design and engineering decisions that go into a top of the line web photo experience.  One of the best front end reads I’ve seen this year.</p>
<p><a href="https://babeljs.io/blog/2018/07/19/whats-happening-with-the-pipeline-proposal">What’s Happening With the Pipeline (|>) Proposal? | James DiGioia</a></p>
<p>An update on the proposal to add a pipeline operator to JavaScript.  I am not the target audience of this proposal, as I don’t regularly write in the nested miniature function style that is aided by this proposal, but I would really love to see some real world code (not fabricated examples) that would have their readability improved by this proposal. The smart pipelines proposal in particular seems like it’s adding a bunch of new syntax for developers to learn and tooling to support.  Since this is a “sugar” feature and doesn’t add new capabilities, I really wonder whether it’s worth it.</p>
<h3>Leadership and Teams</h3>
<p><a href="http://boz.com/articles/p-rules.html">The P Rules | Andrew Bosworth</a></p>
<p>Design Reviews are one of my favorite parts of my job, and this is a great set of rules for having good ones.</p>
<p><a href="https://larahogan.me/blog/feedback-equation/">Feedback Equation | Lara Hogan</a></p>
<p>So this is back to back weeks with links from Lara, and there’s a good reason for it.  This is a great framework for speaking the truth to somebody with humility.</p>
<h3>Startups</h3>
<p><a href="https://www.atrium.co/blog/b2b-vs-b2c/">Why I love B2B over B2C | Justin Kan</a></p>
<p>I’ve worked at B2B companies my whole career, so I’m biased I guess, but unless you just like playing the lottery, its tough to see why you’d prefer B2C from a pure financial perspective.</p>
<h3>Random</h3>
<p><a href="https://www.youtube.com/watch?v=1-vcErOPofQ">Grace Hopper on Letterman in 1986 | YouTube</a></p>
<p>This clip is just wonderful.  A little slice of history, touching the computer industry, the greatest generation, and the roots of our current late night comedy scene.  “There was a time when everyone in this country did one thing together” is an amazing statement in our current political environment.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Quick Tip: Logging In Breakpoints]]></title>
        <id>https://benmccormick.org/2018/07/17/quick-tip-logging-breakpoints/</id>
        <link href="https://benmccormick.org/2018/07/17/quick-tip-logging-breakpoints/">
        </link>
        <updated>2018-07-17T00:00:00Z</updated>
        <content type="html"><![CDATA[<p>Stop me if this sounds familiar: you see a bug on your site.  You want to know what’s going on.  You fire up the developer tools, put a breakpoint in the area you think is a problem, and… the error doesn’t occur while it’s being debugged.  Probably it’s a timing issue, but I’ve also seen situations where pausing on certain breakpoints will actually cause a browser tab to freeze up.  Whatever weirdness you’re dealing with, you can’t get a breakpoint running in the right spot to see the error.  These are known colloquially as <a href="https://en.wikipedia.org/wiki/Heisenbug">Heisenbugs</a>, bugs that disappear when measured.  Ideally at this point you would add some logging, but if the issue is on production, and you don’t know exactly what needs to be logged, that could delay a fix by an unacceptable amount.</p>
<p>I actually ran into this last night, and decided to test out a tactic I’d heard about in a <a href="https://changelog.com/jsparty/30">recent JS Party episode</a>.  Did you know that you can use conditional break points to add temporary logging to a live application?</p>
<p>Conditional breakpoints are a browser debugger feature where you set a breakpoint, and specify a condition.  The breakpoint only stops the program execution when that condition is truthy.  Here’s a video describing the feature in Firefox:</p>
<div>
          <div
            class="gatsby-resp-iframe-wrapper"
            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"
          >
            <iframe src="https://www.youtube.com/embed/pVPlMhfrMwM" frameborder="0" encrypted-media"="" allowfullscreen style="
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
          "></iframe>
          </div>
          </div>
<p>Conditional breakpoints are useful when you’re running through a code path many times during program execution, but you want to stop during a specific run.  But they can also be used to solve our heisenbug problem.  Because the conditional breakpoint executes the code inside of it in the context of the line we’re trying to break on, we can actually put logging inside the breakpoint.</p>
<p><a href="log-example.png">An example of a console.log inside a breakpoint</a></p>
<p>That <code class="language-text">console.log</code> will execute, and because <code class="language-text">console.log</code> returns false, the breakpoint will never actually stop.  It’s a heisenbug-safe version of watching variables when you’re at a breakpoint, and there’s no redeploys required.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Prime Generation Revisited]]></title>
        <id>https://benmccormick.org/2018/07/15/prime-generation-revisited/</id>
        <link href="https://benmccormick.org/2018/07/15/prime-generation-revisited/">
        </link>
        <updated>2018-07-15T00:00:00Z</updated>
        <content type="html"><![CDATA[<p>I’ve been wanting to try learning a new programming language again for a while, and this weekend decided to play around with <a href="https://golang.org/">Go</a> for the first time in a while.  Go is a statically typed, compiled language useful for systems programming, which makes it a nice complement to my 2 primary languages, JavaScript and Python.  To help myself learn, I decided to revisit the <a href="https://benmccormick.org/2017/11/28/sieveoferatosthenes/">Sieve of Eratosthenes problem</a> that I wrote about last year.  I already had implementations in Python and JavaScript, and thought it would be interesting to see how the code and performance compared.</p>
<p>As a refresher, the Sieve of Eratosthenes is a method for generating prime numbers by iterating through numbers and marking all multiples of primes we encounter as not prime.  The original algorithm is useful for finding small primes up to a limit, but will eventually consume infinite memory for computers or infinite time for humans.  I used a modified algorithm in my JavaScript implementation that only marks numbers as they become relevant, you can read more details about the problem in <a href="https://benmccormick.org/2017/11/28/sieveoferatosthenes/">the original post</a> but using the JavaScript implementation to generate the 1 millionth prime looks like this:</p>
<div class="gatsby-highlight" data-language="javascript">
      <pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">generatePrimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> markedNotPrimeMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> valueToCheck <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>markedNotPrimeMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>valueToCheck<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">yield</span> valueToCheck
            markedNotPrimeMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>valueToCheck<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>valueToCheck<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> primes <span class="token operator">=</span>markedNotPrimeMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>valueToCheck<span class="token punctuation">)</span>
            primes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>prime<span class="token operator">=></span> <span class="token punctuation">{</span>
                <span class="token keyword">let</span> nextMultipleOfPrime <span class="token operator">=</span> prime <span class="token operator">+</span> valueToCheck<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>markedNotPrimeMap<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>nextMultipleOfPrime<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    markedNotPrimeMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>nextMultipleOfPrime<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>prime<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    markedNotPrimeMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>nextMultipleOfPrime<span class="token punctuation">,</span> <span class="token punctuation">[</span>prime<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
            markedNotPrimeMap<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>valueToCheck<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        valueToCheck <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> p <span class="token keyword">of</span> <span class="token function">generatePrimes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    counter <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>counter <span class="token operator">>=</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
      </div>
<p>That executes in ~10.5 seconds on my Macbook Pro, and the similar Python implementation averages about 23 seconds.  I was curious how fast a Go solution would execute, since it is known for being fast.</p>
<p>I put a Go version together like this:</p>
<div class="gatsby-highlight" data-language="go">
      <pre class="language-go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>
<span class="token keyword">import</span> <span class="token string">"strconv"</span>

<span class="token keyword">func</span> <span class="token function">generate_primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">chan</span> <span class="token builtin">int</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> marked_not_prime_map <span class="token operator">=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> value_to_check <span class="token operator">:=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> value_to_check<span class="token operator">++</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> primes<span class="token punctuation">,</span> in_map <span class="token operator">=</span> marked_not_prime_map<span class="token punctuation">[</span>value_to_check<span class="token punctuation">]</span>
            <span class="token keyword">if</span> <span class="token operator">!</span>in_map <span class="token punctuation">{</span>
                c <span class="token operator">&lt;-</span> value_to_check
                <span class="token keyword">var</span> values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
                marked_not_prime_map<span class="token punctuation">[</span>value_to_check<span class="token operator">*</span>value_to_check<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> value_to_check<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> prime <span class="token operator">:=</span> <span class="token keyword">range</span> primes <span class="token punctuation">{</span>
                    <span class="token keyword">var</span> next_multiple_of_prime <span class="token builtin">int</span> <span class="token operator">=</span> prime <span class="token operator">+</span> value_to_check
                    <span class="token keyword">var</span> next_multiples<span class="token punctuation">,</span> next_in_map <span class="token operator">=</span> marked_not_prime_map<span class="token punctuation">[</span>next_multiple_of_prime<span class="token punctuation">]</span>
                    <span class="token keyword">if</span> next_in_map <span class="token punctuation">{</span>
                        marked_not_prime_map<span class="token punctuation">[</span>next_multiple_of_prime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>next_multiples<span class="token punctuation">,</span> prime<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        <span class="token keyword">var</span> values <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span>
                        marked_not_prime_map<span class="token punctuation">[</span>next_multiple_of_prime<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>values<span class="token punctuation">,</span> prime<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">delete</span><span class="token punctuation">(</span>marked_not_prime_map<span class="token punctuation">,</span> value_to_check<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> c
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    c <span class="token operator">:=</span> <span class="token function">generate_primes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> counter <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> <span class="token boolean">true</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> p <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token operator">&lt;-</span>c
        <span class="token keyword">if</span> counter <span class="token operator">>=</span> <span class="token number">1000000</span> <span class="token punctuation">{</span>
            fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        <span class="token punctuation">}</span>
        counter<span class="token operator">++</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre>
      </div>
<p>The Go version is about 50% longer than the JavaScript version due to boilerplate but is more or less a direct 1 to 1 translation of the JavaScript code.  In Go, generators are created using channels and goroutines.  Goroutines are special functions that can run concurrently to the main thread in Go, and channels are a mechanism for passing data from them, that block the goroutine until the message is received.  So a goroutine that will pass multiple messages through to a channel is essentially equivalent to a Python or JavaScript generator using <code class="language-text">yield</code>.  Beyond that, most of the syntax difference is around the ceremony required for using slices in Go , and checking whether an item exists in a map.  Slices are Go’s version of a dynamic length array/list, they require an <code class="language-text">append</code> function which returns a new slice to add a value.  Go doesn’t have a <code class="language-text">has</code> method or equivalent on it’s map types.  Instead when you attempt to access a value from a map, the map returns 2 values: the received value or the “zero value” of the map’s type and a boolean saying whether the access was successful.  So you have code like this:</p>
<div class="gatsby-highlight" data-language="go">
      <pre class="language-go"><code class="language-go">commits <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span>
    <span class="token string">"example"</span><span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> val<span class="token punctuation">,</span> has_val <span class="token operator">=</span> commits<span class="token punctuation">[</span><span class="token string">"example"</span><span class="token punctuation">]</span>  <span class="token comment">// val == 100, has_val == true</span>
<span class="token keyword">var</span> val2<span class="token punctuation">,</span> has_val2 <span class="token operator">=</span> commits<span class="token punctuation">[</span><span class="token string">"example2"</span><span class="token punctuation">]</span>  <span class="token comment">// val == 0, has_val == false</span></code></pre>
      </div>
<p>So does all of this ceremony buy us any performance?  Only a minimal amount in this case.  After timing each script several time the Python code averaged out to 23 seconds, the JavaScript averaged 10.5 seconds, and the Go version averaged 9.5 seconds.  It’s the fastest, but only by minimal amounts over the JavaScript.  A good reminder that the algorithm will generally matter more than the programming language for many things, and also that large companies have optimized the heck out of JavaScript in recent years to the point where it’s pretty competitive on single threaded performance for many tasks.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
</feed>