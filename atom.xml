<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>http://benmccormick.org</id>
    <title>benmccormick.org</title>
    <updated>2018-03-16T13:24:52Z</updated>
    <generator>Feed for Node.js</generator>
    <author>
        <name>Ben McCormick</name>
        <email>ben@benmccormick.org</email>
    </author>
    <link rel="alternate" href="http://benmccormick.org"/>
    <link rel="self" href="http://benmccormick.org/atom.xml"/>
    <subtitle>A blog by Ben McCormick</subtitle>
    <logo>https://benmccormick.org/logo.png</logo>
    <icon>https://benmccormick.org/favicon.ico</icon>
    <rights>All rights reserved 2016, Ben McCormick</rights>
    <contributor>
        <name>Ben McCormick</name>
        <email>ben@benmccormick.org</email>
        <uri>http://benmccormick.org</uri>
    </contributor>
    <entry>
        <title type="html"><![CDATA[Weekly Links: March 16th]]></title>
        <id>https://benmccormick.org/2018/03/16/weekly-links-03-11-16/</id>
        <link href="https://benmccormick.org/2018/03/16/weekly-links-03-11-16/">
        </link>
        <updated>2018-03-16T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="https://hph.is/coding/bitmasks-react-context">Bitmasks and the new React Context API | Haukur Hallvarðsson</a> - A nice rundown of one aspect of the new React Context API that is likely to be familiar to low-level developers but will probably be a new idea to many front end devs: using bitmasks to test a condition.</p>
<p><a href="https://medium.com/@mweststrate/mobx-4-better-simpler-faster-smaller-c1fbc08008da">MobX 4: Better, simpler, faster, smaller | Michel Weststrate</a> - MobX continues to be a fantastic state management libary and this update looks like it will make it even better.</p>
<p><a href="https://engineering.linkedin.com/blog/2018/03/how-we-built-the-same-app-twice-with-preact-and-glimmerjs">Lighter than Lightweight: How We Built the Same App Twice with Preact and Glimmer.js | LinkedIn Engineering</a> - This is a really cool real world comparison of 2 JavaScript frameworks, where they actually built the same app in 2 separate frameworks, with core contributors to each framework involved in the implementation.  To be honest, my main takeaway is that among modern frameworks “framework performance” can be a bit overrated, and not a great reason to choose a specific library or framework, as compared to factors like developer experience, community, and fit with the existing codebase.</p>
<h3>Rust And WebAssembly</h3>
<p>I’ve been thinking about taking the time to learn a new language for the first time in a while.  I think WebAssembly and Rust transpiled to WebAssembly in particular are going to become an important part of high performance JavaScript applications and frameworks/libraries.  So I’m starting to check it out.  Here are a few  recent relevant links</p>
<p><a href="https://hacks.mozilla.org/2018/03/making-webassembly-better-for-rust-for-all-languages/">Making WebAssembly better for Rust &#x26; for all languages – Mozilla Hacks – the Web developer blog</a> - This outlines a plan to improve the developer experience of what I think is the future of WebAssembly in most web apps: interop with JavaScript to improve performance of open source libraries and some core performance sensitive code.</p>
<p><a href="https://github.com/atom/xray">GitHub - atom/xray: An experimental next-generation Electron-based text editor</a> - A non-webassembly example of using Rust selectively to increase performance of an application built primarily using web technologies.</p>
<p><a href="https://blog.rust-lang.org/2018/03/12/roadmap.html">Rust’s 2018 Roadmap | Rust Blog</a> - A good rundown of the areas of focus for Rust this year.  I’m particularly interested in their target use cases, since 3 of them (CLI tools, Network Services and WebAssembly/the web) are things that I have built before and will build again.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: March 11th]]></title>
        <id>https://benmccormick.org/2018/03/11/weekly-links-03-11-18/</id>
        <link href="https://benmccormick.org/2018/03/11/weekly-links-03-11-18/">
        </link>
        <updated>2018-03-11T00:00:00Z</updated>
        <content type="html"><![CDATA[<p>Rather than posting random stuff that popped up this week like usual, I wanted to instead post a set of “classic” links instead. The theme this week is Learning React.  Here are some of the links that helped me to learn different React concepts as I was first tackling it.  Note that these are links that helped me learn the concepts behind different parts of the React ecosystem.  Some are intro level, while some assume basic familiarity with the concepts they discuss.</p>
<h3>The Motivation Behind React</h3>
<p><a href="https://reactjs.org/docs/thinking-in-react.html">Thinking In React</a> - It’s strange, but I never expect the official docs for a project to be the best explanation of their purpose.  Official documentation tends to lean towards the “how” rather than the “why”, and the motivations of the maintainers aren’t always the motivations of the community anyway.  But this article from the React docs remains the best explanations of the problems that React is solving as well as the way that it solves them.</p>
<p><a href="https://rauchg.com/2015/pure-ui">Pure UI</a> - Even moreso than <em>Thinking in React</em>, this 2015 article nails the paradigm shift that React represented.  The power of UI as a function of data has been the biggest change I’ve experienced in my career building UIs, and this article was like a message in the bottle from the future when it was first written 3 years ago.</p>
<h3>Flux, MobX and Redux</h3>
<p><a href="https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207">A cartoon guide to Flux | Lin Clark</a> - This was a nice early run through of the Flux concepts.  Lin Clark is one of the best “front end explainers” out there, and she does a good job here.</p>
<p><a href="https://hackernoon.com/the-fundamental-principles-behind-mobx-7a725f71f3e8">The Fundamental Principles Behind MobX | Michael Weststrate</a> - Like most of the other links here, this is a theory link, not a practical introduction.</p>
<p><a href="https://egghead.io/courses/getting-started-with-redux">Getting Started With Redux | Dan Abramov on Egghead.io </a> - Like <em>Thinking with React</em>, this is a great introduction to a library that starts with the problems to be solved and shows how a new library solves that problem, rather than simply telling you what a tool does.</p>
<p><a href="https://medium.com/@dan_abramov/you-might-not-need-redux-be46360cf367">You Might Not Need Redux | Dan Abramov</a> - Another helpful article for understanding what Redux is and isn’t solving for, helpful if you’re trying to decide whether to include it in a project.</p>
<h3>React Patterns</h3>
<p><a href="https://egghead.io/courses/advanced-react-component-patterns">Advanced React Component Patterns | Kent C Dobbs on Egghead.io</a> - This is my one paid content link, but its so good that its worth sharing.  This was a fantastic course that covers patterns like Higher Order Components, Render props and more.  It discusses both the implementation concerns and motivation behind each.</p>
<h3>Future Stuff</h3>
<p><a href="https://medium.com/dailyjs/reacts-%EF%B8%8F-new-context-api-70c9fe01596b">React’s New Context API | Kent C Dobbs</a> - This is fairly recent, but Kent Dobbs gave a great explanation of React’s new context API</p>
<p><a href="https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html">Sneak Peek: Beyond React 16 | React Blog</a> - I posted this last week as well, but this is a great inspirational talk on where React is going next.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: March 2nd]]></title>
        <id>https://benmccormick.org/2018/03/02/weekly-links-03-02-18/</id>
        <link href="https://benmccormick.org/2018/03/02/weekly-links-03-02-18/">
        </link>
        <updated>2018-03-02T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="https://reactjs.org/blog/2018/03/01/sneak-peek-beyond-react-16.html">Sneak Peek: Beyond React 16| React Blog</a> - This is a preview of where React is going next.  I’m still processing through this, and how I can use it, but Suspense seems like something that will make dealing with async data much easier in React.  Loading states are something I deal with all the time, and having cleaner primitives for expressing them will be a big win.</p>
<h3>Programming Tools</h3>
<p><a href="http://www.olioapps.com/blog/the-lost-art-of-the-makefile/">The Lost Art of the Makefile |Jesse Hallett</a> - An interesting case for using Makefiles to manage modern JavaScript builds on projects that don’t need the overhead of webpack.  I don’t think this is going to be the next trend in JS, but I am interested to see where the JS world leans next when it comes to task automation.  When I started using JS, I saw people using Make or tools from other language ecosystems to build projects.  Grunt and Gulp really changed that and moved folks towards using the node ecosystem for task automation.  Now the community seems to have settled on webpack for build related tasks, and npm scripts for everything else.  I’m all good with webpack for builds, it’s complicated but powerful.  But npm scripts are frustrating as a task automation solution.  There’s no ability to comment, and long operations in nested JSON strings are a bit unwieldy.  I’d love to see some standardization on something more like make that allows comments and powerful task composition.</p>
<h3>Computer Science In JS</h3>
<p><a href="http://raganwald.com/2018/02/23/forde.html">Forde’s Tenth Rule, or, “How I Learned to Stop Worrying and ❤️ the State Machine” | Reginald Braithwaite</a> - A really nice explanation of state machines, and how they can be used in JavaScript development.  The article is written at a very conceptual level and really explains the topic well.  I was thinking afterwards about how the state machine concepts reminded me of Redux, and fortunately I found another link that expanded on that connection…</p>
<p><a href="https://medium.freecodecamp.org/how-to-model-the-behavior-of-redux-apps-using-statecharts-5e342aad8f66">How to model the behavior of Redux apps using statecharts | Luca Matteis</a> - I hadn’t heard of statecharts before reading this, but they look like a really interesting tool for talking about large systems.  I’d be really curious to play with the redux middleware for automatically generating them and see if the artifacts it produces are useful.</p>
<h3>Non-Tech</h3>
<p><a href="https://mobile.nytimes.com/2018/02/23/opinion/eyesight-going-blind.html">Am I Going Blind? | Frank Bruni</a> - This is absurdly well written, and it hit me personally since the idea of going blind has always been a personal fear of mine.  I think everybody has their one bad thing that they irrationally fear will happen to them and this is mine.  The article was good perspective in mutliple ways, reminding me how blessed I am and how resilient humans (and our bodies) are.  (Via <a href="https://daringfireball.net/linked/2018/02/23/bruni-going-blind">Daring Fireball</a>)</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: February 23rd]]></title>
        <id>https://benmccormick.org/2018/02/23/weekly-links-02-23-18/</id>
        <link href="https://benmccormick.org/2018/02/23/weekly-links-02-23-18/">
        </link>
        <updated>2018-02-23T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="http://2ality.com/2018/02/ecmascript-2019.html">Feature watch: ECMAScript 2019 | 2ality</a> - Not a lot to see here yet, but Axel Rauschmayer has set up a page for tracking the status of the next version of ECMAScript as features advance to stage 4 and become confirmed for the next version of the spec.  No features have been confirmed yet, but worth a bookmark.  He also has links to his detailed articles about the various candidate features if you’re interested in seeing where JavaScript is headed next.</p>
<p><a href="https://www.troyhunt.com/the-javascript-supply-chain-paradox-sri-csp-and-trust-in-third-party-libraries/">The JavaScript Supply Chain Paradox: SRI, CSP and Trust in Third Party Libraries | Troy Hunt</a> - This is a great reminder on why including scripts from 3rd party domains is a risky business, and how to do it securely.</p>
<h4>Computer Science</h4>
<p>After my <a href="https://benmccormick.org/2018/02/20/cs-for-fe/">post on Computer Science</a> this week, I thought I’d share 2 CS-y links I came across this week.</p>
<p><a href="https://medium.freecodecamp.org/i-dont-understand-graph-theory-1c96572a1401">How to think in graphs: an illustrative introduction to Graph Theory and its applications | Vardan Grigoryan</a> -  This is a nice “plain language” explanation of basic graph theory.  It’s a bit long, but it’s a nice thing to look at for the folks who told me this week they want to know more about data structures.</p>
<p><a href="http://amzn.to/2BL3YHo">Learning JavaScript Design Patterns | Addy Osmani</a> - One of the better “CS for front end” resources I’m aware of is Addy Osmani’s book on JavaScript design patterns.  Like a lot of things in JS land, parts of it haven’t aged well now that it’s a 6 year old book (it’s very focused on jQuery and DOM manipulation in many of its examples), but since it’s centered around more timeless design patterns, I think it holds up well.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Computer Science for Front End Developers?]]></title>
        <id>https://benmccormick.org/2018/02/20/cs-for-fe/</id>
        <link href="https://benmccormick.org/2018/02/20/cs-for-fe/">
        </link>
        <updated>2018-02-20T00:00:00Z</updated>
        <content type="html"><![CDATA[<p>I am primarily a front end web developer, and I have a Computer Science degree.  In my experience, this is neither rare nor particularly common.  Folks seem to get into front end dev because they’re trying to solve particular problems, and those problems exist whether you have a PhD in high performance computing or you’ve never written a line of code before.  Front end web development is how you make code real to people, and it is the minimal requirement for making something that people can actually interact with in a web browser.  As a result, a dizzying array of folks get into Front end dev, and you’ll find a broader set of experience levels than devs who work further “down the stack”.  All of which means that many front end devs have never had any sort of “formal” Computer Science education.  </p>
<p>Some CS degree holders turn up their nose at this, and it contributes to the reputation in some quarters of JavaScript and web dev not being “real programming”.  Some self-taught devs see themselves as being liberated from the “irrelevant theory” of formal Computer Science and see no need for that type of background for Front End development.  We all have the capacity to turn any sort of credential into a tribal mark.  My own experience is that developers can function just fine on the front end without a formal computer science background, but that my own education has helped me in my day to day work, mostly in subtle and indirect ways.</p>
<p>I’ve been thinking for a while about what Computer Science topics are actually useful for front end developers.  It’s not obvious to me where to draw the lines, because you’ll never directly encounter many of the concepts that are covered in a typical Computer Science curriculum while making web applications. But I still have an intuition that my background in these subjects is helping me in my day to day.  This weekend I decided to ask Twitter about it.</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Pondering what a blog series on “Computer Science for Front End Devs” would look like.  <br><br>Thinking this would be a high level of “what you missed if you don’t have a CS degree”, focusing on a subset relevant to FE devs.<br><br>Would love input.  What would you expect to be covered?</p>&mdash; Ben McCormick (@ben336) <a href="https://twitter.com/ben336/status/965373638697463809?ref_src=twsrc%5Etfw">February 18, 2018</a></blockquote>
<p>I got a high degree of interest from that tweet, and so decided to keep digging into the idea.  I did some research into the typical structure of a modern Computer Science curriculum, and came up with the lists below. Depending on the school, certain topics may be elevated or diminished, grouped or split, but the general shape tends to look the same for most schools I’ve looked at.</p>
<h3>Intro class</h3>
<p>Generally there is an intro class or 2 that can be skipped by students with previous experience that covers core programming concepts, usually with an Object-oriented philosophical tilt.</p>
<ul>
<li>
<p><strong>Programming basics</strong></p>
<ul>
<li>Variables</li>
<li>Basic Data Structures</li>
<li>Control Structures/Recursion/Iteration</li>
<li>Object Oriented Programming principles</li>
</ul>
</li>
</ul>
<h3>Core Curriculum</h3>
<p>There are also often 3-5 other “core” classes that all CS majors must take.  They generally break down something like this:</p>
<ul>
<li>
<p><strong>Data Structures and Algorithms</strong></p>
<ul>
<li>Big O analysis</li>
<li>Common Data Structures - Linked Lists, Stacks, Queues Trees, Heaps, Graphs, etc</li>
<li>Common Algorithms - Searches, Sorts, Graph algorithms, etc</li>
</ul>
</li>
<li>
<p><strong>Computer Systems</strong></p>
<ul>
<li>Start at the hardware level</li>
<li>Assembly</li>
<li>Compilers</li>
<li>Memory Models</li>
<li>Concurrency</li>
<li>Operating Systems</li>
<li>Processes</li>
<li>File Systems</li>
<li>Networking</li>
</ul>
</li>
<li>
<p><strong>Mathematical Foundations</strong></p>
<ul>
<li>Proofs and logic</li>
<li>Formal lanugages/Context Free Grammars/Turing Machines</li>
<li>NP-Completeness</li>
<li>Probability Theory</li>
<li>Bayes Theorem</li>
<li>Hashing</li>
</ul>
</li>
<li>
<p><strong>Software Engineering (not always core)</strong></p>
<ul>
<li>Architecture of larger programs</li>
<li>Balancing risk/quality/cost</li>
<li>Design Patterns</li>
<li>Designing for security/robustness/scalability</li>
</ul>
</li>
</ul>
<h3>Potential Specialties</h3>
<p>Finally, programs usually have a selection of electives that students can take to dive deeper into different specialty areas.  These electives usually mirror the research interests of the faculty of the school but may include some of the following:</p>
<ul>
<li><strong>Systems Design</strong></li>
<li><strong>Human-Computer Interaction</strong></li>
<li><strong>Computer Networking</strong></li>
<li><strong>Artificial Intelligence and Machine Learning</strong></li>
<li><strong>Databases</strong></li>
<li><strong>Computer Vision</strong></li>
</ul>
<h2>Computer Science for the web</h2>
<p>So how much of this is relevant to your average front end developer?  Some of it is more tightly tied to web programming than others.  Most of the basics will be picked up through osmosis for a typical front end dev, but a rigorous look at concepts like object-oriented programming and recursion might be beneficial.  While most can usually get by with simple data structures, a background in common “intermediate” data structures like stacks, trees, and graphs can be quite useful in day to day web dev.  Software Engineering principles are as obviously useful when building web sites as they are when you’re building firmware or operating systems. On the other hand, Computer Systems and Mathematical foundation concepts are usually not directly applicable in front end work.  In my own experience, they serve as useful background for understanding the abstractions that my day to day work is built on.  It’s good to have an intuition as to how browsers work, what is happening when we send data to a file, or what “text encoding” means.  And you may end up in a crazy situation where you need to understand the code behind Babel or V8, and knowledge of compilers becomes a real part of your job.</p>
<p>I’m trying to figure out the best way to teach some of this stuff to somebody who hasn’t and is never going to spend 4 years taking these classes.  So I’d love help from anyone reading:</p>
<ol>
<li><strong>If you have a CS degree and write front end code, how has it helped you?</strong></li>
<li><strong>If you were going to try and share part of that education with somebody with different experiences, which parts would you say are important?  What resources would you recommend?</strong></li>
<li><strong>If you don’t have a CS degree, do you feel like you’re missing out on anything?  What useful-seeming concepts have you heard about but found it hard to find resources on?</strong></li>
</ol>
<p>If you have any answers for those questions I’d love to hear from y’all on <a href="https://twitter.com/ben336">Twitter</a> or <a href="mailto:ben@benmccormick.org">email</a>.  </p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: February 16th]]></title>
        <id>https://benmccormick.org/2018/02/16/weekly-links-02-16-18/</id>
        <link href="https://benmccormick.org/2018/02/16/weekly-links-02-16-18/">
        </link>
        <updated>2018-02-16T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="https://staltz.com/promises-are-not-neutral-enough.html">Promises are not neutral enough | André Staltz  </a> - This is a pretty good dissection of the downsides of Promises as JavaScript’s default async primitive.  I’m glad that Promises have replaced callbacks as the default async method for most JavaScript code, but it does have the downside of making it harder for anything better to come along.  </p>
<p><a href="https://css-tricks.com/direction-aware-hover-effects/">Direction Aware Hover Effects | CSS-Tricks</a> - As a relatively pedestrian CSS user, I always am fascinated by the cool things people can do with it.  These demos were no exception.  (Hat tip to <a href="https://ponyfoo.com/weekly">Ponyfoo</a> for this one)</p>
<h3>Tech Tools</h3>
<p><a href="https://abe-winter.github.io/plea&#x27;s/help/2018/02/11/slack.html">Slack is the opposite of organizational memory | Abe Winter</a> - This is a fun rant that makes some good points.  I have a love/hate relationship with Slack.  It’s a fun tool that I enjoy using, but I’m not at all convinced that it’s really making me more productive. I definitely feel the pain of normalizing crazy short reply times, even though I thrive on that on some ways and love the dopamine hit of being instantly helpful to somebody.  Slack makes it easy to mistake noise for productivity, and I definitely agree that it is more ephemeral than it pretends to be.  But for all that… I’m not sure there’s anything better out there<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>, especially for teams that work partially or completely remote.</p>
<h3>Cryptocurrency Craziness</h3>
<p><a href="https://shkspr.mobi/blog/2018/02/advertising-screens-hacked-to-mine-bitcoin/">Advertising Screens Hacked To Mine BitCoin | Terence Eden</a> - This is just nuts.  Bitcoin seems to be enabling a whole new malware economy.  </p>
<p><a href="https://techcrunch.com/2018/02/13/salon-coinhive-cryptocurrency-mining/">Salon’s Monero mining project might be crazy like a fox | TechCrunch</a> - At least some folks are giving you an ad-free malware experience though.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>The truth of this statement of course is going to depend on what exactly you’re hoping Slack will do for you.  I consider Slack to be a communication tool and not a project management tool.  The linked article seems to conflate the two, which is maybe part of the problem here.</p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Book Review: Clean Architecture]]></title>
        <id>https://benmccormick.org/2018/02/14/book-review-clean-architecture/</id>
        <link href="https://benmccormick.org/2018/02/14/book-review-clean-architecture/">
        </link>
        <updated>2018-02-14T00:00:00Z</updated>
        <content type="html"><![CDATA[<p><a href="http://amzn.to/2mKoejo">Clean Architecture</a> by Robert “Uncle Bob” Martin was one of the better books on Software Development I’ve read in recent years.  It did exactly what I want from a software book in 2018: it tackled an important high level topic with a great amount of depth in a way that helped me as a reader to develop insight and perspective on the topic.  These days blog posts and other online sources cover most of my “how to” needs, as well as the simple “what is X and why should I care about it” questions that I used to go to books for.  But there is still no substitute for books when you want an in depth understanding of an important broad topic.
<a href="https://www.amazon.com/Clean-Architecture-Craftsmans-Software-Structure/dp/0134494164/ref=as_li_ss_il?ie=UTF8&qid=1516226851&sr=8-1&keywords=clean+architecture&linkCode=li2&tag=benmccormicko-20&linkId=c599845decc4e5ed1457acae2a375ad6" target="_blank">
<img border="0" class="inline-img" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=0134494164&Format=_SL160_&ID=AsinImage&MarketPlace=US&ServiceVersion=20070822&WS=1&tag=benmccormicko-20" ></a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&amp;l=li2&amp;o=1&amp;a=0134494164" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;">
For this book, that topic is software architecture.  The book tackles it by starting with some history, and then starting with a micro view before expanding out its gaze.  After giving a broad overview of the different software paradigms, Martin walks readers through 3 levels of architecture principles: class-level design principles, component-level component principles and system-level architecture principles.  At each level he shows the similarities between the lower level principles, as well as the unique concerns at each scale. Then he wraps it up with a case study example that shows the principles discussed throughout the book in action.</p>
<p>I found Clean Architecture to be a great reminder of concepts I learned in school<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup> that I didn’t properly appreciate at the time due to a lack of practical experience.  It brought home to me that while there are some architectural things I do pretty well right now, like keeping code separated enough that it only has one reason to change, there are other things that I don’t do well a lot of the time.  For me the biggest realization was how much grief I’ve caused myself the last few years from failing to keep high level policies from depending on low level details.  The book gave me a few new lenses to examine my decisions with, and definitely inspired me to spend more time taking a step back to see the big picture as I’m adding new features.  </p>
<p>For me, that sense of perspective was the biggest win, but if you’re looking for detailed “how tos”, there’s a decent amount of that as well.  Martin goes into details about how to arrange and refactor classes to create maintainable systems that are easy to change, as well as identifying patterns to look for that may be a sign of problems to come.  He goes pretty deep into the weeds with examples and class diagrams as he discusses creating proper system boundaries and pulls it all together with a nice case study example at the end.  </p>
<p>While I did find Clean Architecture extremely helpful overall, I do have some nitpicks.  The biggest for me personally is that while the book mentions dynamic languages like Ruby and Python a few times, it mostly does so in passing to say that the principles mention still apply, but may look different.  Since this is usually not expanded upon, and all of the examples given seem to assume static languages that provide abstract interfaces to classes, it is sometimes hard to see how the books principles should be applied to the dynamic languages that I use daily.  I would love to have seen more detail there.  Also, the final chapter of the book “The Missing Chapter” was a bit of an oddity.  It was written by a different author<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup>, framed issues that had already been covered differently, and came to some different conclusions than the rest of the book.  It was almost a counterpoint to the other parts of the book, which could have been interesting, but lacked an introduction or context to help explain its purpose.  Overall it left me a bit confused and ended the book on a discordant note rather than bringing the ideas together and focusing me on the important ideas.</p>
<p>I can recommend <a href="http://amzn.to/2mKoejo">Clean Architecture</a> for anyone who wants to get better at thinking about the big picture when it comes to software systems, particularly if you haven’t already been exposed to any of the theory behind designing maintainable systems.  If you’re usually working in static languages on larger projects, I would double that recommendation, as you’ll be right in the book’s wheelhouse.  For those like me working with dynamic languages on web projects, it may be a bit more hit or miss, but it still is a great way to broaden your horizons and gain some new ways of thinking about the tradeoffs our work entails.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>I was a Computer Science major, but if you weren’t exposed to theories of software architecture through a curriculum</p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
<li id="fn-2">
<p>This was not obvious to me on first reading, I only went back and noticed the acknowledgement on the chapter page when I was confused by a 3rd person reference to the author.</p>
<a href="#fnref-2" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: February 9th]]></title>
        <id>https://benmccormick.org/2018/02/09/weekly-links-02-09-18/</id>
        <link href="https://benmccormick.org/2018/02/09/weekly-links-02-09-18/">
        </link>
        <updated>2018-02-09T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="http://codemirror.net/">CodeMirror</a> - CodeMirror is a JavaScript library for building text/code editors in the browser.  It isn’t new, but I’ve had the pleasure of building something moderately complex with it over the past week, and thought it deserved some promotion.  It makes building an online editor that does shiny “text editor” things like linting, find and replace, syntax highlighting and autocomplete a very manageable endeavor.  It’s highly extendable and is a nice example of “easy things should be easy and hard things should be possible”, with simple addons for basic stuff, and less simple extension points for custom work.  If you have need of an online text editor, make sure to check it out!</p>
<p><a href="http://www.tomanthony.co.uk/blog/googlebot-javascript-random/">Googlebot’s Javascript random() function is deterministic - Tom Anthony</a> - A really interesting peek at a small part of how Googlebot actually functions when rendering and indexing the web.</p>
<h3>Non-Tech</h3>
<p><a href="https://medium.com/@pamelafox/sleep-strategies-for-a-racing-mind-d717e1ab890">Sleep strategies for a racing mind – Pamela Fox</a> - I”ve never had the easiest time falling asleep at night, and it’s taken me a long time to figure out the best ways to manage that.  This article lays out a bunch of strategies for coping, many of which are the same things I’ve had to learn the hard way.  If you struggle to sleep, definitely worth a read.</p>
<p>Finally I’ll leave you with my personal pick for “tweet of the week”</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">If at first you don’t succeed... <a href="https://twitter.com/hashtag/science?src=hash&amp;ref_src=twsrc%5Etfw">#science</a> <a href="https://t.co/2TGojKDcr3">pic.twitter.com/2TGojKDcr3</a></p>&mdash; TwistedDoodles (@twisteddoodles) <a href="https://twitter.com/twisteddoodles/status/960801583012380672?ref_src=twsrc%5Etfw">February 6, 2018</a></blockquote>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[React Architecture Confessions]]></title>
        <id>https://benmccormick.org/2018/02/07/react-confessions/</id>
        <link href="https://benmccormick.org/2018/02/07/react-confessions/">
        </link>
        <updated>2018-02-07T00:00:00Z</updated>
        <content type="html"><![CDATA[<p>I’ve been reading through <a href="http://amzn.to/2mKoejo">Clean Architecture</a> by Robert “Uncle Bob” Martin this month<sup id="fnref-1"><a href="#fn-1" class="footnote-ref">1</a></sup>, and while it is great it has had the unpleasant effect of reminding me of all of the mistakes I’ve made over the past few years while learning and using <a href="https://reactjs.org/">React</a>.  I’ve absolutely loved using React at work, and it has made so many things easier.  But it’s a very unopinionated tool when it comes to structuring applications, and I made a lot of mistakes as I was using it to build some small side projects, and then transitioned a major production app to React from Backbone/Marionette.  These mistakes are all architectural; how I broke out components, communicated between components, and managed data and dependencies within components.</p>
<p>I thought it would be useful to lay out the architecture mistakes I made as I was learning React, both as a solid reflection exercise for myself, and a warning to those of you who are just starting down the “component based UI” road.  </p>
<h3>My Mistakes</h3>
<h4>1. Including API calls directly in components</h4>
<p><strong>What I did wrong</strong>: This is an embarrassing one, but essentially in several places I had components directly fetching data from the server in their constructors or mount calls, and using that information to determine what to render.</p>
<p><strong>Why I did it</strong>: This was to some extent a lack of planning.  I had all my core “business objects” modeled in some sort of separate object oriented way (either as Backbone or MobX objects) and was able to coordinate syncing them to the server outside of the component layer.  But some data in the system hadn’t been modeled in that way, and when I encountered a need for those components (such as some types of system configurations) instead of stepping back and coming up with a design for modeling those configurations on the front end, I instead sometimes fell back to an ad-hoc API call.   This was also sometimes a result of lazily copying legacy code that had bad patterns while converting components to React, and other developers copying bad patterns when trying to figure out the new React code.</p>
<p><strong>What I should have done instead</strong>: This could be a whole series of blog posts in itself, but essentially I should have been observing a few principles that would have set off alarm bells.</p>
<ol>
<li>Components in a system of any size shouldn’t know about the server. UI Components are about as “low level detail” as it gets in a UI architecture, and should be passed the data they need from a higher level portion of the system.</li>
<li>If the front end code needs data from the server, it is worth the time to properly model that data in terms of whatever data layer the front end is using.</li>
</ol>
<h4>2. Breaking the “props as the component interface” abstraction</h4>
<p><strong>What I did wrong</strong>: One of the best things about React is the clear interfaces components provide with their list of props.  If properly documented with PropTypes or a type system like Flow or Typescript, it’s easy to look at any React component and tell what data it expects to receive, and therefore how other code is expected to interact with it.  99% of the time, good React components act as a function of <code>(props, state) => UI</code>.  It is however, possible to get access to a component instance, and call functions on them.  There are  rare situations where this is the right way to do things, for instance <a href="https://stackoverflow.com/questions/28889826/react-set-focus-on-input-after-render">focusing an input</a>.  </p>
<p>When I first started creating React components though, I overused that pattern, and accessed the interface directly to access or change its internal state.  I’d have components like this:</p>
<div class="gatsby-highlight">
      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SpecialInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      inputValue<span class="token punctuation">:</span> <span class="token string">'abc'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">setValue</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input
      className<span class="token operator">=</span><span class="token string">'fancy-input'</span>
      defaultValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>
      onChange<span class="token operator">=</span><span class="token punctuation">{</span>inputValue <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>that I would access from parent container like this:</p>
<div class="gatsby-highlight">
      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">InputUser</span>

  <span class="token function">methodThatGotCalledOnSomeEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>input<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div<span class="token operator">></span>
      <span class="token operator">&lt;</span>SpecialInput ref<span class="token operator">=</span><span class="token punctuation">{</span>el <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> el<span class="token punctuation">}</span><span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre>
      </div>
<p><strong>Why I did it</strong>:  Early on I was using this pattern in a way that copied other frameworks I was familiar with.  A parent component would need the state of it’s child component, so it would maintain a reference to the child and query the child about the state.  When I converted Backbone components to React, sometimes I was basically just copy and pasting existing code, and making it work.  </p>
<p><strong>What I should have done instead</strong>:  React doesn’t really encourage parents pulling state from their children.  Instead, if there is state that needs to be shared between components, it should be moved up to the parent component and then the state and an updater function should be passed down to the child component.  So my example above would look like this:</p>
<div class="gatsby-highlight">
      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">SpecialInput</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>input
      className<span class="token operator">=</span><span class="token string">'fancy-input'</span>
      defaultValue<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>
      onChange<span class="token operator">=</span><span class="token punctuation">{</span>event <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">updateValue</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
      </div>
<p>that I would access from parent container like this:</p>
<div class="gatsby-highlight">
      <pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">InputUser</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>
      inputValue<span class="token punctuation">:</span> <span class="token string">'abc'</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">methodThatGotCalledOnSomeEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingWith</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>
        <span class="token operator">&lt;</span>SpecialInput
             value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>inputValue<span class="token punctuation">}</span>
             updateValue<span class="token operator">=</span><span class="token punctuation">{</span>inputValue <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>inputValue<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          <span class="token operator">/</span><span class="token operator">></span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>

  <span class="token punctuation">}</span>  
<span class="token punctuation">}</span>
</code></pre>
      </div>
<h4>3. Interacting with 3rd party components directly</h4>
<p><strong>What I did wrong</strong>: My first year and a half using React, when I was using 3rd party UI components like <a href="https://github.com/facebookarchive/fixed-data-table">react-fixed-data-table</a> I would always use them directly in my components, and take full advantage of their APIs.</p>
<p><strong>Why I did it</strong>: Because every React library in the world has documentation showing how to use its components directly in code for a variety of different use cases, and nobody ever tells you to put an abstraction around their code</p>
<p><strong>What I should have done instead</strong>: I should have wrapped the 3rd party libraries in one or more wrapper components.  This has a few advantages:</p>
<ol>
<li>When we’re using a UI component like a table in a new place in our App, if I’ve created a wrapper component that has presets for most common settings, I only need to configure the things that are meaningful to this new use case in my app</li>
<li>Targeted wrapper components like a <code>SortableTable</code> component or a <code>DropdownWithAutoComplete</code> component are easy to understand to a new reader of the code.  Instead of digging through configuration props, they can read the component name and understand the purpose of that component then focus on the data being passed to it</li>
<li>When making updates to a library it is much easier to test that the changes are safe if the uses of the library are limited to a few focused components, rather than being spread across a whole application</li>
<li>Similarly, if we need to switch to a new library, that is much easier with a limited footprint</li>
<li>It can be easier to create reliable automatic tests using a wrapper component, since you have more control of things like how mocking works and when the component interface changes than you do for 3rd party code</li>
</ol>
<h4>4. Importing other parts of the system directly into display components</h4>
<p><strong>What I did wrong</strong>: The main application I work on uses a messaging system to allow communication between different parts of the system.  It’s a legacy piece from when it existed as a Backbone application, and isn’t a very React-y way of doing things, but that isn’t really a problem.  This situation would be the same for a logging component or a data store.  What isn’t great is that when I need to use the messaging system, I always import it directly into the component file.</p>
<p><strong>Why I did it</strong>: Direct imports are convenient, the messaging system is a core part of my system, and it seemed like a normal way of accessing it.  I also wasn’t aware of any better way to do it.</p>
<p><strong>What I should have done instead</strong>:  The disadvantage of direct imports is that they’re harder to test.  If I had passed my messaging system as a prop to whatever component needed it, it would be much easier to test that it was called in the way I expected, without having to mock out the whole messaging system library.  I also could abstract away the whole power of the messaging system, and only provide the specific functionality needed by a component.  When I first began working on this system though, I didn’t know a practical way to do this.  The messenger system was often used by deeply nested components, and it seemed bad to pass it down a whole component tree.</p>
<p>The answer is to use the <a href="https://www.robinwieruch.de/react-provider-pattern-context/">Provider pattern</a>.  The provider pattern is a way to use React’s context API to provide top level properties from a high level parent component to deeply nested child components.  It is a perfect pattern for providing important high level pieces of your application to low level components without tightly coupling them, while maintaining testability.<sup id="fnref-2"><a href="#fn-2" class="footnote-ref">2</a></sup></p>
<h4>5. Changing too many things at once</h4>
<p><strong>What I did wrong</strong>: When my team began converting our application from Backbone to React, it was tempting to try and change many things at once.  All the React examples you see online are using Babel/ES6, Webpack, Redux, React Router and tons of other shiny but complicated things.  Trying to implement it all in an existing project<sup id="fnref-3"><a href="#fn-3" class="footnote-ref">3</a></sup> can be overwhelming and lead to <a href="http://mikehadlow.blogspot.com/2014/12/the-lava-layer-anti-pattern.html">lava layers</a>.  We actually started out with good discipline and converted files to use ES6 first, then added Webpack, then slowly started to convert UI components to React.  Unfortunately as we continued to convert React, we began replacing our Backbone data models with MobX, and began using CSS Modules in some places.  When our team size was reduced last year, we were left in a situation where the same functions were performed in different ways throughout the codebase.</p>
<p><strong>Why I did it</strong>: It’s easy to see things that could be better in a web application and immediately want to fix them!  Especially if parts of that change seem easier than other changes you’re working on</p>
<p><strong>What I should have done instead</strong>: I wrote about this <a href="https://benmccormick.org/2018/01/07/large-improvements-small-team/">at length</a> last month, but there really is no substitute for taking things one at a time.  While it’s tempting to think that it will be easier to convert to React if you’re using other “react-y” tools and libraries, your code will ultimately be more maintainable if it is consistent throughout an application.  The only reliable way to do that is to make changes completely before you start making other changes.  It isn’t sexy, and it will leave you at least a little ways off the bleeding edge, but it’s the way to build large, reliable systems and keep them up to date.</p>
<div class="footnotes">
<hr>
<ol>
<li id="fn-1">
<p>At the time of writing this, it was super on sale on <a href="http://amzn.to/2mKoejo">Amazon</a></p>
<a href="#fnref-1" class="footnote-backref">↩</a>
</li>
<li id="fn-2">
<p>Note that the Context API that the provider pattern is based on is changing, so I’d isolating out any provider code you write into a reusable component so that it is easy to update later</p>
<a href="#fnref-2" class="footnote-backref">↩</a>
</li>
<li id="fn-3">
<p>Or even a new project for that matter!</p>
<a href="#fnref-3" class="footnote-backref">↩</a>
</li>
</ol>
</div>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Weekly Links: February 3rd]]></title>
        <id>https://benmccormick.org/2018/02/03/weekly-links-02-03-18/</id>
        <link href="https://benmccormick.org/2018/02/03/weekly-links-02-03-18/">
        </link>
        <updated>2018-02-03T00:00:00Z</updated>
        <content type="html"><![CDATA[<h3>JavaScript And The Web</h3>
<p><a href="http://2ality.com/2017/02/ecmascript-2018.html">ECMAScript 2018 | 2ality</a> - The spec for the 2018 version of <a href="https://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">ECMAScript</a> has been finalized and this is a good roundup of the new features and syntax available.  I’m personally excited for rest/spread properties to be an official part of the language.</p>
<p><a href="https://medium.com/@firt/pwas-are-coming-to-ios-11-3-cupertino-we-have-a-problem-2ff49fd7d6ea">PWAs are coming to iOS 11.3: Cupertino, we have a problem | Maximiliano Firtman</a> - Interesting look at what is and isn’t available in the newest version of Safari when it comes to PWAs and offline support</p>
<h3>Tech and Business</h3>
<p><a href="https://medium.com/99-mph/1-trillion-of-real-estate-is-on-the-move-heres-why-94ee9233e5eb">1 Trillion of Real Estate is on the move | Phil Levin</a> - Almost everybody seems to agree that self driving cars are going to happen.  It’s only a question of when.  But the other question is what the second-level effects of self driving cars will be.  Those who can correctly predict the answer to those two questions are going to have opportunities to make money and create interesting businesses. This is an interesting take on how self-driving cars might affect real estate.</p>]]></content>
        <author>
            <name>Ben McCormick</name>
            <email>ben@benmccormick.org</email>
            <uri>http://benmccormick.org</uri>
        </author>
    </entry>
</feed>