!function(e){function t(a){if(n[a])return n[a].exports;var s=n[a]={exports:{},id:a,loaded:!1};return e[a].call(s.exports,s,s.exports,t),s.loaded=!0,s.exports}var n={};return t.m=e,t.c=n,t.p="/",t(0)}(function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))switch(typeof e[t]){case"function":break;case"object":e[t]=function(t){var n=t.slice(1),a=e[t[0]];return function(e,t,s){a.apply(this,[e,t,s].concat(n))}}(e[t]);break;default:e[t]=e[e[t]]}return e}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){n(382);return e()}function o(){g.onRouteUpdate&&(0,g.onRouteUpdate)(b)}function i(e,t){if(g.shouldUpdateScroll)return(0,g.shouldUpdateScroll)(e,t);if(e){var n=e.location.pathname,a=t.location.pathname;if(n===a)return!1}return!0}var r=n(2),l=a(r),c=n(29),p=a(c),h=n(167),d=n(229),u=a(d),m=n(239),f=a(m),g=n(491),y=n(492),b=null;h.browserHistory.listen(function(e){b=e,g.onRouteChange&&(console.warn("onRouteChange is now deprecated and will be removed in the next major Gatsby release (0.13). Please use onRouteUpdate instead. See the PR for more info (https://github.com/gatsbyjs/gatsby/pull/321)."),(0,g.onRouteChange)(e))});var w=void 0;s(function(){return y(function(e){var t=n(382),a=t.pages;w?(0,f.default)(a,e):w=(0,f.default)(a,e),g.modifyRoutes&&(w=(0,g.modifyRoutes)(w));var s=function(){return l.default.createElement(h.Router,{history:h.browserHistory,routes:w,render:(0,h.applyRouterMiddleware)((0,u.default)(i)),onUpdate:o})};g.wrapRootComponent&&(s=(0,g.wrapRootComponent)(s)),g.replaceDOMRenderer?(0,g.replaceDOMRenderer)({routes:w,defaultShouldUpdateScroll:i,onUpdate:o}):p.default.render(l.default.createElement(s,null),"undefined"!=typeof window?document.getElementById("react-mount"):void 0)})})},function(e,t,n){"use strict";e.exports=n(3)},function(e,t,n){"use strict";var a=n(4),s=n(5),o=n(18),i=n(21),r=n(22),l=n(24),c=n(9),p=n(25),h=n(27),d=n(28),u=(n(11),c.createElement),m=c.createFactory,f=c.cloneElement,g=a,y={Children:{map:s.map,forEach:s.forEach,count:s.count,toArray:s.toArray,only:d},Component:o,PureComponent:i,createElement:u,cloneElement:f,isValidElement:c.isValidElement,PropTypes:p,createClass:r.createClass,createFactory:m,createMixin:function(e){return e},DOM:l,version:h,__spread:g};e.exports=y},function(e,t){/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
"use strict";function n(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}function a(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;var a=Object.getOwnPropertyNames(t).map(function(e){return t[e]});if("0123456789"!==a.join(""))return!1;var s={};return"abcdefghijklmnopqrst".split("").forEach(function(e){s[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},s)).join("")}catch(e){return!1}}var s=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=a()?Object.assign:function(e,t){for(var a,r,l=n(e),c=1;c<arguments.length;c++){a=Object(arguments[c]);for(var p in a)o.call(a,p)&&(l[p]=a[p]);if(s){r=s(a);for(var h=0;h<r.length;h++)i.call(a,r[h])&&(l[r[h]]=a[r[h]])}}return l}},function(e,t,n){"use strict";function a(e){return(""+e).replace(v,"$&/")}function s(e,t){this.func=e,this.context=t,this.count=0}function o(e,t,n){var a=e.func,s=e.context;a.call(s,t,e.count++)}function i(e,t,n){if(null==e)return e;var a=s.getPooled(t,n);y(e,o,a),s.release(a)}function r(e,t,n,a){this.result=e,this.keyPrefix=t,this.func=n,this.context=a,this.count=0}function l(e,t,n){var s=e.result,o=e.keyPrefix,i=e.func,r=e.context,l=i.call(r,t,e.count++);Array.isArray(l)?c(l,s,n,g.thatReturnsArgument):null!=l&&(f.isValidElement(l)&&(l=f.cloneAndReplaceKey(l,o+(!l.key||t&&t.key===l.key?"":a(l.key)+"/")+n)),s.push(l))}function c(e,t,n,s,o){var i="";null!=n&&(i=a(n)+"/");var c=r.getPooled(t,i,s,o);y(e,l,c),r.release(c)}function p(e,t,n){if(null==e)return e;var a=[];return c(e,a,null,t,n),a}function h(e,t,n){return null}function d(e,t){return y(e,h,null)}function u(e){var t=[];return c(e,t,null,g.thatReturnsArgument),t}var m=n(6),f=n(9),g=n(12),y=n(15),b=m.twoArgumentPooler,w=m.fourArgumentPooler,v=/\/+/g;s.prototype.destructor=function(){this.func=null,this.context=null,this.count=0},m.addPoolingTo(s,b),r.prototype.destructor=function(){this.result=null,this.keyPrefix=null,this.func=null,this.context=null,this.count=0},m.addPoolingTo(r,w);var k={forEach:i,map:p,mapIntoWithKeyPrefixInternal:c,count:d,toArray:u};e.exports=k},[634,7],function(e,t){"use strict";function n(e){for(var t=arguments.length-1,n="Minified React error #"+e+"; visit http://facebook.github.io/react/docs/error-decoder.html?invariant="+e,a=0;a<t;a++)n+="&args[]="+encodeURIComponent(arguments[a+1]);n+=" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";var s=new Error(n);throw s.name="Invariant Violation",s.framesToPop=1,s}e.exports=n},function(e,t,n){"use strict";function a(e,t,n,a,o,i,r,l){if(s(t),!e){var c;if(void 0===t)c=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var p=[n,a,o,i,r,l],h=0;c=new Error(t.replace(/%s/g,function(){return p[h++]})),c.name="Invariant Violation"}throw c.framesToPop=1,c}}var s=function(e){};e.exports=a},function(e,t,n){"use strict";function a(e){return void 0!==e.ref}function s(e){return void 0!==e.key}var o=n(4),i=n(10),r=(n(11),n(13),Object.prototype.hasOwnProperty),l=n(14),c={key:!0,ref:!0,__self:!0,__source:!0},p=function(e,t,n,a,s,o,i){var r={$$typeof:l,type:e,key:t,ref:n,props:i,_owner:o};return r};p.createElement=function(e,t,n){var o,l={},h=null,d=null,u=null,m=null;if(null!=t){a(t)&&(d=t.ref),s(t)&&(h=""+t.key),u=void 0===t.__self?null:t.__self,m=void 0===t.__source?null:t.__source;for(o in t)r.call(t,o)&&!c.hasOwnProperty(o)&&(l[o]=t[o])}var f=arguments.length-2;if(1===f)l.children=n;else if(f>1){for(var g=Array(f),y=0;y<f;y++)g[y]=arguments[y+2];l.children=g}if(e&&e.defaultProps){var b=e.defaultProps;for(o in b)void 0===l[o]&&(l[o]=b[o])}return p(e,h,d,u,m,i.current,l)},p.createFactory=function(e){var t=p.createElement.bind(null,e);return t.type=e,t},p.cloneAndReplaceKey=function(e,t){var n=p(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n},p.cloneElement=function(e,t,n){var l,h=o({},e.props),d=e.key,u=e.ref,m=e._self,f=e._source,g=e._owner;if(null!=t){a(t)&&(u=t.ref,g=i.current),s(t)&&(d=""+t.key);var y;e.type&&e.type.defaultProps&&(y=e.type.defaultProps);for(l in t)r.call(t,l)&&!c.hasOwnProperty(l)&&(void 0===t[l]&&void 0!==y?h[l]=y[l]:h[l]=t[l])}var b=arguments.length-2;if(1===b)h.children=n;else if(b>1){for(var w=Array(b),v=0;v<b;v++)w[v]=arguments[v+2];h.children=w}return p(e.type,d,u,m,f,g,h)},p.isValidElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===l},e.exports=p},function(e,t){"use strict";var n={current:null};e.exports=n},function(e,t,n){"use strict";var a=n(12),s=a;e.exports=s},function(e,t){"use strict";function n(e){return function(){return e}}var a=function(){};a.thatReturns=n,a.thatReturnsFalse=n(!1),a.thatReturnsTrue=n(!0),a.thatReturnsNull=n(null),a.thatReturnsThis=function(){return this},a.thatReturnsArgument=function(e){return e},e.exports=a},function(e,t,n){"use strict";var a=!1;e.exports=a},function(e,t){"use strict";var n="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103;e.exports=n},function(e,t,n){"use strict";function a(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function s(e,t,n,o){var d=typeof e;if("undefined"!==d&&"boolean"!==d||(e=null),null===e||"string"===d||"number"===d||"object"===d&&e.$$typeof===r)return n(o,e,""===t?p+a(e,0):t),1;var u,m,f=0,g=""===t?p:t+h;if(Array.isArray(e))for(var y=0;y<e.length;y++)u=e[y],m=g+a(u,y),f+=s(u,m,n,o);else{var b=l(e);if(b){var w,v=b.call(e);if(b!==e.entries)for(var k=0;!(w=v.next()).done;)u=w.value,m=g+a(u,k++),f+=s(u,m,n,o);else for(;!(w=v.next()).done;){var j=w.value;j&&(u=j[1],m=g+c.escape(j[0])+h+a(u,0),f+=s(u,m,n,o))}}else if("object"===d){var x="",S=String(e);i("31","[object Object]"===S?"object with keys {"+Object.keys(e).join(", ")+"}":S,x)}}return f}function o(e,t,n){return null==e?0:s(e,"",t,n)}var i=n(7),r=(n(10),n(14)),l=n(16),c=(n(8),n(17)),p=(n(11),"."),h=":";e.exports=o},function(e,t){"use strict";function n(e){var t=e&&(a&&e[a]||e[s]);if("function"==typeof t)return t}var a="function"==typeof Symbol&&Symbol.iterator,s="@@iterator";e.exports=n},function(e,t){"use strict";function n(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},a=(""+e).replace(t,function(e){return n[e]});return"$"+a}function a(e){var t=/(=0|=2)/g,n={"=0":"=","=2":":"},a="."===e[0]&&"$"===e[1]?e.substring(2):e.substring(1);return(""+a).replace(t,function(e){return n[e]})}var s={escape:n,unescape:a};e.exports=s},function(e,t,n){"use strict";function a(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||o}var s=n(7),o=n(19),i=(n(13),n(20));n(8),n(11);a.prototype.isReactComponent={},a.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e?s("85"):void 0,this.updater.enqueueSetState(this,e),t&&this.updater.enqueueCallback(this,t,"setState")},a.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this),e&&this.updater.enqueueCallback(this,e,"forceUpdate")};e.exports=a},function(e,t,n){"use strict";function a(e,t){}var s=(n(11),{isMounted:function(e){return!1},enqueueCallback:function(e,t){},enqueueForceUpdate:function(e){a(e,"forceUpdate")},enqueueReplaceState:function(e,t){a(e,"replaceState")},enqueueSetState:function(e,t){a(e,"setState")}});e.exports=s},function(e,t,n){"use strict";var a={};e.exports=a},function(e,t,n){"use strict";function a(e,t,n){this.props=e,this.context=t,this.refs=l,this.updater=n||r}function s(){}var o=n(4),i=n(18),r=n(19),l=n(20);s.prototype=i.prototype,a.prototype=new s,a.prototype.constructor=a,o(a.prototype,i.prototype),a.prototype.isPureReactComponent=!0,e.exports=a},function(e,t,n){"use strict";function a(e){return e}function s(e,t){var n=v.hasOwnProperty(t)?v[t]:null;j.hasOwnProperty(t)&&("OVERRIDE_BASE"!==n?d("73",t):void 0),e&&("DEFINE_MANY"!==n&&"DEFINE_MANY_MERGED"!==n?d("74",t):void 0)}function o(e,t){if(t){"function"==typeof t?d("75"):void 0,f.isValidElement(t)?d("76"):void 0;var n=e.prototype,a=n.__reactAutoBindPairs;t.hasOwnProperty(b)&&k.mixins(e,t.mixins);for(var o in t)if(t.hasOwnProperty(o)&&o!==b){var i=t[o],r=n.hasOwnProperty(o);if(s(r,o),k.hasOwnProperty(o))k[o](e,i);else{var p=v.hasOwnProperty(o),h="function"==typeof i,u=h&&!p&&!r&&t.autobind!==!1;if(u)a.push(o,i),n[o]=i;else if(r){var m=v[o];!p||"DEFINE_MANY_MERGED"!==m&&"DEFINE_MANY"!==m?d("77",m,o):void 0,"DEFINE_MANY_MERGED"===m?n[o]=l(n[o],i):"DEFINE_MANY"===m&&(n[o]=c(n[o],i))}else n[o]=i}}}else;}function i(e,t){if(t)for(var n in t){var a=t[n];if(t.hasOwnProperty(n)){var s=n in k;s?d("78",n):void 0;var o=n in e;o?d("79",n):void 0,e[n]=a}}}function r(e,t){e&&t&&"object"==typeof e&&"object"==typeof t?void 0:d("80");for(var n in t)t.hasOwnProperty(n)&&(void 0!==e[n]?d("81",n):void 0,e[n]=t[n]);return e}function l(e,t){return function(){var n=e.apply(this,arguments),a=t.apply(this,arguments);if(null==n)return a;if(null==a)return n;var s={};return r(s,n),r(s,a),s}}function c(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function p(e,t){var n=t.bind(e);return n}function h(e){for(var t=e.__reactAutoBindPairs,n=0;n<t.length;n+=2){var a=t[n],s=t[n+1];e[a]=p(e,s)}}var d=n(7),u=n(4),m=n(18),f=n(9),g=(n(23),n(19)),y=n(20),b=(n(8),n(11),"mixins"),w=[],v={mixins:"DEFINE_MANY",statics:"DEFINE_MANY",propTypes:"DEFINE_MANY",contextTypes:"DEFINE_MANY",childContextTypes:"DEFINE_MANY",getDefaultProps:"DEFINE_MANY_MERGED",getInitialState:"DEFINE_MANY_MERGED",getChildContext:"DEFINE_MANY_MERGED",render:"DEFINE_ONCE",componentWillMount:"DEFINE_MANY",componentDidMount:"DEFINE_MANY",componentWillReceiveProps:"DEFINE_MANY",shouldComponentUpdate:"DEFINE_ONCE",componentWillUpdate:"DEFINE_MANY",componentDidUpdate:"DEFINE_MANY",componentWillUnmount:"DEFINE_MANY",updateComponent:"OVERRIDE_BASE"},k={displayName:function(e,t){e.displayName=t},mixins:function(e,t){if(t)for(var n=0;n<t.length;n++)o(e,t[n])},childContextTypes:function(e,t){e.childContextTypes=u({},e.childContextTypes,t)},contextTypes:function(e,t){e.contextTypes=u({},e.contextTypes,t)},getDefaultProps:function(e,t){e.getDefaultProps?e.getDefaultProps=l(e.getDefaultProps,t):e.getDefaultProps=t},propTypes:function(e,t){e.propTypes=u({},e.propTypes,t)},statics:function(e,t){i(e,t)},autobind:function(){}},j={replaceState:function(e,t){this.updater.enqueueReplaceState(this,e),t&&this.updater.enqueueCallback(this,t,"replaceState")},isMounted:function(){return this.updater.isMounted(this)}},x=function(){};u(x.prototype,m.prototype,j);var S={createClass:function(e){var t=a(function(e,n,a){this.__reactAutoBindPairs.length&&h(this),this.props=e,this.context=n,this.refs=y,this.updater=a||g,this.state=null;var s=this.getInitialState?this.getInitialState():null;"object"!=typeof s||Array.isArray(s)?d("82",t.displayName||"ReactCompositeComponent"):void 0,this.state=s});t.prototype=new x,t.prototype.constructor=t,t.prototype.__reactAutoBindPairs=[],w.forEach(o.bind(null,t)),o(t,e),t.getDefaultProps&&(t.defaultProps=t.getDefaultProps()),t.prototype.render?void 0:d("83");for(var n in v)t.prototype[n]||(t.prototype[n]=null);return t},injection:{injectMixin:function(e){w.push(e)}}};e.exports=S},function(e,t,n){"use strict";var a={};e.exports=a},function(e,t,n){"use strict";var a=n(9),s=a.createFactory,o={a:s("a"),abbr:s("abbr"),address:s("address"),area:s("area"),article:s("article"),aside:s("aside"),audio:s("audio"),b:s("b"),base:s("base"),bdi:s("bdi"),bdo:s("bdo"),big:s("big"),blockquote:s("blockquote"),body:s("body"),br:s("br"),button:s("button"),canvas:s("canvas"),caption:s("caption"),cite:s("cite"),code:s("code"),col:s("col"),colgroup:s("colgroup"),data:s("data"),datalist:s("datalist"),dd:s("dd"),del:s("del"),details:s("details"),dfn:s("dfn"),dialog:s("dialog"),div:s("div"),dl:s("dl"),dt:s("dt"),em:s("em"),embed:s("embed"),fieldset:s("fieldset"),figcaption:s("figcaption"),figure:s("figure"),footer:s("footer"),form:s("form"),h1:s("h1"),h2:s("h2"),h3:s("h3"),h4:s("h4"),h5:s("h5"),h6:s("h6"),head:s("head"),header:s("header"),hgroup:s("hgroup"),hr:s("hr"),html:s("html"),i:s("i"),iframe:s("iframe"),img:s("img"),input:s("input"),ins:s("ins"),kbd:s("kbd"),keygen:s("keygen"),label:s("label"),legend:s("legend"),li:s("li"),link:s("link"),main:s("main"),map:s("map"),mark:s("mark"),menu:s("menu"),menuitem:s("menuitem"),meta:s("meta"),meter:s("meter"),nav:s("nav"),noscript:s("noscript"),object:s("object"),ol:s("ol"),optgroup:s("optgroup"),option:s("option"),output:s("output"),p:s("p"),param:s("param"),picture:s("picture"),pre:s("pre"),progress:s("progress"),q:s("q"),rp:s("rp"),rt:s("rt"),ruby:s("ruby"),s:s("s"),samp:s("samp"),script:s("script"),section:s("section"),select:s("select"),small:s("small"),source:s("source"),span:s("span"),strong:s("strong"),style:s("style"),sub:s("sub"),summary:s("summary"),sup:s("sup"),table:s("table"),tbody:s("tbody"),td:s("td"),textarea:s("textarea"),tfoot:s("tfoot"),th:s("th"),thead:s("thead"),time:s("time"),title:s("title"),tr:s("tr"),track:s("track"),u:s("u"),ul:s("ul"),var:s("var"),video:s("video"),wbr:s("wbr"),circle:s("circle"),clipPath:s("clipPath"),defs:s("defs"),ellipse:s("ellipse"),g:s("g"),image:s("image"),line:s("line"),linearGradient:s("linearGradient"),mask:s("mask"),path:s("path"),pattern:s("pattern"),polygon:s("polygon"),polyline:s("polyline"),radialGradient:s("radialGradient"),rect:s("rect"),stop:s("stop"),svg:s("svg"),text:s("text"),tspan:s("tspan")};e.exports=o},function(e,t,n){"use strict";function a(e,t){return e===t?0!==e||1/e===1/t:e!==e&&t!==t}function s(e){this.message=e,this.stack=""}function o(e){function t(t,n,a,o,i,r,l){o=o||T,r=r||a;if(null==n[a]){var c=j[i];return t?new s(null===n[a]?"The "+c+" `"+r+"` is marked as required "+("in `"+o+"`, but its value is `null`."):"The "+c+" `"+r+"` is marked as required in "+("`"+o+"`, but its value is `undefined`.")):null}return e(n,a,o,i,r)}var n=t.bind(null,!1);return n.isRequired=t.bind(null,!0),n}function i(e){function t(t,n,a,o,i,r){var l=t[n],c=b(l);if(c!==e){var p=j[o],h=w(l);return new s("Invalid "+p+" `"+i+"` of type "+("`"+h+"` supplied to `"+a+"`, expected ")+("`"+e+"`."))}return null}return o(t)}function r(){return o(S.thatReturns(null))}function l(e){function t(t,n,a,o,i){if("function"!=typeof e)return new s("Property `"+i+"` of component `"+a+"` has invalid PropType notation inside arrayOf.");var r=t[n];if(!Array.isArray(r)){var l=j[o],c=b(r);return new s("Invalid "+l+" `"+i+"` of type "+("`"+c+"` supplied to `"+a+"`, expected an array."))}for(var p=0;p<r.length;p++){var h=e(r,p,a,o,i+"["+p+"]",x);if(h instanceof Error)return h}return null}return o(t)}function c(){function e(e,t,n,a,o){var i=e[t];if(!k.isValidElement(i)){var r=j[a],l=b(i);return new s("Invalid "+r+" `"+o+"` of type "+("`"+l+"` supplied to `"+n+"`, expected a single ReactElement."))}return null}return o(e)}function p(e){function t(t,n,a,o,i){if(!(t[n]instanceof e)){var r=j[o],l=e.name||T,c=v(t[n]);return new s("Invalid "+r+" `"+i+"` of type "+("`"+c+"` supplied to `"+a+"`, expected ")+("instance of `"+l+"`."))}return null}return o(t)}function h(e){function t(t,n,o,i,r){for(var l=t[n],c=0;c<e.length;c++)if(a(l,e[c]))return null;var p=j[i],h=JSON.stringify(e);return new s("Invalid "+p+" `"+r+"` of value `"+l+"` "+("supplied to `"+o+"`, expected one of "+h+"."))}return Array.isArray(e)?o(t):S.thatReturnsNull}function d(e){function t(t,n,a,o,i){if("function"!=typeof e)return new s("Property `"+i+"` of component `"+a+"` has invalid PropType notation inside objectOf.");var r=t[n],l=b(r);if("object"!==l){var c=j[o];return new s("Invalid "+c+" `"+i+"` of type "+("`"+l+"` supplied to `"+a+"`, expected an object."))}for(var p in r)if(r.hasOwnProperty(p)){var h=e(r,p,a,o,i+"."+p,x);if(h instanceof Error)return h}return null}return o(t)}function u(e){function t(t,n,a,o,i){for(var r=0;r<e.length;r++){var l=e[r];if(null==l(t,n,a,o,i,x))return null}var c=j[o];return new s("Invalid "+c+" `"+i+"` supplied to "+("`"+a+"`."))}return Array.isArray(e)?o(t):S.thatReturnsNull}function m(){function e(e,t,n,a,o){if(!g(e[t])){var i=j[a];return new s("Invalid "+i+" `"+o+"` supplied to "+("`"+n+"`, expected a ReactNode."))}return null}return o(e)}function f(e){function t(t,n,a,o,i){var r=t[n],l=b(r);if("object"!==l){var c=j[o];return new s("Invalid "+c+" `"+i+"` of type `"+l+"` "+("supplied to `"+a+"`, expected `object`."))}for(var p in e){var h=e[p];if(h){var d=h(r,p,a,o,i+"."+p,x);if(d)return d}}return null}return o(t)}function g(e){switch(typeof e){case"number":case"string":case"undefined":return!0;case"boolean":return!e;case"object":if(Array.isArray(e))return e.every(g);if(null===e||k.isValidElement(e))return!0;var t=I(e);if(!t)return!1;var n,a=t.call(e);if(t!==e.entries){for(;!(n=a.next()).done;)if(!g(n.value))return!1}else for(;!(n=a.next()).done;){var s=n.value;if(s&&!g(s[1]))return!1}return!0;default:return!1}}function y(e,t){return"symbol"===e||("Symbol"===t["@@toStringTag"]||"function"==typeof Symbol&&t instanceof Symbol)}function b(e){var t=typeof e;return Array.isArray(e)?"array":e instanceof RegExp?"object":y(t,e)?"symbol":t}function w(e){var t=b(e);if("object"===t){if(e instanceof Date)return"date";if(e instanceof RegExp)return"regexp"}return t}function v(e){return e.constructor&&e.constructor.name?e.constructor.name:T}var k=n(9),j=n(23),x=n(26),S=n(12),I=n(16),T=(n(11),"<<anonymous>>"),_={array:i("array"),bool:i("boolean"),func:i("function"),number:i("number"),object:i("object"),string:i("string"),symbol:i("symbol"),any:r(),arrayOf:l,element:c(),instanceOf:p,node:m(),objectOf:d,oneOf:h,oneOfType:u,shape:f};s.prototype=Error.prototype,e.exports=_},function(e,t){"use strict";var n="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";e.exports=n},function(e,t){"use strict";e.exports="15.4.2"},function(e,t,n){"use strict";function a(e){return o.isValidElement(e)?void 0:s("143"),e}var s=n(7),o=n(9);n(8);e.exports=a},function(e,t,n){"use strict";e.exports=n(30)},function(e,t,n){"use strict";var a=n(31),s=n(35),o=n(158),i=n(56),r=n(53),l=n(163),c=n(164),p=n(165),h=n(166);n(11);s.inject();var d={findDOMNode:c,render:o.render,unmountComponentAtNode:o.unmountComponentAtNode,version:l,unstable_batchedUpdates:r.batchedUpdates,unstable_renderSubtreeIntoContainer:h};"undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject&&__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({ComponentTree:{getClosestInstanceFromNode:a.getClosestInstanceFromNode,getNodeFromInstance:function(e){return e._renderedComponent&&(e=p(e)),e?a.getNodeFromInstance(e):null}},Mount:o,Reconciler:i});e.exports=d},function(e,t,n){"use strict";function a(e,t){return 1===e.nodeType&&e.getAttribute(m)===String(t)||8===e.nodeType&&e.nodeValue===" react-text: "+t+" "||8===e.nodeType&&e.nodeValue===" react-empty: "+t+" "}function s(e){for(var t;t=e._renderedComponent;)e=t;return e}function o(e,t){var n=s(e);n._hostNode=t,t[g]=n}function i(e){var t=e._hostNode;t&&(delete t[g],e._hostNode=null)}function r(e,t){if(!(e._flags&f.hasCachedChildNodes)){var n=e._renderedChildren,i=t.firstChild;e:for(var r in n)if(n.hasOwnProperty(r)){var l=n[r],c=s(l)._domID;if(0!==c){for(;null!==i;i=i.nextSibling)if(a(i,c)){o(l,i);continue e}h("32",c)}}e._flags|=f.hasCachedChildNodes}}function l(e){if(e[g])return e[g];for(var t=[];!e[g];){if(t.push(e),!e.parentNode)return null;e=e.parentNode}for(var n,a;e&&(a=e[g]);e=t.pop())n=a,t.length&&r(a,e);return n}function c(e){var t=l(e);return null!=t&&t._hostNode===e?t:null}function p(e){if(void 0===e._hostNode?h("33"):void 0,e._hostNode)return e._hostNode;for(var t=[];!e._hostNode;)t.push(e),e._hostParent?void 0:h("34"),e=e._hostParent;for(;t.length;e=t.pop())r(e,e._hostNode);return e._hostNode}var h=n(32),d=n(33),u=n(34),m=(n(8),d.ID_ATTRIBUTE_NAME),f=u,g="__reactInternalInstance$"+Math.random().toString(36).slice(2),y={getClosestInstanceFromNode:l,getInstanceFromNode:c,getNodeFromInstance:p,precacheChildNodes:r,precacheNode:o,uncacheNode:i};e.exports=y},7,function(e,t,n){"use strict";function a(e,t){return(e&t)===t}var s=n(32),o=(n(8),{MUST_USE_PROPERTY:1,HAS_BOOLEAN_VALUE:4,HAS_NUMERIC_VALUE:8,HAS_POSITIVE_NUMERIC_VALUE:24,HAS_OVERLOADED_BOOLEAN_VALUE:32,injectDOMPropertyConfig:function(e){var t=o,n=e.Properties||{},i=e.DOMAttributeNamespaces||{},l=e.DOMAttributeNames||{},c=e.DOMPropertyNames||{},p=e.DOMMutationMethods||{};e.isCustomAttribute&&r._isCustomAttributeFunctions.push(e.isCustomAttribute);for(var h in n){r.properties.hasOwnProperty(h)?s("48",h):void 0;var d=h.toLowerCase(),u=n[h],m={attributeName:d,attributeNamespace:null,propertyName:h,mutationMethod:null,mustUseProperty:a(u,t.MUST_USE_PROPERTY),hasBooleanValue:a(u,t.HAS_BOOLEAN_VALUE),hasNumericValue:a(u,t.HAS_NUMERIC_VALUE),hasPositiveNumericValue:a(u,t.HAS_POSITIVE_NUMERIC_VALUE),hasOverloadedBooleanValue:a(u,t.HAS_OVERLOADED_BOOLEAN_VALUE)};if(m.hasBooleanValue+m.hasNumericValue+m.hasOverloadedBooleanValue<=1?void 0:s("50",h),l.hasOwnProperty(h)){var f=l[h];m.attributeName=f}i.hasOwnProperty(h)&&(m.attributeNamespace=i[h]),c.hasOwnProperty(h)&&(m.propertyName=c[h]),p.hasOwnProperty(h)&&(m.mutationMethod=p[h]),r.properties[h]=m}}}),i=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",r={ID_ATTRIBUTE_NAME:"data-reactid",ROOT_ATTRIBUTE_NAME:"data-reactroot",ATTRIBUTE_NAME_START_CHAR:i,ATTRIBUTE_NAME_CHAR:i+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040",properties:{},getPossibleStandardName:null,_isCustomAttributeFunctions:[],isCustomAttribute:function(e){for(var t=0;t<r._isCustomAttributeFunctions.length;t++){var n=r._isCustomAttributeFunctions[t];if(n(e))return!0}return!1},injection:o};e.exports=r},function(e,t){"use strict";var n={hasCachedChildNodes:1};e.exports=n},function(e,t,n){"use strict";function a(){x||(x=!0,b.EventEmitter.injectReactEventListener(y),b.EventPluginHub.injectEventPluginOrder(r),b.EventPluginUtils.injectComponentTree(d),b.EventPluginUtils.injectTreeTraversal(m),b.EventPluginHub.injectEventPluginsByName({SimpleEventPlugin:j,EnterLeaveEventPlugin:l,ChangeEventPlugin:i,SelectEventPlugin:k,BeforeInputEventPlugin:o}),b.HostComponent.injectGenericComponentClass(h),b.HostComponent.injectTextComponentClass(f),b.DOMProperty.injectDOMPropertyConfig(s),b.DOMProperty.injectDOMPropertyConfig(c),b.DOMProperty.injectDOMPropertyConfig(v),b.EmptyComponent.injectEmptyComponentFactory(function(e){return new u(e)}),b.Updates.injectReconcileTransaction(w),b.Updates.injectBatchingStrategy(g),b.Component.injectEnvironment(p))}var s=n(36),o=n(37),i=n(52),r=n(64),l=n(65),c=n(70),p=n(71),h=n(84),d=n(31),u=n(129),m=n(130),f=n(131),g=n(132),y=n(133),b=n(136),w=n(137),v=n(145),k=n(146),j=n(147),x=!1;e.exports={inject:a}},function(e,t){"use strict";var n={Properties:{"aria-current":0,"aria-details":0,"aria-disabled":0,"aria-hidden":0,"aria-invalid":0,"aria-keyshortcuts":0,"aria-label":0,"aria-roledescription":0,"aria-autocomplete":0,"aria-checked":0,"aria-expanded":0,"aria-haspopup":0,"aria-level":0,"aria-modal":0,"aria-multiline":0,"aria-multiselectable":0,"aria-orientation":0,"aria-placeholder":0,"aria-pressed":0,"aria-readonly":0,"aria-required":0,"aria-selected":0,"aria-sort":0,"aria-valuemax":0,"aria-valuemin":0,"aria-valuenow":0,"aria-valuetext":0,"aria-atomic":0,"aria-busy":0,"aria-live":0,"aria-relevant":0,"aria-dropeffect":0,"aria-grabbed":0,"aria-activedescendant":0,"aria-colcount":0,"aria-colindex":0,"aria-colspan":0,"aria-controls":0,"aria-describedby":0,"aria-errormessage":0,"aria-flowto":0,"aria-labelledby":0,"aria-owns":0,"aria-posinset":0,"aria-rowcount":0,"aria-rowindex":0,"aria-rowspan":0,"aria-setsize":0},DOMAttributeNames:{},DOMPropertyNames:{}};e.exports=n},function(e,t,n){"use strict";function a(){var e=window.opera;return"object"==typeof e&&"function"==typeof e.version&&parseInt(e.version(),10)<=12}function s(e){return(e.ctrlKey||e.altKey||e.metaKey)&&!(e.ctrlKey&&e.altKey)}function o(e){switch(e){case"topCompositionStart":return T.compositionStart;case"topCompositionEnd":return T.compositionEnd;case"topCompositionUpdate":return T.compositionUpdate}}function i(e,t){return"topKeyDown"===e&&t.keyCode===w}function r(e,t){switch(e){case"topKeyUp":return b.indexOf(t.keyCode)!==-1;case"topKeyDown":return t.keyCode!==w;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function l(e){var t=e.detail;return"object"==typeof t&&"data"in t?t.data:null}function c(e,t,n,a){var s,c;if(v?s=o(e):C?r(e,n)&&(s=T.compositionEnd):i(e,n)&&(s=T.compositionStart),!s)return null;x&&(C||s!==T.compositionStart?s===T.compositionEnd&&C&&(c=C.getData()):C=f.getPooled(a));var p=g.getPooled(s,t,n,a);if(c)p.data=c;else{var h=l(n);null!==h&&(p.data=h)}return u.accumulateTwoPhaseDispatches(p),p}function p(e,t){switch(e){case"topCompositionEnd":return l(t);case"topKeyPress":var n=t.which;return n!==S?null:(_=!0,I);case"topTextInput":var a=t.data;return a===I&&_?null:a;default:return null}}function h(e,t){if(C){if("topCompositionEnd"===e||!v&&r(e,t)){var n=C.getData();return f.release(C),C=null,n}return null}switch(e){case"topPaste":return null;case"topKeyPress":return t.which&&!s(t)?String.fromCharCode(t.which):null;case"topCompositionEnd":return x?null:t.data;default:return null}}function d(e,t,n,a){var s;if(s=j?p(e,n):h(e,n),!s)return null;var o=y.getPooled(T.beforeInput,t,n,a);return o.data=s,u.accumulateTwoPhaseDispatches(o),o}var u=n(38),m=n(45),f=n(46),g=n(49),y=n(51),b=[9,13,27,32],w=229,v=m.canUseDOM&&"CompositionEvent"in window,k=null;m.canUseDOM&&"documentMode"in document&&(k=document.documentMode);var j=m.canUseDOM&&"TextEvent"in window&&!k&&!a(),x=m.canUseDOM&&(!v||k&&k>8&&k<=11),S=32,I=String.fromCharCode(S),T={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:["topBlur","topCompositionEnd","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:["topBlur","topCompositionStart","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:["topBlur","topCompositionUpdate","topKeyDown","topKeyPress","topKeyUp","topMouseDown"]}},_=!1,C=null,M={eventTypes:T,extractEvents:function(e,t,n,a){return[c(e,t,n,a),d(e,t,n,a)]}};e.exports=M},function(e,t,n){"use strict";function a(e,t,n){var a=t.dispatchConfig.phasedRegistrationNames[n];return y(e,a)}function s(e,t,n){var s=a(e,n,t);s&&(n._dispatchListeners=f(n._dispatchListeners,s),n._dispatchInstances=f(n._dispatchInstances,e))}function o(e){e&&e.dispatchConfig.phasedRegistrationNames&&m.traverseTwoPhase(e._targetInst,s,e)}function i(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst,n=t?m.getParentInstance(t):null;m.traverseTwoPhase(n,s,e)}}function r(e,t,n){if(n&&n.dispatchConfig.registrationName){var a=n.dispatchConfig.registrationName,s=y(e,a);s&&(n._dispatchListeners=f(n._dispatchListeners,s),n._dispatchInstances=f(n._dispatchInstances,e))}}function l(e){e&&e.dispatchConfig.registrationName&&r(e._targetInst,null,e)}function c(e){g(e,o)}function p(e){g(e,i)}function h(e,t,n,a){m.traverseEnterLeave(n,a,r,e,t)}function d(e){g(e,l)}var u=n(39),m=n(41),f=n(43),g=n(44),y=(n(11),u.getListener),b={accumulateTwoPhaseDispatches:c,accumulateTwoPhaseDispatchesSkipTarget:p,accumulateDirectDispatches:d,accumulateEnterLeaveDispatches:h};e.exports=b},function(e,t,n){"use strict";function a(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}function s(e,t,n){switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":return!(!n.disabled||!a(t));default:return!1}}var o=n(32),i=n(40),r=n(41),l=n(42),c=n(43),p=n(44),h=(n(8),{}),d=null,u=function(e,t){e&&(r.executeDispatchesInOrder(e,t),e.isPersistent()||e.constructor.release(e))},m=function(e){return u(e,!0)},f=function(e){return u(e,!1)},g=function(e){return"."+e._rootNodeID},y={injection:{injectEventPluginOrder:i.injectEventPluginOrder,injectEventPluginsByName:i.injectEventPluginsByName},putListener:function(e,t,n){"function"!=typeof n?o("94",t,typeof n):void 0;var a=g(e),s=h[t]||(h[t]={});s[a]=n;var r=i.registrationNameModules[t];r&&r.didPutListener&&r.didPutListener(e,t,n)},getListener:function(e,t){var n=h[t];if(s(t,e._currentElement.type,e._currentElement.props))return null;var a=g(e);return n&&n[a]},deleteListener:function(e,t){var n=i.registrationNameModules[t];n&&n.willDeleteListener&&n.willDeleteListener(e,t);var a=h[t];if(a){var s=g(e);delete a[s]}},deleteAllListeners:function(e){var t=g(e);for(var n in h)if(h.hasOwnProperty(n)&&h[n][t]){var a=i.registrationNameModules[n];a&&a.willDeleteListener&&a.willDeleteListener(e,n),delete h[n][t]}},extractEvents:function(e,t,n,a){for(var s,o=i.plugins,r=0;r<o.length;r++){var l=o[r];if(l){var p=l.extractEvents(e,t,n,a);p&&(s=c(s,p))}}return s},enqueueEvents:function(e){e&&(d=c(d,e))},processEventQueue:function(e){var t=d;d=null,e?p(t,m):p(t,f),d?o("95"):void 0,l.rethrowCaughtError()},__purge:function(){h={}},__getListenerBank:function(){return h}};e.exports=y},function(e,t,n){"use strict";function a(){if(r)for(var e in l){var t=l[e],n=r.indexOf(e);if(n>-1?void 0:i("96",e),!c.plugins[n]){t.extractEvents?void 0:i("97",e),c.plugins[n]=t;var a=t.eventTypes;for(var o in a)s(a[o],t,o)?void 0:i("98",o,e)}}}function s(e,t,n){c.eventNameDispatchConfigs.hasOwnProperty(n)?i("99",n):void 0,c.eventNameDispatchConfigs[n]=e;var a=e.phasedRegistrationNames;if(a){for(var s in a)if(a.hasOwnProperty(s)){var r=a[s];o(r,t,n)}return!0}return!!e.registrationName&&(o(e.registrationName,t,n),!0)}function o(e,t,n){c.registrationNameModules[e]?i("100",e):void 0,c.registrationNameModules[e]=t,c.registrationNameDependencies[e]=t.eventTypes[n].dependencies}var i=n(32),r=(n(8),null),l={},c={plugins:[],eventNameDispatchConfigs:{},registrationNameModules:{},registrationNameDependencies:{},possibleRegistrationNames:null,injectEventPluginOrder:function(e){r?i("101"):void 0,r=Array.prototype.slice.call(e),a()},injectEventPluginsByName:function(e){var t=!1;for(var n in e)if(e.hasOwnProperty(n)){var s=e[n];l.hasOwnProperty(n)&&l[n]===s||(l[n]?i("102",n):void 0,l[n]=s,t=!0)}t&&a()},getPluginModuleForEvent:function(e){var t=e.dispatchConfig;if(t.registrationName)return c.registrationNameModules[t.registrationName]||null;if(void 0!==t.phasedRegistrationNames){var n=t.phasedRegistrationNames;for(var a in n)if(n.hasOwnProperty(a)){var s=c.registrationNameModules[n[a]];if(s)return s}}return null},_resetEventPlugins:function(){r=null;for(var e in l)l.hasOwnProperty(e)&&delete l[e];c.plugins.length=0;var t=c.eventNameDispatchConfigs;for(var n in t)t.hasOwnProperty(n)&&delete t[n];var a=c.registrationNameModules;for(var s in a)a.hasOwnProperty(s)&&delete a[s]}};e.exports=c},function(e,t,n){"use strict";function a(e){return"topMouseUp"===e||"topTouchEnd"===e||"topTouchCancel"===e}function s(e){return"topMouseMove"===e||"topTouchMove"===e}function o(e){return"topMouseDown"===e||"topTouchStart"===e}function i(e,t,n,a){var s=e.type||"unknown-event";e.currentTarget=y.getNodeFromInstance(a),t?f.invokeGuardedCallbackWithCatch(s,n,e):f.invokeGuardedCallback(s,n,e),e.currentTarget=null}function r(e,t){var n=e._dispatchListeners,a=e._dispatchInstances;if(Array.isArray(n))for(var s=0;s<n.length&&!e.isPropagationStopped();s++)i(e,t,n[s],a[s]);else n&&i(e,t,n,a);e._dispatchListeners=null,
e._dispatchInstances=null}function l(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t)){for(var a=0;a<t.length&&!e.isPropagationStopped();a++)if(t[a](e,n[a]))return n[a]}else if(t&&t(e,n))return n;return null}function c(e){var t=l(e);return e._dispatchInstances=null,e._dispatchListeners=null,t}function p(e){var t=e._dispatchListeners,n=e._dispatchInstances;Array.isArray(t)?m("103"):void 0,e.currentTarget=t?y.getNodeFromInstance(n):null;var a=t?t(e):null;return e.currentTarget=null,e._dispatchListeners=null,e._dispatchInstances=null,a}function h(e){return!!e._dispatchListeners}var d,u,m=n(32),f=n(42),g=(n(8),n(11),{injectComponentTree:function(e){d=e},injectTreeTraversal:function(e){u=e}}),y={isEndish:a,isMoveish:s,isStartish:o,executeDirectDispatch:p,executeDispatchesInOrder:r,executeDispatchesInOrderStopAtTrue:c,hasDispatches:h,getInstanceFromNode:function(e){return d.getInstanceFromNode(e)},getNodeFromInstance:function(e){return d.getNodeFromInstance(e)},isAncestor:function(e,t){return u.isAncestor(e,t)},getLowestCommonAncestor:function(e,t){return u.getLowestCommonAncestor(e,t)},getParentInstance:function(e){return u.getParentInstance(e)},traverseTwoPhase:function(e,t,n){return u.traverseTwoPhase(e,t,n)},traverseEnterLeave:function(e,t,n,a,s){return u.traverseEnterLeave(e,t,n,a,s)},injection:g};e.exports=y},function(e,t,n){"use strict";function a(e,t,n){try{t(n)}catch(e){null===s&&(s=e)}}var s=null,o={invokeGuardedCallback:a,invokeGuardedCallbackWithCatch:a,rethrowCaughtError:function(){if(s){var e=s;throw s=null,e}}};e.exports=o},function(e,t,n){"use strict";function a(e,t){return null==t?s("30"):void 0,null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}var s=n(32);n(8);e.exports=a},function(e,t){"use strict";function n(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}e.exports=n},function(e,t){"use strict";var n=!("undefined"==typeof window||!window.document||!window.document.createElement),a={canUseDOM:n,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:n&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:n&&!!window.screen,isInWorker:!n};e.exports=a},function(e,t,n){"use strict";function a(e){this._root=e,this._startText=this.getText(),this._fallbackText=null}var s=n(4),o=n(47),i=n(48);s(a.prototype,{destructor:function(){this._root=null,this._startText=null,this._fallbackText=null},getText:function(){return"value"in this._root?this._root.value:this._root[i()]},getData:function(){if(this._fallbackText)return this._fallbackText;var e,t,n=this._startText,a=n.length,s=this.getText(),o=s.length;for(e=0;e<a&&n[e]===s[e];e++);var i=a-e;for(t=1;t<=i&&n[a-t]===s[o-t];t++);var r=t>1?1-t:void 0;return this._fallbackText=s.slice(e,r),this._fallbackText}}),o.addPoolingTo(a),e.exports=a},[634,32],function(e,t,n){"use strict";function a(){return!o&&s.canUseDOM&&(o="textContent"in document.documentElement?"textContent":"innerText"),o}var s=n(45),o=null;e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o={data:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n;var s=this.constructor.Interface;for(var o in s)if(s.hasOwnProperty(o)){var r=s[o];r?this[o]=r(n):"target"===o?this.target=a:this[o]=n[o]}var l=null!=n.defaultPrevented?n.defaultPrevented:n.returnValue===!1;return l?this.isDefaultPrevented=i.thatReturnsTrue:this.isDefaultPrevented=i.thatReturnsFalse,this.isPropagationStopped=i.thatReturnsFalse,this}var s=n(4),o=n(47),i=n(12),r=(n(11),"function"==typeof Proxy,["dispatchConfig","_targetInst","nativeEvent","isDefaultPrevented","isPropagationStopped","_dispatchListeners","_dispatchInstances"]),l={type:null,target:null,currentTarget:i.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};s(a.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=i.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=i.thatReturnsTrue)},persist:function(){this.isPersistent=i.thatReturnsTrue},isPersistent:i.thatReturnsFalse,destructor:function(){var e=this.constructor.Interface;for(var t in e)this[t]=null;for(var n=0;n<r.length;n++)this[r[n]]=null}}),a.Interface=l,a.augmentClass=function(e,t){var n=this,a=function(){};a.prototype=n.prototype;var i=new a;s(i,e.prototype),e.prototype=i,e.prototype.constructor=e,e.Interface=s({},n.Interface,t),e.augmentClass=n.augmentClass,o.addPoolingTo(e,o.fourArgumentPooler)},o.addPoolingTo(a,o.fourArgumentPooler),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o={data:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e){var t=e.nodeName&&e.nodeName.toLowerCase();return"select"===t||"input"===t&&"file"===e.type}function s(e){var t=x.getPooled(_.change,M,e,S(e));w.accumulateTwoPhaseDispatches(t),j.batchedUpdates(o,t)}function o(e){b.enqueueEvents(e),b.processEventQueue(!1)}function i(e,t){C=e,M=t,C.attachEvent("onchange",s)}function r(){C&&(C.detachEvent("onchange",s),C=null,M=null)}function l(e,t){if("topChange"===e)return t}function c(e,t,n){"topFocus"===e?(r(),i(t,n)):"topBlur"===e&&r()}function p(e,t){C=e,M=t,A=e.value,E=Object.getOwnPropertyDescriptor(e.constructor.prototype,"value"),Object.defineProperty(C,"value",O),C.attachEvent?C.attachEvent("onpropertychange",d):C.addEventListener("propertychange",d,!1)}function h(){C&&(delete C.value,C.detachEvent?C.detachEvent("onpropertychange",d):C.removeEventListener("propertychange",d,!1),C=null,M=null,A=null,E=null)}function d(e){if("value"===e.propertyName){var t=e.srcElement.value;t!==A&&(A=t,s(e))}}function u(e,t){if("topInput"===e)return t}function m(e,t,n){"topFocus"===e?(h(),p(t,n)):"topBlur"===e&&h()}function f(e,t){if(("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)&&C&&C.value!==A)return A=C.value,M}function g(e){return e.nodeName&&"input"===e.nodeName.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)}function y(e,t){if("topClick"===e)return t}var b=n(39),w=n(38),v=n(45),k=n(31),j=n(53),x=n(50),S=n(61),I=n(62),T=n(63),_={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:["topBlur","topChange","topClick","topFocus","topInput","topKeyDown","topKeyUp","topSelectionChange"]}},C=null,M=null,A=null,E=null,P=!1;v.canUseDOM&&(P=I("change")&&(!document.documentMode||document.documentMode>8));var V=!1;v.canUseDOM&&(V=I("input")&&(!document.documentMode||document.documentMode>11));var O={get:function(){return E.get.call(this)},set:function(e){A=""+e,E.set.call(this,e)}},R={eventTypes:_,extractEvents:function(e,t,n,s){var o,i,r=t?k.getNodeFromInstance(t):window;if(a(r)?P?o=l:i=c:T(r)?V?o=u:(o=f,i=m):g(r)&&(o=y),o){var p=o(e,t);if(p){var h=x.getPooled(_.change,p,n,s);return h.type="change",w.accumulateTwoPhaseDispatches(h),h}}i&&i(e,r,t)}};e.exports=R},function(e,t,n){"use strict";function a(){_.ReactReconcileTransaction&&k?void 0:p("123")}function s(){this.reinitializeTransaction(),this.dirtyComponentsLength=null,this.callbackQueue=d.getPooled(),this.reconcileTransaction=_.ReactReconcileTransaction.getPooled(!0)}function o(e,t,n,s,o,i){return a(),k.batchedUpdates(e,t,n,s,o,i)}function i(e,t){return e._mountOrder-t._mountOrder}function r(e){var t=e.dirtyComponentsLength;t!==y.length?p("124",t,y.length):void 0,y.sort(i),b++;for(var n=0;n<t;n++){var a=y[n],s=a._pendingCallbacks;a._pendingCallbacks=null;var o;if(m.logTopLevelRenders){var r=a;a._currentElement.type.isReactTopLevelWrapper&&(r=a._renderedComponent),o="React update: "+r.getName(),console.time(o)}if(f.performUpdateIfNecessary(a,e.reconcileTransaction,b),o&&console.timeEnd(o),s)for(var l=0;l<s.length;l++)e.callbackQueue.enqueue(s[l],a.getPublicInstance())}}function l(e){return a(),k.isBatchingUpdates?(y.push(e),void(null==e._updateBatchNumber&&(e._updateBatchNumber=b+1))):void k.batchedUpdates(l,e)}function c(e,t){k.isBatchingUpdates?void 0:p("125"),w.enqueue(e,t),v=!0}var p=n(32),h=n(4),d=n(54),u=n(47),m=n(55),f=n(56),g=n(60),y=(n(8),[]),b=0,w=d.getPooled(),v=!1,k=null,j={initialize:function(){this.dirtyComponentsLength=y.length},close:function(){this.dirtyComponentsLength!==y.length?(y.splice(0,this.dirtyComponentsLength),I()):y.length=0}},x={initialize:function(){this.callbackQueue.reset()},close:function(){this.callbackQueue.notifyAll()}},S=[j,x];h(s.prototype,g,{getTransactionWrappers:function(){return S},destructor:function(){this.dirtyComponentsLength=null,d.release(this.callbackQueue),this.callbackQueue=null,_.ReactReconcileTransaction.release(this.reconcileTransaction),this.reconcileTransaction=null},perform:function(e,t,n){return g.perform.call(this,this.reconcileTransaction.perform,this.reconcileTransaction,e,t,n)}}),u.addPoolingTo(s);var I=function(){for(;y.length||v;){if(y.length){var e=s.getPooled();e.perform(r,null,e),s.release(e)}if(v){v=!1;var t=w;w=d.getPooled(),t.notifyAll(),d.release(t)}}},T={injectReconcileTransaction:function(e){e?void 0:p("126"),_.ReactReconcileTransaction=e},injectBatchingStrategy:function(e){e?void 0:p("127"),"function"!=typeof e.batchedUpdates?p("128"):void 0,"boolean"!=typeof e.isBatchingUpdates?p("129"):void 0,k=e}},_={ReactReconcileTransaction:null,batchedUpdates:o,enqueueUpdate:l,flushBatchedUpdates:I,injection:T,asap:c};e.exports=_},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var s=n(32),o=n(47),i=(n(8),function(){function e(t){a(this,e),this._callbacks=null,this._contexts=null,this._arg=t}return e.prototype.enqueue=function(e,t){this._callbacks=this._callbacks||[],this._callbacks.push(e),this._contexts=this._contexts||[],this._contexts.push(t)},e.prototype.notifyAll=function(){var e=this._callbacks,t=this._contexts,n=this._arg;if(e&&t){e.length!==t.length?s("24"):void 0,this._callbacks=null,this._contexts=null;for(var a=0;a<e.length;a++)e[a].call(t[a],n);e.length=0,t.length=0}},e.prototype.checkpoint=function(){return this._callbacks?this._callbacks.length:0},e.prototype.rollback=function(e){this._callbacks&&this._contexts&&(this._callbacks.length=e,this._contexts.length=e)},e.prototype.reset=function(){this._callbacks=null,this._contexts=null},e.prototype.destructor=function(){this.reset()},e}());e.exports=o.addPoolingTo(i)},function(e,t){"use strict";var n={logTopLevelRenders:!1};e.exports=n},function(e,t,n){"use strict";function a(){s.attachRefs(this,this._currentElement)}var s=n(57),o=(n(59),n(11),{mountComponent:function(e,t,n,s,o,i){var r=e.mountComponent(t,n,s,o,i);return e._currentElement&&null!=e._currentElement.ref&&t.getReactMountReady().enqueue(a,e),r},getHostNode:function(e){return e.getHostNode()},unmountComponent:function(e,t){s.detachRefs(e,e._currentElement),e.unmountComponent(t)},receiveComponent:function(e,t,n,o){var i=e._currentElement;if(t!==i||o!==e._context){var r=s.shouldUpdateRefs(i,t);r&&s.detachRefs(e,i),e.receiveComponent(t,n,o),r&&e._currentElement&&null!=e._currentElement.ref&&n.getReactMountReady().enqueue(a,e)}},performUpdateIfNecessary:function(e,t,n){e._updateBatchNumber===n&&e.performUpdateIfNecessary(t)}});e.exports=o},function(e,t,n){"use strict";function a(e,t,n){"function"==typeof e?e(t.getPublicInstance()):o.addComponentAsRefTo(t,e,n)}function s(e,t,n){"function"==typeof e?e(null):o.removeComponentAsRefFrom(t,e,n)}var o=n(58),i={};i.attachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&a(n,e,t._owner)}},i.shouldUpdateRefs=function(e,t){var n=null,a=null;null!==e&&"object"==typeof e&&(n=e.ref,a=e._owner);var s=null,o=null;return null!==t&&"object"==typeof t&&(s=t.ref,o=t._owner),n!==s||"string"==typeof s&&o!==a},i.detachRefs=function(e,t){if(null!==t&&"object"==typeof t){var n=t.ref;null!=n&&s(n,e,t._owner)}},e.exports=i},function(e,t,n){"use strict";function a(e){return!(!e||"function"!=typeof e.attachRef||"function"!=typeof e.detachRef)}var s=n(32),o=(n(8),{addComponentAsRefTo:function(e,t,n){a(n)?void 0:s("119"),n.attachRef(t,e)},removeComponentAsRefFrom:function(e,t,n){a(n)?void 0:s("120");var o=n.getPublicInstance();o&&o.refs[t]===e.getPublicInstance()&&n.detachRef(t)}});e.exports=o},function(e,t,n){"use strict";var a=null;e.exports={debugTool:a}},function(e,t,n){"use strict";var a=n(32),s=(n(8),{}),o={reinitializeTransaction:function(){this.transactionWrappers=this.getTransactionWrappers(),this.wrapperInitData?this.wrapperInitData.length=0:this.wrapperInitData=[],this._isInTransaction=!1},_isInTransaction:!1,getTransactionWrappers:null,isInTransaction:function(){return!!this._isInTransaction},perform:function(e,t,n,s,o,i,r,l){this.isInTransaction()?a("27"):void 0;var c,p;try{this._isInTransaction=!0,c=!0,this.initializeAll(0),p=e.call(t,n,s,o,i,r,l),c=!1}finally{try{if(c)try{this.closeAll(0)}catch(e){}else this.closeAll(0)}finally{this._isInTransaction=!1}}return p},initializeAll:function(e){for(var t=this.transactionWrappers,n=e;n<t.length;n++){var a=t[n];try{this.wrapperInitData[n]=s,this.wrapperInitData[n]=a.initialize?a.initialize.call(this):null}finally{if(this.wrapperInitData[n]===s)try{this.initializeAll(n+1)}catch(e){}}}},closeAll:function(e){this.isInTransaction()?void 0:a("28");for(var t=this.transactionWrappers,n=e;n<t.length;n++){var o,i=t[n],r=this.wrapperInitData[n];try{o=!0,r!==s&&i.close&&i.close.call(this,r),o=!1}finally{if(o)try{this.closeAll(n+1)}catch(e){}}}this.wrapperInitData.length=0}};e.exports=o},function(e,t){"use strict";function n(e){var t=e.target||e.srcElement||window;return t.correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}e.exports=n},function(e,t,n){"use strict";/**
	 * Checks if an event is supported in the current execution environment.
	 *
	 * NOTE: This will not work correctly for non-generic events such as `change`,
	 * `reset`, `load`, `error`, and `select`.
	 *
	 * Borrows from Modernizr.
	 *
	 * @param {string} eventNameSuffix Event name, e.g. "click".
	 * @param {?boolean} capture Check if the capture phase is supported.
	 * @return {boolean} True if the event is supported.
	 * @internal
	 * @license Modernizr 3.0.0pre (Custom Build) | MIT
	 */
function a(e,t){if(!o.canUseDOM||t&&!("addEventListener"in document))return!1;var n="on"+e,a=n in document;if(!a){var i=document.createElement("div");i.setAttribute(n,"return;"),a="function"==typeof i[n]}return!a&&s&&"wheel"===e&&(a=document.implementation.hasFeature("Events.wheel","3.0")),a}var s,o=n(45);o.canUseDOM&&(s=document.implementation&&document.implementation.hasFeature&&document.implementation.hasFeature("","")!==!0),e.exports=a},function(e,t){"use strict";function n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!a[e.type]:"textarea"===t}var a={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};e.exports=n},function(e,t){"use strict";var n=["ResponderEventPlugin","SimpleEventPlugin","TapEventPlugin","EnterLeaveEventPlugin","ChangeEventPlugin","SelectEventPlugin","BeforeInputEventPlugin"];e.exports=n},function(e,t,n){"use strict";var a=n(38),s=n(31),o=n(66),i={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},r={eventTypes:i,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement))return null;if("topMouseOut"!==e&&"topMouseOver"!==e)return null;var l;if(r.window===r)l=r;else{var c=r.ownerDocument;l=c?c.defaultView||c.parentWindow:window}var p,h;if("topMouseOut"===e){p=t;var d=n.relatedTarget||n.toElement;h=d?s.getClosestInstanceFromNode(d):null}else p=null,h=t;if(p===h)return null;var u=null==p?l:s.getNodeFromInstance(p),m=null==h?l:s.getNodeFromInstance(h),f=o.getPooled(i.mouseLeave,p,n,r);f.type="mouseleave",f.target=u,f.relatedTarget=m;var g=o.getPooled(i.mouseEnter,h,n,r);return g.type="mouseenter",g.target=m,g.relatedTarget=u,a.accumulateEnterLeaveDispatches(f,g,p,h),[f,g]}};e.exports=r},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(67),o=n(68),i=n(69),r={screenX:null,screenY:null,clientX:null,clientY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:i,button:function(e){var t=e.button;return"which"in e?t:2===t?2:4===t?1:0},buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},pageX:function(e){return"pageX"in e?e.pageX:e.clientX+o.currentScrollLeft},pageY:function(e){return"pageY"in e?e.pageY:e.clientY+o.currentScrollTop}};s.augmentClass(a,r),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o=n(61),i={view:function(e){if(e.view)return e.view;var t=o(e);if(t.window===t)return t;var n=t.ownerDocument;return n?n.defaultView||n.parentWindow:window},detail:function(e){return e.detail||0}};s.augmentClass(a,i),e.exports=a},function(e,t){"use strict";var n={currentScrollLeft:0,currentScrollTop:0,refreshScrollValues:function(e){n.currentScrollLeft=e.x,n.currentScrollTop=e.y}};e.exports=n},function(e,t){"use strict";function n(e){var t=this,n=t.nativeEvent;if(n.getModifierState)return n.getModifierState(e);var a=s[e];return!!a&&!!n[a]}function a(e){return n}var s={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};e.exports=a},function(e,t,n){"use strict";var a=n(33),s=a.injection.MUST_USE_PROPERTY,o=a.injection.HAS_BOOLEAN_VALUE,i=a.injection.HAS_NUMERIC_VALUE,r=a.injection.HAS_POSITIVE_NUMERIC_VALUE,l=a.injection.HAS_OVERLOADED_BOOLEAN_VALUE,c={isCustomAttribute:RegExp.prototype.test.bind(new RegExp("^(data|aria)-["+a.ATTRIBUTE_NAME_CHAR+"]*$")),Properties:{accept:0,acceptCharset:0,accessKey:0,action:0,allowFullScreen:o,allowTransparency:0,alt:0,as:0,async:o,autoComplete:0,autoPlay:o,capture:o,cellPadding:0,cellSpacing:0,charSet:0,challenge:0,checked:s|o,cite:0,classID:0,className:0,cols:r,colSpan:0,content:0,contentEditable:0,contextMenu:0,controls:o,coords:0,crossOrigin:0,data:0,dateTime:0,default:o,defer:o,dir:0,disabled:o,download:l,draggable:0,encType:0,form:0,formAction:0,formEncType:0,formMethod:0,formNoValidate:o,formTarget:0,frameBorder:0,headers:0,height:0,hidden:o,high:0,href:0,hrefLang:0,htmlFor:0,httpEquiv:0,icon:0,id:0,inputMode:0,integrity:0,is:0,keyParams:0,keyType:0,kind:0,label:0,lang:0,list:0,loop:o,low:0,manifest:0,marginHeight:0,marginWidth:0,max:0,maxLength:0,media:0,mediaGroup:0,method:0,min:0,minLength:0,multiple:s|o,muted:s|o,name:0,nonce:0,noValidate:o,open:o,optimum:0,pattern:0,placeholder:0,playsInline:o,poster:0,preload:0,profile:0,radioGroup:0,readOnly:o,referrerPolicy:0,rel:0,required:o,reversed:o,role:0,rows:r,rowSpan:i,sandbox:0,scope:0,scoped:o,scrolling:0,seamless:o,selected:s|o,shape:0,size:r,sizes:0,span:r,spellCheck:0,src:0,srcDoc:0,srcLang:0,srcSet:0,start:i,step:0,style:0,summary:0,tabIndex:0,target:0,title:0,type:0,useMap:0,value:0,width:0,wmode:0,wrap:0,about:0,datatype:0,inlist:0,prefix:0,property:0,resource:0,typeof:0,vocab:0,autoCapitalize:0,autoCorrect:0,autoSave:0,color:0,itemProp:0,itemScope:o,itemType:0,itemID:0,itemRef:0,results:0,security:0,unselectable:0},DOMAttributeNames:{acceptCharset:"accept-charset",className:"class",htmlFor:"for",httpEquiv:"http-equiv"},DOMPropertyNames:{}};e.exports=c},function(e,t,n){"use strict";var a=n(72),s=n(83),o={processChildrenUpdates:s.dangerouslyProcessChildrenUpdates,replaceNodeWithMarkup:a.dangerouslyReplaceNodeWithMarkup};e.exports=o},function(e,t,n){"use strict";function a(e,t){return Array.isArray(t)&&(t=t[1]),t?t.nextSibling:e.firstChild}function s(e,t,n){p.insertTreeBefore(e,t,n)}function o(e,t,n){Array.isArray(t)?r(e,t[0],t[1],n):f(e,t,n)}function i(e,t){if(Array.isArray(t)){var n=t[1];t=t[0],l(e,t,n),e.removeChild(n)}e.removeChild(t)}function r(e,t,n,a){for(var s=t;;){var o=s.nextSibling;if(f(e,s,a),s===n)break;s=o}}function l(e,t,n){for(;;){var a=t.nextSibling;if(a===n)break;e.removeChild(a)}}function c(e,t,n){var a=e.parentNode,s=e.nextSibling;s===t?n&&f(a,document.createTextNode(n),s):n?(m(s,n),l(a,s,t)):l(a,e,t)}var p=n(73),h=n(79),d=(n(31),n(59),n(76)),u=n(75),m=n(77),f=d(function(e,t,n){e.insertBefore(t,n)}),g=h.dangerouslyReplaceNodeWithMarkup,y={dangerouslyReplaceNodeWithMarkup:g,replaceDelimitedText:c,processUpdates:function(e,t){for(var n=0;n<t.length;n++){var r=t[n];switch(r.type){case"INSERT_MARKUP":s(e,r.content,a(e,r.afterNode));break;case"MOVE_EXISTING":o(e,r.fromNode,a(e,r.afterNode));break;case"SET_MARKUP":u(e,r.content);break;case"TEXT_CONTENT":m(e,r.content);break;case"REMOVE_NODE":i(e,r.fromNode)}}}};e.exports=y},function(e,t,n){"use strict";function a(e){if(g){var t=e.node,n=e.children;if(n.length)for(var a=0;a<n.length;a++)y(t,n[a],null);else null!=e.html?h(t,e.html):null!=e.text&&u(t,e.text)}}function s(e,t){e.parentNode.replaceChild(t.node,e),a(t)}function o(e,t){g?e.children.push(t):e.node.appendChild(t.node)}function i(e,t){g?e.html=t:h(e.node,t)}function r(e,t){g?e.text=t:u(e.node,t)}function l(){return this.node.nodeName}function c(e){return{node:e,children:[],html:null,text:null,toString:l}}var p=n(74),h=n(75),d=n(76),u=n(77),m=1,f=11,g="undefined"!=typeof document&&"number"==typeof document.documentMode||"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent&&/\bEdge\/\d/.test(navigator.userAgent),y=d(function(e,t,n){t.node.nodeType===f||t.node.nodeType===m&&"object"===t.node.nodeName.toLowerCase()&&(null==t.node.namespaceURI||t.node.namespaceURI===p.html)?(a(t),e.insertBefore(t.node,n)):(e.insertBefore(t.node,n),a(t))});c.insertTreeBefore=y,c.replaceChildWithTree=s,c.queueChild=o,c.queueHTML=i,c.queueText=r,e.exports=c},function(e,t){"use strict";var n={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};e.exports=n},function(e,t,n){"use strict";var a,s=n(45),o=n(74),i=/^[ \r\n\t\f]/,r=/<(!--|link|noscript|meta|script|style)[ \r\n\t\f\/>]/,l=n(76),c=l(function(e,t){if(e.namespaceURI!==o.svg||"innerHTML"in e)e.innerHTML=t;else{a=a||document.createElement("div"),a.innerHTML="<svg>"+t+"</svg>";for(var n=a.firstChild;n.firstChild;)e.appendChild(n.firstChild)}});if(s.canUseDOM){var p=document.createElement("div");p.innerHTML=" ",""===p.innerHTML&&(c=function(e,t){if(e.parentNode&&e.parentNode.replaceChild(e,e),i.test(t)||"<"===t[0]&&r.test(t)){e.innerHTML=String.fromCharCode(65279)+t;var n=e.firstChild;1===n.data.length?e.removeChild(n):n.deleteData(0,1)}else e.innerHTML=t}),p=null}e.exports=c},function(e,t){"use strict";var n=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,a,s){MSApp.execUnsafeLocalFunction(function(){return e(t,n,a,s)})}:e};e.exports=n},function(e,t,n){"use strict";var a=n(45),s=n(78),o=n(75),i=function(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t};a.canUseDOM&&("textContent"in document.documentElement||(i=function(e,t){return 3===e.nodeType?void(e.nodeValue=t):void o(e,s(t))})),e.exports=i},function(e,t){"use strict";function n(e){var t=""+e,n=s.exec(t);if(!n)return t;var a,o="",i=0,r=0;for(i=n.index;i<t.length;i++){switch(t.charCodeAt(i)){case 34:a="&quot;";break;case 38:a="&amp;";break;case 39:a="&#x27;";break;case 60:a="&lt;";break;case 62:a="&gt;";break;default:continue}r!==i&&(o+=t.substring(r,i)),r=i+1,o+=a}return r!==i?o+t.substring(r,i):o}function a(e){return"boolean"==typeof e||"number"==typeof e?""+e:n(e)}var s=/["'&<>]/;e.exports=a},function(e,t,n){"use strict";var a=n(32),s=n(73),o=n(45),i=n(80),r=n(12),l=(n(8),{dangerouslyReplaceNodeWithMarkup:function(e,t){if(o.canUseDOM?void 0:a("56"),t?void 0:a("57"),"HTML"===e.nodeName?a("58"):void 0,"string"==typeof t){var n=i(t,r)[0];e.parentNode.replaceChild(n,e)}else s.replaceChildWithTree(e,t)}});e.exports=l},function(e,t,n){"use strict";function a(e){var t=e.match(p);return t&&t[1].toLowerCase()}function s(e,t){var n=c;c?void 0:l(!1);var s=a(e),o=s&&r(s);if(o){n.innerHTML=o[1]+e+o[2];for(var p=o[0];p--;)n=n.lastChild}else n.innerHTML=e;var h=n.getElementsByTagName("script");h.length&&(t?void 0:l(!1),i(h).forEach(t));for(var d=Array.from(n.childNodes);n.lastChild;)n.removeChild(n.lastChild);return d}var o=n(45),i=n(81),r=n(82),l=n(8),c=o.canUseDOM?document.createElement("div"):null,p=/^\s*<(\w+)/;e.exports=s},function(e,t,n){"use strict";function a(e){var t=e.length;if(Array.isArray(e)||"object"!=typeof e&&"function"!=typeof e?i(!1):void 0,"number"!=typeof t?i(!1):void 0,0===t||t-1 in e?void 0:i(!1),"function"==typeof e.callee?i(!1):void 0,e.hasOwnProperty)try{return Array.prototype.slice.call(e)}catch(e){}for(var n=Array(t),a=0;a<t;a++)n[a]=e[a];return n}function s(e){return!!e&&("object"==typeof e||"function"==typeof e)&&"length"in e&&!("setInterval"in e)&&"number"!=typeof e.nodeType&&(Array.isArray(e)||"callee"in e||"item"in e)}function o(e){return s(e)?Array.isArray(e)?e.slice():a(e):[e]}var i=n(8);e.exports=o},function(e,t,n){"use strict";function a(e){return i?void 0:o(!1),d.hasOwnProperty(e)||(e="*"),r.hasOwnProperty(e)||("*"===e?i.innerHTML="<link />":i.innerHTML="<"+e+"></"+e+">",r[e]=!i.firstChild),r[e]?d[e]:null}var s=n(45),o=n(8),i=s.canUseDOM?document.createElement("div"):null,r={},l=[1,'<select multiple="true">',"</select>"],c=[1,"<table>","</table>"],p=[3,"<table><tbody><tr>","</tr></tbody></table>"],h=[1,'<svg xmlns="http://www.w3.org/2000/svg">',"</svg>"],d={"*":[1,"?<div>","</div>"],area:[1,"<map>","</map>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"],legend:[1,"<fieldset>","</fieldset>"],param:[1,"<object>","</object>"],tr:[2,"<table><tbody>","</tbody></table>"],optgroup:l,option:l,caption:c,colgroup:c,tbody:c,tfoot:c,thead:c,td:p,th:p},u=["circle","clipPath","defs","ellipse","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","text","tspan"];u.forEach(function(e){d[e]=h,r[e]=!0}),e.exports=a},function(e,t,n){"use strict";var a=n(72),s=n(31),o={dangerouslyProcessChildrenUpdates:function(e,t){var n=s.getNodeFromInstance(e);a.processUpdates(n,t)}};e.exports=o},function(e,t,n){"use strict";function a(e){if(e){var t=e._currentElement._owner||null;if(t){var n=t.getName();if(n)return" This DOM node was rendered by `"+n+"`."}}return""}function s(e,t){t&&(G[e._tag]&&(null!=t.children||null!=t.dangerouslySetInnerHTML?f("137",e._tag,e._currentElement._owner?" Check the render method of "+e._currentElement._owner.getName()+".":""):void 0),null!=t.dangerouslySetInnerHTML&&(null!=t.children?f("60"):void 0,"object"==typeof t.dangerouslySetInnerHTML&&W in t.dangerouslySetInnerHTML?void 0:f("61")),null!=t.style&&"object"!=typeof t.style?f("62",a(e)):void 0)}function o(e,t,n,a){if(!(a instanceof V)){var s=e._hostContainerInfo,o=s._node&&s._node.nodeType===U,r=o?s._node:s._ownerDocument;D(t,r),a.getReactMountReady().enqueue(i,{inst:e,registrationName:t,listener:n})}}function i(){var e=this;x.putListener(e.inst,e.registrationName,e.listener)}function r(){var e=this;C.postMountWrapper(e)}function l(){var e=this;E.postMountWrapper(e)}function c(){var e=this;M.postMountWrapper(e)}function p(){var e=this;e._rootNodeID?void 0:f("63");var t=q(e);switch(t?void 0:f("64"),e._tag){case"iframe":case"object":e._wrapperState.listeners=[I.trapBubbledEvent("topLoad","load",t)];break;case"video":case"audio":e._wrapperState.listeners=[];for(var n in H)H.hasOwnProperty(n)&&e._wrapperState.listeners.push(I.trapBubbledEvent(n,H[n],t));break;case"source":e._wrapperState.listeners=[I.trapBubbledEvent("topError","error",t)];break;case"img":e._wrapperState.listeners=[I.trapBubbledEvent("topError","error",t),I.trapBubbledEvent("topLoad","load",t)];break;case"form":e._wrapperState.listeners=[I.trapBubbledEvent("topReset","reset",t),I.trapBubbledEvent("topSubmit","submit",t)];break;case"input":case"select":case"textarea":e._wrapperState.listeners=[I.trapBubbledEvent("topInvalid","invalid",t)]}}function h(){A.postUpdateWrapper(this)}function d(e){K.call(Q,e)||($.test(e)?void 0:f("65",e),Q[e]=!0)}function u(e,t){return e.indexOf("-")>=0||null!=t.is}function m(e){var t=e.type;d(t),this._currentElement=e,this._tag=t.toLowerCase(),this._namespaceURI=null,this._renderedChildren=null,this._previousStyle=null,this._previousStyleCopy=null,this._hostNode=null,this._hostParent=null,this._rootNodeID=0,this._domID=0,this._hostContainerInfo=null,this._wrapperState=null,this._topLevelWrapper=null,this._flags=0}var f=n(32),g=n(4),y=n(85),b=n(87),w=n(73),v=n(74),k=n(33),j=n(95),x=n(39),S=n(40),I=n(97),T=n(34),_=n(31),C=n(100),M=n(103),A=n(104),E=n(105),P=(n(59),n(106)),V=n(125),O=(n(12),n(78)),R=(n(8),n(62),n(114),n(128),n(11),T),B=x.deleteListener,q=_.getNodeFromInstance,D=I.listenTo,L=S.registrationNameModules,N={string:!0,number:!0},F="style",W="__html",J={children:null,dangerouslySetInnerHTML:null,suppressContentEditableWarning:null},U=11,H={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},z={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0},Y={listing:!0,pre:!0,textarea:!0},G=g({menuitem:!0},z),$=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,Q={},K={}.hasOwnProperty,X=1;m.displayName="ReactDOMComponent",m.Mixin={mountComponent:function(e,t,n,a){this._rootNodeID=X++,this._domID=n._idCounter++,this._hostParent=t,this._hostContainerInfo=n;var o=this._currentElement.props;switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":this._wrapperState={listeners:null},e.getReactMountReady().enqueue(p,this);break;case"input":C.mountWrapper(this,o,t),o=C.getHostProps(this,o),e.getReactMountReady().enqueue(p,this);break;case"option":M.mountWrapper(this,o,t),o=M.getHostProps(this,o);break;case"select":A.mountWrapper(this,o,t),o=A.getHostProps(this,o),e.getReactMountReady().enqueue(p,this);break;case"textarea":E.mountWrapper(this,o,t),o=E.getHostProps(this,o),e.getReactMountReady().enqueue(p,this)}s(this,o);var i,h;null!=t?(i=t._namespaceURI,h=t._tag):n._tag&&(i=n._namespaceURI,h=n._tag),(null==i||i===v.svg&&"foreignobject"===h)&&(i=v.html),i===v.html&&("svg"===this._tag?i=v.svg:"math"===this._tag&&(i=v.mathml)),this._namespaceURI=i;var d;if(e.useCreateElement){var u,m=n._ownerDocument;if(i===v.html)if("script"===this._tag){var f=m.createElement("div"),g=this._currentElement.type;f.innerHTML="<"+g+"></"+g+">",u=f.removeChild(f.firstChild)}else u=o.is?m.createElement(this._currentElement.type,o.is):m.createElement(this._currentElement.type);else u=m.createElementNS(i,this._currentElement.type);_.precacheNode(this,u),this._flags|=R.hasCachedChildNodes,this._hostParent||j.setAttributeForRoot(u),this._updateDOMProperties(null,o,e);var b=w(u);this._createInitialChildren(e,o,a,b),d=b}else{var k=this._createOpenTagMarkupAndPutListeners(e,o),x=this._createContentMarkup(e,o,a);d=!x&&z[this._tag]?k+"/>":k+">"+x+"</"+this._currentElement.type+">"}switch(this._tag){case"input":e.getReactMountReady().enqueue(r,this),o.autoFocus&&e.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"textarea":e.getReactMountReady().enqueue(l,this),o.autoFocus&&e.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"select":o.autoFocus&&e.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"button":o.autoFocus&&e.getReactMountReady().enqueue(y.focusDOMComponent,this);break;case"option":e.getReactMountReady().enqueue(c,this)}return d},_createOpenTagMarkupAndPutListeners:function(e,t){var n="<"+this._currentElement.type;for(var a in t)if(t.hasOwnProperty(a)){var s=t[a];if(null!=s)if(L.hasOwnProperty(a))s&&o(this,a,s,e);else{a===F&&(s&&(s=this._previousStyleCopy=g({},t.style)),s=b.createMarkupForStyles(s,this));var i=null;null!=this._tag&&u(this._tag,t)?J.hasOwnProperty(a)||(i=j.createMarkupForCustomAttribute(a,s)):i=j.createMarkupForProperty(a,s),i&&(n+=" "+i)}}return e.renderToStaticMarkup?n:(this._hostParent||(n+=" "+j.createMarkupForRoot()),n+=" "+j.createMarkupForID(this._domID))},_createContentMarkup:function(e,t,n){var a="",s=t.dangerouslySetInnerHTML;if(null!=s)null!=s.__html&&(a=s.__html);else{var o=N[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)a=O(o);else if(null!=i){var r=this.mountChildren(i,e,n);a=r.join("")}}return Y[this._tag]&&"\n"===a.charAt(0)?"\n"+a:a},_createInitialChildren:function(e,t,n,a){var s=t.dangerouslySetInnerHTML;if(null!=s)null!=s.__html&&w.queueHTML(a,s.__html);else{var o=N[typeof t.children]?t.children:null,i=null!=o?null:t.children;if(null!=o)""!==o&&w.queueText(a,o);else if(null!=i)for(var r=this.mountChildren(i,e,n),l=0;l<r.length;l++)w.queueChild(a,r[l])}},receiveComponent:function(e,t,n){var a=this._currentElement;this._currentElement=e,this.updateComponent(t,a,e,n)},updateComponent:function(e,t,n,a){var o=t.props,i=this._currentElement.props;switch(this._tag){case"input":o=C.getHostProps(this,o),i=C.getHostProps(this,i);break;case"option":o=M.getHostProps(this,o),i=M.getHostProps(this,i);break;case"select":o=A.getHostProps(this,o),i=A.getHostProps(this,i);break;case"textarea":o=E.getHostProps(this,o),i=E.getHostProps(this,i)}switch(s(this,i),this._updateDOMProperties(o,i,e),this._updateDOMChildren(o,i,e,a),this._tag){case"input":C.updateWrapper(this);break;case"textarea":E.updateWrapper(this);break;case"select":e.getReactMountReady().enqueue(h,this)}},_updateDOMProperties:function(e,t,n){var a,s,i;for(a in e)if(!t.hasOwnProperty(a)&&e.hasOwnProperty(a)&&null!=e[a])if(a===F){var r=this._previousStyleCopy;for(s in r)r.hasOwnProperty(s)&&(i=i||{},i[s]="");this._previousStyleCopy=null}else L.hasOwnProperty(a)?e[a]&&B(this,a):u(this._tag,e)?J.hasOwnProperty(a)||j.deleteValueForAttribute(q(this),a):(k.properties[a]||k.isCustomAttribute(a))&&j.deleteValueForProperty(q(this),a);for(a in t){var l=t[a],c=a===F?this._previousStyleCopy:null!=e?e[a]:void 0;if(t.hasOwnProperty(a)&&l!==c&&(null!=l||null!=c))if(a===F)if(l?l=this._previousStyleCopy=g({},l):this._previousStyleCopy=null,c){for(s in c)!c.hasOwnProperty(s)||l&&l.hasOwnProperty(s)||(i=i||{},i[s]="");for(s in l)l.hasOwnProperty(s)&&c[s]!==l[s]&&(i=i||{},i[s]=l[s])}else i=l;else if(L.hasOwnProperty(a))l?o(this,a,l,n):c&&B(this,a);else if(u(this._tag,t))J.hasOwnProperty(a)||j.setValueForAttribute(q(this),a,l);else if(k.properties[a]||k.isCustomAttribute(a)){var p=q(this);null!=l?j.setValueForProperty(p,a,l):j.deleteValueForProperty(p,a)}}i&&b.setValueForStyles(q(this),i,this)},_updateDOMChildren:function(e,t,n,a){var s=N[typeof e.children]?e.children:null,o=N[typeof t.children]?t.children:null,i=e.dangerouslySetInnerHTML&&e.dangerouslySetInnerHTML.__html,r=t.dangerouslySetInnerHTML&&t.dangerouslySetInnerHTML.__html,l=null!=s?null:e.children,c=null!=o?null:t.children,p=null!=s||null!=i,h=null!=o||null!=r;null!=l&&null==c?this.updateChildren(null,n,a):p&&!h&&this.updateTextContent(""),null!=o?s!==o&&this.updateTextContent(""+o):null!=r?i!==r&&this.updateMarkup(""+r):null!=c&&this.updateChildren(c,n,a)},getHostNode:function(){return q(this)},unmountComponent:function(e){switch(this._tag){case"audio":case"form":case"iframe":case"img":case"link":case"object":case"source":case"video":var t=this._wrapperState.listeners;if(t)for(var n=0;n<t.length;n++)t[n].remove();break;case"html":case"head":case"body":f("66",this._tag)}this.unmountChildren(e),_.uncacheNode(this),x.deleteAllListeners(this),this._rootNodeID=0,this._domID=0,this._wrapperState=null},getPublicInstance:function(){return q(this)}},g(m.prototype,m.Mixin,P.Mixin),e.exports=m},function(e,t,n){"use strict";var a=n(31),s=n(86),o={focusDOMComponent:function(){s(a.getNodeFromInstance(this))}};e.exports=o},function(e,t){"use strict";function n(e){try{e.focus()}catch(e){}}e.exports=n},function(e,t,n){"use strict";var a=n(88),s=n(45),o=(n(59),n(89),n(91)),i=n(92),r=n(94),l=(n(11),r(function(e){return i(e)})),c=!1,p="cssFloat";if(s.canUseDOM){var h=document.createElement("div").style;try{h.font=""}catch(e){c=!0}void 0===document.documentElement.style.cssFloat&&(p="styleFloat")}var d={createMarkupForStyles:function(e,t){var n="";for(var a in e)if(e.hasOwnProperty(a)){var s=e[a];null!=s&&(n+=l(a)+":",n+=o(a,s,t)+";")}return n||null},setValueForStyles:function(e,t,n){var s=e.style;for(var i in t)if(t.hasOwnProperty(i)){var r=o(i,t[i],n);if("float"!==i&&"cssFloat"!==i||(i=p),r)s[i]=r;else{var l=c&&a.shorthandPropertyExpansions[i];if(l)for(var h in l)s[h]="";else s[i]=""}}}};e.exports=d},function(e,t){"use strict";function n(e,t){return e+t.charAt(0).toUpperCase()+t.substring(1)}var a={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridColumn:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},s=["Webkit","ms","Moz","O"];Object.keys(a).forEach(function(e){s.forEach(function(t){a[n(t,e)]=a[e]})});var o={background:{backgroundAttachment:!0,backgroundColor:!0,backgroundImage:!0,backgroundPositionX:!0,backgroundPositionY:!0,backgroundRepeat:!0},backgroundPosition:{backgroundPositionX:!0,backgroundPositionY:!0},border:{borderWidth:!0,borderStyle:!0,borderColor:!0},borderBottom:{borderBottomWidth:!0,borderBottomStyle:!0,borderBottomColor:!0},borderLeft:{borderLeftWidth:!0,borderLeftStyle:!0,borderLeftColor:!0},borderRight:{borderRightWidth:!0,borderRightStyle:!0,borderRightColor:!0},borderTop:{borderTopWidth:!0,borderTopStyle:!0,borderTopColor:!0},font:{fontStyle:!0,fontVariant:!0,fontWeight:!0,fontSize:!0,lineHeight:!0,fontFamily:!0},outline:{outlineWidth:!0,outlineStyle:!0,outlineColor:!0}},i={isUnitlessNumber:a,shorthandPropertyExpansions:o};e.exports=i},function(e,t,n){"use strict";function a(e){return s(e.replace(o,"ms-"))}var s=n(90),o=/^-ms-/;e.exports=a},function(e,t){"use strict";function n(e){return e.replace(a,function(e,t){return t.toUpperCase()})}var a=/-(.)/g;e.exports=n},function(e,t,n){"use strict";function a(e,t,n){var a=null==t||"boolean"==typeof t||""===t;if(a)return"";var s=isNaN(t);if(s||0===t||o.hasOwnProperty(e)&&o[e])return""+t;if("string"==typeof t){t=t.trim()}return t+"px"}var s=n(88),o=(n(11),s.isUnitlessNumber);e.exports=a},function(e,t,n){"use strict";function a(e){return s(e).replace(o,"-ms-")}var s=n(93),o=/^ms-/;e.exports=a},function(e,t){"use strict";function n(e){return e.replace(a,"-$1").toLowerCase()}var a=/([A-Z])/g;e.exports=n},function(e,t){"use strict";function n(e){var t={};return function(n){return t.hasOwnProperty(n)||(t[n]=e.call(this,n)),t[n]}}e.exports=n},function(e,t,n){"use strict";function a(e){return!!c.hasOwnProperty(e)||!l.hasOwnProperty(e)&&(r.test(e)?(c[e]=!0,!0):(l[e]=!0,!1))}function s(e,t){return null==t||e.hasBooleanValue&&!t||e.hasNumericValue&&isNaN(t)||e.hasPositiveNumericValue&&t<1||e.hasOverloadedBooleanValue&&t===!1}var o=n(33),i=(n(31),n(59),n(96)),r=(n(11),new RegExp("^["+o.ATTRIBUTE_NAME_START_CHAR+"]["+o.ATTRIBUTE_NAME_CHAR+"]*$")),l={},c={},p={createMarkupForID:function(e){return o.ID_ATTRIBUTE_NAME+"="+i(e)},setAttributeForID:function(e,t){e.setAttribute(o.ID_ATTRIBUTE_NAME,t)},createMarkupForRoot:function(){return o.ROOT_ATTRIBUTE_NAME+'=""'},setAttributeForRoot:function(e){e.setAttribute(o.ROOT_ATTRIBUTE_NAME,"")},createMarkupForProperty:function(e,t){var n=o.properties.hasOwnProperty(e)?o.properties[e]:null;if(n){if(s(n,t))return"";var a=n.attributeName;return n.hasBooleanValue||n.hasOverloadedBooleanValue&&t===!0?a+'=""':a+"="+i(t)}return o.isCustomAttribute(e)?null==t?"":e+"="+i(t):null},createMarkupForCustomAttribute:function(e,t){return a(e)&&null!=t?e+"="+i(t):""},setValueForProperty:function(e,t,n){var a=o.properties.hasOwnProperty(t)?o.properties[t]:null;if(a){var i=a.mutationMethod;if(i)i(e,n);else{if(s(a,n))return void this.deleteValueForProperty(e,t);if(a.mustUseProperty)e[a.propertyName]=n;else{var r=a.attributeName,l=a.attributeNamespace;l?e.setAttributeNS(l,r,""+n):a.hasBooleanValue||a.hasOverloadedBooleanValue&&n===!0?e.setAttribute(r,""):e.setAttribute(r,""+n)}}}else if(o.isCustomAttribute(t))return void p.setValueForAttribute(e,t,n)},setValueForAttribute:function(e,t,n){if(a(t)){null==n?e.removeAttribute(t):e.setAttribute(t,""+n)}},deleteValueForAttribute:function(e,t){e.removeAttribute(t)},deleteValueForProperty:function(e,t){var n=o.properties.hasOwnProperty(t)?o.properties[t]:null;if(n){var a=n.mutationMethod;if(a)a(e,void 0);else if(n.mustUseProperty){var s=n.propertyName;n.hasBooleanValue?e[s]=!1:e[s]=""}else e.removeAttribute(n.attributeName)}else o.isCustomAttribute(t)&&e.removeAttribute(t)}};e.exports=p},function(e,t,n){"use strict";function a(e){return'"'+s(e)+'"'}var s=n(78);e.exports=a},function(e,t,n){"use strict";function a(e){return Object.prototype.hasOwnProperty.call(e,f)||(e[f]=u++,h[e[f]]={}),h[e[f]]}var s,o=n(4),i=n(40),r=n(98),l=n(68),c=n(99),p=n(62),h={},d=!1,u=0,m={topAbort:"abort",topAnimationEnd:c("animationend")||"animationend",topAnimationIteration:c("animationiteration")||"animationiteration",topAnimationStart:c("animationstart")||"animationstart",topBlur:"blur",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topChange:"change",topClick:"click",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topScroll:"scroll",topSeeked:"seeked",topSeeking:"seeking",topSelectionChange:"selectionchange",topStalled:"stalled",topSuspend:"suspend",topTextInput:"textInput",topTimeUpdate:"timeupdate",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:c("transitionend")||"transitionend",topVolumeChange:"volumechange",topWaiting:"waiting",topWheel:"wheel"},f="_reactListenersID"+String(Math.random()).slice(2),g=o({},r,{ReactEventListener:null,injection:{injectReactEventListener:function(e){e.setHandleTopLevel(g.handleTopLevel),g.ReactEventListener=e}},setEnabled:function(e){g.ReactEventListener&&g.ReactEventListener.setEnabled(e)},isEnabled:function(){return!(!g.ReactEventListener||!g.ReactEventListener.isEnabled())},listenTo:function(e,t){for(var n=t,s=a(n),o=i.registrationNameDependencies[e],r=0;r<o.length;r++){var l=o[r];s.hasOwnProperty(l)&&s[l]||("topWheel"===l?p("wheel")?g.ReactEventListener.trapBubbledEvent("topWheel","wheel",n):p("mousewheel")?g.ReactEventListener.trapBubbledEvent("topWheel","mousewheel",n):g.ReactEventListener.trapBubbledEvent("topWheel","DOMMouseScroll",n):"topScroll"===l?p("scroll",!0)?g.ReactEventListener.trapCapturedEvent("topScroll","scroll",n):g.ReactEventListener.trapBubbledEvent("topScroll","scroll",g.ReactEventListener.WINDOW_HANDLE):"topFocus"===l||"topBlur"===l?(p("focus",!0)?(g.ReactEventListener.trapCapturedEvent("topFocus","focus",n),g.ReactEventListener.trapCapturedEvent("topBlur","blur",n)):p("focusin")&&(g.ReactEventListener.trapBubbledEvent("topFocus","focusin",n),g.ReactEventListener.trapBubbledEvent("topBlur","focusout",n)),s.topBlur=!0,s.topFocus=!0):m.hasOwnProperty(l)&&g.ReactEventListener.trapBubbledEvent(l,m[l],n),s[l]=!0)}},trapBubbledEvent:function(e,t,n){return g.ReactEventListener.trapBubbledEvent(e,t,n)},trapCapturedEvent:function(e,t,n){return g.ReactEventListener.trapCapturedEvent(e,t,n)},supportsEventPageXY:function(){if(!document.createEvent)return!1;var e=document.createEvent("MouseEvent");return null!=e&&"pageX"in e},ensureScrollValueMonitoring:function(){if(void 0===s&&(s=g.supportsEventPageXY()),!s&&!d){var e=l.refreshScrollValues;g.ReactEventListener.monitorScrollValue(e),d=!0}}});e.exports=g},function(e,t,n){"use strict";function a(e){s.enqueueEvents(e),s.processEventQueue(!1)}var s=n(39),o={handleTopLevel:function(e,t,n,o){var i=s.extractEvents(e,t,n,o);a(i)}};e.exports=o},function(e,t,n){"use strict";function a(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}function s(e){if(r[e])return r[e];if(!i[e])return e;var t=i[e];for(var n in t)if(t.hasOwnProperty(n)&&n in l)return r[e]=t[n];return""}var o=n(45),i={animationend:a("Animation","AnimationEnd"),animationiteration:a("Animation","AnimationIteration"),animationstart:a("Animation","AnimationStart"),transitionend:a("Transition","TransitionEnd")},r={},l={};o.canUseDOM&&(l=document.createElement("div").style,"AnimationEvent"in window||(delete i.animationend.animation,delete i.animationiteration.animation,delete i.animationstart.animation),"TransitionEvent"in window||delete i.transitionend.transition),e.exports=s},function(e,t,n){"use strict";function a(){this._rootNodeID&&h.updateWrapper(this);
}function s(e){var t=this._currentElement.props,n=l.executeOnChange(t,e);p.asap(a,this);var s=t.name;if("radio"===t.type&&null!=s){for(var i=c.getNodeFromInstance(this),r=i;r.parentNode;)r=r.parentNode;for(var h=r.querySelectorAll("input[name="+JSON.stringify(""+s)+'][type="radio"]'),d=0;d<h.length;d++){var u=h[d];if(u!==i&&u.form===i.form){var m=c.getInstanceFromNode(u);m?void 0:o("90"),p.asap(a,m)}}}return n}var o=n(32),i=n(4),r=n(95),l=n(101),c=n(31),p=n(53),h=(n(8),n(11),{getHostProps:function(e,t){var n=l.getValue(t),a=l.getChecked(t),s=i({type:void 0,step:void 0,min:void 0,max:void 0},t,{defaultChecked:void 0,defaultValue:void 0,value:null!=n?n:e._wrapperState.initialValue,checked:null!=a?a:e._wrapperState.initialChecked,onChange:e._wrapperState.onChange});return s},mountWrapper:function(e,t){var n=t.defaultValue;e._wrapperState={initialChecked:null!=t.checked?t.checked:t.defaultChecked,initialValue:null!=t.value?t.value:n,listeners:null,onChange:s.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=t.checked;null!=n&&r.setValueForProperty(c.getNodeFromInstance(e),"checked",n||!1);var a=c.getNodeFromInstance(e),s=l.getValue(t);if(null!=s){var o=""+s;o!==a.value&&(a.value=o)}else null==t.value&&null!=t.defaultValue&&a.defaultValue!==""+t.defaultValue&&(a.defaultValue=""+t.defaultValue),null==t.checked&&null!=t.defaultChecked&&(a.defaultChecked=!!t.defaultChecked)},postMountWrapper:function(e){var t=e._currentElement.props,n=c.getNodeFromInstance(e);switch(t.type){case"submit":case"reset":break;case"color":case"date":case"datetime":case"datetime-local":case"month":case"time":case"week":n.value="",n.value=n.defaultValue;break;default:n.value=n.value}var a=n.name;""!==a&&(n.name=""),n.defaultChecked=!n.defaultChecked,n.defaultChecked=!n.defaultChecked,""!==a&&(n.name=a)}});e.exports=h},function(e,t,n){"use strict";function a(e){null!=e.checkedLink&&null!=e.valueLink?r("87"):void 0}function s(e){a(e),null!=e.value||null!=e.onChange?r("88"):void 0}function o(e){a(e),null!=e.checked||null!=e.onChange?r("89"):void 0}function i(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}var r=n(32),l=n(3),c=n(102),p=(n(8),n(11),{button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0}),h={value:function(e,t,n){return!e[t]||p[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,t,n){return!e[t]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:l.PropTypes.func},d={},u={checkPropTypes:function(e,t,n){for(var a in h){if(h.hasOwnProperty(a))var s=h[a](t,a,e,"prop",null,c);if(s instanceof Error&&!(s.message in d)){d[s.message]=!0;i(n)}}},getValue:function(e){return e.valueLink?(s(e),e.valueLink.value):e.value},getChecked:function(e){return e.checkedLink?(o(e),e.checkedLink.value):e.checked},executeOnChange:function(e,t){return e.valueLink?(s(e),e.valueLink.requestChange(t.target.value)):e.checkedLink?(o(e),e.checkedLink.requestChange(t.target.checked)):e.onChange?e.onChange.call(void 0,t):void 0}};e.exports=u},26,function(e,t,n){"use strict";function a(e){var t="";return o.Children.forEach(e,function(e){null!=e&&("string"==typeof e||"number"==typeof e?t+=e:l||(l=!0))}),t}var s=n(4),o=n(3),i=n(31),r=n(104),l=(n(11),!1),c={mountWrapper:function(e,t,n){var s=null;if(null!=n){var o=n;"optgroup"===o._tag&&(o=o._hostParent),null!=o&&"select"===o._tag&&(s=r.getSelectValueContext(o))}var i=null;if(null!=s){var l;if(l=null!=t.value?t.value+"":a(t.children),i=!1,Array.isArray(s)){for(var c=0;c<s.length;c++)if(""+s[c]===l){i=!0;break}}else i=""+s===l}e._wrapperState={selected:i}},postMountWrapper:function(e){var t=e._currentElement.props;if(null!=t.value){var n=i.getNodeFromInstance(e);n.setAttribute("value",t.value)}},getHostProps:function(e,t){var n=s({selected:void 0,children:void 0},t);null!=e._wrapperState.selected&&(n.selected=e._wrapperState.selected);var o=a(t.children);return o&&(n.children=o),n}};e.exports=c},function(e,t,n){"use strict";function a(){if(this._rootNodeID&&this._wrapperState.pendingUpdate){this._wrapperState.pendingUpdate=!1;var e=this._currentElement.props,t=r.getValue(e);null!=t&&s(this,Boolean(e.multiple),t)}}function s(e,t,n){var a,s,o=l.getNodeFromInstance(e).options;if(t){for(a={},s=0;s<n.length;s++)a[""+n[s]]=!0;for(s=0;s<o.length;s++){var i=a.hasOwnProperty(o[s].value);o[s].selected!==i&&(o[s].selected=i)}}else{for(a=""+n,s=0;s<o.length;s++)if(o[s].value===a)return void(o[s].selected=!0);o.length&&(o[0].selected=!0)}}function o(e){var t=this._currentElement.props,n=r.executeOnChange(t,e);return this._rootNodeID&&(this._wrapperState.pendingUpdate=!0),c.asap(a,this),n}var i=n(4),r=n(101),l=n(31),c=n(53),p=(n(11),!1),h={getHostProps:function(e,t){return i({},t,{onChange:e._wrapperState.onChange,value:void 0})},mountWrapper:function(e,t){var n=r.getValue(t);e._wrapperState={pendingUpdate:!1,initialValue:null!=n?n:t.defaultValue,listeners:null,onChange:o.bind(e),wasMultiple:Boolean(t.multiple)},void 0===t.value||void 0===t.defaultValue||p||(p=!0)},getSelectValueContext:function(e){return e._wrapperState.initialValue},postUpdateWrapper:function(e){var t=e._currentElement.props;e._wrapperState.initialValue=void 0;var n=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=Boolean(t.multiple);var a=r.getValue(t);null!=a?(e._wrapperState.pendingUpdate=!1,s(e,Boolean(t.multiple),a)):n!==Boolean(t.multiple)&&(null!=t.defaultValue?s(e,Boolean(t.multiple),t.defaultValue):s(e,Boolean(t.multiple),t.multiple?[]:""))}};e.exports=h},function(e,t,n){"use strict";function a(){this._rootNodeID&&p.updateWrapper(this)}function s(e){var t=this._currentElement.props,n=r.executeOnChange(t,e);return c.asap(a,this),n}var o=n(32),i=n(4),r=n(101),l=n(31),c=n(53),p=(n(8),n(11),{getHostProps:function(e,t){null!=t.dangerouslySetInnerHTML?o("91"):void 0;var n=i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue,onChange:e._wrapperState.onChange});return n},mountWrapper:function(e,t){var n=r.getValue(t),a=n;if(null==n){var i=t.defaultValue,l=t.children;null!=l&&(null!=i?o("92"):void 0,Array.isArray(l)&&(l.length<=1?void 0:o("93"),l=l[0]),i=""+l),null==i&&(i=""),a=i}e._wrapperState={initialValue:""+a,listeners:null,onChange:s.bind(e)}},updateWrapper:function(e){var t=e._currentElement.props,n=l.getNodeFromInstance(e),a=r.getValue(t);if(null!=a){var s=""+a;s!==n.value&&(n.value=s),null==t.defaultValue&&(n.defaultValue=s)}null!=t.defaultValue&&(n.defaultValue=t.defaultValue)},postMountWrapper:function(e){var t=l.getNodeFromInstance(e),n=t.textContent;n===e._wrapperState.initialValue&&(t.value=n)}});e.exports=p},function(e,t,n){"use strict";function a(e,t,n){return{type:"INSERT_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:n,afterNode:t}}function s(e,t,n){return{type:"MOVE_EXISTING",content:null,fromIndex:e._mountIndex,fromNode:d.getHostNode(e),toIndex:n,afterNode:t}}function o(e,t){return{type:"REMOVE_NODE",content:null,fromIndex:e._mountIndex,fromNode:t,toIndex:null,afterNode:null}}function i(e){return{type:"SET_MARKUP",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function r(e){return{type:"TEXT_CONTENT",content:e,fromIndex:null,fromNode:null,toIndex:null,afterNode:null}}function l(e,t){return t&&(e=e||[],e.push(t)),e}function c(e,t){h.processChildrenUpdates(e,t)}var p=n(32),h=n(107),d=(n(108),n(59),n(10),n(56)),u=n(109),m=(n(12),n(124)),f=(n(8),{Mixin:{_reconcilerInstantiateChildren:function(e,t,n){return u.instantiateChildren(e,t,n)},_reconcilerUpdateChildren:function(e,t,n,a,s,o){var i,r=0;return i=m(t,r),u.updateChildren(e,i,n,a,s,this,this._hostContainerInfo,o,r),i},mountChildren:function(e,t,n){var a=this._reconcilerInstantiateChildren(e,t,n);this._renderedChildren=a;var s=[],o=0;for(var i in a)if(a.hasOwnProperty(i)){var r=a[i],l=0,c=d.mountComponent(r,t,this,this._hostContainerInfo,n,l);r._mountIndex=o++,s.push(c)}return s},updateTextContent:function(e){var t=this._renderedChildren;u.unmountChildren(t,!1);for(var n in t)t.hasOwnProperty(n)&&p("118");var a=[r(e)];c(this,a)},updateMarkup:function(e){var t=this._renderedChildren;u.unmountChildren(t,!1);for(var n in t)t.hasOwnProperty(n)&&p("118");var a=[i(e)];c(this,a)},updateChildren:function(e,t,n){this._updateChildren(e,t,n)},_updateChildren:function(e,t,n){var a=this._renderedChildren,s={},o=[],i=this._reconcilerUpdateChildren(a,e,o,s,t,n);if(i||a){var r,p=null,h=0,u=0,m=0,f=null;for(r in i)if(i.hasOwnProperty(r)){var g=a&&a[r],y=i[r];g===y?(p=l(p,this.moveChild(g,f,h,u)),u=Math.max(g._mountIndex,u),g._mountIndex=h):(g&&(u=Math.max(g._mountIndex,u)),p=l(p,this._mountChildAtIndex(y,o[m],f,h,t,n)),m++),h++,f=d.getHostNode(y)}for(r in s)s.hasOwnProperty(r)&&(p=l(p,this._unmountChild(a[r],s[r])));p&&c(this,p),this._renderedChildren=i}},unmountChildren:function(e){var t=this._renderedChildren;u.unmountChildren(t,e),this._renderedChildren=null},moveChild:function(e,t,n,a){if(e._mountIndex<a)return s(e,t,n)},createChild:function(e,t,n){return a(n,t,e._mountIndex)},removeChild:function(e,t){return o(e,t)},_mountChildAtIndex:function(e,t,n,a,s,o){return e._mountIndex=a,this.createChild(e,n,t)},_unmountChild:function(e,t){var n=this.removeChild(e,t);return e._mountIndex=null,n}}});e.exports=f},function(e,t,n){"use strict";var a=n(32),s=(n(8),!1),o={replaceNodeWithMarkup:null,processChildrenUpdates:null,injection:{injectEnvironment:function(e){s?a("104"):void 0,o.replaceNodeWithMarkup=e.replaceNodeWithMarkup,o.processChildrenUpdates=e.processChildrenUpdates,s=!0}}};e.exports=o},function(e,t){"use strict";var n={remove:function(e){e._reactInternalInstance=void 0},get:function(e){return e._reactInternalInstance},has:function(e){return void 0!==e._reactInternalInstance},set:function(e,t){e._reactInternalInstance=t}};e.exports=n},function(e,t,n){(function(t){"use strict";function a(e,t,n,a){var s=void 0===e[n];null!=t&&s&&(e[n]=o(t,!0))}var s=n(56),o=n(111),i=(n(119),n(115)),r=n(120),l=(n(11),{instantiateChildren:function(e,t,n,s){if(null==e)return null;var o={};return r(e,a,o),o},updateChildren:function(e,t,n,a,r,l,c,p,h){if(t||e){var d,u;for(d in t)if(t.hasOwnProperty(d)){u=e&&e[d];var m=u&&u._currentElement,f=t[d];if(null!=u&&i(m,f))s.receiveComponent(u,f,r,p),t[d]=u;else{u&&(a[d]=s.getHostNode(u),s.unmountComponent(u,!1));var g=o(f,!0);t[d]=g;var y=s.mountComponent(g,r,l,c,p,h);n.push(y)}}for(d in e)!e.hasOwnProperty(d)||t&&t.hasOwnProperty(d)||(u=e[d],a[d]=s.getHostNode(u),s.unmountComponent(u,!1))}},unmountChildren:function(e,t){for(var n in e)if(e.hasOwnProperty(n)){var a=e[n];s.unmountComponent(a,t)}}});e.exports=l}).call(t,n(110))},function(e,t){function n(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(p===setTimeout)return setTimeout(e,0);if((p===n||!p)&&setTimeout)return p=setTimeout,setTimeout(e,0);try{return p(e,0)}catch(t){try{return p.call(null,e,0)}catch(t){return p.call(this,e,0)}}}function o(e){if(h===clearTimeout)return clearTimeout(e);if((h===a||!h)&&clearTimeout)return h=clearTimeout,clearTimeout(e);try{return h(e)}catch(t){try{return h.call(null,e)}catch(t){return h.call(this,e)}}}function i(){f&&u&&(f=!1,u.length?m=u.concat(m):g=-1,m.length&&r())}function r(){if(!f){var e=s(i);f=!0;for(var t=m.length;t;){for(u=m,m=[];++g<t;)u&&u[g].run();g=-1,t=m.length}u=null,f=!1,o(e)}}function l(e,t){this.fun=e,this.array=t}function c(){}var p,h,d=e.exports={};!function(){try{p="function"==typeof setTimeout?setTimeout:n}catch(e){p=n}try{h="function"==typeof clearTimeout?clearTimeout:a}catch(e){h=a}}();var u,m=[],f=!1,g=-1;d.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];m.push(new l(e,t)),1!==m.length||f||s(r)},l.prototype.run=function(){this.fun.apply(null,this.array)},d.title="browser",d.browser=!0,d.env={},d.argv=[],d.version="",d.versions={},d.on=c,d.addListener=c,d.once=c,d.off=c,d.removeListener=c,d.removeAllListeners=c,d.emit=c,d.binding=function(e){throw new Error("process.binding is not supported")},d.cwd=function(){return"/"},d.chdir=function(e){throw new Error("process.chdir is not supported")},d.umask=function(){return 0}},function(e,t,n){"use strict";function a(e){if(e){var t=e.getName();if(t)return" Check the render method of `"+t+"`."}return""}function s(e){return"function"==typeof e&&"undefined"!=typeof e.prototype&&"function"==typeof e.prototype.mountComponent&&"function"==typeof e.prototype.receiveComponent}function o(e,t){var n;if(null===e||e===!1)n=c.create(o);else if("object"==typeof e){var r=e,l=r.type;if("function"!=typeof l&&"string"!=typeof l){var d="";d+=a(r._owner),i("130",null==l?l:typeof l,d)}"string"==typeof r.type?n=p.createInternalComponent(r):s(r.type)?(n=new r.type(r),n.getHostNode||(n.getHostNode=n.getNativeNode)):n=new h(r)}else"string"==typeof e||"number"==typeof e?n=p.createInstanceForText(e):i("131",typeof e);return n._mountIndex=0,n._mountImage=null,n}var i=n(32),r=n(4),l=n(112),c=n(116),p=n(117),h=(n(118),n(8),n(11),function(e){this.construct(e)});r(h.prototype,l,{_instantiateReactComponent:o}),e.exports=o},function(e,t,n){"use strict";function a(e){}function s(e,t){}function o(e){return!(!e.prototype||!e.prototype.isReactComponent)}function i(e){return!(!e.prototype||!e.prototype.isPureReactComponent)}var r=n(32),l=n(4),c=n(3),p=n(107),h=n(10),d=n(42),u=n(108),m=(n(59),n(113)),f=n(56),g=n(20),y=(n(8),n(114)),b=n(115),w=(n(11),{ImpureClass:0,PureClass:1,StatelessFunctional:2});a.prototype.render=function(){var e=u.get(this)._currentElement.type,t=e(this.props,this.context,this.updater);return s(e,t),t};var v=1,k={construct:function(e){this._currentElement=e,this._rootNodeID=0,this._compositeType=null,this._instance=null,this._hostParent=null,this._hostContainerInfo=null,this._updateBatchNumber=null,this._pendingElement=null,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._renderedNodeType=null,this._renderedComponent=null,this._context=null,this._mountOrder=0,this._topLevelWrapper=null,this._pendingCallbacks=null,this._calledComponentWillUnmount=!1},mountComponent:function(e,t,n,l){this._context=l,this._mountOrder=v++,this._hostParent=t,this._hostContainerInfo=n;var p,h=this._currentElement.props,d=this._processContext(l),m=this._currentElement.type,f=e.getUpdateQueue(),y=o(m),b=this._constructComponent(y,h,d,f);y||null!=b&&null!=b.render?i(m)?this._compositeType=w.PureClass:this._compositeType=w.ImpureClass:(p=b,s(m,p),null===b||b===!1||c.isValidElement(b)?void 0:r("105",m.displayName||m.name||"Component"),b=new a(m),this._compositeType=w.StatelessFunctional);b.props=h,b.context=d,b.refs=g,b.updater=f,this._instance=b,u.set(b,this);var k=b.state;void 0===k&&(b.state=k=null),"object"!=typeof k||Array.isArray(k)?r("106",this.getName()||"ReactCompositeComponent"):void 0,this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1;var j;return j=b.unstable_handleError?this.performInitialMountWithErrorHandling(p,t,n,e,l):this.performInitialMount(p,t,n,e,l),b.componentDidMount&&e.getReactMountReady().enqueue(b.componentDidMount,b),j},_constructComponent:function(e,t,n,a){return this._constructComponentWithoutOwner(e,t,n,a)},_constructComponentWithoutOwner:function(e,t,n,a){var s=this._currentElement.type;return e?new s(t,n,a):s(t,n,a)},performInitialMountWithErrorHandling:function(e,t,n,a,s){var o,i=a.checkpoint();try{o=this.performInitialMount(e,t,n,a,s)}catch(r){a.rollback(i),this._instance.unstable_handleError(r),this._pendingStateQueue&&(this._instance.state=this._processPendingState(this._instance.props,this._instance.context)),i=a.checkpoint(),this._renderedComponent.unmountComponent(!0),a.rollback(i),o=this.performInitialMount(e,t,n,a,s)}return o},performInitialMount:function(e,t,n,a,s){var o=this._instance,i=0;o.componentWillMount&&(o.componentWillMount(),this._pendingStateQueue&&(o.state=this._processPendingState(o.props,o.context))),void 0===e&&(e=this._renderValidatedComponent());var r=m.getType(e);this._renderedNodeType=r;var l=this._instantiateReactComponent(e,r!==m.EMPTY);this._renderedComponent=l;var c=f.mountComponent(l,a,t,n,this._processChildContext(s),i);return c},getHostNode:function(){return f.getHostNode(this._renderedComponent)},unmountComponent:function(e){if(this._renderedComponent){var t=this._instance;if(t.componentWillUnmount&&!t._calledComponentWillUnmount)if(t._calledComponentWillUnmount=!0,e){var n=this.getName()+".componentWillUnmount()";d.invokeGuardedCallback(n,t.componentWillUnmount.bind(t))}else t.componentWillUnmount();this._renderedComponent&&(f.unmountComponent(this._renderedComponent,e),this._renderedNodeType=null,this._renderedComponent=null,this._instance=null),this._pendingStateQueue=null,this._pendingReplaceState=!1,this._pendingForceUpdate=!1,this._pendingCallbacks=null,this._pendingElement=null,this._context=null,this._rootNodeID=0,this._topLevelWrapper=null,u.remove(t)}},_maskContext:function(e){var t=this._currentElement.type,n=t.contextTypes;if(!n)return g;var a={};for(var s in n)a[s]=e[s];return a},_processContext:function(e){var t=this._maskContext(e);return t},_processChildContext:function(e){var t,n=this._currentElement.type,a=this._instance;if(a.getChildContext&&(t=a.getChildContext()),t){"object"!=typeof n.childContextTypes?r("107",this.getName()||"ReactCompositeComponent"):void 0;for(var s in t)s in n.childContextTypes?void 0:r("108",this.getName()||"ReactCompositeComponent",s);return l({},e,t)}return e},_checkContextTypes:function(e,t,n){},receiveComponent:function(e,t,n){var a=this._currentElement,s=this._context;this._pendingElement=null,this.updateComponent(t,a,e,s,n)},performUpdateIfNecessary:function(e){null!=this._pendingElement?f.receiveComponent(this,this._pendingElement,e,this._context):null!==this._pendingStateQueue||this._pendingForceUpdate?this.updateComponent(e,this._currentElement,this._currentElement,this._context,this._context):this._updateBatchNumber=null},updateComponent:function(e,t,n,a,s){var o=this._instance;null==o?r("136",this.getName()||"ReactCompositeComponent"):void 0;var i,l=!1;this._context===s?i=o.context:(i=this._processContext(s),l=!0);var c=t.props,p=n.props;t!==n&&(l=!0),l&&o.componentWillReceiveProps&&o.componentWillReceiveProps(p,i);var h=this._processPendingState(p,i),d=!0;this._pendingForceUpdate||(o.shouldComponentUpdate?d=o.shouldComponentUpdate(p,h,i):this._compositeType===w.PureClass&&(d=!y(c,p)||!y(o.state,h))),this._updateBatchNumber=null,d?(this._pendingForceUpdate=!1,this._performComponentUpdate(n,p,h,i,e,s)):(this._currentElement=n,this._context=s,o.props=p,o.state=h,o.context=i)},_processPendingState:function(e,t){var n=this._instance,a=this._pendingStateQueue,s=this._pendingReplaceState;if(this._pendingReplaceState=!1,this._pendingStateQueue=null,!a)return n.state;if(s&&1===a.length)return a[0];for(var o=l({},s?a[0]:n.state),i=s?1:0;i<a.length;i++){var r=a[i];l(o,"function"==typeof r?r.call(n,o,e,t):r)}return o},_performComponentUpdate:function(e,t,n,a,s,o){var i,r,l,c=this._instance,p=Boolean(c.componentDidUpdate);p&&(i=c.props,r=c.state,l=c.context),c.componentWillUpdate&&c.componentWillUpdate(t,n,a),this._currentElement=e,this._context=o,c.props=t,c.state=n,c.context=a,this._updateRenderedComponent(s,o),p&&s.getReactMountReady().enqueue(c.componentDidUpdate.bind(c,i,r,l),c)},_updateRenderedComponent:function(e,t){var n=this._renderedComponent,a=n._currentElement,s=this._renderValidatedComponent(),o=0;if(b(a,s))f.receiveComponent(n,s,e,this._processChildContext(t));else{var i=f.getHostNode(n);f.unmountComponent(n,!1);var r=m.getType(s);this._renderedNodeType=r;var l=this._instantiateReactComponent(s,r!==m.EMPTY);this._renderedComponent=l;var c=f.mountComponent(l,e,this._hostParent,this._hostContainerInfo,this._processChildContext(t),o);this._replaceNodeWithMarkup(i,c,n)}},_replaceNodeWithMarkup:function(e,t,n){p.replaceNodeWithMarkup(e,t,n)},_renderValidatedComponentWithoutOwnerOrContext:function(){var e,t=this._instance;return e=t.render()},_renderValidatedComponent:function(){var e;if(this._compositeType!==w.StatelessFunctional){h.current=this;try{e=this._renderValidatedComponentWithoutOwnerOrContext()}finally{h.current=null}}else e=this._renderValidatedComponentWithoutOwnerOrContext();return null===e||e===!1||c.isValidElement(e)?void 0:r("109",this.getName()||"ReactCompositeComponent"),e},attachRef:function(e,t){var n=this.getPublicInstance();null==n?r("110"):void 0;var a=t.getPublicInstance(),s=n.refs===g?n.refs={}:n.refs;s[e]=a},detachRef:function(e){var t=this.getPublicInstance().refs;delete t[e]},getName:function(){var e=this._currentElement.type,t=this._instance&&this._instance.constructor;return e.displayName||t&&t.displayName||e.name||t&&t.name||null},getPublicInstance:function(){var e=this._instance;return this._compositeType===w.StatelessFunctional?null:e},_instantiateReactComponent:null};e.exports=k},function(e,t,n){"use strict";var a=n(32),s=n(3),o=(n(8),{HOST:0,COMPOSITE:1,EMPTY:2,getType:function(e){return null===e||e===!1?o.EMPTY:s.isValidElement(e)?"function"==typeof e.type?o.COMPOSITE:o.HOST:void a("26",e)}});e.exports=o},function(e,t){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e===1/t:e!==e&&t!==t}function a(e,t){if(n(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var a=Object.keys(e),o=Object.keys(t);if(a.length!==o.length)return!1;for(var i=0;i<a.length;i++)if(!s.call(t,a[i])||!n(e[a[i]],t[a[i]]))return!1;return!0}var s=Object.prototype.hasOwnProperty;e.exports=a},function(e,t){"use strict";function n(e,t){var n=null===e||e===!1,a=null===t||t===!1;if(n||a)return n===a;var s=typeof e,o=typeof t;return"string"===s||"number"===s?"string"===o||"number"===o:"object"===o&&e.type===t.type&&e.key===t.key}e.exports=n},function(e,t){"use strict";var n,a={injectEmptyComponentFactory:function(e){n=e}},s={create:function(e){return n(e)}};s.injection=a,e.exports=s},function(e,t,n){"use strict";function a(e){return r?void 0:i("111",e.type),new r(e)}function s(e){return new l(e)}function o(e){return e instanceof l}var i=n(32),r=(n(8),null),l=null,c={injectGenericComponentClass:function(e){r=e},injectTextComponentClass:function(e){l=e}},p={createInternalComponent:a,createInstanceForText:s,isTextComponent:o,injection:c};e.exports=p},function(e,t){"use strict";function n(){return a++}var a=1;e.exports=n},17,function(e,t,n){"use strict";function a(e,t){return e&&"object"==typeof e&&null!=e.key?c.escape(e.key):t.toString(36)}function s(e,t,n,o){var d=typeof e;if("undefined"!==d&&"boolean"!==d||(e=null),null===e||"string"===d||"number"===d||"object"===d&&e.$$typeof===r)return n(o,e,""===t?p+a(e,0):t),1;var u,m,f=0,g=""===t?p:t+h;if(Array.isArray(e))for(var y=0;y<e.length;y++)u=e[y],m=g+a(u,y),f+=s(u,m,n,o);else{var b=l(e);if(b){var w,v=b.call(e);if(b!==e.entries)for(var k=0;!(w=v.next()).done;)u=w.value,m=g+a(u,k++),f+=s(u,m,n,o);else for(;!(w=v.next()).done;){var j=w.value;j&&(u=j[1],m=g+c.escape(j[0])+h+a(u,0),f+=s(u,m,n,o))}}else if("object"===d){var x="",S=String(e);i("31","[object Object]"===S?"object with keys {"+Object.keys(e).join(", ")+"}":S,x)}}return f}function o(e,t,n){return null==e?0:s(e,"",t,n)}var i=n(32),r=(n(10),n(121)),l=n(122),c=(n(8),n(119)),p=(n(11),"."),h=":";e.exports=o},14,16,function(e,t,n){"use strict";function a(e){var t=Function.prototype.toString,n=Object.prototype.hasOwnProperty,a=RegExp("^"+t.call(n).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");try{var s=t.call(e);return a.test(s)}catch(e){return!1}}function s(e){var t=c(e);if(t){var n=t.childIDs;p(e),n.forEach(s)}}function o(e,t,n){return"\n    in "+(e||"Unknown")+(t?" (at "+t.fileName.replace(/^.*[\\\/]/,"")+":"+t.lineNumber+")":n?" (created by "+n+")":"")}function i(e){return null==e?"#empty":"string"==typeof e||"number"==typeof e?"#text":"string"==typeof e.type?e.type:e.type.displayName||e.type.name||"Unknown"}function r(e){var t,n=I.getDisplayName(e),a=I.getElement(e),s=I.getOwnerID(e);return s&&(t=I.getDisplayName(s)),o(n,a&&a._source,t)}var l,c,p,h,d,u,m,f=n(7),g=n(10),y=(n(8),n(11),"function"==typeof Array.from&&"function"==typeof Map&&a(Map)&&null!=Map.prototype&&"function"==typeof Map.prototype.keys&&a(Map.prototype.keys)&&"function"==typeof Set&&a(Set)&&null!=Set.prototype&&"function"==typeof Set.prototype.keys&&a(Set.prototype.keys));if(y){var b=new Map,w=new Set;l=function(e,t){b.set(e,t)},c=function(e){return b.get(e)},p=function(e){b.delete(e)},h=function(){return Array.from(b.keys())},d=function(e){w.add(e)},u=function(e){w.delete(e)},m=function(){return Array.from(w.keys())}}else{var v={},k={},j=function(e){return"."+e},x=function(e){return parseInt(e.substr(1),10)};l=function(e,t){var n=j(e);v[n]=t},c=function(e){var t=j(e);return v[t]},p=function(e){var t=j(e);delete v[t]},h=function(){return Object.keys(v).map(x)},d=function(e){var t=j(e);k[t]=!0},u=function(e){var t=j(e);delete k[t]},m=function(){return Object.keys(k).map(x)}}var S=[],I={onSetChildren:function(e,t){var n=c(e);n?void 0:f("144"),n.childIDs=t;for(var a=0;a<t.length;a++){var s=t[a],o=c(s);o?void 0:f("140"),null==o.childIDs&&"object"==typeof o.element&&null!=o.element?f("141"):void 0,o.isMounted?void 0:f("71"),null==o.parentID&&(o.parentID=e),o.parentID!==e?f("142",s,o.parentID,e):void 0}},onBeforeMountComponent:function(e,t,n){var a={element:t,parentID:n,text:null,childIDs:[],isMounted:!1,updateCount:0};l(e,a)},onBeforeUpdateComponent:function(e,t){var n=c(e);n&&n.isMounted&&(n.element=t)},onMountComponent:function(e){var t=c(e);t?void 0:f("144"),t.isMounted=!0;var n=0===t.parentID;n&&d(e)},onUpdateComponent:function(e){var t=c(e);t&&t.isMounted&&t.updateCount++},onUnmountComponent:function(e){var t=c(e);if(t){t.isMounted=!1;var n=0===t.parentID;n&&u(e)}S.push(e)},purgeUnmountedComponents:function(){if(!I._preventPurging){for(var e=0;e<S.length;e++){var t=S[e];s(t)}S.length=0}},isMounted:function(e){var t=c(e);return!!t&&t.isMounted},getCurrentStackAddendum:function(e){var t="";if(e){var n=i(e),a=e._owner;t+=o(n,e._source,a&&a.getName())}var s=g.current,r=s&&s._debugID;return t+=I.getStackAddendumByID(r)},getStackAddendumByID:function(e){for(var t="";e;)t+=r(e),e=I.getParentID(e);return t},getChildIDs:function(e){var t=c(e);return t?t.childIDs:[]},getDisplayName:function(e){var t=I.getElement(e);return t?i(t):null},getElement:function(e){var t=c(e);return t?t.element:null},getOwnerID:function(e){var t=I.getElement(e);return t&&t._owner?t._owner._debugID:null},getParentID:function(e){var t=c(e);return t?t.parentID:null},getSource:function(e){var t=c(e),n=t?t.element:null,a=null!=n?n._source:null;return a},getText:function(e){var t=I.getElement(e);return"string"==typeof t?t:"number"==typeof t?""+t:null},getUpdateCount:function(e){var t=c(e);return t?t.updateCount:0},getRootIDs:m,getRegisteredIDs:h};e.exports=I},function(e,t,n){(function(t){"use strict";function a(e,t,n,a){if(e&&"object"==typeof e){var s=e,o=void 0===s[n];o&&null!=t&&(s[n]=t)}}function s(e,t){if(null==e)return e;var n={};return o(e,a,n),n}var o=(n(119),n(120));n(11);e.exports=s}).call(t,n(110))},function(e,t,n){"use strict";function a(e){this.reinitializeTransaction(),this.renderToStaticMarkup=e,this.useCreateElement=!1,this.updateQueue=new r(this)}var s=n(4),o=n(47),i=n(60),r=(n(59),n(126)),l=[],c={enqueue:function(){}},p={getTransactionWrappers:function(){return l},getReactMountReady:function(){return c},getUpdateQueue:function(){return this.updateQueue},destructor:function(){},checkpoint:function(){},rollback:function(){}};s(a.prototype,i,p),o.addPoolingTo(a),e.exports=a},function(e,t,n){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){}var o=n(127),i=(n(11),function(){function e(t){a(this,e),this.transaction=t}return e.prototype.isMounted=function(e){return!1},e.prototype.enqueueCallback=function(e,t,n){this.transaction.isInTransaction()&&o.enqueueCallback(e,t,n)},e.prototype.enqueueForceUpdate=function(e){this.transaction.isInTransaction()?o.enqueueForceUpdate(e):s(e,"forceUpdate")},e.prototype.enqueueReplaceState=function(e,t){this.transaction.isInTransaction()?o.enqueueReplaceState(e,t):s(e,"replaceState")},e.prototype.enqueueSetState=function(e,t){this.transaction.isInTransaction()?o.enqueueSetState(e,t):s(e,"setState")},e}());e.exports=i},function(e,t,n){"use strict";function a(e){l.enqueueUpdate(e)}function s(e){var t=typeof e;if("object"!==t)return t;var n=e.constructor&&e.constructor.name||t,a=Object.keys(e);return a.length>0&&a.length<20?n+" (keys: "+a.join(", ")+")":n}function o(e,t){var n=r.get(e);if(!n){return null}return n}var i=n(32),r=(n(10),n(108)),l=(n(59),n(53)),c=(n(8),n(11),{isMounted:function(e){var t=r.get(e);return!!t&&!!t._renderedComponent},enqueueCallback:function(e,t,n){c.validateCallback(t,n);var s=o(e);return s?(s._pendingCallbacks?s._pendingCallbacks.push(t):s._pendingCallbacks=[t],void a(s)):null},enqueueCallbackInternal:function(e,t){e._pendingCallbacks?e._pendingCallbacks.push(t):e._pendingCallbacks=[t],a(e)},enqueueForceUpdate:function(e){var t=o(e,"forceUpdate");t&&(t._pendingForceUpdate=!0,a(t))},enqueueReplaceState:function(e,t){var n=o(e,"replaceState");n&&(n._pendingStateQueue=[t],n._pendingReplaceState=!0,a(n))},enqueueSetState:function(e,t){var n=o(e,"setState");if(n){var s=n._pendingStateQueue||(n._pendingStateQueue=[]);s.push(t),a(n)}},enqueueElementInternal:function(e,t,n){e._pendingElement=t,e._context=n,a(e)},validateCallback:function(e,t){e&&"function"!=typeof e?i("122",t,s(e)):void 0}});e.exports=c},function(e,t,n){"use strict";var a=(n(4),n(12)),s=(n(11),a);e.exports=s},function(e,t,n){"use strict";var a=n(4),s=n(73),o=n(31),i=function(e){this._currentElement=null,this._hostNode=null,this._hostParent=null,this._hostContainerInfo=null,this._domID=0};a(i.prototype,{mountComponent:function(e,t,n,a){var i=n._idCounter++;this._domID=i,this._hostParent=t,this._hostContainerInfo=n;var r=" react-empty: "+this._domID+" ";if(e.useCreateElement){var l=n._ownerDocument,c=l.createComment(r);return o.precacheNode(this,c),s(c)}return e.renderToStaticMarkup?"":"<!--"+r+"-->"},receiveComponent:function(){},getHostNode:function(){return o.getNodeFromInstance(this)},unmountComponent:function(){o.uncacheNode(this)}}),e.exports=i},function(e,t,n){"use strict";function a(e,t){"_hostNode"in e?void 0:l("33"),"_hostNode"in t?void 0:l("33");for(var n=0,a=e;a;a=a._hostParent)n++;for(var s=0,o=t;o;o=o._hostParent)s++;for(;n-s>0;)e=e._hostParent,n--;for(;s-n>0;)t=t._hostParent,s--;for(var i=n;i--;){if(e===t)return e;e=e._hostParent,t=t._hostParent}return null}function s(e,t){"_hostNode"in e?void 0:l("35"),"_hostNode"in t?void 0:l("35");for(;t;){if(t===e)return!0;t=t._hostParent}return!1}function o(e){return"_hostNode"in e?void 0:l("36"),e._hostParent}function i(e,t,n){for(var a=[];e;)a.push(e),e=e._hostParent;var s;for(s=a.length;s-- >0;)t(a[s],"captured",n);for(s=0;s<a.length;s++)t(a[s],"bubbled",n)}function r(e,t,n,s,o){for(var i=e&&t?a(e,t):null,r=[];e&&e!==i;)r.push(e),e=e._hostParent;for(var l=[];t&&t!==i;)l.push(t),t=t._hostParent;var c;for(c=0;c<r.length;c++)n(r[c],"bubbled",s);for(c=l.length;c-- >0;)n(l[c],"captured",o)}var l=n(32);n(8);e.exports={isAncestor:s,getLowestCommonAncestor:a,getParentInstance:o,traverseTwoPhase:i,traverseEnterLeave:r}},function(e,t,n){"use strict";var a=n(32),s=n(4),o=n(72),i=n(73),r=n(31),l=n(78),c=(n(8),n(128),
function(e){this._currentElement=e,this._stringText=""+e,this._hostNode=null,this._hostParent=null,this._domID=0,this._mountIndex=0,this._closingComment=null,this._commentNodes=null});s(c.prototype,{mountComponent:function(e,t,n,a){var s=n._idCounter++,o=" react-text: "+s+" ",c=" /react-text ";if(this._domID=s,this._hostParent=t,e.useCreateElement){var p=n._ownerDocument,h=p.createComment(o),d=p.createComment(c),u=i(p.createDocumentFragment());return i.queueChild(u,i(h)),this._stringText&&i.queueChild(u,i(p.createTextNode(this._stringText))),i.queueChild(u,i(d)),r.precacheNode(this,h),this._closingComment=d,u}var m=l(this._stringText);return e.renderToStaticMarkup?m:"<!--"+o+"-->"+m+"<!--"+c+"-->"},receiveComponent:function(e,t){if(e!==this._currentElement){this._currentElement=e;var n=""+e;if(n!==this._stringText){this._stringText=n;var a=this.getHostNode();o.replaceDelimitedText(a[0],a[1],n)}}},getHostNode:function(){var e=this._commentNodes;if(e)return e;if(!this._closingComment)for(var t=r.getNodeFromInstance(this),n=t.nextSibling;;){if(null==n?a("67",this._domID):void 0,8===n.nodeType&&" /react-text "===n.nodeValue){this._closingComment=n;break}n=n.nextSibling}return e=[this._hostNode,this._closingComment],this._commentNodes=e,e},unmountComponent:function(){this._closingComment=null,this._commentNodes=null,r.uncacheNode(this)}}),e.exports=c},function(e,t,n){"use strict";function a(){this.reinitializeTransaction()}var s=n(4),o=n(53),i=n(60),r=n(12),l={initialize:r,close:function(){d.isBatchingUpdates=!1}},c={initialize:r,close:o.flushBatchedUpdates.bind(o)},p=[c,l];s(a.prototype,i,{getTransactionWrappers:function(){return p}});var h=new a,d={isBatchingUpdates:!1,batchedUpdates:function(e,t,n,a,s,o){var i=d.isBatchingUpdates;return d.isBatchingUpdates=!0,i?e(t,n,a,s,o):h.perform(e,null,t,n,a,s,o)}};e.exports=d},function(e,t,n){"use strict";function a(e){for(;e._hostParent;)e=e._hostParent;var t=h.getNodeFromInstance(e),n=t.parentNode;return h.getClosestInstanceFromNode(n)}function s(e,t){this.topLevelType=e,this.nativeEvent=t,this.ancestors=[]}function o(e){var t=u(e.nativeEvent),n=h.getClosestInstanceFromNode(t),s=n;do e.ancestors.push(s),s=s&&a(s);while(s);for(var o=0;o<e.ancestors.length;o++)n=e.ancestors[o],f._handleTopLevel(e.topLevelType,n,e.nativeEvent,u(e.nativeEvent))}function i(e){var t=m(window);e(t)}var r=n(4),l=n(134),c=n(45),p=n(47),h=n(31),d=n(53),u=n(61),m=n(135);r(s.prototype,{destructor:function(){this.topLevelType=null,this.nativeEvent=null,this.ancestors.length=0}}),p.addPoolingTo(s,p.twoArgumentPooler);var f={_enabled:!0,_handleTopLevel:null,WINDOW_HANDLE:c.canUseDOM?window:null,setHandleTopLevel:function(e){f._handleTopLevel=e},setEnabled:function(e){f._enabled=!!e},isEnabled:function(){return f._enabled},trapBubbledEvent:function(e,t,n){return n?l.listen(n,t,f.dispatchEvent.bind(null,e)):null},trapCapturedEvent:function(e,t,n){return n?l.capture(n,t,f.dispatchEvent.bind(null,e)):null},monitorScrollValue:function(e){var t=i.bind(null,e);l.listen(window,"scroll",t)},dispatchEvent:function(e,t){if(f._enabled){var n=s.getPooled(e,t);try{d.batchedUpdates(o,n)}finally{s.release(n)}}}};e.exports=f},function(e,t,n){"use strict";var a=n(12),s={listen:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!1),{remove:function(){e.removeEventListener(t,n,!1)}}):e.attachEvent?(e.attachEvent("on"+t,n),{remove:function(){e.detachEvent("on"+t,n)}}):void 0},capture:function(e,t,n){return e.addEventListener?(e.addEventListener(t,n,!0),{remove:function(){e.removeEventListener(t,n,!0)}}):{remove:a}},registerDefault:function(){}};e.exports=s},function(e,t){"use strict";function n(e){return e===window?{x:window.pageXOffset||document.documentElement.scrollLeft,y:window.pageYOffset||document.documentElement.scrollTop}:{x:e.scrollLeft,y:e.scrollTop}}e.exports=n},function(e,t,n){"use strict";var a=n(33),s=n(39),o=n(41),i=n(107),r=n(116),l=n(97),c=n(117),p=n(53),h={Component:i.injection,DOMProperty:a.injection,EmptyComponent:r.injection,EventPluginHub:s.injection,EventPluginUtils:o.injection,EventEmitter:l.injection,HostComponent:c.injection,Updates:p.injection};e.exports=h},function(e,t,n){"use strict";function a(e){this.reinitializeTransaction(),this.renderToStaticMarkup=!1,this.reactMountReady=o.getPooled(null),this.useCreateElement=e}var s=n(4),o=n(54),i=n(47),r=n(97),l=n(138),c=(n(59),n(60)),p=n(127),h={initialize:l.getSelectionInformation,close:l.restoreSelection},d={initialize:function(){var e=r.isEnabled();return r.setEnabled(!1),e},close:function(e){r.setEnabled(e)}},u={initialize:function(){this.reactMountReady.reset()},close:function(){this.reactMountReady.notifyAll()}},m=[h,d,u],f={getTransactionWrappers:function(){return m},getReactMountReady:function(){return this.reactMountReady},getUpdateQueue:function(){return p},checkpoint:function(){return this.reactMountReady.checkpoint()},rollback:function(e){this.reactMountReady.rollback(e)},destructor:function(){o.release(this.reactMountReady),this.reactMountReady=null}};s(a.prototype,c,f),i.addPoolingTo(a),e.exports=a},function(e,t,n){"use strict";function a(e){return o(document.documentElement,e)}var s=n(139),o=n(141),i=n(86),r=n(144),l={hasSelectionCapabilities:function(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)},getSelectionInformation:function(){var e=r();return{focusedElem:e,selectionRange:l.hasSelectionCapabilities(e)?l.getSelection(e):null}},restoreSelection:function(e){var t=r(),n=e.focusedElem,s=e.selectionRange;t!==n&&a(n)&&(l.hasSelectionCapabilities(n)&&l.setSelection(n,s),i(n))},getSelection:function(e){var t;if("selectionStart"in e)t={start:e.selectionStart,end:e.selectionEnd};else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var n=document.selection.createRange();n.parentElement()===e&&(t={start:-n.moveStart("character",-e.value.length),end:-n.moveEnd("character",-e.value.length)})}else t=s.getOffsets(e);return t||{start:0,end:0}},setSelection:function(e,t){var n=t.start,a=t.end;if(void 0===a&&(a=n),"selectionStart"in e)e.selectionStart=n,e.selectionEnd=Math.min(a,e.value.length);else if(document.selection&&e.nodeName&&"input"===e.nodeName.toLowerCase()){var o=e.createTextRange();o.collapse(!0),o.moveStart("character",n),o.moveEnd("character",a-n),o.select()}else s.setOffsets(e,t)}};e.exports=l},function(e,t,n){"use strict";function a(e,t,n,a){return e===n&&t===a}function s(e){var t=document.selection,n=t.createRange(),a=n.text.length,s=n.duplicate();s.moveToElementText(e),s.setEndPoint("EndToStart",n);var o=s.text.length,i=o+a;return{start:o,end:i}}function o(e){var t=window.getSelection&&window.getSelection();if(!t||0===t.rangeCount)return null;var n=t.anchorNode,s=t.anchorOffset,o=t.focusNode,i=t.focusOffset,r=t.getRangeAt(0);try{r.startContainer.nodeType,r.endContainer.nodeType}catch(e){return null}var l=a(t.anchorNode,t.anchorOffset,t.focusNode,t.focusOffset),c=l?0:r.toString().length,p=r.cloneRange();p.selectNodeContents(e),p.setEnd(r.startContainer,r.startOffset);var h=a(p.startContainer,p.startOffset,p.endContainer,p.endOffset),d=h?0:p.toString().length,u=d+c,m=document.createRange();m.setStart(n,s),m.setEnd(o,i);var f=m.collapsed;return{start:f?u:d,end:f?d:u}}function i(e,t){var n,a,s=document.selection.createRange().duplicate();void 0===t.end?(n=t.start,a=n):t.start>t.end?(n=t.end,a=t.start):(n=t.start,a=t.end),s.moveToElementText(e),s.moveStart("character",n),s.setEndPoint("EndToStart",s),s.moveEnd("character",a-n),s.select()}function r(e,t){if(window.getSelection){var n=window.getSelection(),a=e[p()].length,s=Math.min(t.start,a),o=void 0===t.end?s:Math.min(t.end,a);if(!n.extend&&s>o){var i=o;o=s,s=i}var r=c(e,s),l=c(e,o);if(r&&l){var h=document.createRange();h.setStart(r.node,r.offset),n.removeAllRanges(),s>o?(n.addRange(h),n.extend(l.node,l.offset)):(h.setEnd(l.node,l.offset),n.addRange(h))}}}var l=n(45),c=n(140),p=n(48),h=l.canUseDOM&&"selection"in document&&!("getSelection"in window),d={getOffsets:h?s:o,setOffsets:h?i:r};e.exports=d},function(e,t){"use strict";function n(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function a(e){for(;e;){if(e.nextSibling)return e.nextSibling;e=e.parentNode}}function s(e,t){for(var s=n(e),o=0,i=0;s;){if(3===s.nodeType){if(i=o+s.textContent.length,o<=t&&i>=t)return{node:s,offset:t-o};o=i}s=n(a(s))}}e.exports=s},function(e,t,n){"use strict";function a(e,t){return!(!e||!t)&&(e===t||!s(e)&&(s(t)?a(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}var s=n(142);e.exports=a},function(e,t,n){"use strict";function a(e){return s(e)&&3==e.nodeType}var s=n(143);e.exports=a},function(e,t){"use strict";function n(e){return!(!e||!("function"==typeof Node?e instanceof Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}e.exports=n},function(e,t){"use strict";function n(){if("undefined"==typeof document)return null;try{return document.activeElement||document.body}catch(e){return document.body}}e.exports=n},function(e,t){"use strict";var n={xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace"},a={accentHeight:"accent-height",accumulate:0,additive:0,alignmentBaseline:"alignment-baseline",allowReorder:"allowReorder",alphabetic:0,amplitude:0,arabicForm:"arabic-form",ascent:0,attributeName:"attributeName",attributeType:"attributeType",autoReverse:"autoReverse",azimuth:0,baseFrequency:"baseFrequency",baseProfile:"baseProfile",baselineShift:"baseline-shift",bbox:0,begin:0,bias:0,by:0,calcMode:"calcMode",capHeight:"cap-height",clip:0,clipPath:"clip-path",clipRule:"clip-rule",clipPathUnits:"clipPathUnits",colorInterpolation:"color-interpolation",colorInterpolationFilters:"color-interpolation-filters",colorProfile:"color-profile",colorRendering:"color-rendering",contentScriptType:"contentScriptType",contentStyleType:"contentStyleType",cursor:0,cx:0,cy:0,d:0,decelerate:0,descent:0,diffuseConstant:"diffuseConstant",direction:0,display:0,divisor:0,dominantBaseline:"dominant-baseline",dur:0,dx:0,dy:0,edgeMode:"edgeMode",elevation:0,enableBackground:"enable-background",end:0,exponent:0,externalResourcesRequired:"externalResourcesRequired",fill:0,fillOpacity:"fill-opacity",fillRule:"fill-rule",filter:0,filterRes:"filterRes",filterUnits:"filterUnits",floodColor:"flood-color",floodOpacity:"flood-opacity",focusable:0,fontFamily:"font-family",fontSize:"font-size",fontSizeAdjust:"font-size-adjust",fontStretch:"font-stretch",fontStyle:"font-style",fontVariant:"font-variant",fontWeight:"font-weight",format:0,from:0,fx:0,fy:0,g1:0,g2:0,glyphName:"glyph-name",glyphOrientationHorizontal:"glyph-orientation-horizontal",glyphOrientationVertical:"glyph-orientation-vertical",glyphRef:"glyphRef",gradientTransform:"gradientTransform",gradientUnits:"gradientUnits",hanging:0,horizAdvX:"horiz-adv-x",horizOriginX:"horiz-origin-x",ideographic:0,imageRendering:"image-rendering",in:0,in2:0,intercept:0,k:0,k1:0,k2:0,k3:0,k4:0,kernelMatrix:"kernelMatrix",kernelUnitLength:"kernelUnitLength",kerning:0,keyPoints:"keyPoints",keySplines:"keySplines",keyTimes:"keyTimes",lengthAdjust:"lengthAdjust",letterSpacing:"letter-spacing",lightingColor:"lighting-color",limitingConeAngle:"limitingConeAngle",local:0,markerEnd:"marker-end",markerMid:"marker-mid",markerStart:"marker-start",markerHeight:"markerHeight",markerUnits:"markerUnits",markerWidth:"markerWidth",mask:0,maskContentUnits:"maskContentUnits",maskUnits:"maskUnits",mathematical:0,mode:0,numOctaves:"numOctaves",offset:0,opacity:0,operator:0,order:0,orient:0,orientation:0,origin:0,overflow:0,overlinePosition:"overline-position",overlineThickness:"overline-thickness",paintOrder:"paint-order",panose1:"panose-1",pathLength:"pathLength",patternContentUnits:"patternContentUnits",patternTransform:"patternTransform",patternUnits:"patternUnits",pointerEvents:"pointer-events",points:0,pointsAtX:"pointsAtX",pointsAtY:"pointsAtY",pointsAtZ:"pointsAtZ",preserveAlpha:"preserveAlpha",preserveAspectRatio:"preserveAspectRatio",primitiveUnits:"primitiveUnits",r:0,radius:0,refX:"refX",refY:"refY",renderingIntent:"rendering-intent",repeatCount:"repeatCount",repeatDur:"repeatDur",requiredExtensions:"requiredExtensions",requiredFeatures:"requiredFeatures",restart:0,result:0,rotate:0,rx:0,ry:0,scale:0,seed:0,shapeRendering:"shape-rendering",slope:0,spacing:0,specularConstant:"specularConstant",specularExponent:"specularExponent",speed:0,spreadMethod:"spreadMethod",startOffset:"startOffset",stdDeviation:"stdDeviation",stemh:0,stemv:0,stitchTiles:"stitchTiles",stopColor:"stop-color",stopOpacity:"stop-opacity",strikethroughPosition:"strikethrough-position",strikethroughThickness:"strikethrough-thickness",string:0,stroke:0,strokeDasharray:"stroke-dasharray",strokeDashoffset:"stroke-dashoffset",strokeLinecap:"stroke-linecap",strokeLinejoin:"stroke-linejoin",strokeMiterlimit:"stroke-miterlimit",strokeOpacity:"stroke-opacity",strokeWidth:"stroke-width",surfaceScale:"surfaceScale",systemLanguage:"systemLanguage",tableValues:"tableValues",targetX:"targetX",targetY:"targetY",textAnchor:"text-anchor",textDecoration:"text-decoration",textRendering:"text-rendering",textLength:"textLength",to:0,transform:0,u1:0,u2:0,underlinePosition:"underline-position",underlineThickness:"underline-thickness",unicode:0,unicodeBidi:"unicode-bidi",unicodeRange:"unicode-range",unitsPerEm:"units-per-em",vAlphabetic:"v-alphabetic",vHanging:"v-hanging",vIdeographic:"v-ideographic",vMathematical:"v-mathematical",values:0,vectorEffect:"vector-effect",version:0,vertAdvY:"vert-adv-y",vertOriginX:"vert-origin-x",vertOriginY:"vert-origin-y",viewBox:"viewBox",viewTarget:"viewTarget",visibility:0,widths:0,wordSpacing:"word-spacing",writingMode:"writing-mode",x:0,xHeight:"x-height",x1:0,x2:0,xChannelSelector:"xChannelSelector",xlinkActuate:"xlink:actuate",xlinkArcrole:"xlink:arcrole",xlinkHref:"xlink:href",xlinkRole:"xlink:role",xlinkShow:"xlink:show",xlinkTitle:"xlink:title",xlinkType:"xlink:type",xmlBase:"xml:base",xmlns:0,xmlnsXlink:"xmlns:xlink",xmlLang:"xml:lang",xmlSpace:"xml:space",y:0,y1:0,y2:0,yChannelSelector:"yChannelSelector",z:0,zoomAndPan:"zoomAndPan"},s={Properties:{},DOMAttributeNamespaces:{xlinkActuate:n.xlink,xlinkArcrole:n.xlink,xlinkHref:n.xlink,xlinkRole:n.xlink,xlinkShow:n.xlink,xlinkTitle:n.xlink,xlinkType:n.xlink,xmlBase:n.xml,xmlLang:n.xml,xmlSpace:n.xml},DOMAttributeNames:{}};Object.keys(a).forEach(function(e){s.Properties[e]=0,a[e]&&(s.DOMAttributeNames[e]=a[e])}),e.exports=s},function(e,t,n){"use strict";function a(e){if("selectionStart"in e&&l.hasSelectionCapabilities(e))return{start:e.selectionStart,end:e.selectionEnd};if(window.getSelection){var t=window.getSelection();return{anchorNode:t.anchorNode,anchorOffset:t.anchorOffset,focusNode:t.focusNode,focusOffset:t.focusOffset}}if(document.selection){var n=document.selection.createRange();return{parentElement:n.parentElement(),text:n.text,top:n.boundingTop,left:n.boundingLeft}}}function s(e,t){if(b||null==f||f!==p())return null;var n=a(f);if(!y||!d(y,n)){y=n;var s=c.getPooled(m.select,g,e,t);return s.type="select",s.target=f,o.accumulateTwoPhaseDispatches(s),s}return null}var o=n(38),i=n(45),r=n(31),l=n(138),c=n(50),p=n(144),h=n(63),d=n(114),u=i.canUseDOM&&"documentMode"in document&&document.documentMode<=11,m={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:["topBlur","topContextMenu","topFocus","topKeyDown","topKeyUp","topMouseDown","topMouseUp","topSelectionChange"]}},f=null,g=null,y=null,b=!1,w=!1,v={eventTypes:m,extractEvents:function(e,t,n,a){if(!w)return null;var o=t?r.getNodeFromInstance(t):window;switch(e){case"topFocus":(h(o)||"true"===o.contentEditable)&&(f=o,g=t,y=null);break;case"topBlur":f=null,g=null,y=null;break;case"topMouseDown":b=!0;break;case"topContextMenu":case"topMouseUp":return b=!1,s(n,a);case"topSelectionChange":if(u)break;case"topKeyDown":case"topKeyUp":return s(n,a)}return null},didPutListener:function(e,t,n){"onSelect"===t&&(w=!0)}};e.exports=v},function(e,t,n){"use strict";function a(e){return"."+e._rootNodeID}function s(e){return"button"===e||"input"===e||"select"===e||"textarea"===e}var o=n(32),i=n(134),r=n(38),l=n(31),c=n(148),p=n(149),h=n(50),d=n(150),u=n(151),m=n(66),f=n(154),g=n(155),y=n(156),b=n(67),w=n(157),v=n(12),k=n(152),j=(n(8),{}),x={};["abort","animationEnd","animationIteration","animationStart","blur","canPlay","canPlayThrough","click","contextMenu","copy","cut","doubleClick","drag","dragEnd","dragEnter","dragExit","dragLeave","dragOver","dragStart","drop","durationChange","emptied","encrypted","ended","error","focus","input","invalid","keyDown","keyPress","keyUp","load","loadedData","loadedMetadata","loadStart","mouseDown","mouseMove","mouseOut","mouseOver","mouseUp","paste","pause","play","playing","progress","rateChange","reset","scroll","seeked","seeking","stalled","submit","suspend","timeUpdate","touchCancel","touchEnd","touchMove","touchStart","transitionEnd","volumeChange","waiting","wheel"].forEach(function(e){var t=e[0].toUpperCase()+e.slice(1),n="on"+t,a="top"+t,s={phasedRegistrationNames:{bubbled:n,captured:n+"Capture"},dependencies:[a]};j[e]=s,x[a]=s});var S={},I={eventTypes:j,extractEvents:function(e,t,n,a){var s=x[e];if(!s)return null;var i;switch(e){case"topAbort":case"topCanPlay":case"topCanPlayThrough":case"topDurationChange":case"topEmptied":case"topEncrypted":case"topEnded":case"topError":case"topInput":case"topInvalid":case"topLoad":case"topLoadedData":case"topLoadedMetadata":case"topLoadStart":case"topPause":case"topPlay":case"topPlaying":case"topProgress":case"topRateChange":case"topReset":case"topSeeked":case"topSeeking":case"topStalled":case"topSubmit":case"topSuspend":case"topTimeUpdate":case"topVolumeChange":case"topWaiting":i=h;break;case"topKeyPress":if(0===k(n))return null;case"topKeyDown":case"topKeyUp":i=u;break;case"topBlur":case"topFocus":i=d;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":i=m;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":i=f;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":i=g;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":i=c;break;case"topTransitionEnd":i=y;break;case"topScroll":i=b;break;case"topWheel":i=w;break;case"topCopy":case"topCut":case"topPaste":i=p}i?void 0:o("86",e);var l=i.getPooled(s,t,n,a);return r.accumulateTwoPhaseDispatches(l),l},didPutListener:function(e,t,n){if("onClick"===t&&!s(e._tag)){var o=a(e),r=l.getNodeFromInstance(e);S[o]||(S[o]=i.listen(r,"click",v))}},willDeleteListener:function(e,t){if("onClick"===t&&!s(e._tag)){var n=a(e);S[n].remove(),delete S[n]}}};e.exports=I},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o={animationName:null,elapsedTime:null,pseudoElement:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o={clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(67),o={relatedTarget:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(67),o=n(152),i=n(153),r=n(69),l={key:i,location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:r,charCode:function(e){return"keypress"===e.type?o(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?o(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}};s.augmentClass(a,l),e.exports=a},function(e,t){"use strict";function n(e){var t,n=e.keyCode;return"charCode"in e?(t=e.charCode,0===t&&13===n&&(t=13)):t=n,t>=32||13===t?t:0}e.exports=n},function(e,t,n){"use strict";function a(e){if(e.key){var t=o[e.key]||e.key;if("Unidentified"!==t)return t}if("keypress"===e.type){var n=s(e);return 13===n?"Enter":String.fromCharCode(n)}return"keydown"===e.type||"keyup"===e.type?i[e.keyCode]||"Unidentified":""}var s=n(152),o={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},i={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"};e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(66),o={dataTransfer:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(67),o=n(69),i={touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:o};s.augmentClass(a,i),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(50),o={propertyName:null,elapsedTime:null,pseudoElement:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t,n,a){return s.call(this,e,t,n,a)}var s=n(66),o={deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null};s.augmentClass(a,o),e.exports=a},function(e,t,n){"use strict";function a(e,t){for(var n=Math.min(e.length,t.length),a=0;a<n;a++)if(e.charAt(a)!==t.charAt(a))return a;return e.length===t.length?-1:n}function s(e){return e?e.nodeType===O?e.documentElement:e.firstChild:null}function o(e){return e.getAttribute&&e.getAttribute(E)||""}function i(e,t,n,a,s){var o;if(k.logTopLevelRenders){var i=e._currentElement.props.child,r=i.type;o="React mount: "+("string"==typeof r?r:r.displayName||r.name),console.time(o)}var l=S.mountComponent(e,n,null,w(e,t),s,0);o&&console.timeEnd(o),e._renderedComponent._topLevelWrapper=e,L._mountImageIntoNode(l,t,e,a,n)}function r(e,t,n,a){var s=T.ReactReconcileTransaction.getPooled(!n&&v.useCreateElement);s.perform(i,null,e,t,s,n,a),T.ReactReconcileTransaction.release(s)}function l(e,t,n){for(S.unmountComponent(e,n),t.nodeType===O&&(t=t.documentElement);t.lastChild;)t.removeChild(t.lastChild)}function c(e){var t=s(e);if(t){var n=b.getInstanceFromNode(t);return!(!n||!n._hostParent)}}function p(e){return!(!e||e.nodeType!==V&&e.nodeType!==O&&e.nodeType!==R)}function h(e){var t=s(e),n=t&&b.getInstanceFromNode(t);return n&&!n._hostParent?n:null}function d(e){var t=h(e);return t?t._hostContainerInfo._topLevelWrapper:null}var u=n(32),m=n(73),f=n(33),g=n(3),y=n(97),b=(n(10),n(31)),w=n(159),v=n(160),k=n(55),j=n(108),x=(n(59),n(161)),S=n(56),I=n(127),T=n(53),_=n(20),C=n(111),M=(n(8),n(75)),A=n(115),E=(n(11),f.ID_ATTRIBUTE_NAME),P=f.ROOT_ATTRIBUTE_NAME,V=1,O=9,R=11,B={},q=1,D=function(){this.rootID=q++};D.prototype.isReactComponent={},D.prototype.render=function(){return this.props.child},D.isReactTopLevelWrapper=!0;var L={TopLevelWrapper:D,_instancesByReactRootID:B,scrollMonitor:function(e,t){t()},_updateRootComponent:function(e,t,n,a,s){return L.scrollMonitor(a,function(){I.enqueueElementInternal(e,t,n),s&&I.enqueueCallbackInternal(e,s)}),e},_renderNewRootComponent:function(e,t,n,a){p(t)?void 0:u("37"),y.ensureScrollValueMonitoring();var s=C(e,!1);T.batchedUpdates(r,s,t,n,a);var o=s._instance.rootID;return B[o]=s,s},renderSubtreeIntoContainer:function(e,t,n,a){return null!=e&&j.has(e)?void 0:u("38"),L._renderSubtreeIntoContainer(e,t,n,a)},_renderSubtreeIntoContainer:function(e,t,n,a){I.validateCallback(a,"ReactDOM.render"),g.isValidElement(t)?void 0:u("39","string"==typeof t?" Instead of passing a string like 'div', pass React.createElement('div') or <div />.":"function"==typeof t?" Instead of passing a class like Foo, pass React.createElement(Foo) or <Foo />.":null!=t&&void 0!==t.props?" This may be caused by unintentionally loading two independent copies of React.":"");var i,r=g.createElement(D,{child:t});if(e){var l=j.get(e);i=l._processChildContext(l._context)}else i=_;var p=d(n);if(p){var h=p._currentElement,m=h.props.child;if(A(m,t)){var f=p._renderedComponent.getPublicInstance(),y=a&&function(){a.call(f)};return L._updateRootComponent(p,r,i,n,y),f}L.unmountComponentAtNode(n)}var b=s(n),w=b&&!!o(b),v=c(n),k=w&&!p&&!v,x=L._renderNewRootComponent(r,n,k,i)._renderedComponent.getPublicInstance();return a&&a.call(x),x},render:function(e,t,n){return L._renderSubtreeIntoContainer(null,e,t,n)},unmountComponentAtNode:function(e){p(e)?void 0:u("40");var t=d(e);if(!t){c(e),1===e.nodeType&&e.hasAttribute(P);return!1}return delete B[t._instance.rootID],T.batchedUpdates(l,t,e,!1),!0},_mountImageIntoNode:function(e,t,n,o,i){if(p(t)?void 0:u("41"),o){var r=s(t);if(x.canReuseMarkup(e,r))return void b.precacheNode(n,r);var l=r.getAttribute(x.CHECKSUM_ATTR_NAME);r.removeAttribute(x.CHECKSUM_ATTR_NAME);var c=r.outerHTML;r.setAttribute(x.CHECKSUM_ATTR_NAME,l);var h=e,d=a(h,c),f=" (client) "+h.substring(d-20,d+20)+"\n (server) "+c.substring(d-20,d+20);t.nodeType===O?u("42",f):void 0}if(t.nodeType===O?u("43"):void 0,i.useCreateElement){for(;t.lastChild;)t.removeChild(t.lastChild);m.insertTreeBefore(t,e,null)}else M(t,e),b.precacheNode(n,t.firstChild)}};e.exports=L},function(e,t,n){"use strict";function a(e,t){var n={_topLevelWrapper:e,_idCounter:1,_ownerDocument:t?t.nodeType===s?t:t.ownerDocument:null,_node:t,_tag:t?t.nodeName.toLowerCase():null,_namespaceURI:t?t.namespaceURI:null};return n}var s=(n(128),9);e.exports=a},function(e,t){"use strict";var n={useCreateElement:!0,useFiber:!1};e.exports=n},function(e,t,n){"use strict";var a=n(162),s=/\/?>/,o=/^<\!\-\-/,i={CHECKSUM_ATTR_NAME:"data-react-checksum",addChecksumToMarkup:function(e){var t=a(e);return o.test(e)?e:e.replace(s," "+i.CHECKSUM_ATTR_NAME+'="'+t+'"$&')},canReuseMarkup:function(e,t){var n=t.getAttribute(i.CHECKSUM_ATTR_NAME);n=n&&parseInt(n,10);var s=a(e);return s===n}};e.exports=i},function(e,t){"use strict";function n(e){for(var t=1,n=0,s=0,o=e.length,i=o&-4;s<i;){for(var r=Math.min(s+4096,i);s<r;s+=4)n+=(t+=e.charCodeAt(s))+(t+=e.charCodeAt(s+1))+(t+=e.charCodeAt(s+2))+(t+=e.charCodeAt(s+3));t%=a,n%=a}for(;s<o;s++)n+=t+=e.charCodeAt(s);return t%=a,n%=a,t|n<<16}var a=65521;e.exports=n},27,function(e,t,n){"use strict";function a(e){if(null==e)return null;if(1===e.nodeType)return e;var t=i.get(e);return t?(t=r(t),t?o.getNodeFromInstance(t):null):void("function"==typeof e.render?s("44"):s("45",Object.keys(e)))}var s=n(32),o=(n(10),n(31)),i=n(108),r=n(165);n(8),n(11);e.exports=a},function(e,t,n){"use strict";function a(e){for(var t;(t=e._renderedNodeType)===s.COMPOSITE;)e=e._renderedComponent;return t===s.HOST?e._renderedComponent:t===s.EMPTY?null:void 0}var s=n(113);e.exports=a},function(e,t,n){"use strict";var a=n(158);e.exports=a.renderSubtreeIntoContainer},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.createMemoryHistory=t.hashHistory=t.browserHistory=t.applyRouterMiddleware=t.formatPattern=t.useRouterHistory=t.match=t.routerShape=t.locationShape=t.PropTypes=t.RoutingContext=t.RouterContext=t.createRoutes=t.useRoutes=t.RouteContext=t.Lifecycle=t.History=t.Route=t.Redirect=t.IndexRoute=t.IndexRedirect=t.withRouter=t.IndexLink=t.Link=t.Router=void 0;var s=n(168);Object.defineProperty(t,"createRoutes",{enumerable:!0,get:function(){return s.createRoutes}});var o=n(169);Object.defineProperty(t,"locationShape",{enumerable:!0,get:function(){return o.locationShape}}),Object.defineProperty(t,"routerShape",{enumerable:!0,get:function(){return o.routerShape}});var i=n(174);Object.defineProperty(t,"formatPattern",{enumerable:!0,get:function(){return i.formatPattern}});var r=n(176),l=a(r),c=n(206),p=a(c),h=n(207),d=a(h),u=n(208),m=a(u),f=n(210),g=a(f),y=n(212),b=a(y),w=n(211),v=a(w),k=n(213),j=a(k),x=n(214),S=a(x),I=n(215),T=a(I),_=n(216),C=a(_),M=n(217),A=a(M),E=n(203),P=a(E),V=n(218),O=a(V),R=a(o),B=n(219),q=a(B),D=n(223),L=a(D),N=n(224),F=a(N),W=n(225),J=a(W),U=n(228),H=a(U),z=n(220),Y=a(z);t.Router=l.default,t.Link=p.default,t.IndexLink=d.default,t.withRouter=m.default,t.IndexRedirect=g.default,t.IndexRoute=b.default,t.Redirect=v.default,t.Route=j.default,t.History=S.default,t.Lifecycle=T.default,t.RouteContext=C.default,t.useRoutes=A.default,t.RouterContext=P.default,t.RoutingContext=O.default,t.PropTypes=R.default,t.match=q.default,t.useRouterHistory=L.default,t.applyRouterMiddleware=F.default,t.browserHistory=J.default,t.hashHistory=H.default,t.createMemoryHistory=Y.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return null==e||d.default.isValidElement(e)}function o(e){return s(e)||Array.isArray(e)&&e.every(s)}function i(e,t){return p({},e,t)}function r(e){var t=e.type,n=i(t.defaultProps,e.props);if(n.children){var a=l(n.children,n);a.length&&(n.childRoutes=a),delete n.children}return n}function l(e,t){var n=[];return d.default.Children.forEach(e,function(e){if(d.default.isValidElement(e))if(e.type.createRouteFromReactElement){var a=e.type.createRouteFromReactElement(e,t);a&&n.push(a)}else n.push(r(e))}),n}function c(e){return o(e)?e=l(e):e&&!Array.isArray(e)&&(e=[e]),e}t.__esModule=!0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.isReactChildren=o,t.createRouteFromReactElement=r,t.createRoutesFromReactChildren=l,t.createRoutes=c;var h=n(2),d=a(h)},function(e,t,n){"use strict";function a(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function s(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.router=t.routes=t.route=t.components=t.component=t.location=t.history=t.falsy=t.locationShape=t.routerShape=void 0;var o=n(2),i=n(170),r=(s(i),n(173)),l=a(r),c=n(171),p=(s(c),o.PropTypes.func),h=o.PropTypes.object,d=o.PropTypes.shape,u=o.PropTypes.string,m=t.routerShape=d({push:p.isRequired,replace:p.isRequired,go:p.isRequired,goBack:p.isRequired,goForward:p.isRequired,setRouteLeaveHook:p.isRequired,isActive:p.isRequired}),f=t.locationShape=d({pathname:u.isRequired,search:u.isRequired,state:h,action:u.isRequired,key:u}),g=t.falsy=l.falsy,y=t.history=l.history,b=t.location=f,w=t.component=l.component,v=t.components=l.components,k=t.route=l.route,j=(t.routes=l.routes,t.router=m),x={falsy:g,history:y,location:b,component:w,components:v,route:k,router:j};t.default=x},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.canUseMembrane=void 0;var s=n(171),o=(a(s),t.canUseMembrane=!1,function(e){return e});t.default=o},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(t.indexOf("deprecated")!==-1){if(l[t])return;l[t]=!0}t="[react-router] "+t;for(var n=arguments.length,a=Array(n>2?n-2:0),s=2;s<n;s++)a[s-2]=arguments[s];r.default.apply(void 0,[e,t].concat(a))}function o(){l={}}t.__esModule=!0,t.default=s,t._resetWarned=o;var i=n(172),r=a(i),l={}},function(e,t,n){"use strict";var a=function(){};e.exports=a},function(e,t,n){"use strict";function a(e,t,n){if(e[t])return new Error("<"+n+'> should not have a "'+t+'" prop')}t.__esModule=!0,t.routes=t.route=t.components=t.component=t.history=void 0,t.falsy=a;var s=n(2),o=s.PropTypes.func,i=s.PropTypes.object,r=s.PropTypes.arrayOf,l=s.PropTypes.oneOfType,c=s.PropTypes.element,p=s.PropTypes.shape,h=s.PropTypes.string,d=(t.history=p({
listen:o.isRequired,push:o.isRequired,replace:o.isRequired,go:o.isRequired,goBack:o.isRequired,goForward:o.isRequired}),t.component=l([o,h])),u=(t.components=l([d,i]),t.route=l([i,c]));t.routes=l([u,r(u)])},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function o(e){for(var t="",n=[],a=[],o=void 0,i=0,r=/:([a-zA-Z_$][a-zA-Z0-9_$]*)|\*\*|\*|\(|\)/g;o=r.exec(e);)o.index!==i&&(a.push(e.slice(i,o.index)),t+=s(e.slice(i,o.index))),o[1]?(t+="([^/]+)",n.push(o[1])):"**"===o[0]?(t+="(.*)",n.push("splat")):"*"===o[0]?(t+="(.*?)",n.push("splat")):"("===o[0]?t+="(?:":")"===o[0]&&(t+=")?"),a.push(o[0]),i=r.lastIndex;return i!==e.length&&(a.push(e.slice(i,e.length)),t+=s(e.slice(i,e.length))),{pattern:e,regexpSource:t,paramNames:n,tokens:a}}function i(e){return u[e]||(u[e]=o(e)),u[e]}function r(e,t){"/"!==e.charAt(0)&&(e="/"+e);var n=i(e),a=n.regexpSource,s=n.paramNames,o=n.tokens;"/"!==e.charAt(e.length-1)&&(a+="/?"),"*"===o[o.length-1]&&(a+="$");var r=t.match(new RegExp("^"+a,"i"));if(null==r)return null;var l=r[0],c=t.substr(l.length);if(c){if("/"!==l.charAt(l.length-1))return null;c="/"+c}return{remainingPathname:c,paramNames:s,paramValues:r.slice(1).map(function(e){return e&&decodeURIComponent(e)})}}function l(e){return i(e).paramNames}function c(e,t){var n=r(e,t);if(!n)return null;var a=n.paramNames,s=n.paramValues,o={};return a.forEach(function(e,t){o[e]=s[t]}),o}function p(e,t){t=t||{};for(var n=i(e),a=n.tokens,s=0,o="",r=0,l=void 0,c=void 0,p=void 0,h=0,u=a.length;h<u;++h)l=a[h],"*"===l||"**"===l?(p=Array.isArray(t.splat)?t.splat[r++]:t.splat,null!=p||s>0?void 0:(0,d.default)(!1),null!=p&&(o+=encodeURI(p))):"("===l?s+=1:")"===l?s-=1:":"===l.charAt(0)?(c=l.substring(1),p=t[c],null!=p||s>0?void 0:(0,d.default)(!1),null!=p&&(o+=encodeURIComponent(p))):o+=l;return o.replace(/\/+/g,"/")}t.__esModule=!0,t.compilePattern=i,t.matchPattern=r,t.getParamNames=l,t.getParams=c,t.formatPattern=p;var h=n(175),d=a(h),u=Object.create(null)},function(e,t,n){"use strict";var a=function(e,t,n,a,s,o,i,r){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,a,s,o,i,r],p=0;l=new Error(t.replace(/%s/g,function(){return c[p++]})),l.name="Invariant Violation"}throw l.framesToPop=1,l}};e.exports=a},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function o(e){return!e||!e.__v2_compatible__}function i(e){return e&&e.getCurrentLocation}t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=n(177),c=a(l),p=n(192),h=a(p),d=n(175),u=a(d),m=n(2),f=a(m),g=n(195),y=a(g),b=n(173),w=n(203),v=a(w),k=n(168),j=n(205),x=n(171),S=(a(x),f.default.PropTypes),I=S.func,T=S.object,_=f.default.createClass({displayName:"Router",propTypes:{history:T,children:b.routes,routes:b.routes,render:I,createElement:I,onError:I,onUpdate:I,parseQueryString:I,stringifyQuery:I,matchContext:T},getDefaultProps:function(){return{render:function(e){return f.default.createElement(v.default,e)}}},getInitialState:function(){return{location:null,routes:null,params:null,components:null}},handleError:function(e){if(!this.props.onError)throw e;this.props.onError.call(this,e)},componentWillMount:function(){var e=this,t=this.props,n=(t.parseQueryString,t.stringifyQuery,this.createRouterObjects()),a=n.history,s=n.transitionManager,o=n.router;this._unlisten=s.listen(function(t,n){t?e.handleError(t):e.setState(n,e.props.onUpdate)}),this.history=a,this.router=o},createRouterObjects:function(){var e=this.props.matchContext;if(e)return e;var t=this.props.history,n=this.props,a=n.routes,s=n.children;i(t)?(0,u.default)(!1):void 0,o(t)&&(t=this.wrapDeprecatedHistory(t));var r=(0,y.default)(t,(0,k.createRoutes)(a||s)),l=(0,j.createRouterObject)(t,r),c=(0,j.createRoutingHistory)(t,r);return{history:c,transitionManager:r,router:l}},wrapDeprecatedHistory:function(e){var t=this.props,n=t.parseQueryString,a=t.stringifyQuery,s=void 0;return s=e?function(){return e}:c.default,(0,h.default)(s)({parseQueryString:n,stringifyQuery:a})},componentWillReceiveProps:function(e){},componentWillUnmount:function(){this._unlisten&&this._unlisten()},render:function e(){var t=this.state,n=t.location,a=t.routes,o=t.params,i=t.components,l=this.props,c=l.createElement,e=l.render,p=s(l,["createElement","render"]);return null==n?null:(Object.keys(_.propTypes).forEach(function(e){return delete p[e]}),e(r({},p,{history:this.history,router:this.router,location:n,routes:a,params:o,components:i,createElement:c})))}});t.default=_,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return"string"==typeof e&&"/"===e.charAt(0)}function o(){var e=y.getHashPath();return!!s(e)||(y.replaceHashPath("/"+e),!1)}function i(e,t,n){return e+(e.indexOf("?")===-1?"?":"&")+(t+"="+n)}function r(e,t){return e.replace(new RegExp("[?&]?"+t+"=[a-zA-Z0-9]+"),"")}function l(e,t){var n=e.match(new RegExp("\\?.*?\\b"+t+"=(.+?)\\b"));return n&&n[1]}function c(){function e(){var e=y.getHashPath(),t=void 0,n=void 0;_?(t=l(e,_),e=r(e,_),t?n=b.readState(t):(n=null,t=C.createKey(),y.replaceHashPath(i(e,_,t)))):t=n=null;var a=f.parsePath(e);return C.createLocation(p({},a,{state:n}),void 0,t)}function t(t){function n(){o()&&a(e())}var a=t.transitionTo;return o(),y.addEventListener(window,"hashchange",n),function(){y.removeEventListener(window,"hashchange",n)}}function n(e){var t=e.basename,n=e.pathname,a=e.search,s=e.state,o=e.action,r=e.key;if(o!==m.POP){var l=(t||"")+n+a;_?(l=i(l,_,r),b.saveState(r,s)):e.key=e.state=null;var c=y.getHashPath();o===m.PUSH?c!==l&&(window.location.hash=l):c!==l&&y.replaceHashPath(l)}}function a(e){1===++M&&(A=t(C));var n=C.listenBefore(e);return function(){n(),0===--M&&A()}}function s(e){1===++M&&(A=t(C));var n=C.listen(e);return function(){n(),0===--M&&A()}}function c(e){C.push(e)}function h(e){C.replace(e)}function d(e){C.go(e)}function w(e){return"#"+C.createHref(e)}function j(e){1===++M&&(A=t(C)),C.registerTransitionHook(e)}function x(e){C.unregisterTransitionHook(e),0===--M&&A()}function S(e,t){C.pushState(e,t)}function I(e,t){C.replaceState(e,t)}var T=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];g.canUseDOM?void 0:u.default(!1);var _=T.queryKey;(void 0===_||_)&&(_="string"==typeof _?_:k);var C=v.default(p({},T,{getCurrentLocation:e,finishTransition:n,saveState:b.saveState})),M=0,A=void 0;y.supportsGoWithoutReloadUsingHash();return p({},C,{listenBefore:a,listen:s,push:c,replace:h,go:d,createHref:w,registerTransitionHook:j,unregisterTransitionHook:x,pushState:S,replaceState:I})}t.__esModule=!0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h=n(172),d=(a(h),n(175)),u=a(d),m=n(178),f=n(179),g=n(180),y=n(181),b=n(182),w=n(183),v=a(w),k="_k";t.default=c,e.exports=t.default},function(e,t){"use strict";t.__esModule=!0;var n="PUSH";t.PUSH=n;var a="REPLACE";t.REPLACE=a;var s="POP";t.POP=s,t.default={PUSH:n,REPLACE:a,POP:s}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){var t=e.match(/^https?:\/\/[^\/]*/);return null==t?e:e.substring(t[0].length)}function o(e){var t=s(e),n="",a="",o=t.indexOf("#");o!==-1&&(a=t.substring(o),t=t.substring(0,o));var i=t.indexOf("?");return i!==-1&&(n=t.substring(i),t=t.substring(0,i)),""===t&&(t="/"),{pathname:t,search:n,hash:a}}t.__esModule=!0,t.extractPath=s,t.parsePath=o;var i=n(172);a(i)},function(e,t){"use strict";t.__esModule=!0;var n=!("undefined"==typeof window||!window.document||!window.document.createElement);t.canUseDOM=n},function(e,t){"use strict";function n(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)}function a(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)}function s(){return window.location.href.split("#")[1]||""}function o(e){window.location.replace(window.location.pathname+window.location.search+"#"+e)}function i(){return window.location.pathname+window.location.search+window.location.hash}function r(e){e&&window.history.go(e)}function l(e,t){t(window.confirm(e))}function c(){var e=navigator.userAgent;return(e.indexOf("Android 2.")===-1&&e.indexOf("Android 4.0")===-1||e.indexOf("Mobile Safari")===-1||e.indexOf("Chrome")!==-1||e.indexOf("Windows Phone")!==-1)&&(window.history&&"pushState"in window.history)}function p(){var e=navigator.userAgent;return e.indexOf("Firefox")===-1}t.__esModule=!0,t.addEventListener=n,t.removeEventListener=a,t.getHashPath=s,t.replaceHashPath=o,t.getWindowPath=i,t.go=r,t.getUserConfirmation=l,t.supportsHistory=c,t.supportsGoWithoutReloadUsingHash=p},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return l+e}function o(e,t){try{null==t?window.sessionStorage.removeItem(s(e)):window.sessionStorage.setItem(s(e),JSON.stringify(t))}catch(e){if(e.name===p)return;if(c.indexOf(e.name)>=0&&0===window.sessionStorage.length)return;throw e}}function i(e){var t=void 0;try{t=window.sessionStorage.getItem(s(e))}catch(e){if(e.name===p)return null}if(t)try{return JSON.parse(t)}catch(e){}return null}t.__esModule=!0,t.saveState=o,t.readState=i;var r=n(172),l=(a(r),"@@History/"),c=["QuotaExceededError","QUOTA_EXCEEDED_ERR"],p="SecurityError"},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){function t(e){return l.canUseDOM?void 0:r.default(!1),n.listen(e)}var n=h.default(o({getUserConfirmation:c.getUserConfirmation},e,{go:c.go}));return o({},n,{listen:t})}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=n(175),r=a(i),l=n(180),c=n(181),p=n(184),h=a(p);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return Math.random().toString(36).substr(2,e)}function o(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.key===t.key&&p.default(e.state,t.state)}function i(){function e(e){return D.push(e),function(){D=D.filter(function(t){return t!==e})}}function t(){return W&&W.action===u.POP?L.indexOf(W.key):F?L.indexOf(F.key):-1}function n(e){var n=t();F=e,F.action===u.PUSH?L=[].concat(L.slice(0,n+1),[F.key]):F.action===u.REPLACE&&(L[n]=F.key),N.forEach(function(e){e(F)})}function a(e){if(N.push(e),F)e(F);else{var t=P();L=[t.key],n(t)}return function(){N=N.filter(function(t){return t!==e})}}function i(e,t){d.loopAsync(D.length,function(t,n,a){y.default(D[t],e,function(e){null!=e?a(e):n()})},function(e){B&&"string"==typeof e?B(e,function(e){t(e!==!1)}):t(e!==!1)})}function l(e){F&&o(F,e)||(W=e,i(e,function(t){if(W===e)if(t){if(e.action===u.PUSH){var a=j(F),s=j(e);s===a&&p.default(F.state,e.state)&&(e.action=u.REPLACE)}V(e)!==!1&&n(e)}else if(F&&e.action===u.POP){var o=L.indexOf(F.key),i=L.indexOf(e.key);o!==-1&&i!==-1&&R(o-i)}}))}function c(e){l(S(e,u.PUSH,k()))}function m(e){l(S(e,u.REPLACE,k()))}function g(){R(-1)}function b(){R(1)}function k(){return s(q)}function j(e){if(null==e||"string"==typeof e)return e;var t=e.pathname,n=e.search,a=e.hash,s=t;return n&&(s+=n),a&&(s+=a),s}function x(e){return j(e)}function S(e,t){var n=arguments.length<=2||void 0===arguments[2]?k():arguments[2];return"object"==typeof t&&("string"==typeof e&&(e=h.parsePath(e)),e=r({},e,{state:t}),t=n,n=arguments[3]||k()),f.default(e,t,n)}function I(e){F?(T(F,e),n(F)):T(P(),e)}function T(e,t){e.state=r({},e.state,t),O(e.key,e.state)}function _(e){D.indexOf(e)===-1&&D.push(e)}function C(e){D=D.filter(function(t){return t!==e})}function M(e,t){"string"==typeof t&&(t=h.parsePath(t)),c(r({state:e},t))}function A(e,t){"string"==typeof t&&(t=h.parsePath(t)),m(r({state:e},t))}var E=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],P=E.getCurrentLocation,V=E.finishTransition,O=E.saveState,R=E.go,B=E.getUserConfirmation,q=E.keyLength;"number"!=typeof q&&(q=v);var D=[],L=[],N=[],F=void 0,W=void 0;return{listenBefore:e,listen:a,transitionTo:l,push:c,replace:m,go:R,goBack:g,goForward:b,createKey:k,createPath:j,createHref:x,createLocation:S,setState:w.default(I,"setState is deprecated; use location.key to save state instead"),registerTransitionHook:w.default(_,"registerTransitionHook is deprecated; use listenBefore instead"),unregisterTransitionHook:w.default(C,"unregisterTransitionHook is deprecated; use the callback returned from listenBefore instead"),pushState:w.default(M,"pushState is deprecated; use push instead"),replaceState:w.default(A,"replaceState is deprecated; use replace instead")}}t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},l=n(172),c=(a(l),n(185)),p=a(c),h=n(179),d=n(188),u=n(178),m=n(189),f=a(m),g=n(190),y=a(g),b=n(191),w=a(b),v=6;t.default=i,e.exports=t.default},function(e,t,n){function a(e){return null===e||void 0===e}function s(e){return!(!e||"object"!=typeof e||"number"!=typeof e.length)&&("function"==typeof e.copy&&"function"==typeof e.slice&&!(e.length>0&&"number"!=typeof e[0]))}function o(e,t,n){var o,p;if(a(e)||a(t))return!1;if(e.prototype!==t.prototype)return!1;if(l(e))return!!l(t)&&(e=i.call(e),t=i.call(t),c(e,t,n));if(s(e)){if(!s(t))return!1;if(e.length!==t.length)return!1;for(o=0;o<e.length;o++)if(e[o]!==t[o])return!1;return!0}try{var h=r(e),d=r(t)}catch(e){return!1}if(h.length!=d.length)return!1;for(h.sort(),d.sort(),o=h.length-1;o>=0;o--)if(h[o]!=d[o])return!1;for(o=h.length-1;o>=0;o--)if(p=h[o],!c(e[p],t[p],n))return!1;return typeof e==typeof t}var i=Array.prototype.slice,r=n(186),l=n(187),c=e.exports=function(e,t,n){return n||(n={}),e===t||(e instanceof Date&&t instanceof Date?e.getTime()===t.getTime():!e||!t||"object"!=typeof e&&"object"!=typeof t?n.strict?e===t:e==t:o(e,t,n))}},function(e,t){function n(e){var t=[];for(var n in e)t.push(n);return t}t=e.exports="function"==typeof Object.keys?Object.keys:n,t.shim=n},function(e,t){function n(e){return"[object Arguments]"==Object.prototype.toString.call(e)}function a(e){return e&&"object"==typeof e&&"number"==typeof e.length&&Object.prototype.hasOwnProperty.call(e,"callee")&&!Object.prototype.propertyIsEnumerable.call(e,"callee")||!1}var s="[object Arguments]"==function(){return Object.prototype.toString.call(arguments)}();t=e.exports=s?n:a,t.supported=n,t.unsupported=a},function(e,t){"use strict";function n(e,t,n){function s(){return r=!0,l?void(p=[].concat(a.call(arguments))):void n.apply(this,arguments)}function o(){if(!r&&(c=!0,!l)){for(l=!0;!r&&i<e&&c;)c=!1,t.call(this,i++,o,s);return l=!1,r?void n.apply(this,p):void(i>=e&&c&&(r=!0,n()))}}var i=0,r=!1,l=!1,c=!1,p=void 0;o()}t.__esModule=!0;var a=Array.prototype.slice;t.loopAsync=n},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(){var e=arguments.length<=0||void 0===arguments[0]?"/":arguments[0],t=arguments.length<=1||void 0===arguments[1]?r.POP:arguments[1],n=arguments.length<=2||void 0===arguments[2]?null:arguments[2],a=arguments.length<=3||void 0===arguments[3]?null:arguments[3];"string"==typeof e&&(e=l.parsePath(e)),"object"==typeof t&&(e=o({},e,{state:t}),t=n||r.POP,n=a);var s=e.pathname||"/",i=e.search||"",c=e.hash||"",p=e.state||null;return{pathname:s,search:i,hash:c,state:p,action:t,key:n}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=n(172),r=(a(i),n(178)),l=n(179);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n){var a=e(t,n);e.length<2&&n(a)}t.__esModule=!0;var o=n(172);a(o);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){return function(){return e.apply(this,arguments)}}t.__esModule=!0;var o=n(172);a(o);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return l.stringify(e).replace(/%20/g,"+")}function o(e){return function(){function t(e){if(null==e.query){var t=e.search;e.query=j(t.substring(1)),e[m]={search:t,searchBase:""}}return e}function n(e,t){var n,a=e[m],s=t?k(t):"";if(!a&&!s)return e;"string"==typeof e&&(e=h.parsePath(e));var o=void 0;o=a&&e.search===a.search?a.searchBase:e.search||"";var r=o;return s&&(r+=(r?"&":"?")+s),i({},e,(n={search:r},n[m]={search:r,searchBase:o},n))}function a(e){return v.listenBefore(function(n,a){p.default(e,t(n),a)})}function o(e){return v.listen(function(n){e(t(n))})}function r(e){v.push(n(e,e.query))}function l(e){v.replace(n(e,e.query))}function c(e,t){return v.createPath(n(e,t||e.query))}function d(e,t){return v.createHref(n(e,t||e.query))}function g(e){for(var a=arguments.length,s=Array(a>1?a-1:0),o=1;o<a;o++)s[o-1]=arguments[o];var i=v.createLocation.apply(v,[n(e,e.query)].concat(s));return e.query&&(i.query=e.query),t(i)}function y(e,t,n){"string"==typeof t&&(t=h.parsePath(t)),r(i({state:e},t,{query:n}))}function b(e,t,n){"string"==typeof t&&(t=h.parsePath(t)),l(i({state:e},t,{query:n}))}var w=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],v=e(w),k=w.stringifyQuery,j=w.parseQueryString;return"function"!=typeof k&&(k=s),"function"!=typeof j&&(j=f),i({},v,{listenBefore:a,listen:o,push:r,replace:l,createPath:c,createHref:d,createLocation:g,pushState:u.default(y,"pushState is deprecated; use push instead"),replaceState:u.default(b,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(172),l=(a(r),n(193)),c=n(190),p=a(c),h=n(179),d=n(191),u=a(d),m="$searchBase",f=l.parse;t.default=o,e.exports=t.default},function(e,t,n){"use strict";var a=n(194);t.extract=function(e){return e.split("?")[1]||""},t.parse=function(e){return"string"!=typeof e?{}:(e=e.trim().replace(/^(\?|#|&)/,""),e?e.split("&").reduce(function(e,t){var n=t.replace(/\+/g," ").split("="),a=n.shift(),s=n.length>0?n.join("="):void 0;return a=decodeURIComponent(a),s=void 0===s?null:decodeURIComponent(s),e.hasOwnProperty(a)?Array.isArray(e[a])?e[a].push(s):e[a]=[e[a],s]:e[a]=s,e},{}):{})},t.stringify=function(e){return e?Object.keys(e).sort().map(function(t){var n=e[t];return void 0===n?"":null===n?t:Array.isArray(n)?n.slice().sort().map(function(e){return a(t)+"="+a(e)}).join("&"):a(t)+"="+a(n)}).filter(function(e){return e.length>0}).join("&"):""}},function(e,t){"use strict";e.exports=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!0;return!1}function o(e,t){function n(t){var n=!(arguments.length<=1||void 0===arguments[1])&&arguments[1],a=arguments.length<=2||void 0===arguments[2]?null:arguments[2],s=void 0;return n&&n!==!0||null!==a?(t={pathname:t,query:n},s=a||!1):(t=e.createLocation(t),s=n),(0,d.default)(t,s,w.location,w.routes,w.params)}function a(e,n){v&&v.location===e?o(v,n):(0,g.default)(t,e,function(t,a){t?n(t):a?o(i({},a,{location:e}),n):n()})}function o(e,t){function n(n,s){return n||s?a(n,s):void(0,m.default)(e,function(n,a){n?t(n):t(null,null,w=i({},e,{components:a}))})}function a(e,n){e?t(e):t(null,n)}var s=(0,c.default)(w,e),o=s.leaveRoutes,r=s.changeRoutes,l=s.enterRoutes;(0,p.runLeaveHooks)(o,w),o.filter(function(e){return l.indexOf(e)===-1}).forEach(f),(0,p.runChangeHooks)(r,w,e,function(t,s){return t||s?a(t,s):void(0,p.runEnterHooks)(l,e,n)})}function r(e){var t=arguments.length<=1||void 0===arguments[1]||arguments[1];return e.__id__||t&&(e.__id__=k++)}function l(e){return e.reduce(function(e,t){return e.push.apply(e,j[r(t)]),e},[])}function h(e,n){(0,g.default)(t,e,function(t,a){if(null==a)return void n();v=i({},a,{location:e});for(var s=l((0,c.default)(w,v).leaveRoutes),o=void 0,r=0,p=s.length;null==o&&r<p;++r)o=s[r](e);n(o)})}function u(){if(w.routes){for(var e=l(w.routes),t=void 0,n=0,a=e.length;"string"!=typeof t&&n<a;++n)t=e[n]();return t}}function f(e){var t=r(e,!1);t&&(delete j[t],s(j)||(x&&(x(),x=null),S&&(S(),S=null)))}function y(t,n){var a=r(t),o=j[a];if(o)o.indexOf(n)===-1&&o.push(n);else{var i=!s(j);j[a]=[n],i&&(x=e.listenBefore(h),e.listenBeforeUnload&&(S=e.listenBeforeUnload(u)))}return function(){var e=j[a];if(e){var s=e.filter(function(e){return e!==n});0===s.length?f(t):j[a]=s}}}function b(t){return e.listen(function(n){w.location===n?t(null,w):a(n,function(n,a,s){n?t(n):a?e.replace(a):s&&t(null,s)})})}var w={},v=void 0,k=1,j=Object.create(null),x=void 0,S=void 0;return{isActive:n,match:a,listenBeforeLeavingRoute:y,listen:b}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.default=o;var r=n(171),l=(a(r),n(196)),c=a(l),p=n(197),h=n(199),d=a(h),u=n(200),m=a(u),f=n(202),g=a(f);e.exports=t.default},function(e,t,n){"use strict";function a(e,t,n){if(!e.path)return!1;var a=(0,o.getParamNames)(e.path);return a.some(function(e){return t.params[e]!==n.params[e]})}function s(e,t){var n=e&&e.routes,s=t.routes,o=void 0,i=void 0,r=void 0;return n?!function(){var l=!1;o=n.filter(function(n){if(l)return!0;var o=s.indexOf(n)===-1||a(n,e,t);return o&&(l=!0),o}),o.reverse(),r=[],i=[],s.forEach(function(e){var t=n.indexOf(e)===-1,a=o.indexOf(e)!==-1;t||a?r.push(e):i.push(e)})}():(o=[],i=[],r=s),{leaveRoutes:o,changeRoutes:i,enterRoutes:r}}t.__esModule=!0;var o=n(174);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n){return function(){for(var a=arguments.length,s=Array(a),o=0;o<a;o++)s[o]=arguments[o];if(e.apply(t,s),e.length<n){var i=s[s.length-1];i()}}}function o(e){return e.reduce(function(e,t){return t.onEnter&&e.push(s(t.onEnter,t,3)),e},[])}function i(e){return e.reduce(function(e,t){return t.onChange&&e.push(s(t.onChange,t,4)),e},[])}function r(e,t,n){function a(e,t,n){return t?void(s={pathname:t,query:n,state:e}):void(s=e)}if(!e)return void n();var s=void 0;(0,h.loopAsync)(e,function(e,n,o){t(e,a,function(e){e||s?o(e,s):n()})},n)}function l(e,t,n){var a=o(e);return r(a.length,function(e,n,s){a[e](t,n,s)},n)}function c(e,t,n,a){var s=i(e);return r(s.length,function(e,a,o){s[e](t,n,a,o)},a)}function p(e,t){for(var n=0,a=e.length;n<a;++n)e[n].onLeave&&e[n].onLeave.call(e[n],t)}t.__esModule=!0,t.runEnterHooks=l,t.runChangeHooks=c,t.runLeaveHooks=p;var h=n(198),d=n(171);a(d)},function(e,t){"use strict";function n(e,t,n){function a(){return i=!0,r?void(c=[].concat(Array.prototype.slice.call(arguments))):void n.apply(this,arguments)}function s(){if(!i&&(l=!0,!r)){for(r=!0;!i&&o<e&&l;)l=!1,t.call(this,o++,s,a);return r=!1,i?void n.apply(this,c):void(o>=e&&l&&(i=!0,n()))}}var o=0,i=!1,r=!1,l=!1,c=void 0;s()}function a(e,t,n){function a(e,t,a){i||(t?(i=!0,n(t)):(o[e]=a,i=++r===s,i&&n(null,o)))}var s=e.length,o=[];if(0===s)return n(null,o);var i=!1,r=0;e.forEach(function(e,n){t(e,n,function(e,t){a(n,e,t)})})}t.__esModule=!0,t.loopAsync=n,t.mapAsync=a},function(e,t,n){"use strict";function a(e,t){if(e==t)return!0;if(null==e||null==t)return!1;if(Array.isArray(e))return Array.isArray(t)&&e.length===t.length&&e.every(function(e,n){return a(e,t[n])});if("object"===("undefined"==typeof e?"undefined":l(e))){for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n))if(void 0===e[n]){if(void 0!==t[n])return!1}else{if(!Object.prototype.hasOwnProperty.call(t,n))return!1;if(!a(e[n],t[n]))return!1}return!0}return String(e)===String(t)}function s(e,t){return"/"!==t.charAt(0)&&(t="/"+t),"/"!==e.charAt(e.length-1)&&(e+="/"),"/"!==t.charAt(t.length-1)&&(t+="/"),t===e}function o(e,t,n){for(var a=e,s=[],o=[],i=0,r=t.length;i<r;++i){var l=t[i],p=l.path||"";if("/"===p.charAt(0)&&(a=e,s=[],o=[]),null!==a&&p){var h=(0,c.matchPattern)(p,a);if(h?(a=h.remainingPathname,s=[].concat(s,h.paramNames),o=[].concat(o,h.paramValues)):a=null,""===a)return s.every(function(e,t){return String(o[t])===String(n[e])})}}return!1}function i(e,t){return null==t?null==e:null==e||a(e,t)}function r(e,t,n,a,r){var l=e.pathname,c=e.query;return null!=n&&("/"!==l.charAt(0)&&(l="/"+l),!!(s(l,n.pathname)||!t&&o(l,a,r))&&i(c,n.query))}t.__esModule=!0;var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t.default=r;var c=n(174);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n){if(t.component||t.components)return void n(null,t.component||t.components);var a=t.getComponent||t.getComponents;if(!a)return void n();var s=e.location,o=(0,l.default)(e,s);a.call(t,o,n)}function o(e,t){(0,i.mapAsync)(e.routes,function(t,n,a){s(e,t,a)},t)}t.__esModule=!0;var i=n(198),r=n(201),l=a(r);t.default=o,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){return o({},e,t)}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.default=s;var i=(n(170),n(171));a(i);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n,a,s){if(e.childRoutes)return[null,e.childRoutes];if(!e.getChildRoutes)return[];var o=!0,i=void 0,l={location:t,params:r(n,a)},c=(0,m.default)(l,t);return e.getChildRoutes(c,function(e,t){return t=!e&&(0,y.createRoutes)(t),o?void(i=[e,t]):void s(e,t)}),o=!1,i}function o(e,t,n,a,s){if(e.indexRoute)s(null,e.indexRoute);else if(e.getIndexRoute){var i={location:t,params:r(n,a)},l=(0,m.default)(i,t);e.getIndexRoute(l,function(e,t){s(e,!e&&(0,y.createRoutes)(t)[0])})}else e.childRoutes?!function(){var i=e.childRoutes.filter(function(e){return!e.path});(0,d.loopAsync)(i.length,function(e,s,r){o(i[e],t,n,a,function(t,n){if(t||n){var a=[i[e]].concat(Array.isArray(n)?n:[n]);r(t,a)}else s()})},function(e,t){s(null,t)})}():s()}function i(e,t,n){return t.reduce(function(e,t,a){var s=n&&n[a];return Array.isArray(e[t])?e[t].push(s):t in e?e[t]=[e[t],s]:e[t]=s,e},e)}function r(e,t){return i({},e,t)}function l(e,t,n,a,i,l){var p=e.path||"";if("/"===p.charAt(0)&&(n=t.pathname,a=[],i=[]),null!==n&&p){try{var d=(0,f.matchPattern)(p,n);d?(n=d.remainingPathname,a=[].concat(a,d.paramNames),i=[].concat(i,d.paramValues)):n=null}catch(e){l(e)}if(""===n){var u=function(){var n={routes:[e],params:r(a,i)};return o(e,t,a,i,function(e,t){if(e)l(e);else{if(Array.isArray(t)){var a;(a=n.routes).push.apply(a,t)}else t&&n.routes.push(t);l(null,n)}}),{v:void 0}}();if("object"===("undefined"==typeof u?"undefined":h(u)))return u.v}}if(null!=n||e.childRoutes){var m=function(s,o){s?l(s):o?c(o,t,function(t,n){t?l(t):n?(n.routes.unshift(e),l(null,n)):l()},n,a,i):l()},g=s(e,t,a,i,m);g&&m.apply(void 0,g)}else l()}function c(e,t,n,a){var s=arguments.length<=4||void 0===arguments[4]?[]:arguments[4],o=arguments.length<=5||void 0===arguments[5]?[]:arguments[5];void 0===a&&("/"!==t.pathname.charAt(0)&&(t=p({},t,{pathname:"/"+t.pathname})),a=t.pathname),(0,d.loopAsync)(e.length,function(n,i,r){l(e[n],t,a,s,o,function(e,t){e||t?r(e,t):i()})},n)}t.__esModule=!0;var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};t.default=c;var d=n(198),u=n(201),m=a(u),f=n(174),g=n(171),y=(a(g),n(168));e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=n(175),r=a(i),l=n(2),c=a(l),p=n(170),h=(a(p),n(204)),d=a(h),u=n(168),m=n(171),f=(a(m),c.default.PropTypes),g=f.array,y=f.func,b=f.object,w=c.default.createClass({displayName:"RouterContext",propTypes:{history:b,router:b.isRequired,location:b.isRequired,routes:g.isRequired,params:b.isRequired,components:g.isRequired,createElement:y.isRequired},getDefaultProps:function(){return{createElement:c.default.createElement}},childContextTypes:{history:b,location:b.isRequired,router:b.isRequired},getChildContext:function(){var e=this.props,t=e.router,n=e.history,a=e.location;return t||(t=o({},n,{setRouteLeaveHook:n.listenBeforeLeavingRoute}),delete t.listenBeforeLeavingRoute),{history:n,location:a,router:t}},createElement:function(e,t){return null==e?null:this.props.createElement(e,t)},render:function(){var e=this,t=this.props,n=t.history,a=t.location,i=t.routes,l=t.params,p=t.components,h=null;return p&&(h=p.reduceRight(function(t,r,c){if(null==r)return t;var p=i[c],h=(0,d.default)(p,l),m={history:n,location:a,params:l,route:p,routeParams:h,routes:i};if((0,u.isReactChildren)(t))m.children=t;else if(t)for(var f in t)Object.prototype.hasOwnProperty.call(t,f)&&(m[f]=t[f]);if("object"===("undefined"==typeof r?"undefined":s(r))){var g={};for(var y in r)Object.prototype.hasOwnProperty.call(r,y)&&(g[y]=e.createElement(r[y],o({key:y},m)));return g}return e.createElement(r,m)},h)),null===h||h===!1||c.default.isValidElement(h)?void 0:(0,r.default)(!1),h}});t.default=w,e.exports=t.default},function(e,t,n){"use strict";function a(e,t){var n={};return e.path?((0,s.getParamNames)(e.path).forEach(function(e){Object.prototype.hasOwnProperty.call(t,e)&&(n[e]=t[e])}),n):n}t.__esModule=!0;var s=n(174);t.default=a,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){return i({},e,{setRouteLeaveHook:t.listenBeforeLeavingRoute,isActive:t.isActive})}function o(e,t){return e=i({},e,t)}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.createRouterObject=s,t.createRoutingHistory=o;var r=n(170);a(r)},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function o(e){return 0===e.button}function i(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function r(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}function l(e,t){var n=t.query,a=t.hash,s=t.state;return n||a||s?{pathname:e,query:n,hash:a,state:s}:e}t.__esModule=!0;var c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p=n(2),h=a(p),d=n(171),u=(a(d),n(175)),m=a(u),f=n(169),g=h.default.PropTypes,y=g.bool,b=g.object,w=g.string,v=g.func,k=g.oneOfType,j=h.default.createClass({
displayName:"Link",contextTypes:{router:f.routerShape},propTypes:{to:k([w,b]),query:b,hash:w,state:b,activeStyle:b,activeClassName:w,onlyActiveOnIndex:y.isRequired,onClick:v,target:w},getDefaultProps:function(){return{onlyActiveOnIndex:!1,style:{}}},handleClick:function(e){if(this.props.onClick&&this.props.onClick(e),!e.defaultPrevented&&(this.context.router?void 0:(0,m.default)(!1),!i(e)&&o(e)&&!this.props.target)){e.preventDefault();var t=this.props,n=t.to,a=t.query,s=t.hash,r=t.state,c=l(n,{query:a,hash:s,state:r});this.context.router.push(c)}},render:function(){var e=this.props,t=e.to,n=e.query,a=e.hash,o=e.state,i=e.activeClassName,p=e.activeStyle,d=e.onlyActiveOnIndex,u=s(e,["to","query","hash","state","activeClassName","activeStyle","onlyActiveOnIndex"]),m=this.context.router;if(m){if(null==t)return h.default.createElement("a",u);var f=l(t,{query:n,hash:a,state:o});u.href=m.createHref(f),(i||null!=p&&!r(p))&&m.isActive(f,d)&&(i&&(u.className?u.className+=" "+i:u.className=i),p&&(u.style=c({},u.style,p)))}return h.default.createElement("a",c({},u,{onClick:this.handleClick}))}});t.default=j,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=n(2),i=a(o),r=n(206),l=a(r),c=i.default.createClass({displayName:"IndexLink",render:function(){return i.default.createElement(l.default,s({},this.props,{onlyActiveOnIndex:!0}))}});t.default=c,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return e.displayName||e.name||"Component"}function o(e,t){var n=t&&t.withRef,a=p.default.createClass({displayName:"WithRouter",contextTypes:{router:u.routerShape},propTypes:{router:u.routerShape},getWrappedInstance:function(){return n?void 0:(0,l.default)(!1),this.wrappedInstance},render:function(){var t=this,a=this.props.router||this.context.router,s=i({},this.props,{router:a});return n&&(s.ref=function(e){t.wrappedInstance=e}),p.default.createElement(e,s)}});return a.displayName="withRouter("+s(e)+")",a.WrappedComponent=e,(0,d.default)(a,e)}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.default=o;var r=n(175),l=a(r),c=n(2),p=a(c),h=n(209),d=a(h),u=n(169);e.exports=t.default},function(e,t){"use strict";var n={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,arguments:!0,arity:!0},s="function"==typeof Object.getOwnPropertySymbols;e.exports=function(e,t,o){if("string"!=typeof t){var i=Object.getOwnPropertyNames(t);s&&(i=i.concat(Object.getOwnPropertySymbols(t)));for(var r=0;r<i.length;++r)if(!(n[i[r]]||a[i[r]]||o&&o[i[r]]))try{e[i[r]]=t[i[r]]}catch(e){}}return e}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(2),o=a(s),i=n(171),r=(a(i),n(175)),l=a(r),c=n(211),p=a(c),h=n(173),d=o.default.PropTypes,u=d.string,m=d.object,f=o.default.createClass({displayName:"IndexRedirect",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=p.default.createRouteFromReactElement(e))}},propTypes:{to:u.isRequired,query:m,state:m,onEnter:h.falsy,children:h.falsy},render:function(){(0,l.default)(!1)}});t.default=f,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(2),o=a(s),i=n(175),r=a(i),l=n(168),c=n(174),p=n(173),h=o.default.PropTypes,d=h.string,u=h.object,m=o.default.createClass({displayName:"Redirect",statics:{createRouteFromReactElement:function(e){var t=(0,l.createRouteFromReactElement)(e);return t.from&&(t.path=t.from),t.onEnter=function(e,n){var a=e.location,s=e.params,o=void 0;if("/"===t.to.charAt(0))o=(0,c.formatPattern)(t.to,s);else if(t.to){var i=e.routes.indexOf(t),r=m.getRoutePattern(e.routes,i-1),l=r.replace(/\/*$/,"/")+t.to;o=(0,c.formatPattern)(l,s)}else o=a.pathname;n({pathname:o,query:t.query||a.query,state:t.state||a.state})},t},getRoutePattern:function(e,t){for(var n="",a=t;a>=0;a--){var s=e[a],o=s.path||"";if(n=o.replace(/\/*$/,"/")+n,0===o.indexOf("/"))break}return"/"+n}},propTypes:{path:d,from:d,to:d.isRequired,query:u,state:u,onEnter:p.falsy,children:p.falsy},render:function(){(0,r.default)(!1)}});t.default=m,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(2),o=a(s),i=n(171),r=(a(i),n(175)),l=a(r),c=n(168),p=n(173),h=o.default.PropTypes.func,d=o.default.createClass({displayName:"IndexRoute",statics:{createRouteFromReactElement:function(e,t){t&&(t.indexRoute=(0,c.createRouteFromReactElement)(e))}},propTypes:{path:p.falsy,component:p.component,components:p.components,getComponent:h,getComponents:h},render:function(){(0,l.default)(!1)}});t.default=d,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(2),o=a(s),i=n(175),r=a(i),l=n(168),c=n(173),p=o.default.PropTypes,h=p.string,d=p.func,u=o.default.createClass({displayName:"Route",statics:{createRouteFromReactElement:l.createRouteFromReactElement},propTypes:{path:h,component:c.component,components:c.components,getComponent:d,getComponents:d},render:function(){(0,r.default)(!1)}});t.default=u,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(171),o=(a(s),n(173)),i={contextTypes:{history:o.history},componentWillMount:function(){this.history=this.context.history}};t.default=i,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(171),o=(a(s),n(2)),i=a(o),r=n(175),l=a(r),c=i.default.PropTypes.object,p={contextTypes:{history:c.isRequired,route:c},propTypes:{route:c},componentDidMount:function(){this.routerWillLeave?void 0:(0,l.default)(!1);var e=this.props.route||this.context.route;e?void 0:(0,l.default)(!1),this._unlistenBeforeLeavingRoute=this.context.history.listenBeforeLeavingRoute(e,this.routerWillLeave)},componentWillUnmount:function(){this._unlistenBeforeLeavingRoute&&this._unlistenBeforeLeavingRoute()}};t.default=p,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(171),o=(a(s),n(2)),i=a(o),r=i.default.PropTypes.object,l={propTypes:{route:r.isRequired},childContextTypes:{route:r.isRequired},getChildContext:function(){return{route:this.props.route}},componentWillMount:function(){}};t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function o(e){return function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=t.routes,a=s(t,["routes"]),o=(0,l.default)(e)(a),r=(0,p.default)(o,n);return i({},o,r)}}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(192),l=a(r),c=n(195),p=a(c),h=n(171);a(h);t.default=o,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(2),o=a(s),i=n(203),r=a(i),l=n(171),c=(a(l),o.default.createClass({displayName:"RoutingContext",componentWillMount:function(){},render:function(){return o.default.createElement(r.default,this.props)}}));t.default=c,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function o(e,t){var n=e.history,a=e.routes,o=e.location,l=s(e,["history","routes","location"]);n||o?void 0:(0,c.default)(!1),n=n?n:(0,h.default)(l);var p=(0,u.default)(n,(0,m.createRoutes)(a)),d=void 0;o?o=n.createLocation(o):d=n.listen(function(e){o=e});var g=(0,f.createRouterObject)(n,p);n=(0,f.createRoutingHistory)(n,p),p.match(o,function(e,a,s){t(e,a&&g.createLocation(a,r.REPLACE),s&&i({},s,{history:n,router:g,matchContext:{history:n,transitionManager:p,router:g}})),d&&d()})}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(178),l=n(175),c=a(l),p=n(220),h=a(p),d=n(195),u=a(d),m=n(168),f=n(205);t.default=o,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){var t=(0,p.default)(e),n=function(){return t},a=(0,i.default)((0,l.default)(n))(e);return a.__v2_compatible__=!0,a}t.__esModule=!0,t.default=s;var o=n(192),i=a(o),r=n(221),l=a(r),c=n(222),p=a(c);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return function(){function t(){if(!k){if(null==v&&r.canUseDOM){var e=document.getElementsByTagName("base")[0],t=e&&e.getAttribute("href");null!=t&&(v=t)}k=!0}}function n(e){return t(),v&&null==e.basename&&(0===e.pathname.indexOf(v)?(e.pathname=e.pathname.substring(v.length),e.basename=v,""===e.pathname&&(e.pathname="/")):e.basename=""),e}function a(e){if(t(),!v)return e;"string"==typeof e&&(e=l.parsePath(e));var n=e.pathname,a="/"===v.slice(-1)?v:v+"/",s="/"===n.charAt(0)?n.slice(1):n,i=a+s;return o({},e,{pathname:i})}function s(e){return w.listenBefore(function(t,a){p.default(e,n(t),a)})}function i(e){return w.listen(function(t){e(n(t))})}function c(e){w.push(a(e))}function h(e){w.replace(a(e))}function u(e){return w.createPath(a(e))}function m(e){return w.createHref(a(e))}function f(e){for(var t=arguments.length,s=Array(t>1?t-1:0),o=1;o<t;o++)s[o-1]=arguments[o];return n(w.createLocation.apply(w,[a(e)].concat(s)))}function g(e,t){"string"==typeof t&&(t=l.parsePath(t)),c(o({state:e},t))}function y(e,t){"string"==typeof t&&(t=l.parsePath(t)),h(o({state:e},t))}var b=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],w=e(b),v=b.basename,k=!1;return o({},w,{listenBefore:s,listen:i,push:c,replace:h,createPath:u,createHref:m,createLocation:f,pushState:d.default(g,"pushState is deprecated; use push instead"),replaceState:d.default(y,"replaceState is deprecated; use replace instead")})}}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=n(172),r=(a(i),n(180)),l=n(179),c=n(190),p=a(c),h=n(191),d=a(h);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return e.filter(function(e){return e.state}).reduce(function(e,t){return e[t.key]=t.state,e},{})}function o(){function e(e,t){y[e]=t}function t(e){return y[e]}function n(){var e=f[g],n=e.basename,a=e.pathname,s=e.search,o=(n||"")+a+(s||""),r=void 0,l=void 0;e.key?(r=e.key,l=t(r)):(r=d.createKey(),l=null,e.key=r);var c=p.parsePath(o);return d.createLocation(i({},c,{state:l}),void 0,r)}function a(e){var t=g+e;return t>=0&&t<f.length}function o(e){if(e){if(!a(e))return;g+=e;var t=n();d.transitionTo(i({},t,{action:h.POP}))}}function r(t){switch(t.action){case h.PUSH:g+=1,g<f.length&&f.splice(g),f.push(t),e(t.key,t.state);break;case h.REPLACE:f[g]=t,e(t.key,t.state)}}var l=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];Array.isArray(l)?l={entries:l}:"string"==typeof l&&(l={entries:[l]});var d=u.default(i({},l,{getCurrentLocation:n,finishTransition:r,saveState:e,go:o})),m=l,f=m.entries,g=m.current;"string"==typeof f?f=[f]:Array.isArray(f)||(f=["/"]),f=f.map(function(e){var t=d.createKey();return"string"==typeof e?{pathname:e,key:t}:"object"==typeof e&&e?i({},e,{key:t}):void c.default(!1)}),null==g?g=f.length-1:g>=0&&g<f.length?void 0:c.default(!1);var y=s(f);return d}t.__esModule=!0;var i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},r=n(172),l=(a(r),n(175)),c=a(l),p=n(179),h=n(178),d=n(184),u=a(d);t.default=o,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return function(t){var n=(0,i.default)((0,l.default)(e))(t);return n.__v2_compatible__=!0,n}}t.__esModule=!0,t.default=s;var o=n(192),i=a(o),r=n(221),l=a(r);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=n(2),i=a(o),r=n(203),l=a(r),c=n(171);a(c);t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=t.map(function(e){return e.renderRouterContext}).filter(Boolean),r=t.map(function(e){return e.renderRouteComponent}).filter(Boolean),c=function(){var e=arguments.length<=0||void 0===arguments[0]?o.createElement:arguments[0];return function(t,n){return r.reduceRight(function(e,t){return t(e,n)},e(t,n))}};return function(e){return a.reduceRight(function(t,n){return n(t,e)},i.default.createElement(l.default,s({},e,{createElement:c(e.createElement)})))}},e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(226),o=a(s),i=n(227),r=a(i);t.default=(0,r.default)(o.default),e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(){function e(e){try{e=e||window.history.state||{}}catch(t){e={}}var t=h.getWindowPath(),n=e,a=n.key,s=void 0;a?s=d.readState(a):(s=null,a=w.createKey(),y&&window.history.replaceState(o({},e,{key:a}),null));var i=c.parsePath(t);return w.createLocation(o({},i,{state:s}),void 0,a)}function t(t){function n(t){void 0!==t.state&&a(e(t.state))}var a=t.transitionTo;return h.addEventListener(window,"popstate",n),function(){h.removeEventListener(window,"popstate",n)}}function n(e){var t=e.basename,n=e.pathname,a=e.search,s=e.hash,o=e.state,i=e.action,r=e.key;if(i!==l.POP){d.saveState(r,o);var c=(t||"")+n+a+s,p={key:r};if(i===l.PUSH){if(b)return window.location.href=c,!1;window.history.pushState(p,null,c)}else{if(b)return window.location.replace(c),!1;window.history.replaceState(p,null,c)}}}function a(e){1===++v&&(k=t(w));var n=w.listenBefore(e);return function(){n(),0===--v&&k()}}function s(e){1===++v&&(k=t(w));var n=w.listen(e);return function(){n(),0===--v&&k()}}function i(e){1===++v&&(k=t(w)),w.registerTransitionHook(e)}function u(e){w.unregisterTransitionHook(e),0===--v&&k()}var f=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];p.canUseDOM?void 0:r.default(!1);var g=f.forceRefresh,y=h.supportsHistory(),b=!y||g,w=m.default(o({},f,{getCurrentLocation:e,finishTransition:n,saveState:d.saveState})),v=0,k=void 0;return o({},w,{listenBefore:a,listen:s,registerTransitionHook:i,unregisterTransitionHook:u})}t.__esModule=!0;var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i=n(175),r=a(i),l=n(178),c=n(179),p=n(180),h=n(181),d=n(182),u=n(183),m=a(u);t.default=s,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0,t.default=function(e){var t=void 0;return i&&(t=(0,o.default)(e)()),t};var s=n(223),o=a(s),i=!("undefined"==typeof window||!window.document||!window.document.createElement);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}t.__esModule=!0;var s=n(177),o=a(s),i=n(227),r=a(i);t.default=(0,r.default)(o.default),e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){return{renderRouterContext:function(t,n){return i.default.createElement(l.default,{shouldUpdateScroll:e,routerProps:n},t)}}}t.__esModule=!0,t.default=s;var o=n(2),i=a(o),r=n(230),l=a(r);e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}t.__esModule=!0;var r=n(2),l=a(r),c=n(231),p=a(c),h={shouldUpdateScroll:l.default.PropTypes.func,routerProps:l.default.PropTypes.object.isRequired,children:l.default.PropTypes.element.isRequired},d={scrollBehavior:l.default.PropTypes.object.isRequired},u=function(e){function t(n,a){s(this,t);var i=o(this,e.call(this,n,a));m.call(i);var r=n.routerProps;return i.scrollBehavior=new p.default(r.router,function(){return i.props.routerProps.location},i.shouldUpdateScroll),i.scrollBehavior.updateScroll(null,r),i}return i(t,e),t.prototype.getChildContext=function(){return{scrollBehavior:this}},t.prototype.componentDidUpdate=function(e){var t=this.props.routerProps,n=e.routerProps;t.location!==n.location&&this.scrollBehavior.updateScroll(n,t)},t.prototype.componentWillUnmount=function(){this.scrollBehavior.stop()},t.prototype.render=function(){return this.props.children},t}(l.default.Component),m=function(){var e=this;this.shouldUpdateScroll=function(t,n){var a=e.props.shouldUpdateScroll;return!a||a.call(e.scrollBehavior,t,n)},this.registerElement=function(t,n,a){e.scrollBehavior.registerElement(t,n,a,e.props.routerProps)},this.unregisterElement=function(t){e.scrollBehavior.unregisterElement(t)}};u.propTypes=h,u.childContextTypes=d,t.default=u,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}t.__esModule=!0;var o=n(232),i=a(o),r=n(234),l=a(r),c=n(235),p=a(c),h=n(237),d=a(h),u=n(238),m=a(u),f=n(178),g=n(182),y=n(175),b=a(y),w="s/",v=2,k=function(){function e(t,n,a){var o=this;s(this,e),this._onWindowScroll=function(){if(null===o._saveWindowPositionHandle&&(o._saveWindowPositionHandle=(0,m.default)(o._saveWindowPosition)),o._windowScrollTarget){var e=o._windowScrollTarget,t=e[0],n=e[1],a=(0,p.default)(window),s=(0,d.default)(window);a===t&&s===n&&(o._windowScrollTarget=null,o._cancelCheckWindowScroll())}},this._saveWindowPosition=function(){o._saveWindowPositionHandle=null,o._savePosition(null,window)},this._checkWindowScrollPosition=function(){if(o._checkWindowScrollHandle=null,o._windowScrollTarget){var e=o._windowScrollTarget,t=e[0],n=e[1];return window.scrollTo(t,n),++o._numWindowScrollAttempts,o._numWindowScrollAttempts>=v?void(o._windowScrollTarget=null):void(o._checkWindowScrollHandle=(0,m.default)(o._checkWindowScrollPosition))}},this._history=t,this._getCurrentLocation=n,this._shouldUpdateScroll=a,"scrollRestoration"in window.history?(this._oldScrollRestoration=window.history.scrollRestoration,window.history.scrollRestoration="manual"):this._oldScrollRestoration=null,this._saveWindowPositionHandle=null,this._checkWindowScrollHandle=null,this._windowScrollTarget=null,this._numWindowScrollAttempts=0,this._scrollElements={},(0,l.default)(window,"scroll",this._onWindowScroll),this._unlistenBefore=t.listenBefore(function(){null!==o._saveWindowPositionHandle&&(m.default.cancel(o._saveWindowPositionHandle),o._saveWindowPositionHandle=null),Object.keys(o._scrollElements).forEach(function(e){o._saveElementPosition(e)})})}return e.prototype.stop=function(){this._oldScrollRestoration&&(window.history.scrollRestoration=this._oldScrollRestoration),(0,i.default)(window,"scroll",this._onWindowScroll),this._cancelCheckWindowScroll(),this._unlistenBefore()},e.prototype.registerElement=function(e,t,n,a){this._scrollElements[e]?(0,b.default)(!1):void 0,this._scrollElements[e]={element:t,shouldUpdateScroll:n},this._updateElementScroll(e,null,a)},e.prototype.unregisterElement=function(e){this._scrollElements[e]?void 0:(0,b.default)(!1),delete this._scrollElements[e]},e.prototype.updateScroll=function(e,t){var n=this;this._updateWindowScroll(e,t),Object.keys(this._scrollElements).forEach(function(a){n._updateElementScroll(a,e,t)})},e.prototype.readPosition=function(e,t){return(0,g.readState)(this._getKey(e,t))},e.prototype._cancelCheckWindowScroll=function(){null!==this._checkWindowScrollHandle&&(m.default.cancel(this._checkWindowScrollHandle),this._checkWindowScrollHandle=null)},e.prototype._saveElementPosition=function(e){var t=this._scrollElements[e].element;this._savePosition(e,t)},e.prototype._savePosition=function(e,t){(0,g.saveState)(this._getKey(this._getCurrentLocation(),e),[(0,p.default)(t),(0,d.default)(t)])},e.prototype._getKey=function(e,t){var n=e.key||this._history.createHref(e);return null==t?""+w+n:""+w+t+"/"+n},e.prototype._updateWindowScroll=function(e,t){this._cancelCheckWindowScroll(),this._windowScrollTarget=this._getScrollTarget(null,this._shouldUpdateScroll,e,t),this._onWindowScroll(),this._windowScrollTarget&&(this._numWindowScrollAttempts=0,this._checkWindowScrollPosition())},e.prototype._updateElementScroll=function(e,t,n){var a=this._scrollElements[e],s=a.element,o=a.shouldUpdateScroll,i=this._getScrollTarget(e,o,t,n);if(i){var r=i[0],l=i[1];(0,p.default)(s,r),(0,d.default)(s,l)}},e.prototype._getScrollTarget=function(e,t,n,a){var s=!t||t.call(this,n,a);if(!s||Array.isArray(s))return s;var o=this._getCurrentLocation();return o.action===f.PUSH?[0,0]:this.readPosition(o,e)||[0,0]},e}();t.default=k,e.exports=t.default},function(e,t,n){"use strict";var a=n(233),s=function(){};a&&(s=function(){return document.addEventListener?function(e,t,n,a){return e.removeEventListener(t,n,a||!1)}:document.attachEvent?function(e,t,n){return e.detachEvent("on"+t,n)}:void 0}()),e.exports=s},function(e,t){"use strict";e.exports=!("undefined"==typeof window||!window.document||!window.document.createElement)},function(e,t,n){"use strict";var a=n(233),s=function(){};a&&(s=function(){return document.addEventListener?function(e,t,n,a){return e.addEventListener(t,n,a||!1)}:document.attachEvent?function(e,t,n){return e.attachEvent("on"+t,n)}:void 0}()),e.exports=s},function(e,t,n){"use strict";var a=n(236);e.exports=function(e,t){var n=a(e);return void 0===t?n?"pageXOffset"in n?n.pageXOffset:n.document.documentElement.scrollLeft:e.scrollLeft:void(n?n.scrollTo(t,"pageYOffset"in n?n.pageYOffset:n.document.documentElement.scrollTop):e.scrollLeft=t)}},function(e,t){"use strict";e.exports=function(e){return e===e.window?e:9===e.nodeType&&(e.defaultView||e.parentWindow)}},function(e,t,n){"use strict";var a=n(236);e.exports=function(e,t){var n=a(e);return void 0===t?n?"pageYOffset"in n?n.pageYOffset:n.document.documentElement.scrollTop:e.scrollTop:void(n?n.scrollTo("pageXOffset"in n?n.pageXOffset:n.document.documentElement.scrollLeft,t):e.scrollTop=t)}},function(e,t,n){"use strict";function a(e){var t=(new Date).getTime(),n=Math.max(0,16-(t-p)),a=setTimeout(e,n);return p=t,a}var s,o=n(233),i=["","webkit","moz","o","ms"],r="clearTimeout",l=a,c=function(e,t){return e+(e?t[0].toUpperCase()+t.substr(1):t)+"AnimationFrame"};o&&i.some(function(e){var t=c(e,"request");if(t in window)return r=c(e,"cancel"),l=function(e){return window[t](e)}});var p=(new Date).getTime();s=function(e){return l(e)},s.cancel=function(e){return window[r](e)},e.exports=s},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){var t=e;return t.default&&(t=t.default),t}var o=n(240),i=a(o),r=n(241),l=a(r),c=n(378),p=a(c),h=n(380);e.exports=function(e,t){var a=(0,p.default)(e,function(e){return"_"!==e.file.name.slice(0,1)}),o=(0,p.default)(e,function(e){return"_template"===e.file.name}),r={path:(0,h.prefixLink)("/"),component:s(n(383)),childRoutes:[],indexRoute:{},pages:a,templates:o},c=null,d={};d.root=r,d["/"]=r;var u=(0,p.default)(e,function(e){return"_template"===e.file.name&&""!==e.file.dirname});u.forEach(function(e){var n=(0,p.default)(u,function(t){return 0===e.requirePath.indexOf(t.file.dirname)});n=(0,l.default)(n,function(e){return e?e.file.dirname.length:0});var r=(0,i.default)(n),c=void 0;r&&(c=d[r.file.dirname]),c||(c=d.root);var m={path:(0,h.prefixLink)(e.templatePath),component:s(t("./"+e.requirePath)),childRoutes:[],indexRoute:{},pages:a,templates:o,parentTemplateFile:r};d[e.file.dirname]=m,c.childRoutes.push(m)});var m=["ipynb","md","rmd","mkd","mkdn","mdwn","mdown","markdown","litcoffee","html","json","yaml","toml"],f=["js","ts","jsx","tsx","cjsx"],g={};return m.forEach(function(e){try{g[e]=n(445)("./"+e)}catch(t){"MODULE_NOT_FOUND"!==t.code&&t.message&&!t.message.match(/^Cannot find module/)&&"undefined"!=typeof console&&console.error("Error requiring wrapper",e,":",t)}}),a.forEach(function(e){var n=e,s=void 0;m.indexOf(n.file.ext)!==-1?(s=g[n.file.ext],n.data=t("./"+n.requirePath)):f.indexOf(n.file.ext)!==-1&&(s=t("./"+n.requirePath),n.data=n.data=void 0===n.data?{}:n.data);var r=(0,p.default)(u,function(e){return 0===n.requirePath.indexOf(e.file.dirname)}),y=(0,l.default)(r,function(e){return e.file.dirname.length}),b=(0,i.default)(y),w=void 0;b&&(w=d[b.file.dirname]),w||(w=d.root),"index"===n.file.name&&(0,h.prefixLink)(n.path)===w.path?w.indexRoute={component:s,page:n,pages:a,templates:o,parentTemplateFile:b}:w.childRoutes.push({path:(0,h.prefixLink)(n.path),component:s,page:n,pages:a,templates:o,parentTemplateFile:b}),n.path.indexOf("/404")!==-1&&(c={path:"*",component:s,page:n,pages:a,templates:o,parentTemplateFile:b})}),c&&r.childRoutes.push(c),r}},function(e,t){function n(e){var t=null==e?0:e.length;return t?e[t-1]:void 0}e.exports=n},function(e,t,n){var a=n(242),s=n(255),o=n(369),i=n(377),r=o(function(e,t){if(null==e)return[];var n=t.length;return n>1&&i(e,t[0],t[1])?t=[]:n>2&&i(t[0],t[1],t[2])&&(t=[t[0]]),s(e,a(t,1),[])});e.exports=r},function(e,t,n){function a(e,t,n,i,r){var l=-1,c=e.length;for(n||(n=o),r||(r=[]);++l<c;){var p=e[l];t>0&&n(p)?t>1?a(p,t-1,n,i,r):s(r,p):i||(r[r.length]=p)}return r}var s=n(243),o=n(244);e.exports=a},function(e,t){function n(e,t){for(var n=-1,a=t.length,s=e.length;++n<a;)e[s+n]=t[n];return e}e.exports=n},function(e,t,n){function a(e){return i(e)||o(e)||!!(r&&e&&e[r])}var s=n(245),o=n(248),i=n(254),r=s?s.isConcatSpreadable:void 0;e.exports=a},function(e,t,n){var a=n(246),s=a.Symbol;e.exports=s},function(e,t,n){var a=n(247),s="object"==typeof self&&self&&self.Object===Object&&self,o=a||s||Function("return this")();e.exports=o},function(e,t){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(t,function(){return this}())},function(e,t,n){var a=n(249),s=n(253),o=Object.prototype,i=o.hasOwnProperty,r=o.propertyIsEnumerable,l=a(function(){return arguments}())?a:function(e){return s(e)&&i.call(e,"callee")&&!r.call(e,"callee")};e.exports=l},function(e,t,n){function a(e){return o(e)&&s(e)==i}var s=n(250),o=n(253),i="[object Arguments]";e.exports=a},function(e,t,n){function a(e){return null==e?void 0===e?l:r:c&&c in Object(e)?o(e):i(e)}var s=n(245),o=n(251),i=n(252),r="[object Null]",l="[object Undefined]",c=s?s.toStringTag:void 0;e.exports=a},function(e,t,n){function a(e){var t=i.call(e,l),n=e[l];try{e[l]=void 0;var a=!0}catch(e){}var s=r.call(e);return a&&(t?e[l]=n:delete e[l]),s}var s=n(245),o=Object.prototype,i=o.hasOwnProperty,r=o.toString,l=s?s.toStringTag:void 0;e.exports=a},function(e,t){function n(e){return s.call(e)}var a=Object.prototype,s=a.toString;e.exports=n},function(e,t){function n(e){return null!=e&&"object"==typeof e}e.exports=n},function(e,t){var n=Array.isArray;e.exports=n},function(e,t,n){function a(e,t,n){var a=-1;t=s(t.length?t:[p],l(o));var h=i(e,function(e,n,o){var i=s(t,function(t){return t(e)});return{criteria:i,index:++a,value:e}});return r(h,function(e,t){return c(e,t,n)})}var s=n(256),o=n(257),i=n(360),r=n(366),l=n(326),c=n(367),p=n(356);e.exports=a},function(e,t){function n(e,t){for(var n=-1,a=null==e?0:e.length,s=Array(a);++n<a;)s[n]=t(e[n],n,e);return s}e.exports=n},function(e,t,n){function a(e){return"function"==typeof e?e:null==e?i:"object"==typeof e?r(e)?o(e[0],e[1]):s(e):l(e)}var s=n(258),o=n(341),i=n(356),r=n(254),l=n(357);e.exports=a},function(e,t,n){function a(e){var t=o(e);return 1==t.length&&t[0][2]?i(t[0][0],t[0][1]):function(n){return n===e||s(n,e,t)}}var s=n(259),o=n(338),i=n(340);e.exports=a},function(e,t,n){function a(e,t,n,a){var l=n.length,c=l,p=!a;if(null==e)return!c;for(e=Object(e);l--;){var h=n[l];if(p&&h[2]?h[1]!==e[h[0]]:!(h[0]in e))return!1}for(;++l<c;){h=n[l];var d=h[0],u=e[d],m=h[1];if(p&&h[2]){if(void 0===u&&!(d in e))return!1}else{var f=new s;if(a)var g=a(u,m,d,e,t,f);if(!(void 0===g?o(m,u,i|r,a,f):g))return!1}}return!0}var s=n(260),o=n(298),i=1,r=2;e.exports=a},function(e,t,n){function a(e){var t=this.__data__=new s(e);this.size=t.size}var s=n(261),o=n(269),i=n(270),r=n(271),l=n(272),c=n(273);a.prototype.clear=o,a.prototype.delete=i,a.prototype.get=r,a.prototype.has=l,a.prototype.set=c,e.exports=a},function(e,t,n){function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}var s=n(262),o=n(263),i=n(266),r=n(267),l=n(268);a.prototype.clear=s,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=r,a.prototype.set=l,e.exports=a},function(e,t){function n(){this.__data__=[],this.size=0}e.exports=n},function(e,t,n){function a(e){var t=this.__data__,n=s(t,e);if(n<0)return!1;var a=t.length-1;return n==a?t.pop():i.call(t,n,1),--this.size,!0}var s=n(264),o=Array.prototype,i=o.splice;e.exports=a},function(e,t,n){function a(e,t){for(var n=e.length;n--;)if(s(e[n][0],t))return n;return-1}var s=n(265);e.exports=a},function(e,t){function n(e,t){return e===t||e!==e&&t!==t}e.exports=n},function(e,t,n){function a(e){var t=this.__data__,n=s(t,e);return n<0?void 0:t[n][1]}var s=n(264);e.exports=a},function(e,t,n){function a(e){return s(this.__data__,e)>-1}var s=n(264);e.exports=a},function(e,t,n){function a(e,t){var n=this.__data__,a=s(n,e);return a<0?(++this.size,n.push([e,t])):n[a][1]=t,this}var s=n(264);e.exports=a},function(e,t,n){function a(){this.__data__=new s,this.size=0}var s=n(261);e.exports=a},function(e,t){function n(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}e.exports=n},function(e,t){function n(e){return this.__data__.get(e)}e.exports=n},function(e,t){function n(e){return this.__data__.has(e)}e.exports=n},function(e,t,n){function a(e,t){var n=this.__data__;if(n instanceof s){var a=n.__data__;if(!o||a.length<r-1)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}var s=n(261),o=n(274),i=n(283),r=200;e.exports=a},function(e,t,n){var a=n(275),s=n(246),o=a(s,"Map");e.exports=o},function(e,t,n){function a(e,t){var n=o(e,t);return s(n)?n:void 0}var s=n(276),o=n(282);e.exports=a},function(e,t,n){function a(e){if(!i(e)||o(e))return!1;var t=s(e)?m:c;return t.test(r(e))}var s=n(277),o=n(279),i=n(278),r=n(281),l=/[\\^$.*+?()[\]{}|]/g,c=/^\[object .+?Constructor\]$/,p=Function.prototype,h=Object.prototype,d=p.toString,u=h.hasOwnProperty,m=RegExp("^"+d.call(u).replace(l,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=a},function(e,t,n){function a(e){if(!o(e))return!1;var t=s(e);return t==r||t==l||t==i||t==c}var s=n(250),o=n(278),i="[object AsyncFunction]",r="[object Function]",l="[object GeneratorFunction]",c="[object Proxy]";
e.exports=a},function(e,t){function n(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}e.exports=n},function(e,t,n){function a(e){return!!o&&o in e}var s=n(280),o=function(){var e=/[^.]+$/.exec(s&&s.keys&&s.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();e.exports=a},function(e,t,n){var a=n(246),s=a["__core-js_shared__"];e.exports=s},function(e,t){function n(e){if(null!=e){try{return s.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var a=Function.prototype,s=a.toString;e.exports=n},function(e,t){function n(e,t){return null==e?void 0:e[t]}e.exports=n},function(e,t,n){function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}var s=n(284),o=n(292),i=n(295),r=n(296),l=n(297);a.prototype.clear=s,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=r,a.prototype.set=l,e.exports=a},function(e,t,n){function a(){this.size=0,this.__data__={hash:new s,map:new(i||o),string:new s}}var s=n(285),o=n(261),i=n(274);e.exports=a},function(e,t,n){function a(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var a=e[t];this.set(a[0],a[1])}}var s=n(286),o=n(288),i=n(289),r=n(290),l=n(291);a.prototype.clear=s,a.prototype.delete=o,a.prototype.get=i,a.prototype.has=r,a.prototype.set=l,e.exports=a},function(e,t,n){function a(){this.__data__=s?s(null):{},this.size=0}var s=n(287);e.exports=a},function(e,t,n){var a=n(275),s=a(Object,"create");e.exports=s},function(e,t){function n(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}e.exports=n},function(e,t,n){function a(e){var t=this.__data__;if(s){var n=t[e];return n===o?void 0:n}return r.call(t,e)?t[e]:void 0}var s=n(287),o="__lodash_hash_undefined__",i=Object.prototype,r=i.hasOwnProperty;e.exports=a},function(e,t,n){function a(e){var t=this.__data__;return s?void 0!==t[e]:i.call(t,e)}var s=n(287),o=Object.prototype,i=o.hasOwnProperty;e.exports=a},function(e,t,n){function a(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=s&&void 0===t?o:t,this}var s=n(287),o="__lodash_hash_undefined__";e.exports=a},function(e,t,n){function a(e){var t=s(this,e).delete(e);return this.size-=t?1:0,t}var s=n(293);e.exports=a},function(e,t,n){function a(e,t){var n=e.__data__;return s(t)?n["string"==typeof t?"string":"hash"]:n.map}var s=n(294);e.exports=a},function(e,t){function n(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}e.exports=n},function(e,t,n){function a(e){return s(this,e).get(e)}var s=n(293);e.exports=a},function(e,t,n){function a(e){return s(this,e).has(e)}var s=n(293);e.exports=a},function(e,t,n){function a(e,t){var n=s(this,e),a=n.size;return n.set(e,t),this.size+=n.size==a?0:1,this}var s=n(293);e.exports=a},function(e,t,n){function a(e,t,n,i,r){return e===t||(null==e||null==t||!o(e)&&!o(t)?e!==e&&t!==t:s(e,t,n,i,a,r))}var s=n(299),o=n(253);e.exports=a},function(e,t,n){function a(e,t,n,a,g,b){var w=c(e),v=c(t),k=w?m:l(e),j=v?m:l(t);k=k==u?f:k,j=j==u?f:j;var x=k==f,S=j==f,I=k==j;if(I&&p(e)){if(!p(t))return!1;w=!0,x=!1}if(I&&!x)return b||(b=new s),w||h(e)?o(e,t,n,a,g,b):i(e,t,k,n,a,g,b);if(!(n&d)){var T=x&&y.call(e,"__wrapped__"),_=S&&y.call(t,"__wrapped__");if(T||_){var C=T?e.value():e,M=_?t.value():t;return b||(b=new s),g(C,M,n,a,b)}}return!!I&&(b||(b=new s),r(e,t,n,a,g,b))}var s=n(260),o=n(300),i=n(306),r=n(310),l=n(333),c=n(254),p=n(319),h=n(323),d=1,u="[object Arguments]",m="[object Array]",f="[object Object]",g=Object.prototype,y=g.hasOwnProperty;e.exports=a},function(e,t,n){function a(e,t,n,a,c,p){var h=n&r,d=e.length,u=t.length;if(d!=u&&!(h&&u>d))return!1;var m=p.get(e);if(m&&p.get(t))return m==t;var f=-1,g=!0,y=n&l?new s:void 0;for(p.set(e,t),p.set(t,e);++f<d;){var b=e[f],w=t[f];if(a)var v=h?a(w,b,f,t,e,p):a(b,w,f,e,t,p);if(void 0!==v){if(v)continue;g=!1;break}if(y){if(!o(t,function(e,t){if(!i(y,t)&&(b===e||c(b,e,n,a,p)))return y.push(t)})){g=!1;break}}else if(b!==w&&!c(b,w,n,a,p)){g=!1;break}}return p.delete(e),p.delete(t),g}var s=n(301),o=n(304),i=n(305),r=1,l=2;e.exports=a},function(e,t,n){function a(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new s;++t<n;)this.add(e[t])}var s=n(283),o=n(302),i=n(303);a.prototype.add=a.prototype.push=o,a.prototype.has=i,e.exports=a},function(e,t){function n(e){return this.__data__.set(e,a),this}var a="__lodash_hash_undefined__";e.exports=n},function(e,t){function n(e){return this.__data__.has(e)}e.exports=n},function(e,t){function n(e,t){for(var n=-1,a=null==e?0:e.length;++n<a;)if(t(e[n],n,e))return!0;return!1}e.exports=n},function(e,t){function n(e,t){return e.has(t)}e.exports=n},function(e,t,n){function a(e,t,n,a,s,x,I){switch(n){case j:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case k:return!(e.byteLength!=t.byteLength||!x(new o(e),new o(t)));case d:case u:case g:return i(+e,+t);case m:return e.name==t.name&&e.message==t.message;case y:case w:return e==t+"";case f:var T=l;case b:var _=a&p;if(T||(T=c),e.size!=t.size&&!_)return!1;var C=I.get(e);if(C)return C==t;a|=h,I.set(e,t);var M=r(T(e),T(t),a,s,x,I);return I.delete(e),M;case v:if(S)return S.call(e)==S.call(t)}return!1}var s=n(245),o=n(307),i=n(265),r=n(300),l=n(308),c=n(309),p=1,h=2,d="[object Boolean]",u="[object Date]",m="[object Error]",f="[object Map]",g="[object Number]",y="[object RegExp]",b="[object Set]",w="[object String]",v="[object Symbol]",k="[object ArrayBuffer]",j="[object DataView]",x=s?s.prototype:void 0,S=x?x.valueOf:void 0;e.exports=a},function(e,t,n){var a=n(246),s=a.Uint8Array;e.exports=s},function(e,t){function n(e){var t=-1,n=Array(e.size);return e.forEach(function(e,a){n[++t]=[a,e]}),n}e.exports=n},function(e,t){function n(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}e.exports=n},function(e,t,n){function a(e,t,n,a,i,l){var c=n&o,p=s(e),h=p.length,d=s(t),u=d.length;if(h!=u&&!c)return!1;for(var m=h;m--;){var f=p[m];if(!(c?f in t:r.call(t,f)))return!1}var g=l.get(e);if(g&&l.get(t))return g==t;var y=!0;l.set(e,t),l.set(t,e);for(var b=c;++m<h;){f=p[m];var w=e[f],v=t[f];if(a)var k=c?a(v,w,f,t,e,l):a(w,v,f,e,t,l);if(!(void 0===k?w===v||i(w,v,n,a,l):k)){y=!1;break}b||(b="constructor"==f)}if(y&&!b){var j=e.constructor,x=t.constructor;j!=x&&"constructor"in e&&"constructor"in t&&!("function"==typeof j&&j instanceof j&&"function"==typeof x&&x instanceof x)&&(y=!1)}return l.delete(e),l.delete(t),y}var s=n(311),o=1,i=Object.prototype,r=i.hasOwnProperty;e.exports=a},function(e,t,n){function a(e){return s(e,i,o)}var s=n(312),o=n(313),i=n(316);e.exports=a},function(e,t,n){function a(e,t,n){var a=t(e);return o(e)?a:s(a,n(e))}var s=n(243),o=n(254);e.exports=a},function(e,t,n){var a=n(314),s=n(315),o=Object.prototype,i=o.propertyIsEnumerable,r=Object.getOwnPropertySymbols,l=r?function(e){return null==e?[]:(e=Object(e),a(r(e),function(t){return i.call(e,t)}))}:s;e.exports=l},function(e,t){function n(e,t){for(var n=-1,a=null==e?0:e.length,s=0,o=[];++n<a;){var i=e[n];t(i,n,e)&&(o[s++]=i)}return o}e.exports=n},function(e,t){function n(){return[]}e.exports=n},function(e,t,n){function a(e){return i(e)?s(e):o(e)}var s=n(317),o=n(328),i=n(332);e.exports=a},function(e,t,n){function a(e,t){var n=i(e),a=!n&&o(e),p=!n&&!a&&r(e),d=!n&&!a&&!p&&c(e),u=n||a||p||d,m=u?s(e.length,String):[],f=m.length;for(var g in e)!t&&!h.call(e,g)||u&&("length"==g||p&&("offset"==g||"parent"==g)||d&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||l(g,f))||m.push(g);return m}var s=n(318),o=n(248),i=n(254),r=n(319),l=n(322),c=n(323),p=Object.prototype,h=p.hasOwnProperty;e.exports=a},function(e,t){function n(e,t){for(var n=-1,a=Array(e);++n<e;)a[n]=t(n);return a}e.exports=n},function(e,t,n){(function(e){var a=n(246),s=n(321),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,r=i&&i.exports===o,l=r?a.Buffer:void 0,c=l?l.isBuffer:void 0,p=c||s;e.exports=p}).call(t,n(320)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children=[],e.webpackPolyfill=1),e}},function(e,t){function n(){return!1}e.exports=n},function(e,t){function n(e,t){return t=null==t?a:t,!!t&&("number"==typeof e||s.test(e))&&e>-1&&e%1==0&&e<t}var a=9007199254740991,s=/^(?:0|[1-9]\d*)$/;e.exports=n},function(e,t,n){var a=n(324),s=n(326),o=n(327),i=o&&o.isTypedArray,r=i?s(i):a;e.exports=r},function(e,t,n){function a(e){return i(e)&&o(e.length)&&!!E[s(e)]}var s=n(250),o=n(325),i=n(253),r="[object Arguments]",l="[object Array]",c="[object Boolean]",p="[object Date]",h="[object Error]",d="[object Function]",u="[object Map]",m="[object Number]",f="[object Object]",g="[object RegExp]",y="[object Set]",b="[object String]",w="[object WeakMap]",v="[object ArrayBuffer]",k="[object DataView]",j="[object Float32Array]",x="[object Float64Array]",S="[object Int8Array]",I="[object Int16Array]",T="[object Int32Array]",_="[object Uint8Array]",C="[object Uint8ClampedArray]",M="[object Uint16Array]",A="[object Uint32Array]",E={};E[j]=E[x]=E[S]=E[I]=E[T]=E[_]=E[C]=E[M]=E[A]=!0,E[r]=E[l]=E[v]=E[c]=E[k]=E[p]=E[h]=E[d]=E[u]=E[m]=E[f]=E[g]=E[y]=E[b]=E[w]=!1,e.exports=a},function(e,t){function n(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=a}var a=9007199254740991;e.exports=n},function(e,t){function n(e){return function(t){return e(t)}}e.exports=n},function(e,t,n){(function(e){var a=n(247),s="object"==typeof t&&t&&!t.nodeType&&t,o=s&&"object"==typeof e&&e&&!e.nodeType&&e,i=o&&o.exports===s,r=i&&a.process,l=function(){try{return r&&r.binding&&r.binding("util")}catch(e){}}();e.exports=l}).call(t,n(320)(e))},function(e,t,n){function a(e){if(!s(e))return o(e);var t=[];for(var n in Object(e))r.call(e,n)&&"constructor"!=n&&t.push(n);return t}var s=n(329),o=n(330),i=Object.prototype,r=i.hasOwnProperty;e.exports=a},function(e,t){function n(e){var t=e&&e.constructor,n="function"==typeof t&&t.prototype||a;return e===n}var a=Object.prototype;e.exports=n},function(e,t,n){var a=n(331),s=a(Object.keys,Object);e.exports=s},function(e,t){function n(e,t){return function(n){return e(t(n))}}e.exports=n},function(e,t,n){function a(e){return null!=e&&o(e.length)&&!s(e)}var s=n(277),o=n(325);e.exports=a},function(e,t,n){var a=n(334),s=n(274),o=n(335),i=n(336),r=n(337),l=n(250),c=n(281),p="[object Map]",h="[object Object]",d="[object Promise]",u="[object Set]",m="[object WeakMap]",f="[object DataView]",g=c(a),y=c(s),b=c(o),w=c(i),v=c(r),k=l;(a&&k(new a(new ArrayBuffer(1)))!=f||s&&k(new s)!=p||o&&k(o.resolve())!=d||i&&k(new i)!=u||r&&k(new r)!=m)&&(k=function(e){var t=l(e),n=t==h?e.constructor:void 0,a=n?c(n):"";if(a)switch(a){case g:return f;case y:return p;case b:return d;case w:return u;case v:return m}return t}),e.exports=k},function(e,t,n){var a=n(275),s=n(246),o=a(s,"DataView");e.exports=o},function(e,t,n){var a=n(275),s=n(246),o=a(s,"Promise");e.exports=o},function(e,t,n){var a=n(275),s=n(246),o=a(s,"Set");e.exports=o},function(e,t,n){var a=n(275),s=n(246),o=a(s,"WeakMap");e.exports=o},function(e,t,n){function a(e){for(var t=o(e),n=t.length;n--;){var a=t[n],i=e[a];t[n]=[a,i,s(i)]}return t}var s=n(339),o=n(316);e.exports=a},function(e,t,n){function a(e){return e===e&&!s(e)}var s=n(278);e.exports=a},function(e,t){function n(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}e.exports=n},function(e,t,n){function a(e,t){return r(e)&&l(t)?c(p(e),t):function(n){var a=o(n,e);return void 0===a&&a===t?i(n,e):s(t,a,h|d)}}var s=n(298),o=n(342),i=n(353),r=n(345),l=n(339),c=n(340),p=n(352),h=1,d=2;e.exports=a},function(e,t,n){function a(e,t,n){var a=null==e?void 0:s(e,t);return void 0===a?n:a}var s=n(343);e.exports=a},function(e,t,n){function a(e,t){t=s(t,e);for(var n=0,a=t.length;null!=e&&n<a;)e=e[o(t[n++])];return n&&n==a?e:void 0}var s=n(344),o=n(352);e.exports=a},function(e,t,n){function a(e,t){return s(e)?e:o(e,t)?[e]:i(r(e))}var s=n(254),o=n(345),i=n(347),r=n(350);e.exports=a},function(e,t,n){function a(e,t){if(s(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!o(e))||(r.test(e)||!i.test(e)||null!=t&&e in Object(t))}var s=n(254),o=n(346),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,r=/^\w*$/;e.exports=a},function(e,t,n){function a(e){return"symbol"==typeof e||o(e)&&s(e)==i}var s=n(250),o=n(253),i="[object Symbol]";e.exports=a},function(e,t,n){var a=n(348),s=/^\./,o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,r=a(function(e){var t=[];return s.test(e)&&t.push(""),e.replace(o,function(e,n,a,s){t.push(a?s.replace(i,"$1"):n||e)}),t});e.exports=r},function(e,t,n){function a(e){var t=s(e,function(e){return n.size===o&&n.clear(),e}),n=t.cache;return t}var s=n(349),o=500;e.exports=a},function(e,t,n){function a(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(o);var n=function(){var a=arguments,s=t?t.apply(this,a):a[0],o=n.cache;if(o.has(s))return o.get(s);var i=e.apply(this,a);return n.cache=o.set(s,i)||o,i};return n.cache=new(a.Cache||s),n}var s=n(283),o="Expected a function";a.Cache=s,e.exports=a},function(e,t,n){function a(e){return null==e?"":s(e)}var s=n(351);e.exports=a},function(e,t,n){function a(e){if("string"==typeof e)return e;if(i(e))return o(e,a)+"";if(r(e))return p?p.call(e):"";var t=e+"";return"0"==t&&1/e==-l?"-0":t}var s=n(245),o=n(256),i=n(254),r=n(346),l=1/0,c=s?s.prototype:void 0,p=c?c.toString:void 0;e.exports=a},function(e,t,n){function a(e){if("string"==typeof e||s(e))return e;var t=e+"";return"0"==t&&1/e==-o?"-0":t}var s=n(346),o=1/0;e.exports=a},function(e,t,n){function a(e,t){return null!=e&&o(e,t,s)}var s=n(354),o=n(355);e.exports=a},function(e,t){function n(e,t){return null!=e&&t in Object(e)}e.exports=n},function(e,t,n){function a(e,t,n){t=s(t,e);for(var a=-1,p=t.length,h=!1;++a<p;){var d=c(t[a]);if(!(h=null!=e&&n(e,d)))break;e=e[d]}return h||++a!=p?h:(p=null==e?0:e.length,!!p&&l(p)&&r(d,p)&&(i(e)||o(e)))}var s=n(344),o=n(248),i=n(254),r=n(322),l=n(325),c=n(352);e.exports=a},function(e,t){function n(e){return e}e.exports=n},function(e,t,n){function a(e){return i(e)?s(r(e)):o(e)}var s=n(358),o=n(359),i=n(345),r=n(352);e.exports=a},function(e,t){function n(e){return function(t){return null==t?void 0:t[e]}}e.exports=n},function(e,t,n){function a(e){return function(t){return s(t,e)}}var s=n(343);e.exports=a},function(e,t,n){function a(e,t){var n=-1,a=o(e)?Array(e.length):[];return s(e,function(e,s,o){a[++n]=t(e,s,o)}),a}var s=n(361),o=n(332);e.exports=a},function(e,t,n){var a=n(362),s=n(365),o=s(a);e.exports=o},function(e,t,n){function a(e,t){return e&&s(e,t,o)}var s=n(363),o=n(316);e.exports=a},function(e,t,n){var a=n(364),s=a();e.exports=s},function(e,t){function n(e){return function(t,n,a){for(var s=-1,o=Object(t),i=a(t),r=i.length;r--;){var l=i[e?r:++s];if(n(o[l],l,o)===!1)break}return t}}e.exports=n},function(e,t,n){function a(e,t){return function(n,a){if(null==n)return n;if(!s(n))return e(n,a);for(var o=n.length,i=t?o:-1,r=Object(n);(t?i--:++i<o)&&a(r[i],i,r)!==!1;);return n}}var s=n(332);e.exports=a},function(e,t){function n(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}e.exports=n},function(e,t,n){function a(e,t,n){for(var a=-1,o=e.criteria,i=t.criteria,r=o.length,l=n.length;++a<r;){var c=s(o[a],i[a]);if(c){if(a>=l)return c;var p=n[a];return c*("desc"==p?-1:1)}}return e.index-t.index}var s=n(368);e.exports=a},function(e,t,n){function a(e,t){if(e!==t){var n=void 0!==e,a=null===e,o=e===e,i=s(e),r=void 0!==t,l=null===t,c=t===t,p=s(t);if(!l&&!p&&!i&&e>t||i&&r&&c&&!l&&!p||a&&r&&c||!n&&c||!o)return 1;if(!a&&!i&&!p&&e<t||p&&n&&o&&!a&&!i||l&&n&&o||!r&&o||!c)return-1}return 0}var s=n(346);e.exports=a},function(e,t,n){function a(e,t){return i(o(e,t,s),e+"")}var s=n(356),o=n(370),i=n(372);e.exports=a},function(e,t,n){function a(e,t,n){return t=o(void 0===t?e.length-1:t,0),function(){for(var a=arguments,i=-1,r=o(a.length-t,0),l=Array(r);++i<r;)l[i]=a[t+i];i=-1;for(var c=Array(t+1);++i<t;)c[i]=a[i];return c[t]=n(l),s(e,this,c)}}var s=n(371),o=Math.max;e.exports=a},function(e,t){function n(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}e.exports=n},function(e,t,n){var a=n(373),s=n(376),o=s(a);e.exports=o},function(e,t,n){var a=n(374),s=n(375),o=n(356),i=s?function(e,t){return s(e,"toString",{configurable:!0,enumerable:!1,value:a(t),writable:!0})}:o;e.exports=i},function(e,t){function n(e){return function(){return e}}e.exports=n},function(e,t,n){var a=n(275),s=function(){try{var e=a(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=s},function(e,t){function n(e){var t=0,n=0;return function(){var i=o(),r=s-(i-n);if(n=i,r>0){if(++t>=a)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var a=800,s=16,o=Date.now;e.exports=n},function(e,t,n){function a(e,t,n){if(!r(n))return!1;var a=typeof t;return!!("number"==a?o(n)&&i(t,n.length):"string"==a&&t in n)&&s(n[t],e)}var s=n(265),o=n(332),i=n(322),r=n(278);e.exports=a},function(e,t,n){function a(e,t){var n=r(e)?s:o;return n(e,i(t,3))}var s=n(314),o=n(379),i=n(257),r=n(254);e.exports=a},function(e,t,n){function a(e,t){var n=[];return s(e,function(e,a,s){t(e,a,s)&&n.push(e)}),n}var s=n(361);e.exports=a},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e){var t=/^\s*data:([a-z]+\/[a-z0-9\-\+]+(;[a-z\-]+=[a-z0-9\-]+)?)?(;base64)?,[a-z0-9!\$&',\(\)\*\+,;=\-\._~:@\/\?%\s]*\s*$/i;return!!e.match(t)}var o=n(381),i=a(o),r=n(382),l=n(175),c=a(l),p=function(e){if(null!==r.config.linkPrefix){var t="\n    You're trying to build your site with links prefixed\n    but you haven't set 'linkPrefix' in your config.toml.\n    ";return(0,c.default)((0,i.default)(r.config.linkPrefix),t),s(e)?e:"/"!==e.slice(0,1)?r.config.linkPrefix+"/"+e:""+r.config.linkPrefix+e}return e};e.exports={prefixLink:p}},function(e,t,n){function a(e){return"string"==typeof e||!o(e)&&i(e)&&s(e)==r}var s=n(250),o=n(254),i=n(253),r="[object String]";e.exports=a},function(e,t){e.exports={config:{blogTitle:"benmccormick.org",authorName:"Ben McCormick",linkPrefix:""},relativePath:"",pages:[{file:{root:"",dir:"",base:"_template.js",ext:"js",name:"_template",extname:".js",basename:"_template.js",dirname:"",stem:"_template",path:"_template.js",absolute:"/Users/ben/Blog/benmccormickorg/_template.js",isAbsolute:!1},requirePath:"_template.js",templatePath:"//",data:{}},{file:{root:"",dir:"",base:"404.md",ext:"md",name:"404",extname:".md",basename:"404.md",dirname:"",stem:"404",path:"404.md",absolute:"/Users/ben/Blog/benmccormickorg/404.md",isAbsolute:!1},requirePath:"404.md",path:"/404.html",data:{path:"/404.html",hideFooter:!0}},{file:{root:"",dir:"",base:"archive.js",ext:"js",name:"archive",extname:".js",basename:"archive.js",dirname:"",stem:"archive",path:"archive.js",absolute:"/Users/ben/Blog/benmccormickorg/archive.js",isAbsolute:!1},requirePath:"archive.js",path:"/archive/",data:{}},{file:{root:"",dir:"",base:"categories.json",ext:"json",name:"categories",extname:".json",basename:"categories.json",dirname:"",stem:"categories",path:"categories.json",absolute:"/Users/ben/Blog/benmccormickorg/categories.json",isAbsolute:!1},requirePath:"categories.json",path:"/categories/",data:{}},{file:{root:"",dir:"category",base:"frameworks.js",ext:"js",name:"frameworks",extname:".js",basename:"frameworks.js",dirname:"category",stem:"frameworks",path:"category/frameworks.js",absolute:"/Users/ben/Blog/benmccormickorg/category/frameworks.js",isAbsolute:!1},requirePath:"category/frameworks.js",path:"/category/frameworks/",data:{}},{file:{root:"",dir:"category",base:"javascript.js",ext:"js",name:"javascript",extname:".js",basename:"javascript.js",dirname:"category",stem:"javascript",path:"category/javascript.js",absolute:"/Users/ben/Blog/benmccormickorg/category/javascript.js",isAbsolute:!1},requirePath:"category/javascript.js",path:"/category/javascript/",data:{}},{file:{root:"",dir:"category",base:"meta.js",ext:"js",name:"meta",extname:".js",basename:"meta.js",dirname:"category",stem:"meta",path:"category/meta.js",absolute:"/Users/ben/Blog/benmccormickorg/category/meta.js",isAbsolute:!1},requirePath:"category/meta.js",path:"/category/meta/",data:{}},{file:{root:"",dir:"category",base:"opinion.js",ext:"js",name:"opinion",extname:".js",basename:"opinion.js",dirname:"category",stem:"opinion",path:"category/opinion.js",absolute:"/Users/ben/Blog/benmccormickorg/category/opinion.js",isAbsolute:!1},requirePath:"category/opinion.js",path:"/category/opinion/",data:{}},{file:{root:"",dir:"category",base:"platform.js",ext:"js",name:"platform",extname:".js",basename:"platform.js",dirname:"category",stem:"platform",path:"category/platform.js",absolute:"/Users/ben/Blog/benmccormickorg/category/platform.js",isAbsolute:!1},requirePath:"category/platform.js",path:"/category/platform/",data:{}},{file:{root:"",dir:"category",base:"reviews.js",ext:"js",name:"reviews",extname:".js",basename:"reviews.js",dirname:"category",stem:"reviews",path:"category/reviews.js",absolute:"/Users/ben/Blog/benmccormickorg/category/reviews.js",isAbsolute:!1},requirePath:"category/reviews.js",path:"/category/reviews/",data:{}},{file:{root:"",dir:"category",base:"software-productivity.js",ext:"js",name:"software-productivity",extname:".js",basename:"software-productivity.js",dirname:"category",stem:"software-productivity",path:"category/software-productivity.js",absolute:"/Users/ben/Blog/benmccormickorg/category/software-productivity.js",isAbsolute:!1},requirePath:"category/software-productivity.js",path:"/category/software-productivity/",data:{}},{file:{root:"",dir:"category",base:"tools.js",ext:"js",name:"tools",extname:".js",basename:"tools.js",dirname:"category",stem:"tools",path:"category/tools.js",absolute:"/Users/ben/Blog/benmccormickorg/category/tools.js",isAbsolute:!1},requirePath:"category/tools.js",path:"/category/tools/",data:{}},{file:{root:"",dir:"",base:"index.js",ext:"js",name:"index",extname:".js",basename:"index.js",dirname:"",stem:"index",path:"index.js",absolute:"/Users/ben/Blog/benmccormickorg/index.js",isAbsolute:!1},requirePath:"index.js",path:"/",data:{}},{file:{root:"",dir:"",base:"manifest.json",ext:"json",name:"manifest",extname:".json",basename:"manifest.json",dirname:"",stem:"manifest",path:"manifest.json",absolute:"/Users/ben/Blog/benmccormickorg/manifest.json",isAbsolute:!1},requirePath:"manifest.json",path:"/manifest/",data:{}},{file:{root:"",dir:"pages",base:"a-note-to-recruiters.md",ext:"md",name:"a-note-to-recruiters",extname:".md",basename:"a-note-to-recruiters.md",dirname:"pages",stem:"a-note-to-recruiters",path:"pages/a-note-to-recruiters.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/a-note-to-recruiters.md",isAbsolute:!1},requirePath:"pages/a-note-to-recruiters.md",path:"/a-note-to-recruiters/",data:{title:"A note to recruiters",date:"2015-06-04 13:42:18+00:00",layout:"page",path:"/a-note-to-recruiters",hideFooter:!0,pageViews:"1"}},{file:{root:"",dir:"pages",base:"about.md",ext:"md",name:"about",extname:".md",basename:"about.md",dirname:"pages",stem:"about",path:"pages/about.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/about.md",isAbsolute:!1},requirePath:"pages/about.md",path:"/about/",data:{title:"About Me",layout:"page",path:"/about",hideFooter:!0}},{file:{root:"",dir:"pages",base:"learning-vim-in-2014.md",ext:"md",name:"learning-vim-in-2014",extname:".md",basename:"learning-vim-in-2014.md",dirname:"pages",stem:"learning-vim-in-2014",path:"pages/learning-vim-in-2014.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/learning-vim-in-2014.md",isAbsolute:!1},requirePath:"pages/learning-vim-in-2014.md",path:"/learning-vim-in-2014/",data:{title:"Learning Vim in 2014",layout:"page",path:"/learning-vim-in-2014",key:"learning-vim",description:"A series of beginner level articles on Vim",hideFooter:!0}},{file:{root:"",dir:"pages",base:"marionette-explained.md",ext:"md",name:"marionette-explained",extname:".md",basename:"marionette-explained.md",dirname:"pages",stem:"marionette-explained",path:"pages/marionette-explained.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/marionette-explained.md",isAbsolute:!1},requirePath:"pages/marionette-explained.md",path:"/marionette-explained/",data:{title:"Marionette: Explained",layout:"page",path:"/marionette-explained",key:"mn-series",description:"A series of posts explaining Marionette.js",hideFooter:!0}},{file:{root:"",dir:"pages",base:"readinglist.md",ext:"md",name:"readinglist",extname:".md",basename:"readinglist.md",dirname:"pages",stem:"readinglist",path:"pages/readinglist.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/readinglist.md",isAbsolute:!1},requirePath:"pages/readinglist.md",path:"/readinglist/",data:{title:"Recommended Reading For Developers",layout:"page",path:"/readinglist",hideFooter:!0}},{file:{root:"",dir:"pages",base:"speaking.md",ext:"md",name:"speaking",extname:".md",basename:"speaking.md",dirname:"pages",stem:"speaking",path:"pages/speaking.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/speaking.md",isAbsolute:!1},requirePath:"pages/speaking.md",path:"/speaking/",data:{title:"Speaking",layout:"page",path:"/speaking",description:"A list of my past talks at meetups and conferences",keywords:"speaking talks meetups conferences",hideFooter:!0}},{file:{root:"",dir:"pages",base:"subscribe.md",ext:"md",name:"subscribe",extname:".md",basename:"subscribe.md",dirname:"pages",stem:"subscribe",path:"pages/subscribe.md",absolute:"/Users/ben/Blog/benmccormickorg/pages/subscribe.md",isAbsolute:!1},requirePath:"pages/subscribe.md",path:"/subscribe/",data:{title:"",layout:"page",path:"/subscribe",hideFooter:!0}},{file:{root:"",dir:"posts",base:"2015-roundup-2.md",ext:"md",name:"2015-roundup-2",extname:".md",basename:"2015-roundup-2.md",dirname:"posts",stem:"2015-roundup-2",path:"posts/2015-roundup-2.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/2015-roundup-2.md",isAbsolute:!1},requirePath:"posts/2015-roundup-2.md",path:"/2015/12/31/2015-roundup-2/",data:{title:"2015 Roundup",date:"2015-12-31 05:56:04+00:00",layout:"post",path:"/2015/12/31/2015-roundup-2",category:"meta",description:"A look back at benmccormick.org in 2015",pageViews:"381",last30pageViews:"3"}},{file:{root:"",dir:"posts",base:"2016-roundup.md",ext:"md",name:"2016-roundup",extname:".md",basename:"2016-roundup.md",dirname:"posts",stem:"2016-roundup",path:"posts/2016-roundup.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/2016-roundup.md",isAbsolute:!1},requirePath:"posts/2016-roundup.md",path:"/2016/12/31/2016-roundup/",data:{title:"2016 Roundup",date:"2016-12-30 02:15:00+00:00",layout:"post",path:"/2016/12/31/2016-roundup",category:"meta",description:"A look back at benmccormick.org in 2016",pageViews:"212",last30pageViews:"14"}},{file:{root:"",dir:"posts",base:"90-done-halfway-there.md",ext:"md",name:"90-done-halfway-there",extname:".md",basename:"90-done-halfway-there.md",dirname:"posts",stem:"90-done-halfway-there",path:"posts/90-done-halfway-there.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/90-done-halfway-there.md",isAbsolute:!1},requirePath:"posts/90-done-halfway-there.md",path:"/2013/06/09/90-done-halfway-there/",data:{title:"90% Done, Halfway There",date:"2013-06-09 18:45:00+00:00",layout:"post",path:"/2013/06/09/90-done-halfway-there",description:"A post on the difficulties of estimating development projects",category:"opinion",pageViews:"301",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"a-look-at-ack.md",ext:"md",name:"a-look-at-ack",extname:".md",basename:"a-look-at-ack.md",dirname:"posts",stem:"a-look-at-ack",path:"posts/a-look-at-ack.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/a-look-at-ack.md",isAbsolute:!1},requirePath:"posts/a-look-at-ack.md",path:"/2013/11/25/a-look-at-ack/",data:{title:"A look at Ack",date:"2013-11-25 23:50:00+00:00",layout:"post",path:"/2013/11/25/a-look-at-ack",category:"tools",key:"look-at-ack",description:"An introduction to using Ack for file searching",pageViews:"5465",last30pageViews:"38"}},{file:{root:"",dir:"posts",base:"a-new-look.md",ext:"md",name:"a-new-look",extname:".md",basename:"a-new-look.md",dirname:"posts",stem:"a-new-look",path:"posts/a-new-look.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/a-new-look.md",isAbsolute:!1},requirePath:"posts/a-new-look.md",path:"/2013/04/06/a-new-look/",data:{title:"A New Look",date:"2013-04-06 17:00:00+00:00",layout:"post",path:"/2013/04/06/a-new-look",description:"A clean redesign for benmccormick.org",category:"meta",pageViews:"109",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"a-quick-review-of-google-inbox.md",ext:"md",name:"a-quick-review-of-google-inbox",extname:".md",basename:"a-quick-review-of-google-inbox.md",dirname:"posts",stem:"a-quick-review-of-google-inbox",path:"posts/a-quick-review-of-google-inbox.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/a-quick-review-of-google-inbox.md",isAbsolute:!1},requirePath:"posts/a-quick-review-of-google-inbox.md",path:"/2014/11/04/a-quick-review-of-google-inbox/",data:{title:"A Quick Review Of Google Inbox",date:"2014-11-04 03:45:30+00:00",layout:"post",description:"A product review of Google's new email UI",path:"/2014/11/04/a-quick-review-of-google-inbox",category:"reviews",pageViews:"357",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"ack-tips.md",ext:"md",name:"ack-tips",extname:".md",basename:"ack-tips.md",dirname:"posts",stem:"ack-tips",path:"posts/ack-tips.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/ack-tips.md",isAbsolute:!1},requirePath:"posts/ack-tips.md",path:"/2016/04/30/ack-tips/",data:{title:"Ack Tips",date:"2016-04-30 15:48:25+00:00",layout:"post",path:"/2016/04/30/ack-tips",description:"A set of tips for using Ack, a command line search tool",keywords:"ack, command line, grep, ag",category:"tools",readNext:"learning-vim,look-at-ack,interesting-atom",pageViews:"572",last30pageViews:"14"}},{file:{root:"",dir:"posts",base:"all-about-angular-2-0.md",ext:"md",name:"all-about-angular-2-0",extname:".md",basename:"all-about-angular-2-0.md",dirname:"posts",stem:"all-about-angular-2-0",path:"posts/all-about-angular-2-0.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/all-about-angular-2-0.md",isAbsolute:!1},requirePath:"posts/all-about-angular-2-0.md",path:"/2014/11/08/all-about-angular-2-0/",data:{title:"Thoughts on Angular 2.0",date:"2014-11-08 19:24:09+00:00",layout:"post",path:"/2014/11/08/all-about-angular-2-0",category:"frameworks",description:"An early look at the next version of Angular",pageViews:"765",last30pageViews:"2"}},{file:{root:"",dir:"posts",base:"alternative-javascript.md",ext:"md",name:"alternative-javascript",extname:".md",basename:"alternative-javascript.md",dirname:"posts",stem:"alternative-javascript",path:"posts/alternative-javascript.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/alternative-javascript.md",isAbsolute:!1},requirePath:"posts/alternative-javascript.md",path:"/2014/11/24/alternative-javascript/",data:{title:"Alternative JavaScript",date:"2014-11-24 03:58:00+00:00",layout:"post",path:"/2014/11/24/alternative-javascript",description:"A non-comprehensive run-through of the various compile to JS languages out there",category:"javascript",pageViews:"4502",last30pageViews:"23"}},{file:{root:"",dir:"posts",base:"awesome-software-trello.md",ext:"md",name:"awesome-software-trello",extname:".md",basename:"awesome-software-trello.md",dirname:"posts",stem:"awesome-software-trello",path:"posts/awesome-software-trello.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/awesome-software-trello.md",isAbsolute:!1},requirePath:"posts/awesome-software-trello.md",path:"/2012/12/20/awesome-software-trello/",data:{title:"Awesome Software: Trello",date:"2012-12-20 12:00:00+00:00",layout:"post",path:"/2012/12/20/awesome-software-trello",category:"reviews",description:"A quick review of the project management app Trello",pageViews:"116",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"backbone-and-es6-classes-revisited.md",
ext:"md",name:"backbone-and-es6-classes-revisited",extname:".md",basename:"backbone-and-es6-classes-revisited.md",dirname:"posts",stem:"backbone-and-es6-classes-revisited",path:"posts/backbone-and-es6-classes-revisited.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/backbone-and-es6-classes-revisited.md",isAbsolute:!1},requirePath:"posts/backbone-and-es6-classes-revisited.md",path:"/2015/07/06/backbone-and-es6-classes-revisited/",data:{title:"Backbone and ES6 Classes Revisited",date:"2015-07-06 11:22:22+00:00",layout:"post",path:"/2015/07/06/backbone-and-es6-classes-revisited",description:"A second look at using ES6 classes with Backbone",keywords:"ES6, Backbone, classes, JavaScript, decorators",category:"frameworks",key:"bb-es6-2",readNext:"bb-es6-1,backbone-devs-react,mn-series",pageViews:"14438",last30pageViews:"362"}},{file:{root:"",dir:"posts",base:"backbone-radio.md",ext:"md",name:"backbone-radio",extname:".md",basename:"backbone-radio.md",dirname:"posts",stem:"backbone-radio",path:"posts/backbone-radio.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/backbone-radio.md",isAbsolute:!1},requirePath:"posts/backbone-radio.md",path:"/2015/01/26/backbone-radio/",data:{title:"Building Modular Web Apps With Backbone.Radio",date:"2015-01-26 12:00:00+00:00",layout:"post",path:"/2015/01/26/backbone-radio",description:"An overview of using Backbone.Radio in Marionette apps",keywords:"Backbone, JavaScript, Backbone Radio, Marionette, messaging",category:"frameworks",key:"bb-radio",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"20022",last30pageViews:"155"}},{file:{root:"",dir:"posts",base:"bayesian-witch-hunt.md",ext:"md",name:"bayesian-witch-hunt",extname:".md",basename:"bayesian-witch-hunt.md",dirname:"posts",stem:"bayesian-witch-hunt",path:"posts/bayesian-witch-hunt.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/bayesian-witch-hunt.md",isAbsolute:!1},requirePath:"posts/bayesian-witch-hunt.md",path:"/2012/11/09/bayesian-witch-hunt/",data:{title:"Bayesian Witch Hunt",date:"2012-11-09 12:00:00+00:00",layout:"post",path:"/2012/11/09/bayesian-witch-hunt",category:"opinion",description:"A nerd tribute from a friend",pageViews:"85",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"blendconf-2013-takeaways-from-a-very-human-tech-conference.md",ext:"md",name:"blendconf-2013-takeaways-from-a-very-human-tech-conference",extname:".md",basename:"blendconf-2013-takeaways-from-a-very-human-tech-conference.md",dirname:"posts",stem:"blendconf-2013-takeaways-from-a-very-human-tech-conference",path:"posts/blendconf-2013-takeaways-from-a-very-human-tech-conference.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/blendconf-2013-takeaways-from-a-very-human-tech-conference.md",isAbsolute:!1},requirePath:"posts/blendconf-2013-takeaways-from-a-very-human-tech-conference.md",path:"/2013/09/10/blendconf-2013-takeaways-from-a-very-human-tech-conference/",data:{title:"BlendConf 2013: Takeaways From A Very Human Tech Conference",date:"2013-09-10 20:00:00+00:00",layout:"post",path:"/2013/09/10/blendconf-2013-takeaways-from-a-very-human-tech-conference",category:"software-productivity",description:"My takeaways from BlendConf",pageViews:"18",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"book-review-effective-javascript.md",ext:"md",name:"book-review-effective-javascript",extname:".md",basename:"book-review-effective-javascript.md",dirname:"posts",stem:"book-review-effective-javascript",path:"posts/book-review-effective-javascript.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/book-review-effective-javascript.md",isAbsolute:!1},requirePath:"posts/book-review-effective-javascript.md",path:"/2013/01/06/book-review-effective-javascript/",data:{title:"Book Review: Effective Javascript",date:"2013-01-06 22:00:00+00:00",layout:"post",path:"/2013/01/06/book-review-effective-javascript",description:"A book review of Effective Javascript by David Herman",keywords:"JavaScript, David Herman, Book Review, Effective JavaScript",key:"effective-js",category:"reviews",pageViews:"1622",last30pageViews:"2"}},{file:{root:"",dir:"posts",base:"book-review-javascript-testing-with-jasmine.md",ext:"md",name:"book-review-javascript-testing-with-jasmine",extname:".md",basename:"book-review-javascript-testing-with-jasmine.md",dirname:"posts",stem:"book-review-javascript-testing-with-jasmine",path:"posts/book-review-javascript-testing-with-jasmine.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/book-review-javascript-testing-with-jasmine.md",isAbsolute:!1},requirePath:"posts/book-review-javascript-testing-with-jasmine.md",path:"/2013/04/23/book-review-javascript-testing-with-jasmine/",data:{title:"Book Review: Javascript Testing with Jasmine",date:"2013-04-23 20:30:00+00:00",layout:"post",path:"/2013/04/23/book-review-javascript-testing-with-jasmine",description:"A book review of JavaScript Testing with Jasmine by Evan Hahn",keywords:"JavaScript Book Review JavaScript Testing with Jasmine",category:"reviews",pageViews:"102",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"book-review-talking-with-tech-leads.md",ext:"md",name:"book-review-talking-with-tech-leads",extname:".md",basename:"book-review-talking-with-tech-leads.md",dirname:"posts",stem:"book-review-talking-with-tech-leads",path:"posts/book-review-talking-with-tech-leads.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/book-review-talking-with-tech-leads.md",isAbsolute:!1},requirePath:"posts/book-review-talking-with-tech-leads.md",path:"/2015/06/15/book-review-talking-with-tech-leads/",data:{title:"Book Review: Talking with Tech Leads",date:"2015-06-15 11:30:44+00:00",layout:"post",path:"/2015/06/15/book-review-talking-with-tech-leads",description:"A book review of Talking with Tech Leads",keywords:"Book Review, Tech Leads",category:"reviews",pageViews:"1138",last30pageViews:"3"}},{file:{root:"",dir:"posts",base:"book-review-user-centered-design.md",ext:"md",name:"book-review-user-centered-design",extname:".md",basename:"book-review-user-centered-design.md",dirname:"posts",stem:"book-review-user-centered-design",path:"posts/book-review-user-centered-design.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/book-review-user-centered-design.md",isAbsolute:!1},requirePath:"posts/book-review-user-centered-design.md",path:"/2013/08/12/book-review-user-centered-design/",data:{title:"Book Review: User-Centered Design",date:"2013-08-12 15:15:00+00:00",layout:"post",path:"/2013/08/12/book-review-user-centered-design",description:"A book review of User-Centered Design by Travis Lowdermilk",keywords:"Book Review User-Centered Design",category:"reviews",pageViews:"25",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"building-complex-layouts-with-marionette-js.md",ext:"md",name:"building-complex-layouts-with-marionette-js",extname:".md",basename:"building-complex-layouts-with-marionette-js.md",dirname:"posts",stem:"building-complex-layouts-with-marionette-js",path:"posts/building-complex-layouts-with-marionette-js.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/building-complex-layouts-with-marionette-js.md",isAbsolute:!1},requirePath:"posts/building-complex-layouts-with-marionette-js.md",path:"/2014/12/22/building-complex-layouts-with-marionette-js/",data:{title:"Building Complex Layouts With Marionette.js",date:"2014-12-22 04:43:47+00:00",layout:"post",path:"/2014/12/22/building-complex-layouts-with-marionette-js",description:"How to build complex UIs with Marionette.js",keywords:"Marionette, Backbone, UI, Architecture, JavaScript",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"24061",last30pageViews:"241"}},{file:{root:"",dir:"posts",base:"career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md",ext:"md",name:"career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance",extname:".md",basename:"career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md",dirname:"posts",stem:"career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance",path:"posts/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md",isAbsolute:!1},requirePath:"posts/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md",path:"/2013/01/25/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance/",data:{title:"Career Fairs: How To Not Get Hired (And How To Give Yourself A Chance)",date:"2013-01-25 19:30:00+00:00",layout:"post",path:"/2013/01/25/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance",description:"What to do when you want a job",category:"opinion",pageViews:"70",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"cleaning-my-digital-house.md",ext:"md",name:"cleaning-my-digital-house",extname:".md",basename:"cleaning-my-digital-house.md",dirname:"posts",stem:"cleaning-my-digital-house",path:"posts/cleaning-my-digital-house.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/cleaning-my-digital-house.md",isAbsolute:!1},requirePath:"posts/cleaning-my-digital-house.md",path:"/2012/12/29/cleaning-my-digital-house/",data:{title:"Cleaning My Digital House",date:"2012-12-29 01:00:00+00:00",layout:"post",path:"/2012/12/29/cleaning-my-digital-house",description:"Organizing what software I use",category:"meta",pageViews:"184",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"coffeescript-is-great.md",ext:"md",name:"coffeescript-is-great",extname:".md",basename:"coffeescript-is-great.md",dirname:"posts",stem:"coffeescript-is-great",path:"posts/coffeescript-is-great.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/coffeescript-is-great.md",isAbsolute:!1},requirePath:"posts/coffeescript-is-great.md",path:"/2013/02/23/coffeescript-is-great/",data:{title:"Coffeescript Is Great",date:"2013-02-23 23:50:00+00:00",layout:"post",path:"/2013/02/23/coffeescript-is-great",category:"javascript",pageViews:"1024",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"come-build-with-me.md",ext:"md",name:"come-build-with-me",extname:".md",basename:"come-build-with-me.md",dirname:"posts",stem:"come-build-with-me",path:"posts/come-build-with-me.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/come-build-with-me.md",isAbsolute:!1},requirePath:"posts/come-build-with-me.md",path:"/2014/12/18/come-build-with-me/",data:{title:"Come Build With Me",date:"2014-12-18 14:00:00+00:00",layout:"post",path:"/2014/12/18/come-build-with-me",description:"A call for Software Developers to come join me at Windsor Circle",category:"meta",pageViews:"697",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"component-based-development.md",ext:"md",name:"component-based-development",extname:".md",basename:"component-based-development.md",dirname:"posts",stem:"component-based-development",path:"posts/component-based-development.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/component-based-development.md",isAbsolute:!1},requirePath:"posts/component-based-development.md",path:"/2014/08/07/component-based-development/",data:{title:"Component Based Development",date:"2014-08-07 11:30:00+00:00",layout:"post",path:"/2014/08/07/component-based-development",category:"platform",key:"component-based-dev",description:"Exploring the Web Components spec, and the future of web architecture",readNext:"custom-elements-example",pageViews:"8824",last30pageViews:"50"}},{file:{root:"",dir:"posts",base:"creating-a-build-system-for-a-coffeescript-project-with-ant.md",ext:"md",name:"creating-a-build-system-for-a-coffeescript-project-with-ant",extname:".md",basename:"creating-a-build-system-for-a-coffeescript-project-with-ant.md",dirname:"posts",stem:"creating-a-build-system-for-a-coffeescript-project-with-ant",path:"posts/creating-a-build-system-for-a-coffeescript-project-with-ant.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/creating-a-build-system-for-a-coffeescript-project-with-ant.md",isAbsolute:!1},requirePath:"posts/creating-a-build-system-for-a-coffeescript-project-with-ant.md",path:"/2013/03/23/creating-a-build-system-for-a-coffeescript-project-with-ant/",data:{title:"Creating a Build System For a Coffeescript Project with Ant",date:"2013-03-23 16:23:00+00:00",layout:"post",path:"/2013/03/23/creating-a-build-system-for-a-coffeescript-project-with-ant",description:"Using Ant to build my coffeescript projects",category:"tools",pageViews:"421",last30pageViews:"8"}},{file:{root:"",dir:"posts",base:"custom-elements-by-example.md",ext:"md",name:"custom-elements-by-example",extname:".md",basename:"custom-elements-by-example.md",dirname:"posts",stem:"custom-elements-by-example",path:"posts/custom-elements-by-example.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/custom-elements-by-example.md",isAbsolute:!1},requirePath:"posts/custom-elements-by-example.md",path:"/2014/08/28/custom-elements-by-example/",data:{title:"Custom Elements By Example",date:"2014-08-28 12:33:00+00:00",layout:"post",path:"/2014/08/28/custom-elements-by-example",category:"platform",description:"Explaining Custom Elements and the Web Components spec",key:"custom-elements-example",readNext:"component-based-dev",pageViews:"2961",last30pageViews:"103"}},{file:{root:"",dir:"posts",base:"customer-culture-revisited.md",ext:"md",name:"customer-culture-revisited",extname:".md",basename:"customer-culture-revisited.md",dirname:"posts",stem:"customer-culture-revisited",path:"posts/customer-culture-revisited.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/customer-culture-revisited.md",isAbsolute:!1},requirePath:"posts/customer-culture-revisited.md",path:"/2013/06/08/customer-culture-revisited/",data:{title:"Customer Culture Revisited",date:"2013-06-08 18:45:00+00:00",layout:"post",path:"/2013/06/08/customer-culture-revisited",category:"opinion",description:"Talking about how Microsoft culture impacts their products",pageViews:"96",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"digging-into-knockout-builds.md",ext:"md",name:"digging-into-knockout-builds",extname:".md",basename:"digging-into-knockout-builds.md",dirname:"posts",stem:"digging-into-knockout-builds",path:"posts/digging-into-knockout-builds.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/digging-into-knockout-builds.md",isAbsolute:!1},requirePath:"posts/digging-into-knockout-builds.md",path:"/2014/01/06/digging-into-knockout-builds/",data:{title:"Digging Into Knockout Builds",date:"2014-01-06 23:30:00+00:00",layout:"post",path:"/2014/01/06/digging-into-knockout-builds",category:"frameworks",description:"An in depth look at how KnockoutJS is organized",readNext:"revertible-observables,effective-js,productive-js-dev",pageViews:"471",last30pageViews:"9"}},{file:{root:"",dir:"posts",base:"digging-into-react-choosing-component-styles.md",ext:"md",name:"digging-into-react-choosing-component-styles",extname:".md",basename:"digging-into-react-choosing-component-styles.md",dirname:"posts",stem:"digging-into-react-choosing-component-styles",path:"posts/digging-into-react-choosing-component-styles.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/digging-into-react-choosing-component-styles.md",isAbsolute:!1},requirePath:"posts/digging-into-react-choosing-component-styles.md",path:"/2016/05/02/digging-into-react-choosing-component-styles/",data:{title:"Digging Into React: Choosing Component Styles",date:"2016-05-02 02:32:36+00:00",layout:"post",path:"/2016/05/02/digging-into-react-choosing-component-styles",description:"An examination of the various styles for defining React components",keywords:"JavaScript, React, Component, createClass, class, functional component",category:"frameworks",key:"react-component-styles",readNext:"jest-first,backbone-devs-react,callbacks-to-promises",pageViews:"1766",last30pageViews:"21"}},{file:{root:"",dir:"posts",base:"discovering-vim.md",ext:"md",name:"discovering-vim",extname:".md",basename:"discovering-vim.md",dirname:"posts",stem:"discovering-vim",path:"posts/discovering-vim.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/discovering-vim.md",isAbsolute:!1},requirePath:"posts/discovering-vim.md",path:"/2014/06/02/discovering-vim/",data:{title:"Discovering Vim",date:"2014-06-02 22:00:00+00:00",layout:"post",path:"/2014/06/02/discovering-vim",category:"tools",description:"The benefits I've found learning Vim",readNext:"learning-vim,interesting-atom,vim-files",pageViews:"956",last30pageViews:"10"}},{file:{root:"",dir:"posts",base:"es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md",ext:"md",name:"es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning",extname:".md",basename:"es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md",dirname:"posts",stem:"es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning",path:"posts/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md",isAbsolute:!1},requirePath:"posts/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md",path:"/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/",data:{title:"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?",date:"2015-09-14 03:11:34+00:00",layout:"post",path:"/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning",description:"A summary of the naming conventions for the JavaScript language",keywords:"JavaScript, ECMAScript, ES6, ES7, ES5",category:"javascript",readNext:"callbacks-to-promises,clean-higher-order-functions,rauchg-on-es6",key:"ecma-explanation",pageViews:"130067",last30pageViews:"9011"}},{file:{root:"",dir:"posts",base:"es6-classes-and-backbone-js.md",ext:"md",name:"es6-classes-and-backbone-js",extname:".md",basename:"es6-classes-and-backbone-js.md",dirname:"posts",stem:"es6-classes-and-backbone-js",path:"posts/es6-classes-and-backbone-js.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/es6-classes-and-backbone-js.md",isAbsolute:!1},requirePath:"posts/es6-classes-and-backbone-js.md",path:"/2015/04/07/es6-classes-and-backbone-js/",data:{title:"Why Backbone.js and ES6 Classes Don't Mix",date:"2015-04-07 03:19:44+00:00",layout:"post",path:"/2015/04/07/es6-classes-and-backbone-js",description:"A rundown of the challenges of using ES6 classes in Backbone",keywords:"Backbone, ES6, JavaScript, classes",category:"frameworks",key:"bb-es6-1",readNext:"bb-es6-2,backbone-eco,backbone-devs-react",pageViews:"20374",last30pageViews:"413"}},{file:{root:"",dir:"posts",base:"es6-patterns-clean-higher-order-functions.md",ext:"md",name:"es6-patterns-clean-higher-order-functions",extname:".md",basename:"es6-patterns-clean-higher-order-functions.md",dirname:"posts",stem:"es6-patterns-clean-higher-order-functions",path:"posts/es6-patterns-clean-higher-order-functions.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/es6-patterns-clean-higher-order-functions.md",isAbsolute:!1},requirePath:"posts/es6-patterns-clean-higher-order-functions.md",path:"/2015/11/30/es6-patterns-clean-higher-order-functions/",data:{title:"ES6 Patterns: Clean Higher Order Functions",date:"2015-11-30 05:06:03+00:00",layout:"post",path:"/2015/11/30/es6-patterns-clean-higher-order-functions",category:"javascript",description:"A quick tip for clean functional syntax in ES6",key:"clean-higher-order-functions",readNext:"ecma-explanation,callbacks-to-promises,what-are-hocs",pageViews:"4080",last30pageViews:"221"}},{file:{root:"",dir:"posts",base:"es6-patterns-converting-callbacks-to-promises.md",ext:"md",name:"es6-patterns-converting-callbacks-to-promises",extname:".md",basename:"es6-patterns-converting-callbacks-to-promises.md",dirname:"posts",stem:"es6-patterns-converting-callbacks-to-promises",path:"posts/es6-patterns-converting-callbacks-to-promises.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/es6-patterns-converting-callbacks-to-promises.md",isAbsolute:!1},requirePath:"posts/es6-patterns-converting-callbacks-to-promises.md",path:"/2015/12/30/es6-patterns-converting-callbacks-to-promises/",data:{title:"ES6 Patterns: Converting Callbacks to Promises",date:"2015-12-30 03:30:47+00:00",layout:"post",path:"/2015/12/30/es6-patterns-converting-callbacks-to-promises",category:"javascript",description:"How to convert a callback driven API to a Promise-based one",key:"callbacks-to-promises",readNext:"ecma-explanation,clean-higher-order-functions,backbone-devs-react",pageViews:"24241",last30pageViews:"2360"}},{file:{root:"",dir:"posts",base:"evergreen-browsers.md",ext:"md",name:"evergreen-browsers",extname:".md",basename:"evergreen-browsers.md",dirname:"posts",stem:"evergreen-browsers",path:"posts/evergreen-browsers.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/evergreen-browsers.md",isAbsolute:!1},requirePath:"posts/evergreen-browsers.md",path:"/2013/06/11/evergreen-browsers/",data:{title:"Evergreen Browsers",date:"2013-06-11 18:45:00+00:00",layout:"post",path:"/2013/06/11/evergreen-browsers",description:"A look at the future of browsers",category:"platform",pageViews:"214",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"explaining-javascript-closures.md",ext:"md",name:"explaining-javascript-closures",extname:".md",basename:"explaining-javascript-closures.md",dirname:"posts",stem:"explaining-javascript-closures",path:"posts/explaining-javascript-closures.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/explaining-javascript-closures.md",isAbsolute:!1},requirePath:"posts/explaining-javascript-closures.md",path:"/2013/01/08/explaining-javascript-closures/",data:{title:"Explaining Javascript: Closures",date:"2013-01-08 23:30:00+00:00",layout:"post",path:"/2013/01/08/explaining-javascript-closures",category:"javascript",description:"Diving into one of JavaScripts more confusing concepts",key:"closures",pageViews:"164",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"explaining-javascript-object-oriented-programming.md",ext:"md",name:"explaining-javascript-object-oriented-programming",extname:".md",basename:"explaining-javascript-object-oriented-programming.md",dirname:"posts",stem:"explaining-javascript-object-oriented-programming",path:"posts/explaining-javascript-object-oriented-programming.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/explaining-javascript-object-oriented-programming.md",isAbsolute:!1},requirePath:"posts/explaining-javascript-object-oriented-programming.md",path:"/2013/01/12/explaining-javascript-object-oriented-programming/",data:{title:"Explaining Javascript: Object Oriented Programming",date:"2013-01-12 03:05:00+00:00",layout:"post",path:"/2013/01/12/explaining-javascript-object-oriented-programming",category:"javascript",description:"A look at Object Oriented programming principles in JavaScript",pageViews:"1006",last30pageViews:"21"}},{file:{root:"",dir:"posts",base:"how-i-use-stack-overflow.md",ext:"md",name:"how-i-use-stack-overflow",extname:".md",basename:"how-i-use-stack-overflow.md",dirname:"posts",stem:"how-i-use-stack-overflow",path:"posts/how-i-use-stack-overflow.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/how-i-use-stack-overflow.md",isAbsolute:!1},requirePath:"posts/how-i-use-stack-overflow.md",path:"/2013/06/11/how-i-use-stack-overflow/",data:{title:"How I Use Stack Overflow",date:"2013-06-11 21:19:00+00:00",layout:"post",path:"/2013/06/11/how-i-use-stack-overflow",category:"tools",description:"Getting the most out of Stack Overflow",pageViews:"235",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"how-i-work-refactoring.md",ext:"md",name:"how-i-work-refactoring",extname:".md",basename:"how-i-work-refactoring.md",dirname:"posts",stem:"how-i-work-refactoring",path:"posts/how-i-work-refactoring.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/how-i-work-refactoring.md",isAbsolute:!1},requirePath:"posts/how-i-work-refactoring.md",path:"/2013/02/03/how-i-work-refactoring/",data:{title:"How I Work:  Refactoring",date:"2013-02-03 21:00:00+00:00",layout:"post",path:"/2013/02/03/how-i-work-refactoring",category:"software-productivity",description:"Describing the process that goes behind refactoring code",pageViews:"505",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"how-jquery-works-an-introduction.md",ext:"md",name:"how-jquery-works-an-introduction",extname:".md",basename:"how-jquery-works-an-introduction.md",dirname:"posts",stem:"how-jquery-works-an-introduction",path:"posts/how-jquery-works-an-introduction.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/how-jquery-works-an-introduction.md",isAbsolute:!1},requirePath:"posts/how-jquery-works-an-introduction.md",path:"/2015/06/08/how-jquery-works-an-introduction/",data:{title:"How jQuery Works - An Introduction",date:"2015-06-08 11:51:25+00:00",layout:"post",path:"/2015/06/08/how-jquery-works-an-introduction",description:"A dive into the structure of the jQuery library",category:"frameworks",readNext:"underscore-lodash,mn-series,jquery-pub-sub",pageViews:"18933",last30pageViews:"435"}},{file:{root:"",dir:"posts",base:"i-hate-computing-ecosystems.md",ext:"md",name:"i-hate-computing-ecosystems",extname:".md",basename:"i-hate-computing-ecosystems.md",dirname:"posts",stem:"i-hate-computing-ecosystems",path:"posts/i-hate-computing-ecosystems.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/i-hate-computing-ecosystems.md",isAbsolute:!1},requirePath:"posts/i-hate-computing-ecosystems.md",path:"/2012/12/29/i-hate-computing-ecosystems/",data:{title:"I hate computing ecosystems",date:"2012-12-29 23:06:00+00:00",layout:"post",path:"/2012/12/29/i-hate-computing-ecosystems",category:"opinion",description:"Why does nothing work together?",pageViews:"55",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"irreplaceable.md",ext:"md",name:"irreplaceable",extname:".md",basename:"irreplaceable.md",dirname:"posts",stem:"irreplaceable",path:"posts/irreplaceable.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/irreplaceable.md",isAbsolute:!1},requirePath:"posts/irreplaceable.md",path:"/2013/05/04/irreplaceable/",data:{title:"Irreplaceable",date:"2013-05-04 17:00:00+00:00",layout:"post",path:"/2013/05/04/irreplaceable",category:"opinion",description:"Your job doesn't need you.  Your family does",pageViews:"129",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"is-bower-useful.md",ext:"md",name:"is-bower-useful",extname:".md",basename:"is-bower-useful.md",dirname:"posts",stem:"is-bower-useful",path:"posts/is-bower-useful.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/is-bower-useful.md",isAbsolute:!1},requirePath:"posts/is-bower-useful.md",path:"/2015/01/22/is-bower-useful/",data:{title:"Is Bower Useful?",date:"2015-01-22 04:52:06+00:00",layout:"post",path:"/2015/01/22/is-bower-useful",category:"tools",description:"A defense of Bower as a useful package manager",pageViews:"3134",last30pageViews:"24"}},{file:{root:"",dir:"posts",base:"is-safari-being-left-behind.md",ext:"md",name:"is-safari-being-left-behind",extname:".md",basename:"is-safari-being-left-behind.md",dirname:"posts",stem:"is-safari-being-left-behind",path:"posts/is-safari-being-left-behind.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/is-safari-being-left-behind.md",isAbsolute:!1},requirePath:"posts/is-safari-being-left-behind.md",path:"/2015/06/10/is-safari-being-left-behind/",data:{title:"Is Safari being left behind?",date:"2015-06-10 04:03:41+00:00",layout:"post",path:"/2015/06/10/is-safari-being-left-behind",description:"Should we be concerned about Safari holding back the web?",category:"platform",pageViews:"8762",last30pageViews:"12"}},{file:{root:"",dir:"posts",base:"it-took-a-month-to-get-sick-of-php.md",ext:"md",name:"it-took-a-month-to-get-sick-of-php",extname:".md",basename:"it-took-a-month-to-get-sick-of-php.md",dirname:"posts",stem:"it-took-a-month-to-get-sick-of-php",path:"posts/it-took-a-month-to-get-sick-of-php.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/it-took-a-month-to-get-sick-of-php.md",isAbsolute:!1},requirePath:"posts/it-took-a-month-to-get-sick-of-php.md",path:"/2012/10/06/it-took-a-month-to-get-sick-of-php/",data:{title:"It took a month to get sick of php",date:"2012-10-06 11:00:00+00:00",layout:"post",path:"/2012/10/06/it-took-a-month-to-get-sick-of-php",category:"meta",description:"Porting my blog from Wordpress to Python",pageViews:"160",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"lasting-legacy-context.md",ext:"md",name:"lasting-legacy-context",extname:".md",basename:"lasting-legacy-context.md",dirname:"posts",stem:"lasting-legacy-context",path:"posts/lasting-legacy-context.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/lasting-legacy-context.md",isAbsolute:!1},requirePath:"posts/lasting-legacy-context.md",path:"/2017/02/18/context-to-best-practices/",data:{title:"Giving Context to Best Practices",date:"2017-02-18 23:30:00+00:00",layout:"post",path:"/2017/02/18/context-to-best-practices/",description:"What we talk about when we talk about best practices",keywords:"best practices JavaScript",category:"software-productivity",readNext:"staying-productive,orthogonality-css-js,readable-code",key:"ll-context",pageViews:"269",last30pageViews:"52"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-configuring-vim.md",ext:"md",name:"learning-vim-in-2014-configuring-vim",extname:".md",basename:"learning-vim-in-2014-configuring-vim.md",dirname:"posts",stem:"learning-vim-in-2014-configuring-vim",path:"posts/learning-vim-in-2014-configuring-vim.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-configuring-vim.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-configuring-vim.md",path:"/2014/07/14/learning-vim-in-2014-configuring-vim/",data:{title:"Learning Vim in 2014: Configuring Vim",date:"2014-07-14 10:50:00+00:00",layout:"post",path:"/2014/07/14/learning-vim-in-2014-configuring-vim",description:"How to set up a modern vim config",keywords:"vim configuration vimrc",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"39160",last30pageViews:"719"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-copy-and-paste-the-vim-way.md",ext:"md",name:"learning-vim-in-2014-copy-and-paste-the-vim-way",extname:".md",basename:"learning-vim-in-2014-copy-and-paste-the-vim-way.md",dirname:"posts",stem:"learning-vim-in-2014-copy-and-paste-the-vim-way",path:"posts/learning-vim-in-2014-copy-and-paste-the-vim-way.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-copy-and-paste-the-vim-way.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-copy-and-paste-the-vim-way.md",path:"/2014/07/27/learning-vim-in-2014-copy-and-paste-the-vim-way/",data:{title:"Learning Vim in 2014: Copy and Paste the Vim Way",date:"2014-07-27 23:00:00+00:00",layout:"post",path:"/2014/07/27/learning-vim-in-2014-copy-and-paste-the-vim-way",description:"How to use copy and paste in Vim",keywords:"vim, copy, paste, registers, yank, delete",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"1675",last30pageViews:"83"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-getting-more-from-vim-with-plugins.md",ext:"md",name:"learning-vim-in-2014-getting-more-from-vim-with-plugins",extname:".md",basename:"learning-vim-in-2014-getting-more-from-vim-with-plugins.md",dirname:"posts",stem:"learning-vim-in-2014-getting-more-from-vim-with-plugins",path:"posts/learning-vim-in-2014-getting-more-from-vim-with-plugins.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-getting-more-from-vim-with-plugins.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-getting-more-from-vim-with-plugins.md",path:"/2014/07/21/learning-vim-in-2014-getting-more-from-vim-with-plugins/",data:{title:"Learning Vim in 2014: Getting More from Vim with Plugins",date:"2014-07-21 10:50:00+00:00",layout:"post",path:"/2014/07/21/learning-vim-in-2014-getting-more-from-vim-with-plugins",description:"How plugins fit into a Vim workflow",keywords:"vim, plugins, vundle, nerdtree, ack, ctrlp",category:"tools",
readNext:"learning-vim,vim-files,vim-language",pageViews:"84406",last30pageViews:"530"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-search.md",ext:"md",name:"learning-vim-in-2014-search",extname:".md",basename:"learning-vim-in-2014-search.md",dirname:"posts",stem:"learning-vim-in-2014-search",path:"posts/learning-vim-in-2014-search.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-search.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-search.md",path:"/2014/08/04/learning-vim-in-2014-search/",data:{title:"Learning Vim in 2014: Search",date:"2014-08-04 01:16:20+00:00",layout:"post",path:"/2014/08/04/learning-vim-in-2014-search",description:"How to search for anything in Vim",category:"tools",keywords:"vim, search",readNext:"learning-vim,vim-files,vim-language",pageViews:"10328",last30pageViews:"25"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-the-basics.md",ext:"md",name:"learning-vim-in-2014-the-basics",extname:".md",basename:"learning-vim-in-2014-the-basics.md",dirname:"posts",stem:"learning-vim-in-2014-the-basics",path:"posts/learning-vim-in-2014-the-basics.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-the-basics.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-the-basics.md",path:"/2014/06/30/learning-vim-in-2014-the-basics/",data:{title:"Learning Vim in 2014: The Basics",date:"2014-06-30 11:28:00+00:00",layout:"post",path:"/2014/06/30/learning-vim-in-2014-the-basics",description:"The basics of learning Vim",keywords:"vim, basics, beginner, tutorial",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"20805",last30pageViews:"211"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-vim-as-art.md",ext:"md",name:"learning-vim-in-2014-vim-as-art",extname:".md",basename:"learning-vim-in-2014-vim-as-art.md",dirname:"posts",stem:"learning-vim-in-2014-vim-as-art",path:"posts/learning-vim-in-2014-vim-as-art.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-vim-as-art.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-vim-as-art.md",path:"/2014/07/16/learning-vim-in-2014-vim-as-art/",data:{title:"Learning Vim in 2014: Vim as Art",date:"2014-07-16 10:41:00+00:00",layout:"post",path:"/2014/07/16/learning-vim-in-2014-vim-as-art",description:"How using Vim is more of an artform than a science",keywords:"vim dot command",category:"tools",readNext:"learning-vim,vim-files,vim-language",key:"vim-art",pageViews:"15243",last30pageViews:"56"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-vim-as-language.md",ext:"md",name:"learning-vim-in-2014-vim-as-language",extname:".md",basename:"learning-vim-in-2014-vim-as-language.md",dirname:"posts",stem:"learning-vim-in-2014-vim-as-language",path:"posts/learning-vim-in-2014-vim-as-language.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-vim-as-language.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-vim-as-language.md",path:"/2014/07/02/learning-vim-in-2014-vim-as-language/",data:{title:"Learning Vim in 2014: Vim as Language",date:"2014-07-02 11:27:00+00:00",layout:"post",path:"/2014/07/02/learning-vim-in-2014-vim-as-language",description:"An explanation of the grammar behind Vim",keywords:"vim language grammar text object",category:"tools",key:"vim-language",readNext:"learning-vim,vim-files,vim-art",pageViews:"36087",last30pageViews:"479"}},{file:{root:"",dir:"posts",base:"learning-vim-in-2014-working-with-files.md",ext:"md",name:"learning-vim-in-2014-working-with-files",extname:".md",basename:"learning-vim-in-2014-working-with-files.md",dirname:"posts",stem:"learning-vim-in-2014-working-with-files",path:"posts/learning-vim-in-2014-working-with-files.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/learning-vim-in-2014-working-with-files.md",isAbsolute:!1},requirePath:"posts/learning-vim-in-2014-working-with-files.md",path:"/2014/07/07/learning-vim-in-2014-working-with-files/",data:{title:"Learning Vim in 2014: Working with Files",date:"2014-07-07 11:10:37+00:00",layout:"post",path:"/2014/07/07/learning-vim-in-2014-working-with-files",description:"How to easily navigate the file system in Vim",keywords:"vim files file system splits buffers",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"13474",last30pageViews:"80"}},{file:{root:"",dir:"posts",base:"marionette-explained-connecting-your-data-to-your-views.md",ext:"md",name:"marionette-explained-connecting-your-data-to-your-views",extname:".md",basename:"marionette-explained-connecting-your-data-to-your-views.md",dirname:"posts",stem:"marionette-explained-connecting-your-data-to-your-views",path:"posts/marionette-explained-connecting-your-data-to-your-views.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/marionette-explained-connecting-your-data-to-your-views.md",isAbsolute:!1},requirePath:"posts/marionette-explained-connecting-your-data-to-your-views.md",path:"/2014/12/10/marionette-explained-connecting-your-data-to-your-views/",data:{title:"Marionette Explained: Connecting Data to Your Views",date:"2014-12-10 12:30:00+00:00",layout:"post",path:"/2014/12/10/marionette-explained-connecting-your-data-to-your-views",description:"How to bind data to your views in Marionette.js",keywords:"JavaScript Marionette.js Backbone MVC Model View",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"25012",last30pageViews:"381"}},{file:{root:"",dir:"posts",base:"marionette-service-service-objects-for-marionette.md",ext:"md",name:"marionette-service-service-objects-for-marionette",extname:".md",basename:"marionette-service-service-objects-for-marionette.md",dirname:"posts",stem:"marionette-service-service-objects-for-marionette",path:"posts/marionette-service-service-objects-for-marionette.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/marionette-service-service-objects-for-marionette.md",isAbsolute:!1},requirePath:"posts/marionette-service-service-objects-for-marionette.md",path:"/2015/05/25/marionette-service-service-objects-for-marionette/",data:{title:"marionette-service: Service Objects for Marionette",date:"2015-05-25 14:02:00+00:00",layout:"post",path:"/2015/05/25/marionette-service-service-objects-for-marionette",description:"Introducing marionette-service, a services library for Marionette apps",keywords:"Marionette JavaScript marionette-service services Backbone Radio",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"1605",last30pageViews:"36"}},{file:{root:"",dir:"posts",base:"marionette-view-life-cycles.md",ext:"md",name:"marionette-view-life-cycles",extname:".md",basename:"marionette-view-life-cycles.md",dirname:"posts",stem:"marionette-view-life-cycles",path:"posts/marionette-view-life-cycles.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/marionette-view-life-cycles.md",isAbsolute:!1},requirePath:"posts/marionette-view-life-cycles.md",path:"/2015/01/05/marionette-view-life-cycles/",data:{title:"The Life of a Marionette View",date:"2015-01-05 04:01:45+00:00",layout:"post",path:"/2015/01/05/marionette-view-life-cycles",description:"A breakdown of the lifecycle of Marionette Views",keywords:"Marionette.js JavaScript Backbone Views life cycle",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"19611",last30pageViews:"321"}},{file:{root:"",dir:"posts",base:"medium-the-end-of-history-and-the-last-website.md",ext:"md",name:"medium-the-end-of-history-and-the-last-website",extname:".md",basename:"medium-the-end-of-history-and-the-last-website.md",dirname:"posts",stem:"medium-the-end-of-history-and-the-last-website",path:"posts/medium-the-end-of-history-and-the-last-website.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/medium-the-end-of-history-and-the-last-website.md",isAbsolute:!1},requirePath:"posts/medium-the-end-of-history-and-the-last-website.md",path:"/2012/12/25/medium-the-end-of-history-and-the-last-website/",data:{title:"Medium: The end of History and the last website",date:"2012-12-25 21:00:00+00:00",layout:"post",path:"/2012/12/25/medium-the-end-of-history-and-the-last-website",description:"Is there any use in personal websites anymore?",category:"opinion",pageViews:"57",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"meetings-and-concurrency.md",ext:"md",name:"meetings-and-concurrency",extname:".md",basename:"meetings-and-concurrency.md",dirname:"posts",stem:"meetings-and-concurrency",path:"posts/meetings-and-concurrency.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/meetings-and-concurrency.md",isAbsolute:!1},requirePath:"posts/meetings-and-concurrency.md",path:"/2013/12/30/meetings-and-concurrency/",data:{title:"Meetings And Concurrency",date:"2013-12-30 11:00:00+00:00",layout:"post",path:"/2013/12/30/meetings-and-concurrency",description:"The trouble with in-person meetings",category:"opinion",pageViews:"114",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"mobx-first-impressions.md",ext:"md",name:"mobx-first-impressions",extname:".md",basename:"mobx-first-impressions.md",dirname:"posts",stem:"mobx-first-impressions",path:"posts/mobx-first-impressions.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/mobx-first-impressions.md",isAbsolute:!1},requirePath:"posts/mobx-first-impressions.md",path:"/2017/01/09/mobx-first-impressions/",data:{title:"MobX: First Impressions",date:"2017-01-09 13:30:00+00:00",layout:"post",path:"/2017/01/09/mobx-first-impressions/",description:"First impression of managing data with MobX",keywords:"mobx JavaScript data React",category:"frameworks",key:"mobx-first",readNext:"jest-first,backbone-devs-react,react-component-styles",pageViews:"940",last30pageViews:"189"}},{file:{root:"",dir:"posts",base:"modern-dojo-exploring-dojo_basedeclare.md",ext:"md",name:"modern-dojo-exploring-dojo_basedeclare",extname:".md",basename:"modern-dojo-exploring-dojo_basedeclare.md",dirname:"posts",stem:"modern-dojo-exploring-dojo_basedeclare",path:"posts/modern-dojo-exploring-dojo_basedeclare.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/modern-dojo-exploring-dojo_basedeclare.md",isAbsolute:!1},requirePath:"posts/modern-dojo-exploring-dojo_basedeclare.md",path:"/2013/11/14/modern-dojo-exploring-dojo_basedeclare/",data:{title:"Modern Dojo: Exploring declare",date:"2013-11-14 23:15:00+00:00",layout:"post",path:"/2013/11/14/modern-dojo-exploring-dojo_basedeclare",description:"A dive into the _base/declare module",category:"frameworks",pageViews:"557",last30pageViews:"8"}},{file:{root:"",dir:"posts",base:"modern-dojo-exploring-dojoquery.md",ext:"md",name:"modern-dojo-exploring-dojoquery",extname:".md",basename:"modern-dojo-exploring-dojoquery.md",dirname:"posts",stem:"modern-dojo-exploring-dojoquery",path:"posts/modern-dojo-exploring-dojoquery.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/modern-dojo-exploring-dojoquery.md",isAbsolute:!1},requirePath:"posts/modern-dojo-exploring-dojoquery.md",path:"/2013/11/13/modern-dojo-exploring-dojoquery/",data:{title:"Modern Dojo: Exploring query",date:"2013-11-13 23:15:00+00:00",layout:"post",path:"/2013/11/13/modern-dojo-exploring-dojoquery",description:"A dive into the query module",category:"frameworks",pageViews:"128",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"moving-past-requirejs.md",ext:"md",name:"moving-past-requirejs",extname:".md",basename:"moving-past-requirejs.md",dirname:"posts",stem:"moving-past-requirejs",path:"posts/moving-past-requirejs.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/moving-past-requirejs.md",isAbsolute:!1},requirePath:"posts/moving-past-requirejs.md",path:"/2015/05/28/moving-past-requirejs/",data:{title:"Moving Past RequireJS",date:"2015-05-28 14:10:00+00:00",layout:"post",path:"/2015/05/28/moving-past-requirejs",category:"frameworks",dontfeature:"true",description:"A look at the problems with using requireJS in todays JavaScript world",pageViews:"38835",last30pageViews:"1263"}},{file:{root:"",dir:"posts",base:"mozilla-the-state-of-web-components.md",ext:"md",name:"mozilla-the-state-of-web-components",extname:".md",basename:"mozilla-the-state-of-web-components.md",dirname:"posts",stem:"mozilla-the-state-of-web-components",path:"posts/mozilla-the-state-of-web-components.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/mozilla-the-state-of-web-components.md",isAbsolute:!1},requirePath:"posts/mozilla-the-state-of-web-components.md",path:"/2015/06/14/mozilla-the-state-of-web-components/",data:{title:"Mozilla: The state of Web Components",date:"2015-06-14 21:35:58+00:00",layout:"post",path:"/2015/06/14/mozilla-the-state-of-web-components",description:"A look at Mozilla's writeup on the current status of the web components spec",category:"platform",readNext:"component-based-dev,custom-elements-example",pageViews:"290",last30pageViews:"4"}},{file:{root:"",dir:"posts",base:"new-look.md",ext:"md",name:"new-look",extname:".md",basename:"new-look.md",dirname:"posts",stem:"new-look",path:"posts/new-look.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/new-look.md",isAbsolute:!1},requirePath:"posts/new-look.md",path:"/2016/12/02/whole-new-site/",data:{title:"A whole new site",date:"2016-12-02 16:00:00+00:00",layout:"post",path:"/2016/12/02/whole-new-site/",description:"Introducing a new look for benmccormick.org",keywords:"Gatsby blog ghost benmccormick.org",key:"new-look-2016",category:"meta",pageViews:"229",last30pageViews:"14"}},{file:{root:"",dir:"posts",base:"new-twitter-feed-and-practical-vim-giveaway.md",ext:"md",name:"new-twitter-feed-and-practical-vim-giveaway",extname:".md",basename:"new-twitter-feed-and-practical-vim-giveaway.md",dirname:"posts",stem:"new-twitter-feed-and-practical-vim-giveaway",path:"posts/new-twitter-feed-and-practical-vim-giveaway.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/new-twitter-feed-and-practical-vim-giveaway.md",isAbsolute:!1},requirePath:"posts/new-twitter-feed-and-practical-vim-giveaway.md",path:"/2014/07/11/new-twitter-feed-and-practical-vim-giveaway/",data:{title:"New Twitter Feed and Practical Vim Giveaway",date:"2014-07-11 11:12:00+00:00",layout:"post",path:"/2014/07/11/new-twitter-feed-and-practical-vim-giveaway",description:"New ways to subscribe",category:"meta",pageViews:"422",last30pageViews:"4"}},{file:{root:"",dir:"posts",base:"one-day-left-in-practical-vim-giveaway.md",ext:"md",name:"one-day-left-in-practical-vim-giveaway",extname:".md",basename:"one-day-left-in-practical-vim-giveaway.md",dirname:"posts",stem:"one-day-left-in-practical-vim-giveaway",path:"posts/one-day-left-in-practical-vim-giveaway.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/one-day-left-in-practical-vim-giveaway.md",isAbsolute:!1},requirePath:"posts/one-day-left-in-practical-vim-giveaway.md",path:"/2014/07/24/one-day-left-in-practical-vim-giveaway/",data:{title:"One Day Left In Practical Vim Giveaway",date:"2014-07-24 23:55:45+00:00",layout:"post",path:"/2014/07/24/one-day-left-in-practical-vim-giveaway",description:"If you're reading this now... its too late sorry ¯ (ツ)_/¯",category:"meta",pageViews:"9",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"orthogonality-and-css-in-js.md",ext:"md",name:"orthogonality-and-css-in-js",extname:".md",basename:"orthogonality-and-css-in-js.md",dirname:"posts",stem:"orthogonality-and-css-in-js",path:"posts/orthogonality-and-css-in-js.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/orthogonality-and-css-in-js.md",isAbsolute:!1},requirePath:"posts/orthogonality-and-css-in-js.md",path:"/2017/01/03/orthogonality-and-css-in-js/",data:{title:"Orthogonality and CSS in JS",date:"2017-01-03 00:00:00+00:00",layout:"post",path:"/2017/01/03/orthogonality-and-css-in-js/",description:"Separation of concerns in the context of CSS and JavaScript",keywords:"CSS JavaScript Orthogonality Pragmatic Programmer",category:"software-productivity",key:"orthogonality-css-js",readNext:"jest-first,ll-context,callbacks-to-promises",pageViews:"6775",last30pageViews:"119"}},{file:{root:"",dir:"posts",base:"portable-configuration-ratings.md",ext:"md",name:"portable-configuration-ratings",extname:".md",basename:"portable-configuration-ratings.md",dirname:"posts",stem:"portable-configuration-ratings",path:"posts/portable-configuration-ratings.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/portable-configuration-ratings.md",isAbsolute:!1},requirePath:"posts/portable-configuration-ratings.md",path:"/2017/04/14/grading-applications-on-config-portability/",data:{title:"Grading Applications on config portability",date:"2017-04-14 09:30:00+00:00",layout:"post",path:"/2017/04/14/grading-applications-on-config-portability/",description:"Which applications make it easy to maintain the same settings on multiple machines",keywords:"configuration portability atom Sublime Text MacOS Vim",category:"tools",readNext:"interesting-atom,learning-vim,vim-files",key:"config-portability",pageViews:"0",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"productive-javascript-development.md",ext:"md",name:"productive-javascript-development",extname:".md",basename:"productive-javascript-development.md",dirname:"posts",stem:"productive-javascript-development",path:"posts/productive-javascript-development.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/productive-javascript-development.md",isAbsolute:!1},requirePath:"posts/productive-javascript-development.md",path:"/2015/11/25/productive-javascript-development/",data:{title:"Productive JavaScript Development",date:"2015-11-25 14:43:46+00:00",layout:"post",path:"/2015/11/25/productive-javascript-development",category:"software-productivity",description:"An examination of what makes JavaScript development productive",key:"productive-js-dev",pageViews:"2572",last30pageViews:"48"}},{file:{root:"",dir:"posts",base:"quick-tip-take-advantage-of-lodash-collections-2.md",ext:"md",name:"quick-tip-take-advantage-of-lodash-collections-2",extname:".md",basename:"quick-tip-take-advantage-of-lodash-collections-2.md",dirname:"posts",stem:"quick-tip-take-advantage-of-lodash-collections-2",path:"posts/quick-tip-take-advantage-of-lodash-collections-2.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/quick-tip-take-advantage-of-lodash-collections-2.md",isAbsolute:!1},requirePath:"posts/quick-tip-take-advantage-of-lodash-collections-2.md",path:"/2016/06/26/quick-tip-take-advantage-of-lodash-collections-2/",data:{title:"Quick Tip: Take advantage of lodash collections",date:"2016-06-26 21:27:55+00:00",layout:"post",path:"/2016/06/26/quick-tip-take-advantage-of-lodash-collections-2",description:"A quick look at the benefits of using lodash collection methods",keywords:"lodash javascript collections arrays",category:"frameworks",pageViews:"557",last30pageViews:"8"}},{file:{root:"",dir:"posts",base:"rauchg-on-es6.md",ext:"md",name:"rauchg-on-es6",extname:".md",basename:"rauchg-on-es6.md",dirname:"posts",stem:"rauchg-on-es6",path:"posts/rauchg-on-es6.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/rauchg-on-es6.md",isAbsolute:!1},requirePath:"posts/rauchg-on-es6.md",path:"/2015/02/22/rauchg-on-es6/",data:{title:"Guillermo Rauch on ECMAScript 6",date:"2015-02-22 21:38:46+00:00",layout:"post",path:"/2015/02/22/rauchg-on-es6",category:"javascript",description:"A link-log of Guillermo Rauch's look at ES6",key:"rauchg-on-es6",pageViews:"335",last30pageViews:"8"}},{file:{root:"",dir:"posts",base:"readable-code.md",ext:"md",name:"readable-code",extname:".md",basename:"readable-code.md",dirname:"posts",stem:"readable-code",path:"posts/readable-code.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/readable-code.md",isAbsolute:!1},requirePath:"posts/readable-code.md",path:"/2016/12/11/readable-code-audience/",data:{title:"Readable code: Know your audience ",date:"2016-12-12 04:00:00+00:00",layout:"post",path:"/2016/12/11/readable-code-audience",description:"A quick observation about what it means to write readable code",keywords:"readable code python",category:"software-productivity",key:"readable-code",pageViews:"254",last30pageViews:"19"}},{file:{root:"",dir:"posts",base:"reusable-code-patterns.md",ext:"md",name:"reusable-code-patterns",extname:".md",basename:"reusable-code-patterns.md",dirname:"posts",stem:"reusable-code-patterns",path:"posts/reusable-code-patterns.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/reusable-code-patterns.md",isAbsolute:!1},requirePath:"posts/reusable-code-patterns.md",path:"/2016/01/08/reusable-code-patterns/",data:{title:"Reusable Code Patterns",date:"2016-01-08 05:22:29+00:00",layout:"post",path:"/2016/01/08/reusable-code-patterns",category:"software-productivity",description:"Practical tips on reusing existing code",readNext:"readable-code,ll-context,productive-js-dev",pageViews:"6261",last30pageViews:"35"}},{file:{root:"",dir:"posts",base:"revertible-observables-in-knockout.md",ext:"md",name:"revertible-observables-in-knockout",extname:".md",basename:"revertible-observables-in-knockout.md",dirname:"posts",stem:"revertible-observables-in-knockout",path:"posts/revertible-observables-in-knockout.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/revertible-observables-in-knockout.md",isAbsolute:!1},requirePath:"posts/revertible-observables-in-knockout.md",path:"/2013/05/07/revertible-observables-in-knockout/",data:{title:"Revertible Observables in Knockout",date:"2013-05-07 20:05:00+00:00",layout:"post",path:"/2013/05/07/revertible-observables-in-knockout",description:"Building an observable with simple undo functionality",category:"frameworks",key:"revertible-observables",pageViews:"3131",last30pageViews:"44"}},{file:{root:"",dir:"posts",base:"rss-roundup.md",ext:"md",name:"rss-roundup",extname:".md",basename:"rss-roundup.md",dirname:"posts",stem:"rss-roundup",path:"posts/rss-roundup.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/rss-roundup.md",isAbsolute:!1},requirePath:"posts/rss-roundup.md",path:"/2013/06/29/rss-roundup/",data:{title:"RSS Roundup",date:"2013-06-29 11:40:00+00:00",layout:"post",path:"/2013/06/29/rss-roundup",category:"reviews",description:"A look at the options for RSS readers post-Google Reader",pageViews:"24",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"running-jest-tests-on-commit.md",ext:"md",name:"running-jest-tests-on-commit",extname:".md",basename:"running-jest-tests-on-commit.md",dirname:"posts",stem:"running-jest-tests-on-commit",path:"posts/running-jest-tests-on-commit.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/running-jest-tests-on-commit.md",isAbsolute:!1},requirePath:"posts/running-jest-tests-on-commit.md",path:"/2017/02/26/running-jest-tests-before-each-git-commit/",data:{title:"Running Jest Tests Before Each Git Commit",date:"2017-02-26 23:00:00+00:00",layout:"post",path:"/2017/02/26/running-jest-tests-before-each-git-commit/",description:"A simple setup to run your Jest tests before every commit",keywords:"Jest testing git pre-commit JavaScript",category:"tools",readNext:"jest-first,saving-time-jest,mobx-first",key:"jest-git",pageViews:"2721",last30pageViews:"516"}},{file:{root:"",dir:"posts",base:"saving-time-with-jest.md",ext:"md",name:"saving-time-with-jest",extname:".md",basename:"saving-time-with-jest.md",dirname:"posts",stem:"saving-time-with-jest",path:"posts/saving-time-with-jest.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/saving-time-with-jest.md",isAbsolute:!1},requirePath:"posts/saving-time-with-jest.md",path:"/2016/12/10/saving-time-with-jest/",data:{title:"Saving Time With Jest: Meetup Summary",date:"2016-12-10 05:15:00+00:00",layout:"post",path:"/2016/12/10/saving-time-with-jest",description:"A summary of my meetup talk on saving time with Jest",keywords:"Jest JavaScript testing meetup talk Triangle React",category:"tools",key:"saving-time-jest",readNext:"jest-first,backbone-devs-react,mobx-first",pageViews:"499",last30pageViews:"59"}},{file:{root:"",dir:"posts",base:"searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md",ext:"md",name:"searching-for-the-perfect-reading-device-my-nexus-7-2013-review",extname:".md",basename:"searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md",dirname:"posts",stem:"searching-for-the-perfect-reading-device-my-nexus-7-2013-review",path:"posts/searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md",isAbsolute:!1},requirePath:"posts/searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md",path:"/2013/08/16/searching-for-the-perfect-reading-device-my-nexus-7-2013-review/",data:{title:"Searching for the perfect reading device:  My Nexus 7 (2013) Review",date:"2013-08-16 12:00:00+00:00",layout:"post",path:"/2013/08/16/searching-for-the-perfect-reading-device-my-nexus-7-2013-review",description:"Reviewing a small Android Tablet",category:"reviews",pageViews:"77",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"setting-up-your-text-editor-for-javascript-development.md",ext:"md",name:"setting-up-your-text-editor-for-javascript-development",extname:".md",basename:"setting-up-your-text-editor-for-javascript-development.md",dirname:"posts",stem:"setting-up-your-text-editor-for-javascript-development",path:"posts/setting-up-your-text-editor-for-javascript-development.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/setting-up-your-text-editor-for-javascript-development.md",isAbsolute:!1},requirePath:"posts/setting-up-your-text-editor-for-javascript-development.md",path:"/2014/10/13/setting-up-your-text-editor-for-javascript-development/",data:{title:"Setting Up Your Text Editor For JavaScript Development",date:"2014-10-13 01:05:51+00:00",layout:"post",path:"/2014/10/13/setting-up-your-text-editor-for-javascript-development",description:"A look at some tools and plugins that help create a productive JavaScript development workflow",category:"tools",readNext:"learning-vim,interesting-atom,vim-files",pageViews:"9831",last30pageViews:"152"}},{file:{root:"",dir:"posts",base:"shutdown-tiles-for-windows-8-start-screen.md",ext:"md",name:"shutdown-tiles-for-windows-8-start-screen",extname:".md",basename:"shutdown-tiles-for-windows-8-start-screen.md",dirname:"posts",stem:"shutdown-tiles-for-windows-8-start-screen",path:"posts/shutdown-tiles-for-windows-8-start-screen.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/shutdown-tiles-for-windows-8-start-screen.md",isAbsolute:!1},requirePath:"posts/shutdown-tiles-for-windows-8-start-screen.md",path:"/2012/11/08/shutdown-tiles-for-windows-8-start-screen/",data:{title:"Shutdown Tiles for Windows 8 Start Screen",date:"2012-11-08 12:00:00+00:00",layout:"post",path:"/2012/11/08/shutdown-tiles-for-windows-8-start-screen",category:"tools",description:"A solve for shutting down Windows 8 easily",pageViews:"26",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"simple-publish-subscribe-with-jquery.md",ext:"md",name:"simple-publish-subscribe-with-jquery",extname:".md",basename:"simple-publish-subscribe-with-jquery.md",dirname:"posts",stem:"simple-publish-subscribe-with-jquery",path:"posts/simple-publish-subscribe-with-jquery.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/simple-publish-subscribe-with-jquery.md",isAbsolute:!1},requirePath:"posts/simple-publish-subscribe-with-jquery.md",path:"/2013/02/13/simple-publish-subscribe-with-jquery/",data:{title:"Simple Publish-Subscribe with jQuery",date:"2013-02-13 21:00:00+00:00",layout:"post",path:"/2013/02/13/simple-publish-subscribe-with-jquery",description:"Building a basic pub-sub wrapper around jQuery",category:"frameworks",key:"jquery-pub-sub",pageViews:"8137",last30pageViews:"113"}},{file:{root:"",dir:"posts",base:"somewhat-open.md",ext:"md",name:"somewhat-open",extname:".md",basename:"somewhat-open.md",dirname:"posts",stem:"somewhat-open",path:"posts/somewhat-open.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/somewhat-open.md",isAbsolute:!1},requirePath:"posts/somewhat-open.md",path:"/2013/08/15/somewhat-open/",data:{title:"Somewhat Open",date:"2013-08-15 16:15:00+00:00",layout:"post",path:"/2013/08/15/somewhat-open",category:"opinion",description:"What is an open API?",pageViews:"110",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"stability-vs-decline.md",ext:"md",name:"stability-vs-decline",extname:".md",basename:"stability-vs-decline.md",dirname:"posts",stem:"stability-vs-decline",path:"posts/stability-vs-decline.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/stability-vs-decline.md",isAbsolute:!1},requirePath:"posts/stability-vs-decline.md",path:"/2016/03/09/stability-vs-decline/",data:{title:"Stability vs Decline",date:"2016-03-09 06:04:39+00:00",layout:"post",path:"/2016/03/09/stability-vs-decline",category:"software-productivity",key:"stability-decline",description:"What is the difference between stable and declining software?",readNext:"backbone-eco,backbone-devs-react,bb-radio",pageViews:"782",last30pageViews:"4"}},{file:{root:"",dir:"posts",base:"staying-dry-with-marionette-behaviors.md",ext:"md",name:"staying-dry-with-marionette-behaviors",extname:".md",basename:"staying-dry-with-marionette-behaviors.md",dirname:"posts",stem:"staying-dry-with-marionette-behaviors",path:"posts/staying-dry-with-marionette-behaviors.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/staying-dry-with-marionette-behaviors.md",isAbsolute:!1},requirePath:"posts/staying-dry-with-marionette-behaviors.md",path:"/2015/03/23/staying-dry-with-marionette-behaviors/",data:{title:"Staying DRY with Marionette Behaviors",date:"2015-03-23 04:04:17+00:00",layout:"post",path:"/2015/03/23/staying-dry-with-marionette-behaviors",description:"How to keep your Views DRY using Behaviors in your Marionette app",keywords:"Marionette.js behaviors JavaScript",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"9684",last30pageViews:"146"}},{file:{root:"",dir:"posts",base:"staying-productive.md",ext:"md",name:"staying-productive",extname:".md",basename:"staying-productive.md",dirname:"posts",stem:"staying-productive",path:"posts/staying-productive.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/staying-productive.md",isAbsolute:!1},requirePath:"posts/staying-productive.md",path:"/2016/01/25/staying-productive/",data:{title:"Staying Productive",date:"2016-01-25 04:41:46+00:00",layout:"post",path:"/2016/01/25/staying-productive",category:"software-productivity",description:"Thinking through the environmental factors that lead to productivity",key:"staying-productive",pageViews:"1017",last30pageViews:"5"}},{file:{root:"",dir:"posts",base:"sublime-text-for-javascript-configuration.md",ext:"md",name:"sublime-text-for-javascript-configuration",extname:".md",basename:"sublime-text-for-javascript-configuration.md",dirname:"posts",stem:"sublime-text-for-javascript-configuration",path:"posts/sublime-text-for-javascript-configuration.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/sublime-text-for-javascript-configuration.md",isAbsolute:!1},requirePath:"posts/sublime-text-for-javascript-configuration.md",path:"/2013/01/01/sublime-text-for-javascript-configuration/",data:{title:"Sublime Text For Javascript: Configuration",date:"2013-01-01 18:00:00+00:00",layout:"post",path:"/2013/01/01/sublime-text-for-javascript-configuration",category:"tools",description:"Helpful configuration options for JS developers",pageViews:"9290",last30pageViews:"49"}},{file:{root:"",dir:"posts",base:"sublime-text-for-javascript-keyboard-shortcuts.md",ext:"md",name:"sublime-text-for-javascript-keyboard-shortcuts",extname:".md",basename:"sublime-text-for-javascript-keyboard-shortcuts.md",dirname:"posts",stem:"sublime-text-for-javascript-keyboard-shortcuts",path:"posts/sublime-text-for-javascript-keyboard-shortcuts.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/sublime-text-for-javascript-keyboard-shortcuts.md",isAbsolute:!1},requirePath:"posts/sublime-text-for-javascript-keyboard-shortcuts.md",path:"/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts/",data:{title:"Sublime Text For Javascript: Keyboard Shortcuts",
date:"2012-12-30 21:00:00+00:00",layout:"post",path:"/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts",category:"tools",description:"Helpful keyboard shortcuts for JS developers",pageViews:"14295",last30pageViews:"141"}},{file:{root:"",dir:"posts",base:"sublime-text-for-javascript-plugins.md",ext:"md",name:"sublime-text-for-javascript-plugins",extname:".md",basename:"sublime-text-for-javascript-plugins.md",dirname:"posts",stem:"sublime-text-for-javascript-plugins",path:"posts/sublime-text-for-javascript-plugins.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/sublime-text-for-javascript-plugins.md",isAbsolute:!1},requirePath:"posts/sublime-text-for-javascript-plugins.md",path:"/2013/01/03/sublime-text-for-javascript-plugins/",data:{title:"Sublime Text For Javascript: Packages",date:"2013-01-03 21:00:00+00:00",layout:"post",path:"/2013/01/03/sublime-text-for-javascript-plugins",category:"tools",description:"Helpful packages for JS developers",pageViews:"6096",last30pageViews:"14"}},{file:{root:"",dir:"posts",base:"sync-multiple-google-calendars-in-windows-8.md",ext:"md",name:"sync-multiple-google-calendars-in-windows-8",extname:".md",basename:"sync-multiple-google-calendars-in-windows-8.md",dirname:"posts",stem:"sync-multiple-google-calendars-in-windows-8",path:"posts/sync-multiple-google-calendars-in-windows-8.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/sync-multiple-google-calendars-in-windows-8.md",isAbsolute:!1},requirePath:"posts/sync-multiple-google-calendars-in-windows-8.md",path:"/2012/11/07/sync-multiple-google-calendars-in-windows-8/",data:{title:"Sync Multiple Google Calendars in Windows 8",date:"2012-11-07 12:00:00+00:00",layout:"post",path:"/2012/11/07/sync-multiple-google-calendars-in-windows-8",category:"tools",description:"A helpful tip for using Google Calendar in Windows 8",pageViews:"34",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"testing-site-performance-with-lighthouse.md",ext:"md",name:"testing-site-performance-with-lighthouse",extname:".md",basename:"testing-site-performance-with-lighthouse.md",dirname:"posts",stem:"testing-site-performance-with-lighthouse",path:"posts/testing-site-performance-with-lighthouse.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/testing-site-performance-with-lighthouse.md",isAbsolute:!1},requirePath:"posts/testing-site-performance-with-lighthouse.md",path:"/2017/02/13/improving-site-performance-with-lighthouse/",data:{title:"Evaluating Web Apps With Lighthouse",date:"2017-02-14 03:30:00+00:00",layout:"post",path:"/2017/02/13/improving-site-performance-with-lighthouse",description:"Profiling and improving my site with Google's Lighthouse tool",keywords:"Lighthouse Performance Progressive Web App",category:"tools",readNext:"ll-context,jest-first,new-look-2016",pageViews:"301",last30pageViews:"66"}},{file:{root:"",dir:"posts",base:"testing-with-jest-snapshots-first-impressions.md",ext:"md",name:"testing-with-jest-snapshots-first-impressions",extname:".md",basename:"testing-with-jest-snapshots-first-impressions.md",dirname:"posts",stem:"testing-with-jest-snapshots-first-impressions",path:"posts/testing-with-jest-snapshots-first-impressions.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/testing-with-jest-snapshots-first-impressions.md",isAbsolute:!1},requirePath:"posts/testing-with-jest-snapshots-first-impressions.md",path:"/2016/09/19/testing-with-jest-snapshots-first-impressions/",data:{title:"Testing with Jest Snapshots: First Impressions",date:"2016-09-19 12:41:00+00:00",layout:"post",path:"/2016/09/19/testing-with-jest-snapshots-first-impressions/",description:"First impression of testing UI components using Jest snapshots",keywords:"Jest JavaScript testing React Snapshot Tests",category:"tools",key:"jest-first",readNext:"saving-time-jest,backbone-devs-react,mobx-first",pageViews:"8589",last30pageViews:"1140"}},{file:{root:"",dir:"posts",base:"the-case-for-marionette-js.md",ext:"md",name:"the-case-for-marionette-js",extname:".md",basename:"the-case-for-marionette-js.md",dirname:"posts",stem:"the-case-for-marionette-js",path:"posts/the-case-for-marionette-js.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-case-for-marionette-js.md",isAbsolute:!1},requirePath:"posts/the-case-for-marionette-js.md",path:"/2014/12/02/the-case-for-marionette-js/",data:{title:"The Case For Marionette.js",date:"2014-12-02 01:53:52+00:00",layout:"post",path:"/2014/12/02/the-case-for-marionette-js",description:"Making the case for Marionette.js as a framework for front end development",keywords:"JavaScript Marionette.js Backbone",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"29541",last30pageViews:"307"}},{file:{root:"",dir:"posts",base:"the-debugging-toolbox.md",ext:"md",name:"the-debugging-toolbox",extname:".md",basename:"the-debugging-toolbox.md",dirname:"posts",stem:"the-debugging-toolbox",path:"posts/the-debugging-toolbox.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-debugging-toolbox.md",isAbsolute:!1},requirePath:"posts/the-debugging-toolbox.md",path:"/2014/08/19/the-debugging-toolbox/",data:{title:"The Debugging Toolbox",date:"2014-08-19 11:35:00+00:00",layout:"post",path:"/2014/08/19/the-debugging-toolbox",category:"software-productivity",description:"The process I use for solving problems",pageViews:"824",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"the-iphone-5-conversation-so-far.md",ext:"md",name:"the-iphone-5-conversation-so-far",extname:".md",basename:"the-iphone-5-conversation-so-far.md",dirname:"posts",stem:"the-iphone-5-conversation-so-far",path:"posts/the-iphone-5-conversation-so-far.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-iphone-5-conversation-so-far.md",isAbsolute:!1},requirePath:"posts/the-iphone-5-conversation-so-far.md",path:"/2012/09/19/the-iphone-5-conversation-so-far/",data:{title:"The iPhone 5 Conversation so Far",date:"2012-09-19 11:00:00+00:00",layout:"post",path:"/2012/09/19/the-iphone-5-conversation-so-far",category:"opinion",description:"The same conversation just keeps happening",pageViews:"46",last30pageViews:"1"}},{file:{root:"",dir:"posts",base:"the-most-interesting-atom-packages-ive-found-so-far.md",ext:"md",name:"the-most-interesting-atom-packages-ive-found-so-far",extname:".md",basename:"the-most-interesting-atom-packages-ive-found-so-far.md",dirname:"posts",stem:"the-most-interesting-atom-packages-ive-found-so-far",path:"posts/the-most-interesting-atom-packages-ive-found-so-far.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-most-interesting-atom-packages-ive-found-so-far.md",isAbsolute:!1},requirePath:"posts/the-most-interesting-atom-packages-ive-found-so-far.md",path:"/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far/",data:{title:"The Most Interesting Atom Packages I've found (so far)",date:"2016-01-11 02:25:49+00:00",layout:"post",path:"/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far",category:"tools",description:"A rundown of the coolest Atom packages I've seen",key:"interesting-atom",readNext:"learning-vim,vim-files,vim-language",pageViews:"87920",last30pageViews:"3356"}},{file:{root:"",dir:"posts",base:"the-mystery-of-docker-and-the-disk-eating-cow.md",ext:"md",name:"the-mystery-of-docker-and-the-disk-eating-cow",extname:".md",basename:"the-mystery-of-docker-and-the-disk-eating-cow.md",dirname:"posts",stem:"the-mystery-of-docker-and-the-disk-eating-cow",path:"posts/the-mystery-of-docker-and-the-disk-eating-cow.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-mystery-of-docker-and-the-disk-eating-cow.md",isAbsolute:!1},requirePath:"posts/the-mystery-of-docker-and-the-disk-eating-cow.md",path:"/2017/03/28/the-mystery-of-docker-and-the-disk-eating-cow/",data:{title:"The Mystery of Docker and the Disk-Eating Cow",date:"2017-03-28 14:40:00+00:00",layout:"post",path:"/2017/03/28/the-mystery-of-docker-and-the-disk-eating-cow/",description:"Tracking down how Docker ate half my hard drive",keywords:"Docker Daisy Disk MacOS",category:"tools",key:"docker-cow",pageViews:"344",last30pageViews:"344"}},{file:{root:"",dir:"posts",base:"the-sad-state-of-the-backbone-ecosystem.md",ext:"md",name:"the-sad-state-of-the-backbone-ecosystem",extname:".md",basename:"the-sad-state-of-the-backbone-ecosystem.md",dirname:"posts",stem:"the-sad-state-of-the-backbone-ecosystem",path:"posts/the-sad-state-of-the-backbone-ecosystem.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/the-sad-state-of-the-backbone-ecosystem.md",isAbsolute:!1},requirePath:"posts/the-sad-state-of-the-backbone-ecosystem.md",path:"/2016/03/07/the-sad-state-of-the-backbone-ecosystem/",data:{title:"The Sad State of the Backbone Ecosystem",date:"2016-03-07 05:06:40+00:00",layout:"post",path:"/2016/03/07/the-sad-state-of-the-backbone-ecosystem",description:"A look at the current state of Backbone libraries",keywords:"Backbone github graphs repos",category:"frameworks",dontfeature:"true",key:"backbone-eco",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"26823",last30pageViews:"379"}},{file:{root:"",dir:"posts",base:"underscore-vs-lodash.md",ext:"md",name:"underscore-vs-lodash",extname:".md",basename:"underscore-vs-lodash.md",dirname:"posts",stem:"underscore-vs-lodash",path:"posts/underscore-vs-lodash.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/underscore-vs-lodash.md",isAbsolute:!1},requirePath:"posts/underscore-vs-lodash.md",path:"/2014/11/12/underscore-vs-lodash/",data:{title:"Underscore vs Lo-Dash",date:"2014-11-12 13:00:00+00:00",layout:"post",path:"/2014/11/12/underscore-vs-lodash",description:"A comparison between Underscore and lodash",keywords:"underscore lodash lo-dash JavaScript performance",category:"frameworks",key:"underscore-lodash",readNext:"mn-series,backbone-devs-react,mobx-first",pageViews:"116368",last30pageViews:"1633"}},{file:{root:"",dir:"posts",base:"understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md",ext:"md",name:"understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey",extname:".md",basename:"understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md",dirname:"posts",stem:"understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey",path:"posts/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md",isAbsolute:!1},requirePath:"posts/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md",path:"/2014/07/09/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey/",data:{title:"Understanding the Backbone Mindset: A review of Building  Backbone Plugins by Derick Bailey",date:"2014-07-09 11:38:40+00:00",layout:"post",path:"/2014/07/09/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey",category:"reviews",description:"A book review of a great deep dive into Backbone best practices",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"12652",last30pageViews:"22"}},{file:{root:"",dir:"posts",base:"unexpected-javascript-that-doesnt-do-what-you-think.md",ext:"md",name:"unexpected-javascript-that-doesnt-do-what-you-think",extname:".md",basename:"unexpected-javascript-that-doesnt-do-what-you-think.md",dirname:"posts",stem:"unexpected-javascript-that-doesnt-do-what-you-think",path:"posts/unexpected-javascript-that-doesnt-do-what-you-think.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/unexpected-javascript-that-doesnt-do-what-you-think.md",isAbsolute:!1},requirePath:"posts/unexpected-javascript-that-doesnt-do-what-you-think.md",path:"/2013/01/15/unexpected-javascript-that-doesnt-do-what-you-think/",data:{title:"Unexpected Javascript: That Doesn't Do What You Think",date:"2013-01-15 23:30:00+00:00",layout:"post",path:"/2013/01/15/unexpected-javascript-that-doesnt-do-what-you-think",category:"javascript",description:"A quiz for JavaScript developers",pageViews:"737",last30pageViews:"0"}},{file:{root:"",dir:"posts",base:"vim-workflows-file-switching-strategies.md",ext:"md",name:"vim-workflows-file-switching-strategies",extname:".md",basename:"vim-workflows-file-switching-strategies.md",dirname:"posts",stem:"vim-workflows-file-switching-strategies",path:"posts/vim-workflows-file-switching-strategies.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/vim-workflows-file-switching-strategies.md",isAbsolute:!1},requirePath:"posts/vim-workflows-file-switching-strategies.md",path:"/2014/11/10/vim-workflows-file-switching-strategies/",data:{title:"Vim Workflows: File Switching",date:"2014-11-10 04:06:52+00:00",layout:"post",path:"/2014/11/10/vim-workflows-file-switching-strategies",description:"A look at the different approaches you can take to managing files in Vim",category:"tools",key:"vim-files",readNext:"learning-vim,vim-art,vim-language",pageViews:"5510",last30pageViews:"105"}},{file:{root:"",dir:"posts",base:"what-are-hocs.md",ext:"md",name:"what-are-hocs",extname:".md",basename:"what-are-hocs.md",dirname:"posts",stem:"what-are-hocs",path:"posts/what-are-hocs.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/what-are-hocs.md",isAbsolute:!1},requirePath:"posts/what-are-hocs.md",path:"/2016/12/14/what-are-higher-order-components/",data:{title:"What are Higher Order Components?",date:"2016-12-14 14:30:00+00:00",layout:"post",path:"/2016/12/14/what-are-higher-order-components",description:"An explanation of React's higher order components",keywords:"react components higher order",category:"frameworks",key:"what-are-hocs",readNext:"react-component-styles,callbacks-to-promises,mobx-first",pageViews:"832",last30pageViews:"248"}},{file:{root:"",dir:"posts",base:"what-are-mutable-and-immutable-data-structures-2.md",ext:"md",name:"what-are-mutable-and-immutable-data-structures-2",extname:".md",basename:"what-are-mutable-and-immutable-data-structures-2.md",dirname:"posts",stem:"what-are-mutable-and-immutable-data-structures-2",path:"posts/what-are-mutable-and-immutable-data-structures-2.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/what-are-mutable-and-immutable-data-structures-2.md",isAbsolute:!1},requirePath:"posts/what-are-mutable-and-immutable-data-structures-2.md",path:"/2016/06/04/what-are-mutable-and-immutable-data-structures-2/",data:{title:"What are mutable and immutable data structures?",date:"2016-06-04 21:52:52+00:00",layout:"post",path:"/2016/06/04/what-are-mutable-and-immutable-data-structures-2",description:"A quick look at the difference between mutable and immutable data",keywords:"immutable mutable JavaScript Immutable.js",category:"software-productivity",readNext:"lodash-underscore,backbone-devs-react,orthogonality-css-js",pageViews:"1456",last30pageViews:"296"}},{file:{root:"",dir:"posts",base:"what-can-backbone-developers-learn-from-react.md",ext:"md",name:"what-can-backbone-developers-learn-from-react",extname:".md",basename:"what-can-backbone-developers-learn-from-react.md",dirname:"posts",stem:"what-can-backbone-developers-learn-from-react",path:"posts/what-can-backbone-developers-learn-from-react.md",absolute:"/Users/ben/Blog/benmccormickorg/posts/what-can-backbone-developers-learn-from-react.md",isAbsolute:!1},requirePath:"posts/what-can-backbone-developers-learn-from-react.md",path:"/2015/09/09/what-can-backbone-developers-learn-from-react/",data:{title:"Lessons Backbone Developers Can Learn From React",date:"2015-09-09 11:19:43+00:00",layout:"post",path:"/2015/09/09/what-can-backbone-developers-learn-from-react",description:"A look at the lessons that Backbone developers can learn from React",keywords:"Backbone React JavaScript frameworks",category:"frameworks",key:"backbone-devs-react",readNext:"mobx-first,mn-series,backbone-eco",pageViews:"25690",last30pageViews:"225"}}]}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(384),h=n(396),d=n(382),u=n(441);n(444);var m=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props.children;return c.default.createElement(p.Container,{style:{maxWidth:(0,h.rhythm)(26),padding:(0,h.rhythm)(1.5)+" "+(0,h.rhythm)(.75)}},c.default.createElement(u.Header,{blogTitle:d.config.blogTitle}),e)}}]),t}(c.default.Component);m.propTypes={children:c.default.PropTypes.any,route:c.default.PropTypes.object},t.default=m,e.exports=t.default},function(e,t,n){t.Container=n(385),t.Grid=n(386),t.Breakpoint=n(387),t.Span=n(394)},function(e,t,n){var a,s;a=n(2),s=n(4),e.exports=a.createClass({displayName:"Container",render:function(){var e,t,n,o;return t={maxWidth:"960px",marginLeft:"auto",marginRight:"auto"},o=s(t,this.props.style),e=this.props.children,n=s({},this.props),delete n.children,delete n.style,a.createElement("div",Object.assign({},n,{style:o}),e,a.createElement("span",{style:{display:"block",clear:"both"}}," "))}})},function(e,t,n){var a,s;a=n(2),s=n(4),e.exports=a.createClass({displayName:"Grid",propTypes:{columns:a.PropTypes.number,gutterRatio:a.PropTypes.number},getDefaultProps:function(){return{columns:12,gutterRatio:.25}},renderChildren:function(){return a.Children.map(this.props.children,function(e){return function(t){var n,s;return"Breakpoint"===(n=null!=(s=t.type)?s.displayName:void 0)||"Span"===n?a.cloneElement(t,{context:{columns:e.props.columns,gutterRatio:e.props.gutterRatio}}):t}}(this))},render:function(){var e;return e=s({},this.props),delete e.gutterRatio,delete e.columns,a.createElement("div",Object.assign({},e),this.renderChildren(),a.createElement("span",{style:{display:"block",clear:"both"}}," "))}})},function(e,t,n){var a,s,o,i,r,l;i=n(2),r=n(388),o=n(390),l=n(4),a=i.createClass({displayName:"Breakpoint",mixins:[r],propTypes:{minWidth:i.PropTypes.number,maxWidth:i.PropTypes.number},getDefaultProps:function(){return{minWidth:0,maxWidth:1e21}},renderChildren:function(){return i.Children.map(this.props.children,function(e){return function(t){var n;return"Span"===(null!=t&&null!=(n=t.type)?n.displayName:void 0)?i.cloneElement(t,{context:e.props.context}):t}}(this))},render:function(){var e,t;return e=l({},this.props),delete e.maxWidth,delete e.minWidth,delete e.widthMethod,this.state.componentWidth&&this.props.minWidth<=(t=this.state.componentWidth)&&t<this.props.maxWidth?i.createElement("div",Object.assign({},e),this.renderChildren()):i.createElement("div",null)}}),s=i.createClass({displayName:"Breakpoint",mixins:[o],propTypes:{minWidth:i.PropTypes.number,maxWidth:i.PropTypes.number},getDefaultProps:function(){return{minWidth:0,maxWidth:1e21}},renderChildren:function(){return i.Children.map(this.props.children,function(e){return function(t){var n;return"Span"===(null!=(n=t.type)?n.displayName:void 0)?i.cloneElement(t,{context:e.props.context}):t}}(this))},render:function(){var e,t;return e=l({},this.props),delete e.maxWidth,delete e.minWidth,delete e.widthMethod,this.state.pageWidth&&this.props.minWidth<=(t=this.state.pageWidth)&&t<this.props.maxWidth?i.createElement("div",Object.assign({},e),this.renderChildren()):i.createElement("div",null)}}),e.exports=i.createClass({displayName:"Breakpoint",propTypes:{widthMethod:i.PropTypes.string.isRequired,minWidth:i.PropTypes.number,maxWidth:i.PropTypes.number},getDefaultProps:function(){return{widthMethod:"pageWidth"}},render:function(){return"pageWidth"===this.props.widthMethod?i.createElement(s,Object.assign({},this.props)):"componentWidth"===this.props.widthMethod?i.createElement(a,Object.assign({},this.props)):void 0}})},function(e,t,n){var a=n(29),s=n(389);e.exports={getInitialState:function(){return void 0!==this.props.initialComponentWidth&&null!==this.props.initialComponentWidth?{componentWidth:this.props.initialComponentWidth}:{}},componentDidMount:function(){this.setState({componentWidth:a.findDOMNode(this).getBoundingClientRect().width}),s(a.findDOMNode(this),this.onResize)},componentDidUpdate:function(){0===a.findDOMNode(this).getElementsByClassName("resize-sensor").length&&s(a.findDOMNode(this),this.onResize)},onResize:function(){this.setState({componentWidth:a.findDOMNode(this).getBoundingClientRect().width})}}},function(e,t){var t=function(e,t){function n(e){var t=e.target||e.srcElement;t.__resizeRAF__&&c(t.__resizeRAF__),t.__resizeRAF__=o(function(){var n=t.__resizeTrigger__;void 0!==n&&n.__resizeListeners__.forEach(function(t){t.call(n,e)})})}function a(){this.contentDocument.defaultView.__resizeTrigger__=this.__resizeElement__,this.contentDocument.defaultView.addEventListener("resize",n)}var s,o,i=this,r=i.document,l=r.attachEvent;"undefined"!=typeof navigator&&(s=navigator.userAgent.match(/Trident/)||navigator.userAgent.match(/Edge/)),o=function(){var e=i.requestAnimationFrame||i.mozRequestAnimationFrame||i.webkitRequestAnimationFrame||function(e){return i.setTimeout(e,20)};return function(t){return e(t)}}();var c=function(){var e=i.cancelAnimationFrame||i.mozCancelAnimationFrame||i.webkitCancelAnimationFrame||i.clearTimeout;return function(t){return e(t)}}();if(!e.__resizeListeners__)if(e.__resizeListeners__=[],l)e.__resizeTrigger__=e,e.attachEvent("onresize",n);else{"static"===getComputedStyle(e).position&&(e.style.position="relative");var p=e.__resizeTrigger__=r.createElement("object");p.setAttribute("style","display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1; opacity: 0;"),p.setAttribute("class","resize-sensor"),p.__resizeElement__=e,p.onload=a,p.type="text/html",s&&e.appendChild(p),p.data="about:blank",s||e.appendChild(p)}e.__resizeListeners__.push(t)};t.unbind=function(e,t){var n=document.attachEvent;e.__resizeListeners__.splice(e.__resizeListeners__.indexOf(t),1),e.__resizeListeners__.length||(n?e.detachEvent("onresize",resizeListener):(e.__resizeTrigger__.contentDocument.defaultView.removeEventListener("resize",resizeListener),e.__resizeTrigger__=!e.removeChild(e.__resizeTrigger__)))},e.exports="undefined"==typeof window?t:t.bind(window)},function(e,t,n){var a;a=n(391),e.exports={getInitialState:function(){return this.props.initialPageWidth?{pageWidth:this.props.initialPageWidth}:{}},componentDidMount:function(){return a.on(this.onResize)},componentWillUnmount:function(){return a.off(this.onResize)},onResize:function(e){return this.setState({pageWidth:e})}}},function(e,t,n){var a,s,o,i,r,l;o=n(392),a=void 0,i=[],r=!1,"undefined"!=typeof window&&null!==window&&(a=window.innerWidth),s=function(){if(!r)return r=!0,o(l)},l=function(){var e,t,n;for(a=window.innerWidth,e=0,t=i.length;e<t;e++)(n=i[e])(a);return r=!1},"undefined"!=typeof window&&null!==window&&window.addEventListener("resize",s),e.exports={on:function(e){return e(a),i.push(e)},off:function(e){return i.splice(i.indexOf(e),1)}}},function(e,t,n){for(var a=n(393),s="undefined"==typeof window?{}:window,o=["moz","webkit"],i="AnimationFrame",r=s["request"+i],l=s["cancel"+i]||s["cancelRequest"+i],c=!0,p=0;p<o.length&&!r;p++)r=s[o[p]+"Request"+i],l=s[o[p]+"Cancel"+i]||s[o[p]+"CancelRequest"+i];if(!r||!l){c=!1;var h=0,d=0,u=[],m=1e3/60;r=function(e){if(0===u.length){var t=a(),n=Math.max(0,m-(t-h));h=n+t,setTimeout(function(){var e=u.slice(0);u.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(h)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return u.push({handle:++d,callback:e,cancelled:!1}),d},l=function(e){for(var t=0;t<u.length;t++)u[t].handle===e&&(u[t].cancelled=!0)}}e.exports=function(e){return c?r.call(s,function(){try{e.apply(this,arguments)}catch(e){setTimeout(function(){throw e},0)}}):r.call(s,e)},e.exports.cancel=function(){l.apply(s,arguments)}},function(e,t,n){(function(t){(function(){var n,a,s;"undefined"!=typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!=typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-s)/1e6},a=t.hrtime,n=function(){var e;return e=a(),1e9*e[0]+e[1]},s=n()):Date.now?(e.exports=function(){return Date.now()-s},s=Date.now()):(e.exports=function(){return(new Date).getTime()-s},s=(new Date).getTime())}).call(this)}).call(t,n(110))},function(e,t,n){var a,s,o;a=n(2),s=n(4),o=n(395),e.exports=a.createClass({displayName:"Span",propTypes:{context:a.PropTypes.object,columns:a.PropTypes.number,at:a.PropTypes.number,pre:a.PropTypes.number,post:a.PropTypes.number,squish:a.PropTypes.number,last:a.PropTypes.bool,break:a.PropTypes.bool},getDefaultProps:function(){return{at:0,pre:0,post:0,squish:0,last:!1,first:!1,break:!1}},renderChildren:function(){return a.Children.map(this.props.children,function(e){return function(t){var n;return"Span"===(null!=t&&null!=(n=t.type)?n.displayName:void 0)?a.cloneElement(t,{context:{columns:e.props.columns,gutterRatio:e.props.context.gutterRatio}}):t}}(this))},render:function(){var e,t;return t=o({contextColumns:this.props.context.columns,gutterRatio:this.props.context.gutterRatio,columns:this.props.columns,at:this.props.at,pre:this.props.pre,post:this.props.post,squish:this.props.squish,last:this.props.last,break:this.props.break}),t=s(t,this.props.style),e=s({},this.props,{style:t}),delete e.at,delete e.break,delete e.columns,delete e.context,delete e.first,delete e.last,delete e.post,delete e.pre,delete e.squish,delete e.style,a.createElement("div",Object.assign({},e,{style:t}),this.renderChildren(),a.createElement("span",{style:{display:"block",clear:"both"}}," "))}})},function(e,t,n){var a;a=n(4),e.exports=function(e){var t,n,s,o,i,r,l,c,p,h;return s={columns:3,at:0,pre:0,post:0,squish:0,contextColumns:12,gutterRatio:.25,first:!1,last:!1},p=a(s,e),c=100/(p.contextColumns+(p.contextColumns-1)*p.gutterRatio),i=p.gutterRatio*c,n=function(e){return c*e+i*(e-1)},t=function(e){return 0===e?0:n(e)+i},h=n(p.columns),r=0===p.at&&0===p.pre&&0===p.squish?0:t(p.at)+t(p.pre)+t(p.squish),p.last&&0===p.post&&0===p.squish?l=0:0!==p.post||0!==p.squish?(l=t(p.post)+t(p.squish),p.last||(l+=i)):l=i,o=p.last?"right":"left",h+="%",r+="%",l+="%",{float:o,marginLeft:r,marginRight:l,width:h,clear:p.break?"both":"none"}}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}Object.defineProperty(t,"__esModule",{value:!0});var o=n(397),i=a(o),r=n(439),l=a(r),c=n(440),p=new i.default({baseFontSize:"21px",baseLineHeight:1.4,headerFontFamily:["brandon-grotesque","Brandon Grotesque","Helvetica Neue","Helvetica","Arial","Lucida Sans","Geneva","Verdana","sans-serif"],bodyFontFamily:["brandon-grotesque","Brandon Grotesque","Helvetica Neue","Helvetica","Arial","Lucida Sans","Geneva","Verdana","sans-serif"],scaleRatio:1.5,blockMarginBottom:.75,plugins:[new l.default],overrideStyles:function(){return s({"h1,h2,h3,h4,h5,h6":{lineHeight:1.1},"tt,code":{fontSize:"65%"},pre:{lineHeight:1.1}},c.MOBILE_MEDIA_QUERY,{html:{fontSize:"112.5%"}})}});p.injectStyles(),t.default=p,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=n(4),i=a(o),r=n(398),l=a(r),c=n(402),p=a(c),h=n(404),d=a(h),u=n(436),m=a(u),f=function(e){var t={baseFontSize:"16px",baseLineHeight:1.5,scaleRatio:2,googleFonts:[],headerFontFamily:["-apple-system","BlinkMacSystemFont","Segoe UI","Roboto","Oxygen","Ubuntu","Cantarell","Fira Sans","Droid Sans","Helvetica Neue","sans-serif"],bodyFontFamily:["georgia","serif"],headerColor:"inherit",bodyColor:"hsla(0,0%,0%,0.8)",headerWeight:"bold",bodyWeight:"normal",boldWeight:"bold",includeNormalize:!0,blockMarginBottom:1},n=(0,i.default)({},t,e),a=(0,l.default)(n);return a.scale=function(e){var t=n.baseFontSize.slice(0,-2),s=(0,p.default)(e,n.scaleRatio)*t+"px";return a.adjustFontSizeTo(s)},s({options:n},a,{createStyles:function(){return this.toString()},toJSON:function(){return(0,d.default)(a,n)},toString:function(){return(0,m.default)(a,n,this.toJSON())},injectStyles:function(){if("undefined"!=typeof document)if(document.getElementById("typography.js")){var e=document.getElementById("typography.js");e.innerHTML=this.toString()}else{var t=document.createElement("style");t.id="typography.js",t.innerHTML=this.toString(),document.head.appendChild(t)}}})};e.exports=f},function(e,t,n){var a,s,o,i,r,l,c,p,h,d;l=n(4),s=n(399),c=n(400),h=function(e){return c(e)[1]},d=function(e){return c(e)[0]},o={baseFontSize:"16px",baseLineHeight:1.5,rhythmUnit:"rem",defaultRhythmBorderWidth:"1px",defaultRhythmBorderStyle:"solid",roundToNearestHalfLine:!0,minLinePadding:"2px"},r=function(e,t){var n,a,o,i,r;return n=s(t.baseFontSize),a=d(n(e,"px")),o=d(t.baseLineHeightInPx),r=d(n(t.minLinePadding,"px")),i=t.roundToNearestHalfLine?Math.ceil(2*a/o)/2:Math.ceil(a/o),i*o-a<2*r&&(i+=t.roundToNearestHalfLine?.5:1),i},p=function(e){var t;return t=s(e.baseFontSize),function(n,a,s){var o,i;return null==n&&(n=1),null==a&&(a=e.baseFontSize),null==s&&(s=0),o=n*d(e.baseLineHeightInPx)-s+"px",i=t(o,e.rhythmUnit,a),"px"===h(i)&&(i=Math.floor(d(i))+h(i)),parseFloat(d(i).toFixed(5))+h(i)}},i=function(e){var t;return t=s(e.baseFontSize),{fontSize:d(e.baseFontSize)/16*100+"%",lineHeight:t(e.baseLineHeightInPx,"em")}},a=function(e,t,n,a){var o,i;return null==n&&(n=a.baseFontSize),"%"===h(e)&&(e=d(a.baseFontSize)*(d(e)/100)+"px"),o=s(a.baseFontSize),n=o(n,"px"),e=o(e,"px",n),i=p(a),"auto"===t&&(t=r(e,a)),{fontSize:o(e,a.rhythmUnit,n),lineHeight:i(t,n)}},e.exports=function(e){var t,n,c,u;return n=JSON.parse(JSON.stringify(o)),e=l(n,e),t=s(e.baseFontSize),h(e.baseLineHeight)?(c=d(t(e.baseFontSize,"px")),u=t(e.baseLineHeight,"px"),e.baseLineHeightInPx=u,e.baseLineHeight=d(u)/c):e.baseLineHeightInPx=d(e.baseFontSize)*e.baseLineHeight+"px",{rhythm:p(e),establishBaseline:function(){return i(e)},linesForFontSize:function(t){return r(t,e)},adjustFontSizeTo:function(t,n,s){return null==n&&(n="auto"),a(t,n,s,e)}}}},function(e,t,n){var a,s,o,i;s=n(400),n(401),a="16px",o=function(e){return s(e)[1]},i=function(e){return s(e)[0]},e.exports=function(e){return null==e&&(e=e),function(t,n,a,s){var r,l,c;if(null==a&&(a=e),null==s&&(s=a),r=o(t),r===n)return t;if(c=i(t),"px"!==o(a)&&console.warn("Parameter fromContext must resolve to a value in pixel units."),"px"!==o(s)&&console.warn("Parameter toContext must resolve to a value in pixel units."),"px"!==r)if("em"===r)c=i(t)*i(a);else if("rem"===r)c=i(t)*i(e);else{if("ex"!==r)return"ch"===r||"vw"===r||"vh"===r||"vmin"===r?(console.warn(r+" units can't be reliably converted; Returning original value."),t):(console.warn(r+" is an unknown or unsupported length unit; Returning original value."),t);c=i(t)*i(a)*2}if(l=c,"px"!==n)if("em"===n)l=c/i(s);else if("rem"===n)l=c/i(e);else{if("ex"!==n)return"ch"===n||"vw"===n||"vh"===n||"vmin"===n?(console.warn(n+" units can't be reliably converted; Returning original value."),
t):(console.warn(n+" is an unknown or unsupported length unit; Returning original value."),t);l=c/i(s)/2}return parseFloat(l.toFixed(5))+n}}},function(e,t){e.exports=function(e,t){t||(t=[0,""]),e=String(e);var n=parseFloat(e,10);return t[0]=n,t[1]=e.match(/[\d.\-\+]*\s*(.*)/)[1]||"",t}},function(e,t){!function(e){"use strict";for(var t,n,a={},s=function(){},o="memory".split(","),i="assert,clear,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profiles,profileEnd,show,table,time,timeEnd,timeline,timelineEnd,timeStamp,trace,warn".split(",");t=o.pop();)e[t]=e[t]||a;for(;n=i.pop();)e[n]=e[n]||s}(this.console=this.console||{})},function(e,t,n){var a,s;a=n(403),s={"minor second":16/15,"major second":9/8,"minor third":1.2,"major third":4/3,"diminished fourth":Math.sqrt(2),"perfect fifth":1.5,"minor sixth":1.6,golden:1.61803398875,phi:1.61803398875,"major sixth":5/3,"minor seventh":16/9,"major seventh":15/8,octave:2,"major tenth":2.5,"major eleventh":8/3,"major twelfth":3,"double octave":4},e.exports=function(e,t){var n;return null==e&&(e=0),null==t&&(t="golden"),n=a(t)?t:null!=s[t]?s[t]:s.golden,Math.pow(n,e)}},function(e,t){function n(e){return!!e&&"object"==typeof e}function a(e){return"number"==typeof e||n(e)&&i.call(e)==s}var s="[object Number]",o=Object.prototype,i=o.toString;e.exports=a},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o=n(405),i=a(o),r=n(406),l=a(r),c=n(410),p=a(c),h=n(413),d=a(h),u=n(381),m=a(u),f=n(277),g=a(f),y=n(254),b=a(y),w=n(414),v=a(w),k=n(433),j=a(k),x=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1],n=arguments[2],a=void 0;return a=(0,b.default)(t)?t:[t],(0,p.default)(a,function(t){(0,p.default)(n,function(n,a){(0,l.default)(e,t+"."+a,n)})}),e};e.exports=function(e,t){var n={},a=e.establishBaseline(),o=a.fontSize,r=a.lineHeight;n=x(n,"html",{font:o+"/"+r+" "+t.bodyFontFamily.join(","),boxSizing:"border-box",overflowY:"scroll"}),n=x(n,["*","*:before","*:after"],{boxSizing:"inherit"}),n=x(n,"body",{color:t.bodyColor,fontFamily:t.bodyFontFamily.join(","),fontWeight:t.bodyWeight,wordWrap:"break-word",fontKerning:"normal",MozFontFeatureSettings:'"kern", "liga", "clig", "calt"',msFontFeatureSettings:'"kern", "liga", "clig", "calt"',WebkitFontFeatureSettings:'"kern", "liga", "clig", "calt"',fontFeatureSettings:'"kern", "liga", "clig", "calt"'}),n=x(n,"img",{maxWidth:"100%"});var c="";c=(0,d.default)(t.blockMarginBottom)?e.rhythm(t.blockMarginBottom):(0,m.default)(t.blockMarginBottom)?t.blockMarginBottom:e.rhythm(1),n=x(n,["h1","h2","h3","h4","h5","h6","hgroup","ul","ol","dl","dd","p","figure","pre","table","fieldset","blockquote","form","noscript","iframe","img","hr","address"],{marginLeft:0,marginRight:0,marginTop:0,paddingBottom:0,paddingLeft:0,paddingRight:0,paddingTop:0,marginBottom:c}),n=x(n,"blockquote",{marginRight:e.rhythm(1),marginBottom:c,marginLeft:e.rhythm(1)}),n=x(n,["b","strong","dt","th"],{fontWeight:t.boldWeight}),n=x(n,"hr",{background:(0,i.default)(80),border:"none",height:"1px",marginBottom:"calc("+c+" - 1px)"}),n=x(n,["ol","ul"],{listStylePosition:"outside",listStyleImage:"none",marginLeft:e.rhythm(1)}),n=x(n,"li",{marginBottom:"calc("+c+" / 2)"}),n=x(n,["ol li","ul li"],{paddingLeft:0}),n=x(n,["li > ol","li > ul"],{marginLeft:e.rhythm(1),marginBottom:"calc("+c+" / 2)",marginTop:"calc("+c+" / 2)"}),n=x(n,["blockquote *:last-child","li *:last-child","p *:last-child"],{marginBottom:0}),n=x(n,["li > p"],{marginBottom:"calc("+c+" / 2)"}),n=x(n,["code","kbd","pre","samp"],s({},e.adjustFontSizeTo("85%"))),n=x(n,["abbr","acronym"],{borderBottom:"1px dotted "+(0,i.default)(50),cursor:"help"}),n["abbr[title]"]={borderBottom:"1px dotted "+(0,i.default)(50),cursor:"help",textDecoration:"none"},n=x(n,["table"],s({},e.adjustFontSizeTo(t.baseFontSize),{borderCollapse:"collapse",width:"100%"})),n=x(n,["thead"],{textAlign:"left"}),n=x(n,["td,th"],{textAlign:"left",borderBottom:"1px solid "+(0,i.default)(88),fontFeatureSettings:"tnum",MozFontFeatureSettings:"tnum",msFontFeatureSettings:"tnum",WebkitFontFeatureSettings:"tnum",paddingLeft:e.rhythm(2/3),paddingRight:e.rhythm(2/3),paddingTop:e.rhythm(.5),paddingBottom:"calc("+e.rhythm(.5)+" - 1px)"}),n=x(n,"th:first-child,td:first-child",{paddingLeft:0}),n=x(n,"th:last-child,td:last-child",{paddingRight:0}),n=x(n,["h1","h2","h3","h4","h5","h6"],{color:t.headerColor,fontFamily:t.headerFontFamily.join(","),fontWeight:t.headerWeight,textRendering:"optimizeLegibility"});var h=e.scale(1),u=e.scale(.6),f=e.scale(.4),y=e.scale(0),w=e.scale(-.2),k=e.scale(-.3);return(0,p.default)([h,u,f,y,w,k],function(e,t){n=(0,l.default)(n,"h"+(t+1)+".fontSize",e.fontSize),n=(0,l.default)(n,"h"+(t+1)+".lineHeight",e.lineHeight)}),(0,b.default)(t.plugins)&&(n=(0,j.default)(t.plugins,function(n,a){return(0,v.default)(n,a(e,t,n))},n)),t.overrideStyles&&(0,g.default)(t.overrideStyles)&&(n=(0,v.default)(n,t.overrideStyles(e,t,n))),t.overrideThemeStyles&&(0,g.default)(t.overrideThemeStyles)&&(n=(0,v.default)(n,t.overrideThemeStyles(e,t,n))),n}},function(e,t){function n(e){return!isNaN(parseFloat(e))&&isFinite(e)}e.exports=function(e,t,a){if("undefined"==typeof t&&(t=0),"undefined"==typeof a&&(a=!1),"cool"===t?t=237:"slate"===t?t=122:"warm"===t&&(t=69),!n(t))throw new Error("Hue is not a number");if(!n(e))throw new Error("Lightness is not a number");e>100&&(e=100),e<0&&(e=0);var s=0;if(0!==t){var o=19.92978,i=-.3651759,r=.001737214;s=o+i*e+r*Math.pow(e,2)}var l=0;return a?(l=e/100,e="100%,"):(l=(100-e)/100,e="0%,"),"hsla("+t+","+s+"%,"+e+l+")"}},function(e,t,n){function a(e,t,n){return null==e?e:s(e,t,n)}var s=n(407);e.exports=a},function(e,t,n){function a(e,t,n,a){if(!r(e))return e;t=o(t,e);for(var c=-1,p=t.length,h=p-1,d=e;null!=d&&++c<p;){var u=l(t[c]),m=n;if(c!=h){var f=d[u];m=a?a(f,u,d):void 0,void 0===m&&(m=r(f)?f:i(t[c+1])?[]:{})}s(d,u,m),d=d[u]}return e}var s=n(408),o=n(344),i=n(322),r=n(278),l=n(352);e.exports=a},function(e,t,n){function a(e,t,n){var a=e[t];r.call(e,t)&&o(a,n)&&(void 0!==n||t in e)||s(e,t,n)}var s=n(409),o=n(265),i=Object.prototype,r=i.hasOwnProperty;e.exports=a},function(e,t,n){function a(e,t,n){"__proto__"==t&&s?s(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}var s=n(375);e.exports=a},function(e,t,n){function a(e,t){var n=r(e)?s:o;return n(e,i(t))}var s=n(411),o=n(361),i=n(412),r=n(254);e.exports=a},function(e,t){function n(e,t){for(var n=-1,a=null==e?0:e.length;++n<a&&t(e[n],n,e)!==!1;);return e}e.exports=n},function(e,t,n){function a(e){return"function"==typeof e?e:s}var s=n(356);e.exports=a},function(e,t,n){function a(e){return"number"==typeof e||o(e)&&s(e)==i}var s=n(250),o=n(253),i="[object Number]";e.exports=a},function(e,t,n){var a=n(415),s=n(432),o=s(function(e,t,n){a(e,t,n)});e.exports=o},function(e,t,n){function a(e,t,n,p,h){e!==t&&i(t,function(i,c){if(l(i))h||(h=new s),r(e,t,c,n,a,p,h);else{var d=p?p(e[c],i,c+"",e,t,h):void 0;void 0===d&&(d=i),o(e,c,d)}},c)}var s=n(260),o=n(416),i=n(363),r=n(417),l=n(278),c=n(429);e.exports=a},function(e,t,n){function a(e,t,n){(void 0===n||o(e[t],n))&&(void 0!==n||t in e)||s(e,t,n)}var s=n(409),o=n(265);e.exports=a},function(e,t,n){function a(e,t,n,a,b,w,v){var k=e[n],j=t[n],x=v.get(j);if(x)return void s(e,n,x);var S=w?w(k,j,n+"",e,t,v):void 0,I=void 0===S;if(I){var T=p(j),_=!T&&d(j),C=!T&&!_&&g(j);S=j,T||_||C?p(k)?S=k:h(k)?S=r(k):_?(I=!1,S=o(j,!0)):C?(I=!1,S=i(j,!0)):S=[]:f(j)||c(j)?(S=k,c(k)?S=y(k):(!m(k)||a&&u(k))&&(S=l(j))):I=!1}I&&(v.set(j,S),b(S,j,a,w,v),v.delete(j)),s(e,n,S)}var s=n(416),o=n(418),i=n(419),r=n(421),l=n(422),c=n(248),p=n(254),h=n(425),d=n(319),u=n(277),m=n(278),f=n(426),g=n(323),y=n(427);e.exports=a},function(e,t,n){(function(e){function a(e,t){if(t)return e.slice();var n=e.length,a=c?c(n):new e.constructor(n);return e.copy(a),a}var s=n(246),o="object"==typeof t&&t&&!t.nodeType&&t,i=o&&"object"==typeof e&&e&&!e.nodeType&&e,r=i&&i.exports===o,l=r?s.Buffer:void 0,c=l?l.allocUnsafe:void 0;e.exports=a}).call(t,n(320)(e))},function(e,t,n){function a(e,t){var n=t?s(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}var s=n(420);e.exports=a},function(e,t,n){function a(e){var t=new e.constructor(e.byteLength);return new s(t).set(new s(e)),t}var s=n(307);e.exports=a},function(e,t){function n(e,t){var n=-1,a=e.length;for(t||(t=Array(a));++n<a;)t[n]=e[n];return t}e.exports=n},function(e,t,n){function a(e){return"function"!=typeof e.constructor||i(e)?{}:s(o(e))}var s=n(423),o=n(424),i=n(329);e.exports=a},function(e,t,n){var a=n(278),s=Object.create,o=function(){function e(){}return function(t){if(!a(t))return{};if(s)return s(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=o},function(e,t,n){var a=n(331),s=a(Object.getPrototypeOf,Object);e.exports=s},function(e,t,n){function a(e){return o(e)&&s(e)}var s=n(332),o=n(253);e.exports=a},function(e,t,n){function a(e){if(!i(e)||s(e)!=r)return!1;var t=o(e);if(null===t)return!0;var n=h.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&p.call(n)==d}var s=n(250),o=n(424),i=n(253),r="[object Object]",l=Function.prototype,c=Object.prototype,p=l.toString,h=c.hasOwnProperty,d=p.call(Object);e.exports=a},function(e,t,n){function a(e){return s(e,o(e))}var s=n(428),o=n(429);e.exports=a},function(e,t,n){function a(e,t,n,a){var i=!n;n||(n={});for(var r=-1,l=t.length;++r<l;){var c=t[r],p=a?a(n[c],e[c],c,n,e):void 0;void 0===p&&(p=e[c]),i?o(n,c,p):s(n,c,p)}return n}var s=n(408),o=n(409);e.exports=a},function(e,t,n){function a(e){return i(e)?s(e,!0):o(e)}var s=n(317),o=n(430),i=n(332);e.exports=a},function(e,t,n){function a(e){if(!s(e))return i(e);var t=o(e),n=[];for(var a in e)("constructor"!=a||!t&&l.call(e,a))&&n.push(a);return n}var s=n(278),o=n(329),i=n(431),r=Object.prototype,l=r.hasOwnProperty;e.exports=a},function(e,t){function n(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}e.exports=n},function(e,t,n){function a(e){return s(function(t,n){var a=-1,s=n.length,i=s>1?n[s-1]:void 0,r=s>2?n[2]:void 0;for(i=e.length>3&&"function"==typeof i?(s--,i):void 0,r&&o(n[0],n[1],r)&&(i=s<3?void 0:i,s=1),t=Object(t);++a<s;){var l=n[a];l&&e(t,l,a,i)}return t})}var s=n(369),o=n(377);e.exports=a},function(e,t,n){function a(e,t,n){var a=l(e)?s:r,c=arguments.length<3;return a(e,i(t,4),n,c,o)}var s=n(434),o=n(361),i=n(257),r=n(435),l=n(254);e.exports=a},function(e,t){function n(e,t,n,a){var s=-1,o=null==e?0:e.length;for(a&&o&&(n=e[++s]);++s<o;)n=t(n,e[s],s,e);return n}e.exports=n},function(e,t){function n(e,t,n,a,s){return s(e,function(e,s,o){n=a?(a=!1,e):t(n,e,s,o)}),n}e.exports=n},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var s=n(437),o=a(s),i=n(438),r=a(i),l=n(410),c=a(l),p=n(433),h=a(p),d=n(278),u=a(d),m=function e(t){return(0,h.default)(t,function(t,n,a){return t+=a+"{",(0,c.default)(n,function(n,a){if((0,u.default)(n)){var s={};s[a]=n,t+=e(s)}else!function(){var e=(0,r.default)(a,"-")+":"+n+";",s=["Webkit","ms","Moz","O"];s.forEach(function(t){a.slice(0,t.length)===t&&(e="-"+e)}),t+=e}()}),t+="}"},"")};e.exports=function(e,t,n){var a=m(n);return t.includeNormalize&&(a=""+o.default+a),a}},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),/*! normalize.css v4.1.1 | MIT License | github.com/necolas/normalize.css */
t.default="html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;-webkit-text-decoration-skip:objects}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}"},function(e,t){"use strict";e.exports=function(e,t){if("string"!=typeof e)throw new TypeError("Expected a string");return t="undefined"==typeof t?"_":t,e.replace(/([a-z\d])([A-Z])/g,"$1"+t+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+t+"$2").toLowerCase()}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(405),o=a(s),i=n(413),r=a(i),l=n(381),c=a(l),p=function(){return function(e,t){var n=e.rhythm,a=void 0;return a=(0,r.default)(t.blockMarginBottom)?n(t.blockMarginBottom):(0,c.default)(t.blockMarginBottom)?t.blockMarginBottom:n(1),{"tt,code":{backgroundColor:(0,o.default)(96),borderRadius:"3px",fontFamily:'"SFMono-Regular", Consolas,"Roboto Mono","Droid Sans Mono","Liberation Mono",Menlo,Courier,monospace',padding:0,paddingTop:"0.2em",paddingBottom:"0.2em"},pre:{background:(0,o.default)(96),borderRadius:"3px",lineHeight:1.42,overflow:"auto",wordWrap:"normal",padding:a},"pre code":{background:"none",lineHeight:1.42},"code:before,code:after,tt:before,tt:after":{letterSpacing:"-0.2em",content:'" "'},"pre code:before,pre code:after,pre tt:before,pre tt:after":{content:'""'}}}};t.default=p},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.LARGER_DISPLAY_WIDTH="1600px",t.LARGE_DISPLAY_WIDTH="1280px",t.DEFAULT_WIDTH="980px",t.TABLET_WIDTH="768px",t.MOBILE_WIDTH="480px",t.LARGER_DISPLAY_MEDIA_QUERY="@media only screen and (max-width:1600px)",t.LARGE_DISPLAY_MEDIA_QUERY="@media only screen and (max-width:1280px)",t.DEFAULT_MEDIA_QUERY="@media only screen and (max-width:980px)",t.TABLET_MEDIA_QUERY="@media only screen and (max-width:768px)",t.MOBILE_MEDIA_QUERY="@media only screen and (max-width:480px)",t.MIN_LARGER_DISPLAY_MEDIA_QUERY="@media (min-width:1600px)",t.MIN_LARGE_DISPLAY_MEDIA_QUERY="@media (min-width:1280px)",t.MIN_DEFAULT_MEDIA_QUERY="@media (min-width:980px)",t.MIN_TABLET_MEDIA_QUERY="@media (min-width:768px)",t.MIN_MOBILE_MEDIA_QUERY="@media (min-width:480px)"},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=n(380),d=n(442);n(443);var u=t.Header=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props.blogTitle;return c.default.createElement("div",{style:{display:"flex",paddingBottom:"0.5rem",marginBottom:"0.5rem"}},c.default.createElement("div",{style:{flexGrow:3,display:"flex",flexDirection:"column",justifyContent:"space-around"}},c.default.createElement("h3",{style:{margin:0,paddingBottom:0}},c.default.createElement(p.Link,{style:{boxShadow:"none",textDecoration:"none",color:"inherit"},name:"title",to:(0,h.prefixLink)("/")},e)),c.default.createElement("div",{style:{color:"rgba(100,100,100, 0.7)"}},c.default.createElement(p.Link,{className:"header-link",to:(0,h.prefixLink)("/subscribe/")},"Subscribe"),c.default.createElement("span",{style:{padding:"0 0.33rem"}},"•"),c.default.createElement(p.Link,{className:"header-link",to:(0,h.prefixLink)("/archive/")},"Archive"),c.default.createElement("span",{style:{padding:"0 0.33rem"}},"•"),c.default.createElement("a",{className:"header-link",href:"http://twitter.com/ben336"},"Twitter"),c.default.createElement("span",{style:{padding:"0 0.33rem"}},"•"),c.default.createElement(p.Link,{className:"header-link",to:(0,h.prefixLink)("/about/")},"About"))),c.default.createElement("div",{style:{flexShrink:2}},c.default.createElement(d.Ad,null)))}}]),t}(c.default.Component);u.propTypes={blogTitle:c.default.PropTypes.string.isRequired}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.Ad=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=t.Ad=function(e){function t(e){s(this,t);var n=o(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={url:null},n}return i(t,e),r(t,[{key:"insertScript",value:function(){var e=document.createElement("script");for(e.src="//cdn.carbonads.com/carbon.js?zoneid=1673&serve=C6AILKT&placement=benmccormickorg",e.type="text/javascript",e.id="_carbonads_js",e.async=!0;this.container.hasChildNodes();)this.container.removeChild(this.container.lastChild);this.container.appendChild(e)}},{key:"componentDidMount",value:function(){var e=this;p.browserHistory.listen(function(t){var n=t.pathname;n!==e.state.url&&e.insertScript(),e.setState({url:n})})}},{key:"render",value:function(){var e=this;return c.default.createElement("span",{ref:function(t){return e.container=t}})}}]),t}(c.default.Component);h.propTypes={}},function(e,t){},443,function(e,t,n){function a(e){return n(s(e))}function s(e){return o[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var o={"./md":446,"./md.js":446};a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id=445},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(447),h=a(p),d=n(448),u=a(d),m=n(457),f=a(m),g=n(396),y=n(382),b=n(481),w=n(410),v=a(w),k=n(240),j=a(k),x=n(484),S=a(x);n(486),n(487),n(488),n(489);var I=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"extractTwitterStatusID",value:function(e){var t=e.querySelectorAll("a"),n=(0,j.default)(t);if(n&&n.href){var a=/status\/(\d+)$/,s=n.href.match(a);if(s)return s[1]}}},{key:"componentDidMount",value:function(){var e=this,t=n(490);t.load(function(t){var n=e.markdownContainer.querySelectorAll("blockquote.twitter-tweet"),a=e.markdownContainer.querySelectorAll(".twitter-follow-button");(0,S.default)(function(){(0,v.default)(n,function(n){var a=e.extractTwitterStatusID(n),s=n.parentNode;n.remove();var o=document.createElement("div");s.appendChild(o),t.widgets.createTweet(a,s)}),(0,v.default)(a,function(e){t.widgets.createFollowButton("",e)})})})}},{key:"render",value:function(){var e=this,t=this.props,n=t.route,a=t.location,s=n.page.data,o="page"===s.layout,i="post"===s.layout,r=(0,j.default)(s.path.split("/")),l="http://benmccormick.org"+a.pathname;return c.default.createElement("div",{className:"markdown",ref:function(t){return e.markdownContainer=t}},c.default.createElement(u.default,{title:s.title+" | "+y.config.blogTitle,meta:[{name:"description",content:s.description||"Ben McCormick's blog on JavaScript and Web Development"},{name:"keywords",content:s.keywords||""},{name:"twitter:card",content:"summary"},{name:"twitter:site",content:"@benmccormickorg"},{name:"twitter:creator",content:"@ben336"},{name:"twitter:title",content:s.title},{name:"twitter:description",content:s.description||""},{name:"twitter:image",content:s.image||"http://benmccormick.org/logo.png"}],script:[{type:"application/ld+json",innerHTML:'{\n                "@context": "http://schema.org"\n                "@type": "BlogPosting",\n                "headline": "'+s.title+'",\n                "genre": "Software Development",\n                "keywords": "'+(s.keywords||"")+'",\n                "url": "'+l+'",\n                "image": "'+(s.image||"http://benmccormick.org/logo.png")+'",\n                "datePublished": "'+(0,h.default)(s.date).format("YYYY-MM-D")+'",\n                '+(s.description?'"description": "'+s.description+'",':"")+'\n                "articleBody": "'+s.body.replace(/\"/g,'\\"')+'",\n                  "author": {\n                    "@type": "Person",\n                    "name": "Ben McCormick"\n                    "email": "mailto:ben@benmccormick.org",\n                    "image": "/profile_pic.jpg",\n                    "jobTitle": "Software Engineer",\n                    "alumniOf": "Duke",\n                    "birthPlace": "Pittsburgh, PA",\n                    "gender": "male",\n                    "url": "http://benmccormick.org",\n              \t    "sameAs" : [\n                      "https://www.linkedin.com/in/benmccormick",\n                      "http://twitter.com/ben336",\n                    ]\n                 }\n              }'}]}),o?null:c.default.createElement("h5",{style:{display:"block",color:"rgba(100,100,100, 0.7)",marginBottom:(0,g.rhythm)(.25)}},(0,h.default)(s.date).format("MMMM D, YYYY")),c.default.createElement("h1",{style:{marginTop:0,marginBottom:"1rem"}},s.title),c.default.createElement("div",{className:"article-body",dangerouslySetInnerHTML:{__html:s.body}}),i?c.default.createElement(f.default,{post:s,pages:n.pages}):null,s.hideFooter?null:c.default.createElement("hr",{style:{marginBottom:(0,g.rhythm)(2)}}),o||s.hideFooter?null:c.default.createElement(b.Disqus,{title:s.title,shortName:r,url:l}))}}]),t}(c.default.Component);I.propTypes={route:c.default.PropTypes.object,location:c.default.PropTypes.object},t.default=I,e.exports=t.default},function(e,t,n){(function(e){!function(t,n){e.exports=n()}(this,function(){"use strict";function t(){return ga.apply(null,arguments)}function n(e){ga=e}function a(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){var t;for(t in e)return!1;return!0}function i(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function r(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function l(e,t){var n,a=[];for(n=0;n<e.length;++n)a.push(t(e[n],n));return a}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function p(e,t){for(var n in t)c(t,n)&&(e[n]=t[n]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,a){return bt(e,t,n,a,!0).utc()}function d(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function u(e){return null==e._pf&&(e._pf=d()),e._pf}function m(e){if(null==e._isValid){var t=u(e),n=ba.call(t.parsedDateParts,function(e){return null!=e}),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function f(e){var t=h(NaN);return null!=e?p(u(t),e):u(t).userInvalidated=!0,t}function g(e){return void 0===e}function y(e,t){var n,a,s;if(g(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),g(t._i)||(e._i=t._i),g(t._f)||(e._f=t._f),g(t._l)||(e._l=t._l),g(t._strict)||(e._strict=t._strict),g(t._tzm)||(e._tzm=t._tzm),g(t._isUTC)||(e._isUTC=t._isUTC),g(t._offset)||(e._offset=t._offset),g(t._pf)||(e._pf=u(t)),g(t._locale)||(e._locale=t._locale),wa.length>0)for(n in wa)a=wa[n],s=t[a],g(s)||(e[a]=s);return e}function b(e){y(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),va===!1&&(va=!0,t.updateOffset(this),va=!1)}function w(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function v(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function k(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=v(t)),n}function j(e,t,n){var a,s=Math.min(e.length,t.length),o=Math.abs(e.length-t.length),i=0;for(a=0;a<s;a++)(n&&e[a]!==t[a]||!n&&k(e[a])!==k(t[a]))&&i++;return i+o}function x(e){t.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function S(e,n){var a=!0;return p(function(){if(null!=t.deprecationHandler&&t.deprecationHandler(null,e),a){for(var s,o=[],i=0;i<arguments.length;i++){if(s="","object"==typeof arguments[i]){s+="\n["+i+"] ";for(var r in arguments[0])s+=r+": "+arguments[0][r]+", ";s=s.slice(0,-2)}else s=arguments[i];o.push(s)}x(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),a=!1}return n.apply(this,arguments)},n)}function I(e,n){null!=t.deprecationHandler&&t.deprecationHandler(e,n),ka[e]||(x(n),ka[e]=!0)}function T(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function _(e){var t,n;for(n in e)t=e[n],T(t)?this[n]=t:this["_"+n]=t;this._config=e,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function C(e,t){var n,a=p({},e);for(n in t)c(t,n)&&(s(e[n])&&s(t[n])?(a[n]={},p(a[n],e[n]),p(a[n],t[n])):null!=t[n]?a[n]=t[n]:delete a[n]);for(n in e)c(e,n)&&!c(t,n)&&s(e[n])&&(a[n]=p({},a[n]));return a}function M(e){null!=e&&this.set(e)}function A(e,t,n){var a=this._calendar[e]||this._calendar.sameElse;return T(a)?a.call(t,n):a}function E(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])}function P(){return this._invalidDate}function V(e){return this._ordinal.replace("%d",e)}function O(e,t,n,a){var s=this._relativeTime[n];return T(s)?s(e,t,n,a):s.replace(/%d/i,e)}function R(e,t){var n=this._relativeTime[e>0?"future":"past"];return T(n)?n(t):n.replace(/%s/i,t)}function B(e,t){var n=e.toLowerCase();Ea[n]=Ea[n+"s"]=Ea[t]=e}function q(e){return"string"==typeof e?Ea[e]||Ea[e.toLowerCase()]:void 0}function D(e){var t,n,a={};for(n in e)c(e,n)&&(t=q(n),t&&(a[t]=e[n]));return a}function L(e,t){Pa[e]=t}function N(e){var t=[];for(var n in e)t.push({unit:n,priority:Pa[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}function F(e,n){return function(a){return null!=a?(J(this,e,a),t.updateOffset(this,n),this):W(this,e)}}function W(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function J(e,t,n){e.isValid()&&e._d["set"+(e._isUTC?"UTC":"")+t](n)}function U(e){return e=q(e),T(this[e])?this[e]():this}function H(e,t){if("object"==typeof e){e=D(e);for(var n=N(e),a=0;a<n.length;a++)this[n[a].unit](e[n[a].unit])}else if(e=q(e),T(this[e]))return this[e](t);return this}function z(e,t,n){var a=""+Math.abs(e),s=t-a.length,o=e>=0;return(o?n?"+":"":"-")+Math.pow(10,Math.max(0,s)).toString().substr(1)+a}function Y(e,t,n,a){var s=a;"string"==typeof a&&(s=function(){return this[a]()}),e&&(Ba[e]=s),t&&(Ba[t[0]]=function(){return z(s.apply(this,arguments),t[1],t[2])}),n&&(Ba[n]=function(){return this.localeData().ordinal(s.apply(this,arguments),e)})}function G(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function $(e){var t,n,a=e.match(Va);for(t=0,n=a.length;t<n;t++)Ba[a[t]]?a[t]=Ba[a[t]]:a[t]=G(a[t]);return function(t){var s,o="";for(s=0;s<n;s++)o+=a[s]instanceof Function?a[s].call(t,e):a[s];return o}}function Q(e,t){return e.isValid()?(t=K(t,e.localeData()),Ra[t]=Ra[t]||$(t),Ra[t](e)):e.localeData().invalidDate()}function K(e,t){function n(e){return t.longDateFormat(e)||e}var a=5;for(Oa.lastIndex=0;a>=0&&Oa.test(e);)e=e.replace(Oa,n),Oa.lastIndex=0,a-=1;return e}function X(e,t,n){es[e]=T(t)?t:function(e,a){return e&&n?n:t}}function Z(e,t){return c(es,e)?es[e](t._strict,t._locale):new RegExp(ee(e))}function ee(e){return te(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,a,s){return t||n||a||s}))}function te(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function ne(e,t){var n,a=t;for("string"==typeof e&&(e=[e]),i(t)&&(a=function(e,n){n[t]=k(e)}),n=0;n<e.length;n++)ts[e[n]]=a}function ae(e,t){ne(e,function(e,n,a,s){a._w=a._w||{},t(e,a._w,a,s)})}function se(e,t,n){null!=t&&c(ts,e)&&ts[e](t,n._a,n,e)}function oe(e,t){return new Date(Date.UTC(e,t+1,0)).getUTCDate()}function ie(e,t){return e?a(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||ds).test(t)?"format":"standalone"][e.month()]:this._months}function re(e,t){return e?a(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[ds.test(t)?"format":"standalone"][e.month()]:this._monthsShort}function le(e,t,n){var a,s,o,i=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],a=0;a<12;++a)o=h([2e3,a]),this._shortMonthsParse[a]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[a]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===t?(s=hs.call(this._shortMonthsParse,i),s!==-1?s:null):(s=hs.call(this._longMonthsParse,i),s!==-1?s:null):"MMM"===t?(s=hs.call(this._shortMonthsParse,i),s!==-1?s:(s=hs.call(this._longMonthsParse,i),s!==-1?s:null)):(s=hs.call(this._longMonthsParse,i),s!==-1?s:(s=hs.call(this._shortMonthsParse,i),s!==-1?s:null))}function ce(e,t,n){var a,s,o;if(this._monthsParseExact)return le.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),a=0;a<12;a++){if(s=h([2e3,a]),n&&!this._longMonthsParse[a]&&(this._longMonthsParse[a]=new RegExp("^"+this.months(s,"").replace(".","")+"$","i"),this._shortMonthsParse[a]=new RegExp("^"+this.monthsShort(s,"").replace(".","")+"$","i")),n||this._monthsParse[a]||(o="^"+this.months(s,"")+"|^"+this.monthsShort(s,""),this._monthsParse[a]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[a].test(e))return a;if(n&&"MMM"===t&&this._shortMonthsParse[a].test(e))return a;if(!n&&this._monthsParse[a].test(e))return a}}function pe(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=k(t);else if(t=e.localeData().monthsParse(t),!i(t))return e;return n=Math.min(e.date(),oe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function he(e){return null!=e?(pe(this,e),t.updateOffset(this,!0),this):W(this,"Month")}function de(){return oe(this.year(),this.month())}function ue(e){return this._monthsParseExact?(c(this,"_monthsRegex")||fe.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=fs),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)}function me(e){return this._monthsParseExact?(c(this,"_monthsRegex")||fe.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=gs),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)}function fe(){function e(e,t){return t.length-e.length}var t,n,a=[],s=[],o=[];for(t=0;t<12;t++)n=h([2e3,t]),a.push(this.monthsShort(n,"")),s.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(a.sort(e),s.sort(e),o.sort(e),t=0;t<12;t++)a[t]=te(a[t]),s[t]=te(s[t]);for(t=0;t<24;t++)o[t]=te(o[t]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+a.join("|")+")","i")}function ge(e){return ye(e)?366:365}function ye(e){return e%4===0&&e%100!==0||e%400===0}function be(){return ye(this.year())}function we(e,t,n,a,s,o,i){var r=new Date(e,t,n,a,s,o,i);return e<100&&e>=0&&isFinite(r.getFullYear())&&r.setFullYear(e),r}function ve(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function ke(e,t,n){var a=7+t-n,s=(7+ve(e,0,a).getUTCDay()-t)%7;return-s+a-1}function je(e,t,n,a,s){var o,i,r=(7+n-a)%7,l=ke(e,a,s),c=1+7*(t-1)+r+l;return c<=0?(o=e-1,i=ge(o)+c):c>ge(e)?(o=e+1,i=c-ge(e)):(o=e,i=c),{year:o,dayOfYear:i}}function xe(e,t,n){var a,s,o=ke(e.year(),t,n),i=Math.floor((e.dayOfYear()-o-1)/7)+1;return i<1?(s=e.year()-1,a=i+Se(s,t,n)):i>Se(e.year(),t,n)?(a=i-Se(e.year(),t,n),s=e.year()+1):(s=e.year(),a=i),{week:a,year:s}}function Se(e,t,n){var a=ke(e,t,n),s=ke(e+1,t,n);return(ge(e)-a+s)/7}function Ie(e){return xe(e,this._week.dow,this._week.doy).week}function Te(){return this._week.dow}function _e(){return this._week.doy}function Ce(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")}function Me(e){var t=xe(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")}function Ae(e,t){return"string"!=typeof e?e:isNaN(e)?(e=t.weekdaysParse(e),"number"==typeof e?e:null):parseInt(e,10)}function Ee(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}function Pe(e,t){return e?a(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(t)?"format":"standalone"][e.day()]:this._weekdays}function Ve(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort}function Oe(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin}function Re(e,t,n){var a,s,o,i=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],a=0;a<7;++a)o=h([2e3,1]).day(a),this._minWeekdaysParse[a]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[a]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[a]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===t?(s=hs.call(this._weekdaysParse,i),s!==-1?s:null):"ddd"===t?(s=hs.call(this._shortWeekdaysParse,i),s!==-1?s:null):(s=hs.call(this._minWeekdaysParse,i),s!==-1?s:null):"dddd"===t?(s=hs.call(this._weekdaysParse,i),s!==-1?s:(s=hs.call(this._shortWeekdaysParse,i),s!==-1?s:(s=hs.call(this._minWeekdaysParse,i),s!==-1?s:null))):"ddd"===t?(s=hs.call(this._shortWeekdaysParse,i),s!==-1?s:(s=hs.call(this._weekdaysParse,i),s!==-1?s:(s=hs.call(this._minWeekdaysParse,i),s!==-1?s:null))):(s=hs.call(this._minWeekdaysParse,i),s!==-1?s:(s=hs.call(this._weekdaysParse,i),s!==-1?s:(s=hs.call(this._shortWeekdaysParse,i),s!==-1?s:null)))}function Be(e,t,n){var a,s,o;if(this._weekdaysParseExact)return Re.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),a=0;a<7;a++){if(s=h([2e3,1]).day(a),n&&!this._fullWeekdaysParse[a]&&(this._fullWeekdaysParse[a]=new RegExp("^"+this.weekdays(s,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[a]=new RegExp("^"+this.weekdaysShort(s,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[a]=new RegExp("^"+this.weekdaysMin(s,"").replace(".",".?")+"$","i")),this._weekdaysParse[a]||(o="^"+this.weekdays(s,"")+"|^"+this.weekdaysShort(s,"")+"|^"+this.weekdaysMin(s,""),this._weekdaysParse[a]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[a].test(e))return a;if(n&&"ddd"===t&&this._shortWeekdaysParse[a].test(e))return a;if(n&&"dd"===t&&this._minWeekdaysParse[a].test(e))return a;if(!n&&this._weekdaysParse[a].test(e))return a}}function qe(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=Ae(e,this.localeData()),this.add(e-t,"d")):t}function De(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")}function Le(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=Ee(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7}function Ne(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=js),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)}function Fe(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=xs),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)}function We(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Je.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ss),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)}function Je(){function e(e,t){return t.length-e.length}var t,n,a,s,o,i=[],r=[],l=[],c=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),a=this.weekdaysMin(n,""),s=this.weekdaysShort(n,""),o=this.weekdays(n,""),i.push(a),r.push(s),l.push(o),c.push(a),c.push(s),c.push(o);for(i.sort(e),r.sort(e),l.sort(e),c.sort(e),t=0;t<7;t++)r[t]=te(r[t]),l[t]=te(l[t]),c[t]=te(c[t]);this._weekdaysRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+r.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Ue(){return this.hours()%12||12}function He(){return this.hours()||24}function ze(e,t){Y(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function Ye(e,t){return t._meridiemParse}function Ge(e){return"p"===(e+"").toLowerCase().charAt(0)}function $e(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"}function Qe(e){return e?e.toLowerCase().replace("_","-"):e}function Ke(e){for(var t,n,a,s,o=0;o<e.length;){for(s=Qe(e[o]).split("-"),t=s.length,n=Qe(e[o+1]),n=n?n.split("-"):null;t>0;){if(a=Xe(s.slice(0,t).join("-")))return a;if(n&&n.length>=t&&j(s,n,!0)>=t-1)break;t--}o++}return null}function Xe(t){var n=null;if(!Ms[t]&&"undefined"!=typeof e&&e&&e.exports)try{n=Is._abbr,!function(){var e=new Error('Cannot find module "./locale"');throw e.code="MODULE_NOT_FOUND",e}(),Ze(n)}catch(e){}return Ms[t]}function Ze(e,t){var n;return e&&(n=g(t)?nt(e):et(e,t),n&&(Is=n)),Is._abbr}function et(e,t){if(null!==t){var n=Cs;if(t.abbr=e,null!=Ms[e])I("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Ms[e]._config;else if(null!=t.parentLocale){if(null==Ms[t.parentLocale])return As[t.parentLocale]||(As[t.parentLocale]=[]),As[t.parentLocale].push({name:e,config:t}),null;n=Ms[t.parentLocale]._config}return Ms[e]=new M(C(n,t)),As[e]&&As[e].forEach(function(e){et(e.name,e.config)}),Ze(e),Ms[e]}return delete Ms[e],null}function tt(e,t){if(null!=t){var n,a=Cs;null!=Ms[e]&&(a=Ms[e]._config),t=C(a,t),n=new M(t),n.parentLocale=Ms[e],Ms[e]=n,Ze(e)}else null!=Ms[e]&&(null!=Ms[e].parentLocale?Ms[e]=Ms[e].parentLocale:null!=Ms[e]&&delete Ms[e]);return Ms[e]}function nt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Is;if(!a(e)){if(t=Xe(e))return t;e=[e]}return Ke(e)}function at(){return Sa(Ms)}function st(e){var t,n=e._a;return n&&u(e).overflow===-2&&(t=n[as]<0||n[as]>11?as:n[ss]<1||n[ss]>oe(n[ns],n[as])?ss:n[os]<0||n[os]>24||24===n[os]&&(0!==n[is]||0!==n[rs]||0!==n[ls])?os:n[is]<0||n[is]>59?is:n[rs]<0||n[rs]>59?rs:n[ls]<0||n[ls]>999?ls:-1,u(e)._overflowDayOfYear&&(t<ns||t>ss)&&(t=ss),u(e)._overflowWeeks&&t===-1&&(t=cs),u(e)._overflowWeekday&&t===-1&&(t=ps),u(e).overflow=t),e}function ot(e){var t,n,a,s,o,i,r=e._i,l=Es.exec(r)||Ps.exec(r);if(l){for(u(e).iso=!0,t=0,n=Os.length;t<n;t++)if(Os[t][1].exec(l[1])){s=Os[t][0],a=Os[t][2]!==!1;break}if(null==s)return void(e._isValid=!1);if(l[3]){for(t=0,n=Rs.length;t<n;t++)if(Rs[t][1].exec(l[3])){o=(l[2]||" ")+Rs[t][0];break}if(null==o)return void(e._isValid=!1)}if(!a&&null!=o)return void(e._isValid=!1);if(l[4]){if(!Vs.exec(l[4]))return void(e._isValid=!1);i="Z"}e._f=s+(o||"")+(i||""),ht(e)}else e._isValid=!1;
}function it(e){var n=Bs.exec(e._i);return null!==n?void(e._d=new Date(+n[1])):(ot(e),void(e._isValid===!1&&(delete e._isValid,t.createFromInputFallback(e))))}function rt(e,t,n){return null!=e?e:null!=t?t:n}function lt(e){var n=new Date(t.now());return e._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}function ct(e){var t,n,a,s,o=[];if(!e._d){for(a=lt(e),e._w&&null==e._a[ss]&&null==e._a[as]&&pt(e),e._dayOfYear&&(s=rt(e._a[ns],a[ns]),e._dayOfYear>ge(s)&&(u(e)._overflowDayOfYear=!0),n=ve(s,0,e._dayOfYear),e._a[as]=n.getUTCMonth(),e._a[ss]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=a[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[os]&&0===e._a[is]&&0===e._a[rs]&&0===e._a[ls]&&(e._nextDay=!0,e._a[os]=0),e._d=(e._useUTC?ve:we).apply(null,o),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[os]=24)}}function pt(e){var t,n,a,s,o,i,r,l;if(t=e._w,null!=t.GG||null!=t.W||null!=t.E)o=1,i=4,n=rt(t.GG,e._a[ns],xe(wt(),1,4).year),a=rt(t.W,1),s=rt(t.E,1),(s<1||s>7)&&(l=!0);else{o=e._locale._week.dow,i=e._locale._week.doy;var c=xe(wt(),o,i);n=rt(t.gg,e._a[ns],c.year),a=rt(t.w,c.week),null!=t.d?(s=t.d,(s<0||s>6)&&(l=!0)):null!=t.e?(s=t.e+o,(t.e<0||t.e>6)&&(l=!0)):s=o}a<1||a>Se(n,o,i)?u(e)._overflowWeeks=!0:null!=l?u(e)._overflowWeekday=!0:(r=je(n,a,s,o,i),e._a[ns]=r.year,e._dayOfYear=r.dayOfYear)}function ht(e){if(e._f===t.ISO_8601)return void ot(e);e._a=[],u(e).empty=!0;var n,a,s,o,i,r=""+e._i,l=r.length,c=0;for(s=K(e._f,e._locale).match(Va)||[],n=0;n<s.length;n++)o=s[n],a=(r.match(Z(o,e))||[])[0],a&&(i=r.substr(0,r.indexOf(a)),i.length>0&&u(e).unusedInput.push(i),r=r.slice(r.indexOf(a)+a.length),c+=a.length),Ba[o]?(a?u(e).empty=!1:u(e).unusedTokens.push(o),se(o,a,e)):e._strict&&!a&&u(e).unusedTokens.push(o);u(e).charsLeftOver=l-c,r.length>0&&u(e).unusedInput.push(r),e._a[os]<=12&&u(e).bigHour===!0&&e._a[os]>0&&(u(e).bigHour=void 0),u(e).parsedDateParts=e._a.slice(0),u(e).meridiem=e._meridiem,e._a[os]=dt(e._locale,e._a[os],e._meridiem),ct(e),st(e)}function dt(e,t,n){var a;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?(a=e.isPM(n),a&&t<12&&(t+=12),a||12!==t||(t=0),t):t}function ut(e){var t,n,a,s,o;if(0===e._f.length)return u(e).invalidFormat=!0,void(e._d=new Date(NaN));for(s=0;s<e._f.length;s++)o=0,t=y({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[s],ht(t),m(t)&&(o+=u(t).charsLeftOver,o+=10*u(t).unusedTokens.length,u(t).score=o,(null==a||o<a)&&(a=o,n=t));p(e,n||t)}function mt(e){if(!e._d){var t=D(e._i);e._a=l([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),ct(e)}}function ft(e){var t=new b(st(gt(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}function gt(e){var t=e._i,n=e._f;return e._locale=e._locale||nt(e._l),null===t||void 0===n&&""===t?f({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),w(t)?new b(st(t)):(r(t)?e._d=t:a(n)?ut(e):n?ht(e):yt(e),m(e)||(e._d=null),e))}function yt(e){var n=e._i;void 0===n?e._d=new Date(t.now()):r(n)?e._d=new Date(n.valueOf()):"string"==typeof n?it(e):a(n)?(e._a=l(n.slice(0),function(e){return parseInt(e,10)}),ct(e)):"object"==typeof n?mt(e):i(n)?e._d=new Date(n):t.createFromInputFallback(e)}function bt(e,t,n,i,r){var l={};return n!==!0&&n!==!1||(i=n,n=void 0),(s(e)&&o(e)||a(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=r,l._l=n,l._i=e,l._f=t,l._strict=i,ft(l)}function wt(e,t,n,a){return bt(e,t,n,a,!1)}function vt(e,t){var n,s;if(1===t.length&&a(t[0])&&(t=t[0]),!t.length)return wt();for(n=t[0],s=1;s<t.length;++s)t[s].isValid()&&!t[s][e](n)||(n=t[s]);return n}function kt(){var e=[].slice.call(arguments,0);return vt("isBefore",e)}function jt(){var e=[].slice.call(arguments,0);return vt("isAfter",e)}function xt(e){var t=D(e),n=t.year||0,a=t.quarter||0,s=t.month||0,o=t.week||0,i=t.day||0,r=t.hour||0,l=t.minute||0,c=t.second||0,p=t.millisecond||0;this._milliseconds=+p+1e3*c+6e4*l+1e3*r*60*60,this._days=+i+7*o,this._months=+s+3*a+12*n,this._data={},this._locale=nt(),this._bubble()}function St(e){return e instanceof xt}function It(e){return e<0?Math.round(-1*e)*-1:Math.round(e)}function Tt(e,t){Y(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+z(~~(e/60),2)+t+z(~~e%60,2)})}function _t(e,t){var n=(t||"").match(e);if(null===n)return null;var a=n[n.length-1]||[],s=(a+"").match(Ns)||["-",0,0],o=+(60*s[1])+k(s[2]);return 0===o?0:"+"===s[0]?o:-o}function Ct(e,n){var a,s;return n._isUTC?(a=n.clone(),s=(w(e)||r(e)?e.valueOf():wt(e).valueOf())-a.valueOf(),a._d.setTime(a._d.valueOf()+s),t.updateOffset(a,!1),a):wt(e).local()}function Mt(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function At(e,n){var a,s=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(e=_t(Ka,e),null===e)return this}else Math.abs(e)<16&&(e*=60);return!this._isUTC&&n&&(a=Mt(this)),this._offset=e,this._isUTC=!0,null!=a&&this.add(a,"m"),s!==e&&(!n||this._changeInProgress?zt(this,Ft(e-s,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,t.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?s:Mt(this)}function Et(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}function Pt(e){return this.utcOffset(0,e)}function Vt(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Mt(this),"m")),this}function Ot(){if(null!=this._tzm)this.utcOffset(this._tzm);else if("string"==typeof this._i){var e=_t(Qa,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this}function Rt(e){return!!this.isValid()&&(e=e?wt(e).utcOffset():0,(this.utcOffset()-e)%60===0)}function Bt(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function qt(){if(!g(this._isDSTShifted))return this._isDSTShifted;var e={};if(y(e,this),e=gt(e),e._a){var t=e._isUTC?h(e._a):wt(e._a);this._isDSTShifted=this.isValid()&&j(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function Dt(){return!!this.isValid()&&!this._isUTC}function Lt(){return!!this.isValid()&&this._isUTC}function Nt(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function Ft(e,t){var n,a,s,o=e,r=null;return St(e)?o={ms:e._milliseconds,d:e._days,M:e._months}:i(e)?(o={},t?o[t]=e:o.milliseconds=e):(r=Fs.exec(e))?(n="-"===r[1]?-1:1,o={y:0,d:k(r[ss])*n,h:k(r[os])*n,m:k(r[is])*n,s:k(r[rs])*n,ms:k(It(1e3*r[ls]))*n}):(r=Ws.exec(e))?(n="-"===r[1]?-1:1,o={y:Wt(r[2],n),M:Wt(r[3],n),w:Wt(r[4],n),d:Wt(r[5],n),h:Wt(r[6],n),m:Wt(r[7],n),s:Wt(r[8],n)}):null==o?o={}:"object"==typeof o&&("from"in o||"to"in o)&&(s=Ut(wt(o.from),wt(o.to)),o={},o.ms=s.milliseconds,o.M=s.months),a=new xt(o),St(e)&&c(e,"_locale")&&(a._locale=e._locale),a}function Wt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Jt(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Ut(e,t){var n;return e.isValid()&&t.isValid()?(t=Ct(t,e),e.isBefore(t)?n=Jt(e,t):(n=Jt(t,e),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function Ht(e,t){return function(n,a){var s,o;return null===a||isNaN(+a)||(I(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),o=n,n=a,a=o),n="string"==typeof n?+n:n,s=Ft(n,a),zt(this,s,e),this}}function zt(e,n,a,s){var o=n._milliseconds,i=It(n._days),r=It(n._months);e.isValid()&&(s=null==s||s,o&&e._d.setTime(e._d.valueOf()+o*a),i&&J(e,"Date",W(e,"Date")+i*a),r&&pe(e,W(e,"Month")+r*a),s&&t.updateOffset(e,i||r))}function Yt(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"}function Gt(e,n){var a=e||wt(),s=Ct(a,this).startOf("day"),o=t.calendarFormat(this,s)||"sameElse",i=n&&(T(n[o])?n[o].call(this,a):n[o]);return this.format(i||this.localeData().calendar(o,this,wt(a)))}function $t(){return new b(this)}function Qt(e,t){var n=w(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&(t=q(g(t)?"millisecond":t),"millisecond"===t?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())}function Kt(e,t){var n=w(e)?e:wt(e);return!(!this.isValid()||!n.isValid())&&(t=q(g(t)?"millisecond":t),"millisecond"===t?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())}function Xt(e,t,n,a){return a=a||"()",("("===a[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===a[1]?this.isBefore(t,n):!this.isAfter(t,n))}function Zt(e,t){var n,a=w(e)?e:wt(e);return!(!this.isValid()||!a.isValid())&&(t=q(t||"millisecond"),"millisecond"===t?this.valueOf()===a.valueOf():(n=a.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))}function en(e,t){return this.isSame(e,t)||this.isAfter(e,t)}function tn(e,t){return this.isSame(e,t)||this.isBefore(e,t)}function nn(e,t,n){var a,s,o,i;return this.isValid()?(a=Ct(e,this),a.isValid()?(s=6e4*(a.utcOffset()-this.utcOffset()),t=q(t),"year"===t||"month"===t||"quarter"===t?(i=an(this,a),"quarter"===t?i/=3:"year"===t&&(i/=12)):(o=this-a,i="second"===t?o/1e3:"minute"===t?o/6e4:"hour"===t?o/36e5:"day"===t?(o-s)/864e5:"week"===t?(o-s)/6048e5:o),n?i:v(i)):NaN):NaN}function an(e,t){var n,a,s=12*(t.year()-e.year())+(t.month()-e.month()),o=e.clone().add(s,"months");return t-o<0?(n=e.clone().add(s-1,"months"),a=(t-o)/(o-n)):(n=e.clone().add(s+1,"months"),a=(t-o)/(n-o)),-(s+a)||0}function sn(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function on(){var e=this.clone().utc();return 0<e.year()&&e.year()<=9999?T(Date.prototype.toISOString)?this.toDate().toISOString():Q(e,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):Q(e,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function rn(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',a=0<this.year()&&this.year()<=9999?"YYYY":"YYYYYY",s="-MM-DD[T]HH:mm:ss.SSS",o=t+'[")]';return this.format(n+a+s+o)}function ln(e){e||(e=this.isUtc()?t.defaultFormatUtc:t.defaultFormat);var n=Q(this,e);return this.localeData().postformat(n)}function cn(e,t){return this.isValid()&&(w(e)&&e.isValid()||wt(e).isValid())?Ft({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function pn(e){return this.from(wt(),e)}function hn(e,t){return this.isValid()&&(w(e)&&e.isValid()||wt(e).isValid())?Ft({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()}function dn(e){return this.to(wt(),e)}function un(e){var t;return void 0===e?this._locale._abbr:(t=nt(e),null!=t&&(this._locale=t),this)}function mn(){return this._locale}function fn(e){switch(e=q(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this}function gn(e){return e=q(e),void 0===e||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))}function yn(){return this._d.valueOf()-6e4*(this._offset||0)}function bn(){return Math.floor(this.valueOf()/1e3)}function wn(){return new Date(this.valueOf())}function vn(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]}function kn(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}}function jn(){return this.isValid()?this.toISOString():null}function xn(){return m(this)}function Sn(){return p({},u(this))}function In(){return u(this).overflow}function Tn(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function _n(e,t){Y(0,[e,e.length],0,t)}function Cn(e){return Pn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function Mn(e){return Pn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)}function An(){return Se(this.year(),1,4)}function En(){var e=this.localeData()._week;return Se(this.year(),e.dow,e.doy)}function Pn(e,t,n,a,s){var o;return null==e?xe(this,a,s).year:(o=Se(e,a,s),t>o&&(t=o),Vn.call(this,e,t,n,a,s))}function Vn(e,t,n,a,s){var o=je(e,t,n,a,s),i=ve(o.year,0,o.dayOfYear);return this.year(i.getUTCFullYear()),this.month(i.getUTCMonth()),this.date(i.getUTCDate()),this}function On(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)}function Rn(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")}function Bn(e,t){t[ls]=k(1e3*("0."+e))}function qn(){return this._isUTC?"UTC":""}function Dn(){return this._isUTC?"Coordinated Universal Time":""}function Ln(e){return wt(1e3*e)}function Nn(){return wt.apply(null,arguments).parseZone()}function Fn(e){return e}function Wn(e,t,n,a){var s=nt(),o=h().set(a,t);return s[n](o,e)}function Jn(e,t,n){if(i(e)&&(t=e,e=void 0),e=e||"",null!=t)return Wn(e,t,n,"month");var a,s=[];for(a=0;a<12;a++)s[a]=Wn(e,a,n,"month");return s}function Un(e,t,n,a){"boolean"==typeof e?(i(t)&&(n=t,t=void 0),t=t||""):(t=e,n=t,e=!1,i(t)&&(n=t,t=void 0),t=t||"");var s=nt(),o=e?s._week.dow:0;if(null!=n)return Wn(t,(n+o)%7,a,"day");var r,l=[];for(r=0;r<7;r++)l[r]=Wn(t,(r+o)%7,a,"day");return l}function Hn(e,t){return Jn(e,t,"months")}function zn(e,t){return Jn(e,t,"monthsShort")}function Yn(e,t,n){return Un(e,t,n,"weekdays")}function Gn(e,t,n){return Un(e,t,n,"weekdaysShort")}function $n(e,t,n){return Un(e,t,n,"weekdaysMin")}function Qn(){var e=this._data;return this._milliseconds=Zs(this._milliseconds),this._days=Zs(this._days),this._months=Zs(this._months),e.milliseconds=Zs(e.milliseconds),e.seconds=Zs(e.seconds),e.minutes=Zs(e.minutes),e.hours=Zs(e.hours),e.months=Zs(e.months),e.years=Zs(e.years),this}function Kn(e,t,n,a){var s=Ft(t,n);return e._milliseconds+=a*s._milliseconds,e._days+=a*s._days,e._months+=a*s._months,e._bubble()}function Xn(e,t){return Kn(this,e,t,1)}function Zn(e,t){return Kn(this,e,t,-1)}function ea(e){return e<0?Math.floor(e):Math.ceil(e)}function ta(){var e,t,n,a,s,o=this._milliseconds,i=this._days,r=this._months,l=this._data;return o>=0&&i>=0&&r>=0||o<=0&&i<=0&&r<=0||(o+=864e5*ea(aa(r)+i),i=0,r=0),l.milliseconds=o%1e3,e=v(o/1e3),l.seconds=e%60,t=v(e/60),l.minutes=t%60,n=v(t/60),l.hours=n%24,i+=v(n/24),s=v(na(i)),r+=s,i-=ea(aa(s)),a=v(r/12),r%=12,l.days=i,l.months=r,l.years=a,this}function na(e){return 4800*e/146097}function aa(e){return 146097*e/4800}function sa(e){var t,n,a=this._milliseconds;if(e=q(e),"month"===e||"year"===e)return t=this._days+a/864e5,n=this._months+na(t),"month"===e?n:n/12;switch(t=this._days+Math.round(aa(this._months)),e){case"week":return t/7+a/6048e5;case"day":return t+a/864e5;case"hour":return 24*t+a/36e5;case"minute":return 1440*t+a/6e4;case"second":return 86400*t+a/1e3;case"millisecond":return Math.floor(864e5*t)+a;default:throw new Error("Unknown unit "+e)}}function oa(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12)}function ia(e){return function(){return this.as(e)}}function ra(e){return e=q(e),this[e+"s"]()}function la(e){return function(){return this._data[e]}}function ca(){return v(this.days()/7)}function pa(e,t,n,a,s){return s.relativeTime(t||1,!!n,e,a)}function ha(e,t,n){var a=Ft(e).abs(),s=go(a.as("s")),o=go(a.as("m")),i=go(a.as("h")),r=go(a.as("d")),l=go(a.as("M")),c=go(a.as("y")),p=s<yo.s&&["s",s]||o<=1&&["m"]||o<yo.m&&["mm",o]||i<=1&&["h"]||i<yo.h&&["hh",i]||r<=1&&["d"]||r<yo.d&&["dd",r]||l<=1&&["M"]||l<yo.M&&["MM",l]||c<=1&&["y"]||["yy",c];return p[2]=t,p[3]=+e>0,p[4]=n,pa.apply(null,p)}function da(e){return void 0===e?go:"function"==typeof e&&(go=e,!0)}function ua(e,t){return void 0!==yo[e]&&(void 0===t?yo[e]:(yo[e]=t,!0))}function ma(e){var t=this.localeData(),n=ha(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)}function fa(){var e,t,n,a=bo(this._milliseconds)/1e3,s=bo(this._days),o=bo(this._months);e=v(a/60),t=v(e/60),a%=60,e%=60,n=v(o/12),o%=12;var i=n,r=o,l=s,c=t,p=e,h=a,d=this.asSeconds();return d?(d<0?"-":"")+"P"+(i?i+"Y":"")+(r?r+"M":"")+(l?l+"D":"")+(c||p||h?"T":"")+(c?c+"H":"")+(p?p+"M":"")+(h?h+"S":""):"P0D"}var ga,ya;ya=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,a=0;a<n;a++)if(a in t&&e.call(this,t[a],a,t))return!0;return!1};var ba=ya,wa=t.momentProperties=[],va=!1,ka={};t.suppressDeprecationWarnings=!1,t.deprecationHandler=null;var ja;ja=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)c(e,t)&&n.push(t);return n};var xa,Sa=ja,Ia={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},Ta={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},_a="Invalid date",Ca="%d",Ma=/\d{1,2}/,Aa={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Ea={},Pa={},Va=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,Oa=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Ra={},Ba={},qa=/\d/,Da=/\d\d/,La=/\d{3}/,Na=/\d{4}/,Fa=/[+-]?\d{6}/,Wa=/\d\d?/,Ja=/\d\d\d\d?/,Ua=/\d\d\d\d\d\d?/,Ha=/\d{1,3}/,za=/\d{1,4}/,Ya=/[+-]?\d{1,6}/,Ga=/\d+/,$a=/[+-]?\d+/,Qa=/Z|[+-]\d\d:?\d\d/gi,Ka=/Z|[+-]\d\d(?::?\d\d)?/gi,Xa=/[+-]?\d+(\.\d{1,3})?/,Za=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,es={},ts={},ns=0,as=1,ss=2,os=3,is=4,rs=5,ls=6,cs=7,ps=8;xa=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1};var hs=xa;Y("M",["MM",2],"Mo",function(){return this.month()+1}),Y("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),Y("MMMM",0,0,function(e){return this.localeData().months(this,e)}),B("month","M"),L("month",8),X("M",Wa),X("MM",Wa,Da),X("MMM",function(e,t){return t.monthsShortRegex(e)}),X("MMMM",function(e,t){return t.monthsRegex(e)}),ne(["M","MM"],function(e,t){t[as]=k(e)-1}),ne(["MMM","MMMM"],function(e,t,n,a){var s=n._locale.monthsParse(e,a,n._strict);null!=s?t[as]=s:u(n).invalidMonth=e});var ds=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,us="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ms="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),fs=Za,gs=Za;Y("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),Y(0,["YY",2],0,function(){return this.year()%100}),Y(0,["YYYY",4],0,"year"),Y(0,["YYYYY",5],0,"year"),Y(0,["YYYYYY",6,!0],0,"year"),B("year","y"),L("year",1),X("Y",$a),X("YY",Wa,Da),X("YYYY",za,Na),X("YYYYY",Ya,Fa),X("YYYYYY",Ya,Fa),ne(["YYYYY","YYYYYY"],ns),ne("YYYY",function(e,n){n[ns]=2===e.length?t.parseTwoDigitYear(e):k(e)}),ne("YY",function(e,n){n[ns]=t.parseTwoDigitYear(e)}),ne("Y",function(e,t){t[ns]=parseInt(e,10)}),t.parseTwoDigitYear=function(e){return k(e)+(k(e)>68?1900:2e3)};var ys=F("FullYear",!0);Y("w",["ww",2],"wo","week"),Y("W",["WW",2],"Wo","isoWeek"),B("week","w"),B("isoWeek","W"),L("week",5),L("isoWeek",5),X("w",Wa),X("ww",Wa,Da),X("W",Wa),X("WW",Wa,Da),ae(["w","ww","W","WW"],function(e,t,n,a){t[a.substr(0,1)]=k(e)});var bs={dow:0,doy:6};Y("d",0,"do","day"),Y("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),Y("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),Y("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),Y("e",0,0,"weekday"),Y("E",0,0,"isoWeekday"),B("day","d"),B("weekday","e"),B("isoWeekday","E"),L("day",11),L("weekday",11),L("isoWeekday",11),X("d",Wa),X("e",Wa),X("E",Wa),X("dd",function(e,t){return t.weekdaysMinRegex(e)}),X("ddd",function(e,t){return t.weekdaysShortRegex(e)}),X("dddd",function(e,t){return t.weekdaysRegex(e)}),ae(["dd","ddd","dddd"],function(e,t,n,a){var s=n._locale.weekdaysParse(e,a,n._strict);null!=s?t.d=s:u(n).invalidWeekday=e}),ae(["d","e","E"],function(e,t,n,a){t[a]=k(e)});var ws="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),vs="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),ks="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),js=Za,xs=Za,Ss=Za;Y("H",["HH",2],0,"hour"),Y("h",["hh",2],0,Ue),Y("k",["kk",2],0,He),Y("hmm",0,0,function(){return""+Ue.apply(this)+z(this.minutes(),2)}),Y("hmmss",0,0,function(){return""+Ue.apply(this)+z(this.minutes(),2)+z(this.seconds(),2)}),Y("Hmm",0,0,function(){return""+this.hours()+z(this.minutes(),2)}),Y("Hmmss",0,0,function(){return""+this.hours()+z(this.minutes(),2)+z(this.seconds(),2)}),ze("a",!0),ze("A",!1),B("hour","h"),L("hour",13),X("a",Ye),X("A",Ye),X("H",Wa),X("h",Wa),X("HH",Wa,Da),X("hh",Wa,Da),X("hmm",Ja),X("hmmss",Ua),X("Hmm",Ja),X("Hmmss",Ua),ne(["H","HH"],os),ne(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),ne(["h","hh"],function(e,t,n){t[os]=k(e),u(n).bigHour=!0}),ne("hmm",function(e,t,n){var a=e.length-2;t[os]=k(e.substr(0,a)),t[is]=k(e.substr(a)),u(n).bigHour=!0}),ne("hmmss",function(e,t,n){var a=e.length-4,s=e.length-2;t[os]=k(e.substr(0,a)),t[is]=k(e.substr(a,2)),t[rs]=k(e.substr(s)),u(n).bigHour=!0}),ne("Hmm",function(e,t,n){var a=e.length-2;t[os]=k(e.substr(0,a)),t[is]=k(e.substr(a))}),ne("Hmmss",function(e,t,n){var a=e.length-4,s=e.length-2;t[os]=k(e.substr(0,a)),t[is]=k(e.substr(a,2)),t[rs]=k(e.substr(s))});var Is,Ts=/[ap]\.?m?\.?/i,_s=F("Hours",!0),Cs={calendar:Ia,longDateFormat:Ta,invalidDate:_a,ordinal:Ca,ordinalParse:Ma,relativeTime:Aa,months:us,monthsShort:ms,week:bs,weekdays:ws,weekdaysMin:ks,weekdaysShort:vs,meridiemParse:Ts},Ms={},As={},Es=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Ps=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Vs=/Z|[+-]\d\d(?::?\d\d)?/,Os=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],Rs=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Bs=/^\/?Date\((\-?\d+)/i;t.createFromInputFallback=S("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),t.ISO_8601=function(){};var qs=S("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:f()}),Ds=S("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=wt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:f()}),Ls=function(){return Date.now?Date.now():+new Date};Tt("Z",":"),Tt("ZZ",""),X("Z",Ka),X("ZZ",Ka),ne(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=_t(Ka,e)});var Ns=/([\+\-]|\d\d)/gi;t.updateOffset=function(){};var Fs=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ws=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Ft.fn=xt.prototype;var Js=Ht(1,"add"),Us=Ht(-1,"subtract");t.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",t.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var Hs=S("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});Y(0,["gg",2],0,function(){return this.weekYear()%100}),Y(0,["GG",2],0,function(){return this.isoWeekYear()%100}),_n("gggg","weekYear"),_n("ggggg","weekYear"),_n("GGGG","isoWeekYear"),_n("GGGGG","isoWeekYear"),B("weekYear","gg"),B("isoWeekYear","GG"),L("weekYear",1),L("isoWeekYear",1),X("G",$a),X("g",$a),X("GG",Wa,Da),X("gg",Wa,Da),X("GGGG",za,Na),X("gggg",za,Na),X("GGGGG",Ya,Fa),X("ggggg",Ya,Fa),ae(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,a){t[a.substr(0,2)]=k(e)}),ae(["gg","GG"],function(e,n,a,s){n[s]=t.parseTwoDigitYear(e)}),Y("Q",0,"Qo","quarter"),B("quarter","Q"),L("quarter",7),X("Q",qa),ne("Q",function(e,t){t[as]=3*(k(e)-1)}),Y("D",["DD",2],"Do","date"),B("date","D"),L("date",9),X("D",Wa),X("DD",Wa,Da),X("Do",function(e,t){return e?t._ordinalParse:t._ordinalParseLenient}),ne(["D","DD"],ss),ne("Do",function(e,t){t[ss]=k(e.match(Wa)[0],10)});var zs=F("Date",!0);Y("DDD",["DDDD",3],"DDDo","dayOfYear"),B("dayOfYear","DDD"),L("dayOfYear",4),X("DDD",Ha),X("DDDD",La),ne(["DDD","DDDD"],function(e,t,n){n._dayOfYear=k(e)}),Y("m",["mm",2],0,"minute"),B("minute","m"),L("minute",14),X("m",Wa),X("mm",Wa,Da),ne(["m","mm"],is);var Ys=F("Minutes",!1);Y("s",["ss",2],0,"second"),B("second","s"),L("second",15),X("s",Wa),X("ss",Wa,Da),ne(["s","ss"],rs);var Gs=F("Seconds",!1);Y("S",0,0,function(){return~~(this.millisecond()/100)}),Y(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),Y(0,["SSS",3],0,"millisecond"),Y(0,["SSSS",4],0,function(){return 10*this.millisecond()}),Y(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),Y(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),Y(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),Y(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),Y(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),B("millisecond","ms"),L("millisecond",16),X("S",Ha,qa),X("SS",Ha,Da),X("SSS",Ha,La);var $s;for($s="SSSS";$s.length<=9;$s+="S")X($s,Ga);for($s="S";$s.length<=9;$s+="S")ne($s,Bn);var Qs=F("Milliseconds",!1);Y("z",0,0,"zoneAbbr"),Y("zz",0,0,"zoneName");var Ks=b.prototype;Ks.add=Js,Ks.calendar=Gt,Ks.clone=$t,Ks.diff=nn,Ks.endOf=gn,Ks.format=ln,Ks.from=cn,Ks.fromNow=pn,Ks.to=hn,Ks.toNow=dn,Ks.get=U,Ks.invalidAt=In,Ks.isAfter=Qt,Ks.isBefore=Kt,Ks.isBetween=Xt,Ks.isSame=Zt,Ks.isSameOrAfter=en,Ks.isSameOrBefore=tn,Ks.isValid=xn,Ks.lang=Hs,Ks.locale=un,Ks.localeData=mn,Ks.max=Ds,Ks.min=qs,Ks.parsingFlags=Sn,Ks.set=H,Ks.startOf=fn,Ks.subtract=Us,Ks.toArray=vn,Ks.toObject=kn,Ks.toDate=wn,Ks.toISOString=on,Ks.inspect=rn,Ks.toJSON=jn,Ks.toString=sn,Ks.unix=bn,Ks.valueOf=yn,Ks.creationData=Tn,Ks.year=ys,Ks.isLeapYear=be,Ks.weekYear=Cn,Ks.isoWeekYear=Mn,Ks.quarter=Ks.quarters=On,Ks.month=he,Ks.daysInMonth=de,Ks.week=Ks.weeks=Ce,Ks.isoWeek=Ks.isoWeeks=Me,Ks.weeksInYear=En,Ks.isoWeeksInYear=An,Ks.date=zs,Ks.day=Ks.days=qe,Ks.weekday=De,Ks.isoWeekday=Le,Ks.dayOfYear=Rn,Ks.hour=Ks.hours=_s,Ks.minute=Ks.minutes=Ys,Ks.second=Ks.seconds=Gs,Ks.millisecond=Ks.milliseconds=Qs,Ks.utcOffset=At,Ks.utc=Pt,Ks.local=Vt,Ks.parseZone=Ot,Ks.hasAlignedHourOffset=Rt,Ks.isDST=Bt,Ks.isLocal=Dt,Ks.isUtcOffset=Lt,Ks.isUtc=Nt,Ks.isUTC=Nt,Ks.zoneAbbr=qn,Ks.zoneName=Dn,Ks.dates=S("dates accessor is deprecated. Use date instead.",zs),Ks.months=S("months accessor is deprecated. Use month instead",he),Ks.years=S("years accessor is deprecated. Use year instead",ys),Ks.zone=S("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",Et),Ks.isDSTShifted=S("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",qt);var Xs=M.prototype;Xs.calendar=A,Xs.longDateFormat=E,Xs.invalidDate=P,Xs.ordinal=V,Xs.preparse=Fn,Xs.postformat=Fn,Xs.relativeTime=O,Xs.pastFuture=R,Xs.set=_,Xs.months=ie,Xs.monthsShort=re,Xs.monthsParse=ce,Xs.monthsRegex=me,Xs.monthsShortRegex=ue,Xs.week=Ie,Xs.firstDayOfYear=_e,Xs.firstDayOfWeek=Te,Xs.weekdays=Pe,Xs.weekdaysMin=Oe,Xs.weekdaysShort=Ve,Xs.weekdaysParse=Be,Xs.weekdaysRegex=Ne,Xs.weekdaysShortRegex=Fe,Xs.weekdaysMinRegex=We,Xs.isPM=Ge,Xs.meridiem=$e,Ze("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===k(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),t.lang=S("moment.lang is deprecated. Use moment.locale instead.",Ze),t.langData=S("moment.langData is deprecated. Use moment.localeData instead.",nt);var Zs=Math.abs,eo=ia("ms"),to=ia("s"),no=ia("m"),ao=ia("h"),so=ia("d"),oo=ia("w"),io=ia("M"),ro=ia("y"),lo=la("milliseconds"),co=la("seconds"),po=la("minutes"),ho=la("hours"),uo=la("days"),mo=la("months"),fo=la("years"),go=Math.round,yo={s:45,m:45,h:22,d:26,M:11},bo=Math.abs,wo=xt.prototype;return wo.abs=Qn,wo.add=Xn,wo.subtract=Zn,wo.as=sa,wo.asMilliseconds=eo,wo.asSeconds=to,wo.asMinutes=no,wo.asHours=ao,wo.asDays=so,wo.asWeeks=oo,wo.asMonths=io,wo.asYears=ro,wo.valueOf=oa,wo._bubble=ta,wo.get=ra,wo.milliseconds=lo,wo.seconds=co,wo.minutes=po,wo.hours=ho,wo.days=uo,wo.weeks=ca,wo.months=mo,wo.years=fo,wo.humanize=ma,wo.toISOString=fa,wo.toString=fa,wo.toJSON=fa,wo.locale=un,wo.localeData=mn,wo.toIsoString=S("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",fa),wo.lang=Hs,Y("X",0,0,"unix"),Y("x",0,0,"valueOf"),X("x",$a),X("X",Xa),ne("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),ne("x",function(e,t,n){n._d=new Date(k(e))}),t.version="2.17.1",n(wt),t.fn=Ks,t.min=kt,t.max=jt,t.now=Ls,t.utc=h,t.unix=Ln,t.months=Hn,t.isDate=r,t.locale=Ze,t.invalid=f,t.duration=Ft,t.isMoment=w,t.weekdays=Yn,t.parseZone=Nn,t.localeData=nt,t.isDuration=St,t.monthsShort=zn,t.weekdaysMin=$n,t.defineLocale=et,t.updateLocale=tt,t.locales=at,t.weekdaysShort=Gn,t.normalizeUnits=q,t.relativeTimeRounding=da,t.relativeTimeThreshold=ua,t.calendarFormat=Yt,t.prototype=Ks,t})}).call(t,n(320)(e))},function(e,t,n){function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}t.__esModule=!0;var l=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},p=n(2),h=a(p),d=n(449),u=a(d),m=n(185),f=a(m),g=n(4),y=a(g),b=n(456),w="data-react-helmet",v=function(e){return String(e).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#x27;");
},k=function(e,t){for(var n=e.length-1;n>=0;n--){var a=e[n];if(a[t])return a[t]}return null},j=function(e){var t=k(e,"title"),n=k(e,"titleTemplate");if(n&&t)return n.replace(/%s/g,function(){return t});var a=k(e,"defaultTitle");return t||a||""},x=function(e){return k(e,"onChangeClientState")||function(){}},S=function(e,t){return t.filter(function(t){return"undefined"!=typeof t[e]}).map(function(t){return t[e]}).reduce(function(e,t){return c({},e,t)},{})},I=function(e,t){return t.filter(function(e){return"undefined"!=typeof e[b.TAG_NAMES.BASE]}).map(function(e){return e[b.TAG_NAMES.BASE]}).reverse().reduce(function(t,n){if(!t.length)for(var a=Object.keys(n),s=0;s<a.length;s++){var o=a[s],i=o.toLowerCase();if(e.indexOf(i)!==-1&&n[i])return t.concat(n)}return t},[])},T=function(e,t,n){var a={};return n.filter(function(t){return"undefined"!=typeof t[e]}).map(function(t){return t[e]}).reverse().reduce(function(e,n){var s={};n.filter(function(e){for(var n=void 0,o=Object.keys(e),i=0;i<o.length;i++){var r=o[i],l=r.toLowerCase();t.indexOf(l)===-1||n===b.TAG_PROPERTIES.REL&&"canonical"===e[n].toLowerCase()||l===b.TAG_PROPERTIES.REL&&"stylesheet"===e[l].toLowerCase()||(n=l),t.indexOf(r)===-1||r!==b.TAG_PROPERTIES.INNER_HTML&&r!==b.TAG_PROPERTIES.CSS_TEXT&&r!==b.TAG_PROPERTIES.ITEM_PROP||(n=r)}if(!n||!e[n])return!1;var c=e[n].toLowerCase();return a[n]||(a[n]={}),s[n]||(s[n]={}),!a[n][c]&&(s[n][c]=!0,!0)}).reverse().forEach(function(t){return e.push(t)});for(var o=Object.keys(s),i=0;i<o.length;i++){var r=o[i],l=(0,y.default)({},a[r],s[r]);a[r]=l}return e},[]).reverse()},_=function(e,t){document.title=e||document.title,C(b.TAG_NAMES.TITLE,t)},C=function(e,t){for(var n=document.getElementsByTagName(e)[0],a=n.getAttribute(w),s=a?a.split(","):[],o=[].concat(s),i=Object.keys(t),r=0;r<i.length;r++){var l=i[r],c=t[l]||"";n.setAttribute(l,c),s.indexOf(l)===-1&&s.push(l);var p=o.indexOf(l);p!==-1&&o.splice(p,1)}for(var h=o.length-1;h>=0;h--)n.removeAttribute(o[h]);s.length===o.length?n.removeAttribute(w):n.setAttribute(w,s.join(","))},M=function(e,t){var n=document.head||document.querySelector("head"),a=n.querySelectorAll(e+"["+w+"]"),s=Array.prototype.slice.call(a),o=[],i=void 0;return t&&t.length&&t.forEach(function(t){var n=document.createElement(e);for(var a in t)if(t.hasOwnProperty(a))if("innerHTML"===a)n.innerHTML=t.innerHTML;else if("cssText"===a)n.styleSheet?n.styleSheet.cssText=t.cssText:n.appendChild(document.createTextNode(t.cssText));else{var r="undefined"==typeof t[a]?"":t[a];n.setAttribute(a,r)}n.setAttribute(w,"true"),s.some(function(e,t){return i=t,n.isEqualNode(e)})?s.splice(i,1):o.push(n)}),s.forEach(function(e){return e.parentNode.removeChild(e)}),o.forEach(function(e){return n.appendChild(e)}),{oldTags:s,newTags:o}},A=function(e){return Object.keys(e).reduce(function(t,n){var a="undefined"!=typeof e[n]?n+'="'+e[n]+'"':""+n;return t?t+" "+a:a},"")},E=function(e,t,n){var a=A(n);return a?"<"+e+" "+w+'="true" '+a+">"+v(t)+"</"+e+">":"<"+e+" "+w+'="true">'+v(t)+"</"+e+">"},P=function(e,t){return t.reduce(function(t,n){var a=Object.keys(n).filter(function(e){return!("innerHTML"===e||"cssText"===e)}).reduce(function(e,t){var a="undefined"==typeof n[t]?t:t+'="'+v(n[t])+'"';return e?e+" "+a:a},""),s=n.innerHTML||n.cssText||"",o=[b.TAG_NAMES.NOSCRIPT,b.TAG_NAMES.SCRIPT,b.TAG_NAMES.STYLE].indexOf(e)===-1;return t+"<"+e+" "+w+'="true" '+a+(o?"/>":">"+s+"</"+e+">")},"")},V=function(e,t,n){var a=r({key:t},w,!0),s=Object.keys(n).reduce(function(e,t){return e[b.REACT_TAG_MAP[t]||t]=n[t],e},a);return[h.default.createElement(b.TAG_NAMES.TITLE,s,t)]},O=function(e,t){return t.map(function(t,n){var a=r({key:n},w,!0);return Object.keys(t).forEach(function(e){var n=b.REACT_TAG_MAP[e]||e;if("innerHTML"===n||"cssText"===n){var s=t.innerHTML||t.cssText;a.dangerouslySetInnerHTML={__html:s}}else a[n]=t[e]}),h.default.createElement(e,a)})},R=function(e,t){switch(e){case b.TAG_NAMES.TITLE:return{toComponent:function(){return V(e,t.title,t.titleAttributes)},toString:function(){return E(e,t.title,t.titleAttributes)}};case b.TAG_NAMES.HTML:return{toComponent:function(){return t},toString:function(){return A(t)}};default:return{toComponent:function(){return O(e,t)},toString:function(){return P(e,t)}}}},B=function(e){var t=e.htmlAttributes,n=e.title,a=e.titleAttributes,s=e.baseTag,o=e.metaTags,i=e.linkTags,r=e.scriptTags,l=e.noscriptTags,c=e.styleTags;return{htmlAttributes:R(b.TAG_NAMES.HTML,t),title:R(b.TAG_NAMES.TITLE,{title:n,titleAttributes:a}),base:R(b.TAG_NAMES.BASE,s),meta:R(b.TAG_NAMES.META,o),link:R(b.TAG_NAMES.LINK,i),script:R(b.TAG_NAMES.SCRIPT,r),noscript:R(b.TAG_NAMES.NOSCRIPT,l),style:R(b.TAG_NAMES.STYLE,c)}},q=function(e){var t,n;return n=t=function(t){function n(){return s(this,n),o(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return i(n,t),l(n,[{key:"shouldComponentUpdate",value:function(e){return!(0,f.default)(this.props,e)}},{key:"render",value:function(){return h.default.createElement(e,this.props)}}],[{key:"canUseDOM",set:function(t){e.canUseDOM=t}}]),n}(h.default.Component),t.propTypes={htmlAttributes:h.default.PropTypes.object,title:h.default.PropTypes.string,defaultTitle:h.default.PropTypes.string,titleTemplate:h.default.PropTypes.string,titleAttributes:h.default.PropTypes.object,base:h.default.PropTypes.object,meta:h.default.PropTypes.arrayOf(h.default.PropTypes.object),link:h.default.PropTypes.arrayOf(h.default.PropTypes.object),script:h.default.PropTypes.arrayOf(h.default.PropTypes.object),noscript:h.default.PropTypes.arrayOf(h.default.PropTypes.object),style:h.default.PropTypes.arrayOf(h.default.PropTypes.object),onChangeClientState:h.default.PropTypes.func},t.peek=e.peek,t.rewind=function(){var t=e.rewind();return t||(t=B({htmlAttributes:{},title:"",titleAttributes:{},baseTag:[],metaTags:[],linkTags:[],scriptTags:[],noscriptTags:[],styleTags:[]})),t},n},D=function(e){return{htmlAttributes:S(b.TAG_NAMES.HTML,e),title:j(e),titleAttributes:S("titleAttributes",e),baseTag:I([b.TAG_PROPERTIES.HREF],e),metaTags:T(b.TAG_NAMES.META,[b.TAG_PROPERTIES.NAME,b.TAG_PROPERTIES.CHARSET,b.TAG_PROPERTIES.HTTPEQUIV,b.TAG_PROPERTIES.PROPERTY,b.TAG_PROPERTIES.ITEM_PROP],e),linkTags:T(b.TAG_NAMES.LINK,[b.TAG_PROPERTIES.REL,b.TAG_PROPERTIES.HREF],e),scriptTags:T(b.TAG_NAMES.SCRIPT,[b.TAG_PROPERTIES.SRC,b.TAG_PROPERTIES.INNER_HTML],e),noscriptTags:T(b.TAG_NAMES.NOSCRIPT,[b.TAG_PROPERTIES.INNER_HTML],e),styleTags:T(b.TAG_NAMES.STYLE,[b.TAG_PROPERTIES.CSS_TEXT],e),onChangeClientState:x(e)}},L=function(e){var t=e.htmlAttributes,n=e.title,a=e.titleAttributes,s=e.baseTag,o=e.metaTags,i=e.linkTags,r=e.scriptTags,l=e.noscriptTags,c=e.styleTags,p=e.onChangeClientState;C("html",t),_(n,a);var h={baseTag:M(b.TAG_NAMES.BASE,s),metaTags:M(b.TAG_NAMES.META,o),linkTags:M(b.TAG_NAMES.LINK,i),scriptTags:M(b.TAG_NAMES.SCRIPT,r),noscriptTags:M(b.TAG_NAMES.NOSCRIPT,l),styleTags:M(b.TAG_NAMES.STYLE,c)},d={},u={};Object.keys(h).forEach(function(e){var t=h[e],n=t.newTags,a=t.oldTags;n.length&&(d[e]=n),a.length&&(u[e]=h[e].oldTags)}),p(e,d,u)},N=function(){return null},F=(0,u.default)(D,L,B)(N);t.default=q(F),e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),r=n(2),l=a(r),c=n(450),p=a(c),h=n(451),d=a(h);e.exports=function(e,t,n){function a(e){return e.displayName||e.name||"Component"}if("function"!=typeof e)throw new Error("Expected reducePropsToState to be a function.");if("function"!=typeof t)throw new Error("Expected handleStateChangeOnClient to be a function.");if("undefined"!=typeof n&&"function"!=typeof n)throw new Error("Expected mapStateOnServer to either be undefined or a function.");return function(c){function h(){m=e(u.map(function(e){return e.props})),f.canUseDOM?t(m):n&&(m=n(m))}if("function"!=typeof c)throw new Error("Expected WrappedComponent to be a React component.");var u=[],m=void 0,f=function(e){function t(){s(this,t),e.apply(this,arguments)}return o(t,e),t.peek=function(){return m},t.rewind=function(){if(t.canUseDOM)throw new Error("You may only call rewind() on the server. Call peek() to read the current state.");var e=m;return m=void 0,u=[],e},t.prototype.shouldComponentUpdate=function(e){return!d.default(e,this.props)},t.prototype.componentWillMount=function(){u.push(this),h()},t.prototype.componentDidUpdate=function(){h()},t.prototype.componentWillUnmount=function(){var e=u.indexOf(this);u.splice(e,1),h()},t.prototype.render=function(){return l.default.createElement(c,this.props)},i(t,null,[{key:"displayName",value:"SideEffect("+a(c)+")",enumerable:!0},{key:"canUseDOM",value:p.default.canUseDOM,enumerable:!0}]),t}(r.Component);return f}}},function(e,t,n){var a;/*!
	  Copyright (c) 2015 Jed Watson.
	  Based on code that is Copyright 2013-2015, Facebook, Inc.
	  All rights reserved.
	*/
!function(){"use strict";var s=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:s,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:s&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:s&&!!window.screen};a=function(){return o}.call(t,n,t,e),!(void 0!==a&&(e.exports=a))}()},function(e,t,n){"use strict";var a=n(452);e.exports=function(e,t,n,s){var o=n?n.call(s,e,t):void 0;if(void 0!==o)return!!o;if(e===t)return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var i=a(e),r=a(t),l=i.length;if(l!==r.length)return!1;s=s||null;for(var c=Object.prototype.hasOwnProperty.bind(t),p=0;p<l;p++){var h=i[p];if(!c(h))return!1;var d=e[h],u=t[h],m=n?n.call(s,d,u,h):void 0;if(m===!1||void 0===m&&d!==u)return!1}return!0}},function(e,t,n){function a(e){return function(t){return null==t?void 0:t[e]}}function s(e){return null!=e&&i(b(e))}function o(e,t){return e="number"==typeof e||u.test(e)?+e:-1,t=null==t?y:t,e>-1&&e%1==0&&e<t}function i(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=y}function r(e){for(var t=c(e),n=t.length,a=n&&e.length,s=!!a&&i(a)&&(d(e)||h(e)),r=-1,l=[];++r<n;){var p=t[r];(s&&o(p,a)||f.call(e,p))&&l.push(p)}return l}function l(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function c(e){if(null==e)return[];l(e)||(e=Object(e));var t=e.length;t=t&&i(t)&&(d(e)||h(e))&&t||0;for(var n=e.constructor,a=-1,s="function"==typeof n&&n.prototype===e,r=Array(t),c=t>0;++a<t;)r[a]=a+"";for(var p in e)c&&o(p,t)||"constructor"==p&&(s||!f.call(e,p))||r.push(p);return r}var p=n(453),h=n(454),d=n(455),u=/^\d+$/,m=Object.prototype,f=m.hasOwnProperty,g=p(Object,"keys"),y=9007199254740991,b=a("length"),w=g?function(e){var t=null==e?void 0:e.constructor;return"function"==typeof t&&t.prototype===e||"function"!=typeof e&&s(e)?r(e):l(e)?g(e):[]}:r;e.exports=w},function(e,t){function n(e){return!!e&&"object"==typeof e}function a(e,t){var n=null==e?void 0:e[t];return i(n)?n:void 0}function s(e){return o(e)&&d.call(e)==r}function o(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function i(e){return null!=e&&(s(e)?u.test(p.call(e)):n(e)&&l.test(e))}var r="[object Function]",l=/^\[object .+?Constructor\]$/,c=Object.prototype,p=Function.prototype.toString,h=c.hasOwnProperty,d=c.toString,u=RegExp("^"+p.call(h).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=a},function(e,t){function n(e){return s(e)&&m.call(e,"callee")&&(!g.call(e,"callee")||f.call(e)==p)}function a(e){return null!=e&&i(e.length)&&!o(e)}function s(e){return l(e)&&a(e)}function o(e){var t=r(e)?f.call(e):"";return t==h||t==d}function i(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=c}function r(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function l(e){return!!e&&"object"==typeof e}var c=9007199254740991,p="[object Arguments]",h="[object Function]",d="[object GeneratorFunction]",u=Object.prototype,m=u.hasOwnProperty,f=u.toString,g=u.propertyIsEnumerable;e.exports=n},function(e,t){function n(e){return!!e&&"object"==typeof e}function a(e,t){var n=null==e?void 0:e[t];return r(n)?n:void 0}function s(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=y}function o(e){return i(e)&&m.call(e)==c}function i(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function r(e){return null!=e&&(o(e)?f.test(d.call(e)):n(e)&&p.test(e))}var l="[object Array]",c="[object Function]",p=/^\[object .+?Constructor\]$/,h=Object.prototype,d=Function.prototype.toString,u=h.hasOwnProperty,m=h.toString,f=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),g=a(Array,"isArray"),y=9007199254740991,b=g||function(e){return n(e)&&s(e.length)&&m.call(e)==l};e.exports=b},function(e,t){t.__esModule=!0;t.TAG_NAMES={HTML:"htmlAttributes",TITLE:"title",BASE:"base",META:"meta",LINK:"link",SCRIPT:"script",NOSCRIPT:"noscript",STYLE:"style"},t.TAG_PROPERTIES={NAME:"name",CHARSET:"charset",HTTPEQUIV:"http-equiv",REL:"rel",HREF:"href",PROPERTY:"property",SRC:"src",INNER_HTML:"innerHTML",CSS_TEXT:"cssText",ITEM_PROP:"itemprop"},t.REACT_TAG_MAP={charset:"charSet","http-equiv":"httpEquiv",itemprop:"itemProp",class:"className"}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(458),h=a(p),d=n(469),u=a(d);n(480);var m=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.pages,n=e.post;return c.default.createElement("div",null,c.default.createElement("hr",null),c.default.createElement("div",{className:"subscribe-container"},c.default.createElement(h.default,{post:n,pages:t}),c.default.createElement(u.default,{post:n,pages:t})))}}]),t}(c.default.Component);m.propTypes={post:c.default.PropTypes.object.isRequired,pages:c.default.PropTypes.array},t.default=m,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=n(380),d=n(459),u=a(d),m=n(342),f=a(m),g=n(396),y=n(466),b=a(y),w=n(467),v=a(w),k=n(468),j=a(k),x=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props.post,t=e.category,n=e.subscribeText,a=(0,u.default)(b.default.categories,{key:t}),s=n||(0,f.default)(a,"subscribeText","Web development");return c.default.createElement("div",{className:"subscribe-block"},c.default.createElement("p",null,"Thanks for taking the time to read this post!"," "+s," is one of the main topics of this blog, so if you enjoyed the post, please consider subscribing by using the feed, Twitter or my mailing list."),c.default.createElement("div",{style:{marginBottom:(0,g.rhythm)(2.5)}},c.default.createElement("div",{id:"mc_embed_signup"},c.default.createElement("h6",{style:{margin:0,fontSize:(0,g.scale)(-.5).fontSize,lineHeight:(0,g.scale)(-.5).lineHeight,letterSpacing:-.25}},"EMAIL"),c.default.createElement("form",{action:"//benmccormick.us8.list-manage.com/subscribe/post?u=115446b80fd9d930ba091cc27&id=f5b9f5acf2",method:"post",id:"mc-embedded-subscribe-form",name:"mc-embedded-subscribe-form",className:"validate",target:"_blank",noValidate:!0},c.default.createElement("div",{id:"mc_embed_signup_scroll"},c.default.createElement("div",{className:"mc-field-group",style:{paddingRight:"30px"}},c.default.createElement("input",{type:"email",value:"",name:"EMAIL",className:"required email",id:"mce-EMAIL",placeholder:"Email Address"}),c.default.createElement("input",{type:"submit",value:"Subscribe",name:"subscribe",id:"mc-embedded-subscribe",className:"button"})),c.default.createElement("div",{id:"mce-responses",className:"clear"},c.default.createElement("div",{className:"response",id:"mce-error-response",style:{display:"none"}}),c.default.createElement("div",{className:"response",id:"mce-success-response",style:{display:"none"}})),c.default.createElement("div",{style:{position:"absolute",left:"-5000px"},"aria-hidden":"true"},c.default.createElement("input",{type:"text",name:"b_115446b80fd9d930ba091cc27_f5b9f5acf2",tabIndex:"-1",value:""})),c.default.createElement("div",{className:"clear"})))),c.default.createElement("div",{className:"rss"},c.default.createElement("h6",{style:{margin:0,fontSize:(0,g.scale)(-.5).fontSize,lineHeight:(0,g.scale)(-.5).lineHeight,letterSpacing:-.25}},"RSS"),c.default.createElement(p.Link,{to:(0,h.prefixLink)("/rss/")},c.default.createElement(v.default,{src:j.default,className:"rss-icon"})," ",c.default.createElement("span",null,"RSS"))),c.default.createElement("div",null,c.default.createElement("h6",{style:{margin:0,fontSize:(0,g.scale)(-.5).fontSize,lineHeight:(0,g.scale)(-.5).lineHeight,letterSpacing:-.25}},"TWITTER"),c.default.createElement("div",{className:"twitter-item"},c.default.createElement("span",null,"Site Feed: "),c.default.createElement("a",{href:"https://twitter.com/benmccormickorg",className:"twitter-follow-button","data-show-count":!1},"Follow @benmccormickorg"))),c.default.createElement("div",null,c.default.createElement("div",{className:"twitter-item"},c.default.createElement("span",null,"Personal Feed: "),c.default.createElement("a",{href:"https://twitter.com/ben336",className:"twitter-follow-button","data-show-count":!1},"Follow @ben336")))))}}]),t}(c.default.Component);x.propTypes={post:c.default.PropTypes.object.isRequired,pages:c.default.PropTypes.array},t.default=x,e.exports=t.default},function(e,t,n){var a=n(460),s=n(461),o=a(s);e.exports=o},function(e,t,n){function a(e){return function(t,n,a){var r=Object(t);if(!o(t)){var l=s(n,3);t=i(t),n=function(e){return l(r[e],e,r)}}var c=e(t,n,a);return c>-1?r[l?t[c]:c]:void 0}}var s=n(257),o=n(332),i=n(316);e.exports=a},function(e,t,n){function a(e,t,n){var a=null==e?0:e.length;if(!a)return-1;var l=null==n?0:i(n);return l<0&&(l=r(a+l,0)),s(e,o(t,3),l)}var s=n(462),o=n(257),i=n(463),r=Math.max;e.exports=a},function(e,t){function n(e,t,n,a){for(var s=e.length,o=n+(a?1:-1);a?o--:++o<s;)if(t(e[o],o,e))return o;return-1}e.exports=n},function(e,t,n){function a(e){var t=s(e),n=t%1;return t===t?n?t-n:t:0}var s=n(464);e.exports=a},function(e,t,n){function a(e){if(!e)return 0===e?e:0;if(e=s(e),e===o||e===-o){var t=e<0?-1:1;return t*i}return e===e?e:0}var s=n(465),o=1/0,i=1.7976931348623157e308;e.exports=a},function(e,t,n){function a(e){if("number"==typeof e)return e;if(o(e))return i;if(s(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=s(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(r,"");var n=c.test(e);return n||p.test(e)?h(e.slice(2),n?2:8):l.test(e)?i:+e}var s=n(278),o=n(346),i=NaN,r=/^\s+|\s+$/g,l=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,p=/^0o[0-7]+$/i,h=parseInt;e.exports=a},function(e,t){e.exports={categories:[{title:"JavaScript Frameworks and Libraries",description:"These posts cover development using JavaScript frameworks and libraries, including React, jQuery, Knockout, and Backbone",key:"frameworks",icon:"beaker",subscribeText:"JavaScript development"},{title:"JavaScript Language",description:"These posts cover the JavaScript language, its evolution over time, and practical usage examples.",key:"javascript",icon:"code",subscribeText:"JavaScript"},{title:"Productivity and Software Engineering",description:"These posts cover techniques and ideas around improving productivity and writing better software.",key:"software-productivity",icon:"project",subscribeText:"Software engineering"},{title:"Meta",key:"meta",description:"These posts are updates about the site, messages to the readers or news from me",icon:"info",subscribeText:"Web development"},{title:"Software Tools",description:"These posts cover tools and applications I use in software development",key:"tools",icon:"tools",subscribeText:"Software tooling"},{title:"Book and Product Reviews",description:"These posts are reviews of books I've read and products I've used",key:"reviews",icon:"book",subscribeText:"Web development"},{title:"Web Platform",description:"These posts cover the technologies and standards behind the web, especially how they relate to software development",key:"platform",icon:"globe",subscribeText:"The web platform"},{title:"Opinion",description:"These posts cover my thoughts on a variety of technology related subjects",key:"opinion",icon:"megaphone",subscribeText:"Web development"}]}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n={};for(var a in e)t.indexOf(a)>=0||Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function r(e){return y&&"string"==typeof e&&"<svg"===e.trim().substr(0,4)}function l(e){var t=new f;return t.parseFromString(e,"image/svg+xml")}function c(e){switch(e){case"class":return"className";default:return e}}Object.defineProperty(t,"__esModule",{value:!0});var p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},h=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),d=function(e,t,n){for(var a=!0;a;){var s=e,o=t,i=n;a=!1,null===s&&(s=Function.prototype);var r=Object.getOwnPropertyDescriptor(s,o);if(void 0!==r){if("value"in r)return r.value;var l=r.get;if(void 0===l)return;return l.call(i)}var c=Object.getPrototypeOf(s);if(null===c)return;e=c,t=o,n=i,a=!0,r=c=void 0}},u=n(2),m=a(u),f="undefined"!=typeof window&&window.DOMParser,g=g||{};g.env=g.env||{};var y="undefined"!=typeof f&&null!=f.prototype&&null!=f.prototype.parseFromString,b=function(e){function t(e){o(this,t),d(Object.getPrototypeOf(t.prototype),"constructor",this).call(this,e),this._extractSVGProps=this._extractSVGProps.bind(this)}return i(t,e),h(t,null,[{key:"defaultProps",value:{element:"i",raw:!1,src:""},enumerable:!0},{key:"propTypes",value:{src:m.default.PropTypes.string.isRequired,element:m.default.PropTypes.string,raw:m.default.PropTypes.bool},enumerable:!0}]),h(t,[{key:"_serializeAttrs",value:function(e){for(var t={},n=void 0,a=0;a<e.length;a++)n=c(e[a].name),t[n]=e[a].value;return t}},{key:"_extractSVGProps",value:function(e){var t=l(e).documentElement.attributes;return t.length>0?this._serializeAttrs(t):null}},{key:"_stripSVG",value:function(e){return l(e).documentElement.innerHTML}},{key:"componentWillReceiveProps",value:function(e){var t=e.children;"production"!==g.env.NODE_ENV&&null!=t&&console.info("<InlineSVG />: `children` prop will be ignored.")}},{key:"render",value:function(){var e=void 0,t=void 0,n=void 0,a=this.props,o=a.element,i=a.raw,l=a.src,c=s(a,["element","raw","src"]);return i===!0&&r(l)&&(e="svg",n=this._extractSVGProps(l),t=this._stripSVG(l)),t=t||l,e=e||o,n=n||{},m.default.createElement(e,p({},n,c,{src:null,children:null,dangerouslySetInnerHTML:{__html:t}}))}}]),t}(m.default.Component);t.default=b,e.exports=t.default},function(e,t){e.exports='<svg viewBox="0 0 10 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>rss</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="rss" fill="#000000"><path d="M2,13 L0,13 L0,11 C1.11,11 2,11.89 2,13 L2,13 Z M0,3 L0,4 C4.97,4 9,8.03 9,13 L10,13 C10,7.48 5.52,3 0,3 L0,3 Z M0,7 L0,8 C2.75,8 5,10.25 5,13 L6,13 C6,9.69 3.31,7 0,7 L0,7 Z" id="Shape"></path></g></g></svg>'},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=n(380),d=n(378),u=a(d),m=n(470),f=a(m),g=n(472),y=a(g),b=n(478),w=a(b),v=n(254),k=a(v),j=n(479),x=a(j),S=n(396),I=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.pages,n=e.post,a=n.readNext,s=n.category,o=n.path,i=void 0;if(a){var r=(0,k.default)(a)?a:a.split(",");i=function(e){var t=e.data;return t&&(0,y.default)(r,t.key)}}else i=function(e){var t=e.data;return t&&t.category===s&&t.path!==o&&"true"!==t.dontfeature};var l=(0,f.default)((0,u.default)((0,x.default)(t,"data.date","desc"),i),3);return c.default.createElement("div",{className:"up-next-block"},c.default.createElement("h6",{style:{margin:0,fontSize:(0,S.scale)(-.5).fontSize,lineHeight:(0,S.scale)(-.5).lineHeight,letterSpacing:-.25}},"You Might Also Like:"),(0,w.default)(l,function(e,t){return c.default.createElement("div",null,t?c.default.createElement("hr",null):null,c.default.createElement("h3",{style:{marginTop:0,marginBottom:(0,S.rhythm)(.25)}},c.default.createElement(p.Link,{to:{pathname:(0,h.prefixLink)(e.path),query:{readNext:!0},hash:"#title"}},e.data.title)),c.default.createElement("p",null,e.data.description))}))}}]),t}(c.default.Component);I.propTypes={post:c.default.PropTypes.object.isRequired,pages:c.default.PropTypes.array},t.default=I,e.exports=t.default},function(e,t,n){function a(e,t,n){return e&&e.length?(t=n||void 0===t?1:o(t),s(e,0,t<0?0:t)):[]}var s=n(471),o=n(463);e.exports=a},function(e,t){function n(e,t,n){var a=-1,s=e.length;t<0&&(t=-t>s?0:s+t),n=n>s?s:n,n<0&&(n+=s),s=t>n?0:n-t>>>0,t>>>=0;for(var o=Array(s);++a<s;)o[a]=e[a+t];return o}e.exports=n},function(e,t,n){function a(e,t,n,a){e=o(e)?e:l(e),n=n&&!a?r(n):0;var p=e.length;return n<0&&(n=c(p+n,0)),i(e)?n<=p&&e.indexOf(t,n)>-1:!!p&&s(e,t,n)>-1}var s=n(473),o=n(332),i=n(381),r=n(463),l=n(476),c=Math.max;e.exports=a},function(e,t,n){function a(e,t,n){return t===t?i(e,t,n):s(e,o,n)}var s=n(462),o=n(474),i=n(475);e.exports=a},function(e,t){function n(e){return e!==e}e.exports=n},function(e,t){function n(e,t,n){for(var a=n-1,s=e.length;++a<s;)if(e[a]===t)return a;return-1}e.exports=n},function(e,t,n){function a(e){return null==e?[]:s(e,o(e))}var s=n(477),o=n(316);e.exports=a},function(e,t,n){function a(e,t){return s(t,function(t){return e[t]})}var s=n(256);e.exports=a},function(e,t,n){function a(e,t){var n=r(e)?s:i;return n(e,o(t,3))}var s=n(256),o=n(257),i=n(360),r=n(254);e.exports=a},function(e,t,n){function a(e,t,n,a){return null==e?[]:(o(t)||(t=null==t?[]:[t]),n=a?void 0:n,o(n)||(n=null==n?[]:[n]),s(e,t,n))}var s=n(255),o=n(254);e.exports=a},443,function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0}),t.Disqus=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(482),h=a(p),d=t.Disqus=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.title,n=e.url;return c.default.createElement(h.default,{shortname:"benmccormick",title:t,url:n})}}]),t}(c.default.Component);d.propTypes={title:c.default.PropTypes.string.isRequired,url:c.default.PropTypes.string.isRequired}},function(e,t,n){"use strict";e.exports=n(483)},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){var n=arguments.length<=2||void 0===arguments[2]?"":arguments[2];Object.keys(t).forEach(function(a){e[n+a]=t[a]}),"function"==typeof t.onNewComment&&(e[n+"config"]=function(){this.callbacks.onNewComment=[function(e){t.onNewComment(e)}]})}var o=n(2),i=a(o),r=["shortname","identifier","title","url","category_id","onNewComment"],l=!1;e.exports=i.default.createClass({displayName:"DisqusThread",propTypes:{id:i.default.PropTypes.string,shortname:i.default.PropTypes.string.isRequired,identifier:i.default.PropTypes.string,title:i.default.PropTypes.string,url:i.default.PropTypes.string,category_id:i.default.PropTypes.string,onNewComment:i.default.PropTypes.func},getDefaultProps:function(){return{shortname:null,identifier:null,title:null,url:null,category_id:null,onNewComment:null}},componentDidMount:function(){this.loadDisqus()},componentDidUpdate:function(){this.loadDisqus()},render:function(){return i.default.createElement("div",this.props,i.default.createElement("div",{id:"disqus_thread"}),i.default.createElement("noscript",null,i.default.createElement("span",null,"Please enable JavaScript to view the",i.default.createElement("a",{href:"http://disqus.com/?ref_noscript"},"comments powered by Disqus."))),i.default.createElement("a",{href:"http://disqus.com",className:"dsq-brlink"},"Blog comments powered by ",i.default.createElement("span",{className:"logo-disqus"},"Disqus"),"."))},addDisqusScript:function(){if(!l){var e=this.disqus=document.createElement("script"),t=document.getElementsByTagName("head")[0]||document.getElementsByTagName("body")[0];e.async=!0,e.type="text/javascript",e.src="//"+this.props.shortname+".disqus.com/embed.js",t.appendChild(e),l=!0}},loadDisqus:function(){var e=this,t={};r.forEach(function(n){e.props[n]&&(t[n]=e.props[n])}),t.url&&t.url.length||(t.url=window.location.href),"undefined"!=typeof DISQUS?DISQUS.reset({reload:!0,config:function(){s(this.page,t),this.page.url=this.page.url.replace(/#/,"")+"#!newthread"}}):(s(window,t,"disqus_"),this.addDisqusScript())}})},function(e,t,n){var a=n(485),s=n(369),o=s(function(e,t){return a(e,1,t)});e.exports=o},function(e,t){function n(e,t,n){if("function"!=typeof e)throw new TypeError(a);return setTimeout(function(){e.apply(void 0,n)},t)}var a="Expected a function";e.exports=n},443,443,443,443,function(e,t){!function(t){var n={src:"//platform.twitter.com/widgets.js",loading:!1,listeners:[],interval:50,load:function(e){var n=this;if(this.listeners.push(e),t.twttr&&t.twttr.widgets)return void setTimeout(function(){n.done()});if(!this.loading){this.loading=!0;var a=document.createElement("script");a.type="text/javascript",a.src=this.src,document.body.appendChild(a),this.poll()}},poll:function(){if(t.twttr&&t.twttr.widgets)return this.done();var e=this;setTimeout(function(){e.poll()},this.interval)},done:function(){for(;this.listeners.length;)this.listeners.pop()(t.twttr)}};"undefined"!=typeof e&&e.exports?e.exports=n:t.TwitterWidgetsLoader=n}(window)},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.onRouteUpdate=function(e,t,n){return window.ga?window.ga("send","pageview",{page:e.pathname}):null}},function(e,t,n){"use strict";e.exports=function(e){var t=n(493);return e(t)}},function(e,t,n){function a(e){return n(s(e))}function s(e){return o[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var o={"./404.md":494,"./_template.js":383,"./archive.js":495,"./categories.json":466,"./category/frameworks.js":510,"./category/javascript.js":512,"./category/meta.js":513,"./category/opinion.js":514,"./category/platform.js":515,"./category/reviews.js":516,"./category/software-productivity.js":517,"./category/tools.js":518,"./index.js":519,"./manifest.json":521,"./pages/a-note-to-recruiters.md":522,"./pages/about.md":523,"./pages/learning-vim-in-2014.md":524,"./pages/marionette-explained.md":525,"./pages/readinglist.md":526,"./pages/speaking.md":527,"./pages/subscribe.md":528,"./posts/2015-roundup-2.md":529,"./posts/2016-roundup.md":530,"./posts/90-done-halfway-there.md":531,"./posts/a-look-at-ack.md":532,"./posts/a-new-look.md":533,"./posts/a-quick-review-of-google-inbox.md":534,"./posts/ack-tips.md":535,"./posts/all-about-angular-2-0.md":536,"./posts/alternative-javascript.md":537,"./posts/awesome-software-trello.md":538,"./posts/backbone-and-es6-classes-revisited.md":539,"./posts/backbone-radio.md":540,"./posts/bayesian-witch-hunt.md":541,"./posts/blendconf-2013-takeaways-from-a-very-human-tech-conference.md":542,"./posts/book-review-effective-javascript.md":543,"./posts/book-review-javascript-testing-with-jasmine.md":544,"./posts/book-review-talking-with-tech-leads.md":545,"./posts/book-review-user-centered-design.md":546,"./posts/building-complex-layouts-with-marionette-js.md":547,"./posts/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance.md":548,"./posts/cleaning-my-digital-house.md":549,"./posts/coffeescript-is-great.md":550,"./posts/come-build-with-me.md":551,"./posts/component-based-development.md":552,"./posts/creating-a-build-system-for-a-coffeescript-project-with-ant.md":553,"./posts/custom-elements-by-example.md":554,"./posts/customer-culture-revisited.md":555,"./posts/digging-into-knockout-builds.md":556,"./posts/digging-into-react-choosing-component-styles.md":557,"./posts/discovering-vim.md":558,"./posts/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning.md":559,"./posts/es6-classes-and-backbone-js.md":560,"./posts/es6-patterns-clean-higher-order-functions.md":561,"./posts/es6-patterns-converting-callbacks-to-promises.md":562,"./posts/evergreen-browsers.md":563,"./posts/explaining-javascript-closures.md":564,"./posts/explaining-javascript-object-oriented-programming.md":565,"./posts/how-i-use-stack-overflow.md":566,"./posts/how-i-work-refactoring.md":567,"./posts/how-jquery-works-an-introduction.md":568,"./posts/i-hate-computing-ecosystems.md":569,"./posts/irreplaceable.md":570,"./posts/is-bower-useful.md":571,"./posts/is-safari-being-left-behind.md":572,"./posts/it-took-a-month-to-get-sick-of-php.md":573,"./posts/lasting-legacy-context.md":574,"./posts/learning-vim-in-2014-configuring-vim.md":575,"./posts/learning-vim-in-2014-copy-and-paste-the-vim-way.md":576,"./posts/learning-vim-in-2014-getting-more-from-vim-with-plugins.md":577,"./posts/learning-vim-in-2014-search.md":578,"./posts/learning-vim-in-2014-the-basics.md":579,"./posts/learning-vim-in-2014-vim-as-art.md":580,"./posts/learning-vim-in-2014-vim-as-language.md":581,"./posts/learning-vim-in-2014-working-with-files.md":582,"./posts/marionette-explained-connecting-your-data-to-your-views.md":583,"./posts/marionette-service-service-objects-for-marionette.md":584,"./posts/marionette-view-life-cycles.md":585,"./posts/medium-the-end-of-history-and-the-last-website.md":586,"./posts/meetings-and-concurrency.md":587,"./posts/mobx-first-impressions.md":588,"./posts/modern-dojo-exploring-dojo_basedeclare.md":589,"./posts/modern-dojo-exploring-dojoquery.md":590,"./posts/moving-past-requirejs.md":591,"./posts/mozilla-the-state-of-web-components.md":592,"./posts/new-look.md":593,"./posts/new-twitter-feed-and-practical-vim-giveaway.md":594,"./posts/one-day-left-in-practical-vim-giveaway.md":595,"./posts/orthogonality-and-css-in-js.md":596,"./posts/portable-configuration-ratings.md":597,"./posts/productive-javascript-development.md":598,"./posts/quick-tip-take-advantage-of-lodash-collections-2.md":599,"./posts/rauchg-on-es6.md":600,"./posts/readable-code.md":601,"./posts/reusable-code-patterns.md":602,"./posts/revertible-observables-in-knockout.md":603,"./posts/rss-roundup.md":604,"./posts/running-jest-tests-on-commit.md":605,"./posts/saving-time-with-jest.md":606,"./posts/searching-for-the-perfect-reading-device-my-nexus-7-2013-review.md":607,"./posts/setting-up-your-text-editor-for-javascript-development.md":608,"./posts/shutdown-tiles-for-windows-8-start-screen.md":609,"./posts/simple-publish-subscribe-with-jquery.md":610,"./posts/somewhat-open.md":611,"./posts/stability-vs-decline.md":612,"./posts/staying-dry-with-marionette-behaviors.md":613,"./posts/staying-productive.md":614,"./posts/sublime-text-for-javascript-configuration.md":615,"./posts/sublime-text-for-javascript-keyboard-shortcuts.md":616,"./posts/sublime-text-for-javascript-plugins.md":617,"./posts/sync-multiple-google-calendars-in-windows-8.md":618,"./posts/testing-site-performance-with-lighthouse.md":619,"./posts/testing-with-jest-snapshots-first-impressions.md":620,"./posts/the-case-for-marionette-js.md":621,"./posts/the-debugging-toolbox.md":622,"./posts/the-iphone-5-conversation-so-far.md":623,"./posts/the-most-interesting-atom-packages-ive-found-so-far.md":624,"./posts/the-mystery-of-docker-and-the-disk-eating-cow.md":625,"./posts/the-sad-state-of-the-backbone-ecosystem.md":626,"./posts/underscore-vs-lodash.md":627,"./posts/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey.md":628,"./posts/unexpected-javascript-that-doesnt-do-what-you-think.md":629,"./posts/vim-workflows-file-switching-strategies.md":630,"./posts/what-are-hocs.md":631,"./posts/what-are-mutable-and-immutable-data-structures-2.md":632,"./posts/what-can-backbone-developers-learn-from-react.md":633};a.keys=function(){return Object.keys(o)},a.resolve=s,e.exports=a,a.id=493},function(e,t){e.exports={path:"/404.html",hideFooter:!0,body:"<h1>NOT FOUND</h1>\n<p>You just hit a route that doesn’t exist… the sadness.</p>\n"}},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,
enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(241),h=a(p),d=n(342),u=a(d),m=n(448),f=a(m),g=n(382),y=n(472),b=a(y),w=n(496),v=a(w),k=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=(0,h.default)(this.props.route.pages,function(e){return(0,u.default)(e,"data.date")}).filter(function(e){return"md"===(0,u.default)(e,"file.ext")&&!(0,b.default)(e.path,"/404")&&"post"===(0,u.default)(e,"data.layout")}).reverse();return c.default.createElement("div",null,c.default.createElement(f.default,{title:g.config.blogTitle,meta:[{name:"description",content:"Ben McCormick's blog"},{name:"keywords",content:"blog, articles"}]}),c.default.createElement(v.default,{pages:e,title:"Articles",showCategory:!0}))}}]),t}(c.default.Component);k.propTypes={route:c.default.PropTypes.object},t.default=k,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(497),h=a(p),d=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.pages,n=e.title,a=e.showCategory,s=t.map(function(e){return c.default.createElement(h.default,{page:e,showCategory:a,key:e.path})});return c.default.createElement("div",null,n?c.default.createElement("h1",null,n):null,c.default.createElement("ul",{style:{marginLeft:0,paddingLeft:0}},s))}}]),t}(c.default.Component);d.propTypes={pages:c.default.PropTypes.array.isRequired,title:c.default.PropTypes.string,showCategory:c.default.PropTypes.bool.isRequired},d.defaultProps={showCategory:!0},t.default=d,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=n(342),d=a(h),u=n(380),m=n(396),f=n(498),g=a(f),y=n(447),b=a(y),w=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.page,n=e.showCategory,a=(0,d.default)(t,"data.title")||t.path;return c.default.createElement("li",{style:{marginBottom:(0,m.rhythm)(.5),listStyle:"none",display:"flex",justifyContent:"space-between",alignItems:"center"}},c.default.createElement("div",{style:{maxWidth:"25rem",display:"flex",alignItems:"center"}},c.default.createElement("div",null,c.default.createElement(p.Link,{style:{boxShadow:"none"},to:(0,u.prefixLink)(t.path)},a),c.default.createElement("p",{style:{fontStyle:"italic",margin:0,color:"rgba(100,100,100, 0.7)"}}," ",t.data.description),n?c.default.createElement(g.default,{category:t.data.category}):null)),c.default.createElement("span",{className:"no-mobile",style:{color:"rgba(100,100,100, 0.7)"}},(0,b.default)(t.data.date).fromNow()))}}]),t}(c.default.Component);w.propTypes={page:c.default.PropTypes.object.isRequired,showCategory:c.default.PropTypes.bool.isRequired},t.default=w,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(467),h=a(p),d=n(499),u=a(d),m=n(500),f=a(m),g=n(501),y=a(g),b=n(502),w=a(b),v=n(503),k=a(v),j=n(504),x=a(j),S=n(505),I=a(S),T=n(506),_=a(T),C=n(507),M=a(C),A=n(508),E=a(A),P=n(466),V=a(P),O=n(167),R=n(380),B=n(342),q=a(B),D=n(459),L=a(D);n(509);var N={beaker:u.default,book:f.default,browser:y.default,code:w.default,globe:k.default,info:x.default,megaphone:I.default,project:_.default,tools:M.default},F=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.category,n=e.includeText,a=(0,q.default)(V.default,"categories",[]),s=(0,L.default)(a,{key:t}),o=s?N[s.icon]:E.default,i=s?s.title:"Uncategorized";return c.default.createElement(O.Link,{to:(0,R.prefixLink)("/category/"+t+"/"),className:"category-icon-wrapper"},c.default.createElement("span",{className:"category-icon category-icon-"+t},c.default.createElement(h.default,{src:o})),n?i:null)}}]),t}(c.default.Component);F.propTypes={category:c.default.PropTypes.string.isRequired,includeText:c.default.PropTypes.bool.isRequired},F.defaultProps={includeText:!0},t.default=F,e.exports=t.default},function(e,t){e.exports='<svg viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>beaker</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="beaker" fill="#000000"><path d="M14.3797254,14.59 L10.9997254,7 L10.9997254,3 L11.9997254,3 L11.9997254,2 L2.99972539,2 L2.99972539,3 L3.99972539,3 L3.99972539,7 L0.62972539,14.59 C0.32972539,15.25 0.81972539,16 1.53972539,16 L13.4797254,16 C14.1997254,16 14.6797254,15.25 14.3897254,14.59 L14.3797254,14.59 Z M3.74972539,10 L4.99972539,7 L4.99972539,3 L9.99972539,3 L9.99972539,7 L11.2497254,10 L3.74972539,10 L3.74972539,10 Z M7.99972539,8 L8.99972539,8 L8.99972539,9 L7.99972539,9 L7.99972539,8 L7.99972539,8 Z M6.99972539,7 L5.99972539,7 L5.99972539,6 L6.99972539,6 L6.99972539,7 L6.99972539,7 Z M6.99972539,4 L7.99972539,4 L7.99972539,5 L6.99972539,5 L6.99972539,4 L6.99972539,4 Z M6.99972539,1 L5.99972539,1 L5.99972539,0 L6.99972539,0 L6.99972539,1 L6.99972539,1 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>book</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="book" fill="#000000"><path d="M3,5 L7,5 L7,6 L3,6 L3,5 L3,5 Z M3,8 L7,8 L7,7 L3,7 L3,8 L3,8 Z M3,10 L7,10 L7,9 L3,9 L3,10 L3,10 Z M14,5 L10,5 L10,6 L14,6 L14,5 L14,5 Z M14,7 L10,7 L10,8 L14,8 L14,7 L14,7 Z M14,9 L10,9 L10,10 L14,10 L14,9 L14,9 Z M16,3 L16,12 C16,12.55 15.55,13 15,13 L9.5,13 L8.5,14 L7.5,13 L2,13 C1.45,13 1,12.55 1,12 L1,3 C1,2.45 1.45,2 2,2 L7.5,2 L8.5,3 L9.5,2 L15,2 C15.55,2 16,2.45 16,3 L16,3 Z M8,3.5 L7.5,3 L2,3 L2,12 L8,12 L8,3.5 L8,3.5 Z M15,3 L9.5,3 L9,3.5 L9,12 L15,12 L15,3 L15,3 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>browser</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="browser" fill="#000000"><path d="M5,3 L6,3 L6,4 L5,4 L5,3 L5,3 Z M3,3 L4,3 L4,4 L3,4 L3,3 L3,3 Z M1,3 L2,3 L2,4 L1,4 L1,3 L1,3 Z M13,13 L1,13 L1,5 L13,5 L13,13 L13,13 Z M13,4 L7,4 L7,3 L13,3 L13,4 L13,4 Z M14,3 C14,2.45 13.55,2 13,2 L1,2 C0.45,2 0,2.45 0,3 L0,13 C0,13.55 0.45,14 1,14 L13,14 C13.55,14 14,13.55 14,13 L14,3 L14,3 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>code</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="code" fill="#000000"><path d="M9.5,3 L8,4.5 L11.5,8 L8,11.5 L9.5,13 L14,8 L9.5,3 L9.5,3 Z M4.5,3 L0,8 L4.5,13 L6,11.5 L2.5,8 L6,4.5 L4.5,3 L4.5,3 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>globe</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="globe" fill="#000000"><path d="M7,1 C3.14,1 0,4.14 0,8 C0,11.86 3.14,15 7,15 C7.48,15 7.94,14.95 8.38,14.86 C8.21,14.78 8.18,14.13 8.36,13.77 C8.55,13.36 9.17,12.32 8.56,11.97 C7.95,11.62 8.12,11.47 7.75,11.06 C7.38,10.65 7.53,10.59 7.5,10.48 C7.42,10.14 7.86,9.59 7.89,9.54 C7.91,9.48 7.91,9.27 7.89,9.21 C7.89,9.13 7.62,8.99 7.55,8.98 C7.49,8.98 7.44,9.09 7.35,9.11 C7.26,9.13 6.85,8.86 6.76,8.78 C6.67,8.7 6.62,8.55 6.49,8.44 C6.36,8.31 6.35,8.41 6.16,8.33 C5.97,8.25 5.36,8.02 4.88,7.85 C4.4,7.66 4.36,7.38 4.36,7.19 C4.34,6.99 4.06,6.72 3.94,6.52 C3.8,6.32 3.78,6.05 3.74,6.11 C3.7,6.17 3.99,6.89 3.94,6.92 C3.89,6.94 3.78,6.72 3.64,6.54 C3.5,6.35 3.78,6.45 3.34,5.59 C2.9,4.73 3.48,4.29 3.51,3.84 C3.54,3.39 3.89,4.01 3.7,3.71 C3.51,3.41 3.7,2.82 3.56,2.6 C3.43,2.38 2.68,2.85 2.68,2.85 C2.7,2.63 3.37,2.27 3.84,1.93 C4.31,1.59 4.62,1.87 5,1.98 C5.39,2.11 5.41,2.07 5.28,1.93 C5.15,1.8 5.34,1.76 5.64,1.8 C5.92,1.85 6.02,2.21 6.47,2.16 C6.94,2.13 6.52,2.25 6.58,2.38 C6.64,2.51 6.52,2.49 6.2,2.68 C5.9,2.88 6.22,2.9 6.75,3.29 C7.28,3.68 7.13,3.04 7.06,2.74 C6.99,2.44 7.45,2.68 7.45,2.68 C7.78,2.9 7.72,2.7 7.95,2.76 C8.18,2.82 8.86,3.4 8.86,3.4 C8.03,3.84 8.55,3.88 8.69,3.99 C8.83,4.1 8.41,4.29 8.41,4.29 C8.24,4.12 8.22,4.31 8.11,4.37 C8,4.43 8.09,4.59 8.09,4.59 C7.53,4.68 7.65,5.28 7.67,5.42 C7.67,5.56 7.29,5.78 7.2,6 C7.11,6.2 7.45,6.64 7.26,6.66 C7.07,6.69 6.92,6 5.95,6.25 C5.65,6.33 5.01,6.66 5.36,7.33 C5.72,8.02 6.28,7.14 6.47,7.24 C6.66,7.34 6.41,7.77 6.45,7.79 C6.49,7.81 6.98,7.81 7.01,8.4 C7.04,8.99 7.78,8.93 7.93,8.95 C8.1,8.95 8.63,8.51 8.7,8.5 C8.76,8.47 9.08,8.22 9.73,8.59 C10.39,8.95 10.71,8.9 10.93,9.06 C11.15,9.22 11.01,9.53 11.21,9.64 C11.41,9.75 12.27,9.61 12.49,9.95 C12.71,10.29 11.61,12.04 11.27,12.23 C10.93,12.42 10.79,12.87 10.43,13.15 C10.07,13.43 9.62,13.79 9.16,14.06 C8.75,14.29 8.69,14.72 8.5,14.86 C11.64,14.16 13.98,11.36 13.98,8.02 C13.98,4.16 10.84,1.02 6.98,1.02 L7,1 Z M8.64,7.56 C8.55,7.59 8.36,7.78 7.86,7.48 C7.38,7.18 7.05,7.25 7,7.2 C7,7.2 6.95,7.09 7.17,7.06 C7.61,7.01 8.15,7.47 8.28,7.47 C8.41,7.47 8.47,7.34 8.69,7.42 C8.91,7.5 8.74,7.55 8.64,7.56 L8.64,7.56 Z M6.34,1.7 C6.29,1.67 6.37,1.62 6.43,1.56 C6.46,1.53 6.45,1.45 6.48,1.42 C6.59,1.31 7.09,1.17 7,1.45 C6.89,1.72 6.42,1.75 6.34,1.7 L6.34,1.7 Z M7.57,2.59 C7.38,2.57 6.99,2.54 7.05,2.45 C7.35,2.17 6.96,2.07 6.71,2.07 C6.46,2.05 6.37,1.91 6.49,1.88 C6.61,1.85 7.1,1.9 7.19,1.96 C7.27,2.02 7.71,2.21 7.74,2.34 C7.76,2.47 7.74,2.59 7.57,2.59 L7.57,2.59 Z M9.04,2.54 C8.9,2.63 8.21,2.13 8.09,2.02 C7.53,1.54 7.2,1.71 7.09,1.61 C6.98,1.51 7.01,1.42 7.2,1.27 C7.39,1.12 7.89,1.33 8.2,1.36 C8.5,1.39 8.86,1.63 8.86,1.91 C8.88,2.16 9.19,2.41 9.05,2.54 L9.04,2.54 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>info</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="info" fill="#000000"><path d="M6.3,5.69 C6.11,5.5 6.02,5.27 6.02,4.99 C6.02,4.71 6.11,4.47 6.3,4.29 C6.49,4.11 6.72,4.01 7,4.01 C7.28,4.01 7.52,4.1 7.7,4.29 C7.88,4.48 7.98,4.71 7.98,4.99 C7.98,5.27 7.89,5.51 7.7,5.69 C7.51,5.87 7.28,5.99 7,5.99 C6.72,5.99 6.48,5.88 6.3,5.69 L6.3,5.69 Z M8,7.99 C7.98,7.74 7.89,7.51 7.69,7.3 C7.49,7.11 7.27,7 7,6.99 L6,6.99 C5.73,7.01 5.52,7.12 5.31,7.3 C5.11,7.5 5.01,7.74 5,7.99 L6,7.99 L6,10.99 C6.02,11.26 6.11,11.49 6.31,11.68 C6.51,11.88 6.73,11.99 7,11.99 L8,11.99 C8.27,11.99 8.48,11.88 8.69,11.68 C8.89,11.49 8.99,11.26 9,10.99 L8,10.99 L8,7.98 L8,7.99 Z M7,2.3 C3.86,2.3 1.3,4.84 1.3,7.98 C1.3,11.12 3.86,13.68 7,13.68 C10.14,13.68 12.7,11.13 12.7,7.98 C12.7,4.83 10.14,2.29 7,2.29 L7,2.3 Z M7,0.98 C10.86,0.98 14,4.12 14,7.98 C14,11.84 10.86,14.98 7,14.98 C3.14,14.98 0,11.86 0,7.98 C0,4.1 3.14,0.98 7,0.98 L7,0.98 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>megaphone</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="megaphone" fill="#000000"><path d="M10,1 C9.83,1 9.64,1.05 9.48,1.14 C8.04,2.02 4.5,4.58 3,5 C1.62,5 0,5.67 0,7.5 C0,9.33 1.63,10 3,10 C3.3,10.08 3.64,10.23 4,10.41 L4,15 L6,15 L6,11.55 C7.34,12.41 8.69,13.38 9.48,13.86 C9.64,13.95 9.82,14 10,14 C10.52,14 11,13.58 11,13 L11,2 C11,1.42 10.52,1 10,1 L10,1 Z M10,13 C9.62,12.77 9.11,12.42 8.5,12 C8.34,11.89 8.17,11.78 8,11.66 L8,3.31 C8.16,3.2 8.31,3.11 8.47,3 C9.08,2.59 9.63,2.23 10,2 L10,13 L10,13 Z M12,7 L16,7 L16,8 L12,8 L12,7 L12,7 Z M12,9 L16,11 L16,12 L12,10 L12,9 L12,9 Z M16,3 L16,4 L12,6 L12,5 L16,3 L16,3 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 15 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>project</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="project" fill="#000000"><path d="M10,12 L13,12 L13,2 L10,2 L10,12 L10,12 Z M6,10 L9,10 L9,2 L6,2 L6,10 L6,10 Z M2,14 L5,14 L5,2 L2,2 L2,14 L2,14 Z M1,15 L14,15 L14,1 L1,1 L1,15 L1,15 Z M14,0 L1,0 C0.448,0 0,0.448 0,1 L0,15 C0,15.552 0.448,16 1,16 L14,16 C14.552,16 15,15.552 15,15 L15,1 C15,0.448 14.552,0 14,0 L14,0 L14,0 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 16 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>tools</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="tools" fill="#000000"><path d="M4.48,7.27 C4.74,7.53 5.76,8.6 5.76,8.6 L6.32,8.02 L5.44,7.11 L7.13,5.31 C7.13,5.31 6.37,4.57 6.7,4.86 C7.02,3.67 6.73,2.35 5.83,1.42 C4.93,0.5 3.66,0.2 2.52,0.51 L4.45,2.51 L3.94,4.47 L2.05,4.99 L0.12,2.99 C-0.19,4.17 0.1,5.48 1,6.4 C1.94,7.38 3.29,7.66 4.48,7.27 L4.48,7.27 Z M10.92,9.21 L8.59,11.51 L12.43,15.49 C12.74,15.82 13.16,15.98 13.57,15.98 C13.98,15.98 14.39,15.82 14.71,15.49 C15.34,14.84 15.34,13.79 14.71,13.14 L10.92,9.21 L10.92,9.21 Z M16,2.53 L13.55,0 L6.33,7.46 L7.21,8.37 L2.9,12.83 L1.91,13.36 L0.52,15.63 L0.87,16 L3.07,14.56 L3.58,13.54 L7.9,9.08 L8.78,9.99 L16,2.53 L16,2.53 Z" id="Shape"></path></g></g></svg>'},function(e,t){e.exports='<svg viewBox="0 0 14 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>question</title><desc>Created with Sketch.</desc><defs></defs><g id="Octicons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="question" fill="#000000"><path d="M6,10 L8,10 L8,12 L6,12 L6,10 L6,10 Z M10,6.5 C10,8.64 8,9 8,9 L6,9 C6,8.45 6.45,8 7,8 L7.5,8 C7.78,8 8,7.78 8,7.5 L8,6.5 C8,6.22 7.78,6 7.5,6 L6.5,6 C6.22,6 6,6.22 6,6.5 L6,7 L4,7 C4,5.5 5.5,4 7,4 C8.5,4 10,5 10,6.5 L10,6.5 Z M7,2.3 C10.14,2.3 12.7,4.86 12.7,8 C12.7,11.14 10.14,13.7 7,13.7 C3.86,13.7 1.3,11.14 1.3,8 C1.3,4.86 3.86,2.3 7,2.3 L7,2.3 Z M7,1 C3.14,1 0,4.14 0,8 C0,11.86 3.14,15 7,15 C10.86,15 14,11.86 14,8 C14,4.14 10.86,1 7,1 L7,1 Z" id="Shape"></path></g></g></svg>'},443,function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"frameworks"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(241),h=a(p),d=n(342),u=a(d),m=n(459),f=a(m),g=n(448),y=a(g),b=n(382),w=n(472),v=a(w),k=n(496),j=a(k),x=n(466),S=a(x),I=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=this.props,t=e.pages,n=e.categoryKey,a=(0,f.default)(S.default.categories,{key:n}),s=(0,h.default)(t,function(e){return(0,u.default)(e,"data.date")}).filter(function(e){return"md"===(0,u.default)(e,"file.ext")&&e.data.category===n&&!(0,v.default)(e.path,"/404")&&"post"===(0,u.default)(e,"data.layout")}).reverse(),o=a.description,i=a.title,r=i+" Articles";return c.default.createElement("div",null,c.default.createElement(y.default,{title:b.config.blogTitle,meta:[{name:"description",content:"Ben McCormick's blog"},{name:"keywords",content:"blog, articles"}]}),c.default.createElement("h1",null," ",r," "),c.default.createElement("p",null," ",o),c.default.createElement(j.default,{pages:s,title:null,showCategory:!1}))}}]),t}(c.default.Component);I.propTypes={pages:c.default.PropTypes.object.isRequired,categoryKey:c.default.PropTypes.string.isRequired},t.default=I,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"javascript"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"meta"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"opinion"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"platform"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"reviews"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"software-productivity"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var s=n(2),o=a(s),i=n(511),r=a(i),l=function(e){var t=e.route;return o.default.createElement(r.default,{pages:t.pages,categoryKey:"tools"})};l.propTypes={route:o.default.PropTypes.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function i(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),l=n(2),c=a(l),p=n(167),h=n(241),d=a(h),u=n(470),m=a(u),f=n(520),g=a(f),y=n(342),b=a(y),w=n(380),v=n(396),k=n(448),j=a(k),x=n(382),S=n(472),I=a(S),T=n(496),_=a(T),C=function(e){function t(){return s(this,t),o(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return i(t,e),r(t,[{key:"render",value:function(){var e=(0,m.default)((0,d.default)(this.props.route.pages,function(e){return(0,b.default)(e,"data.date")}).reverse().filter(function(e){return"md"===(0,b.default)(e,"file.ext")&&!(0,I.default)(e.path,"/404")&&"post"===(0,b.default)(e,"data.layout")}),10),t=(0,m.default)((0,d.default)(this.props.route.pages,function(e){return(0,g.default)((0,b.default)(e,"data.last30pageViews"))}).reverse().filter(function(e){return"md"===(0,b.default)(e,"file.ext")&&!(0,I.default)(e.path,"/404")&&!e.data.dontfeature&&"post"===(0,b.default)(e,"data.layout")}),6);return c.default.createElement("div",null,c.default.createElement(j.default,{title:x.config.blogTitle,meta:[{name:"description",content:"Ben McCormick's blog on JavaScript and Web Development"},{name:"keywords",content:"blog javascript development code react vim"}]}),c.default.createElement(_.default,{title:"Recent Articles",pages:e,showCategory:!1}),c.default.createElement(_.default,{title:"Popular Articles",pages:t,showCategory:!1}),c.default.createElement("h1",null," Past Series "),c.default.createElement("ul",{style:{marginLeft:0,paddingLeft:0,borderBottom:"1px solid rgba(200, 200, 200, 0.5)"}},c.default.createElement("li",{key:"marionette",style:{marginBottom:(0,v.rhythm)(.5),listStyle:"none",display:"flex",justifyContent:"space-between",alignItems:"center"}},c.default.createElement("div",null,c.default.createElement(p.Link,{style:{boxShadow:"none"},to:(0,w.prefixLink)("/marionette-explained/")},"Marionette: Explained"),c.default.createElement("p",{style:{fontStyle:"italic",margin:0,color:"rgba(100,100,100, 0.7)"}}," An in depth exploration of how to build better Backbone apps with Marionette"))),c.default.createElement("li",{key:"vim",style:{marginBottom:(0,v.rhythm)(.5),listStyle:"none",display:"flex",justifyContent:"space-between",alignItems:"center"}},c.default.createElement("div",null,c.default.createElement(p.Link,{style:{boxShadow:"none"},to:(0,w.prefixLink)("/learning-vim-in-2014/")},"Learning Vim in 2014"),c.default.createElement("p",{style:{fontStyle:"italic",margin:0,color:"rgba(100,100,100, 0.7)"}}," A modern look at text editing with Vim")))),c.default.createElement("div",{style:{marginBottom:"2rem"}},c.default.createElement(p.Link,{style:{boxShadow:"none"},to:(0,w.prefixLink)("/archive/")},"See More Articles »")))}}]),t}(c.default.Component);C.propTypes={route:c.default.PropTypes.object},t.default=C,e.exports=t.default},function(e,t,n){function a(e,t,n){return n||null==t?t=0:t&&(t=+t),r(o(e).replace(i,""),t||0)}var s=n(246),o=n(350),i=/^\s+/,r=s.parseInt;e.exports=a},function(e,t){e.exports={name:"benmccormick.org",short_name:"benmccormick",icons:[{src:"/android-chrome-192x192.png?v=yyxgnp97qG",sizes:"192x192",type:"image/png"},{src:"/android-chrome-384x384.png?v=yyxgnp97qG",sizes:"384x384",type:"image/png"}],theme_color:"#ffffff",background_color:"#57a3e8",display:"browser"}},function(e,t){e.exports={title:"A note to recruiters",date:"2015-06-04 13:42:18+00:00",layout:"page",path:"/a-note-to-recruiters",hideFooter:!0,pageViews:"1",body:"<p>Hi there,</p>\n<p>If you’re seeing this page, you’ve probably sent me an email or Linkedin message asking me about interest in a job you have available.  Thank you!  I appreciate you taking the time to reach out to me.</p>\n<p>Unfortunately, in the past year I’ve started getting more recruiting emails than I have the time to respond to.  I don’t like leaving people hanging, it’s rude!  But many of the jobs that I’m sent aren’t in any way fits, and I’m blessed enough to have a job at the moment that I really love.  So it’s difficult for me to turn each email into a conversation, and hard to know which ones deserve more of a reply.</p>\n<p>Since I don’t want to waste your time or mine, I’ve come up with 5 quick questions that will help me know whether us talking more would be useful.  If this is extra work for you, feel free to ignore and move on with your day.  Like I said, I don’t want to waste anyone’s time.</p>\n<ol>\n<li><strong>What company is this job for?</strong> - I recognize as a recruiter you may be worried about losing leads, but I’m not going to follow up on any message that doesn’t include that specific information.</li>\n<li><strong>Where will I be expected to work?</strong> - I currently live in Durham, NC.  I’m not open to relocation at this time.  If that doesn’t fit with the job then we should probably both move on.</li>\n<li><strong>What is the job role?</strong> - Is this a leadership position?  Front End Developer, back end?  Contract/Full time?  I currently have a great position as a lead developer, and have no interest in roles that are not full time right now.</li>\n<li><strong>Why did you contact me?</strong> - If the answer is because I showed up in your LinkedIn search, that’s fine.  I just like to know</li>\n<li><strong>What’s the approximate salary range for the job?</strong> - I recognize that this question is a bit more unusual and more of a problem for many folks, but the truth is I’m not going to be taking a job right now that doesn’t involve a reasonable raise.  So like the others, this is a way of making sure we don’t waste time.</li>\n</ol>\n<p>If you go through the time to read and respond to this, I will do my absolute best to make sure I respect that with time and attention of my own.  Thanks for taking the time to read this, and good luck in your search for candidates.</p>\n"}},function(e,t){e.exports={title:"About Me",layout:"page",path:"/about",hideFooter:!0,body:'<p>Hi, I’m Ben McCormick.  I’m a web developer, writer, occasional athlete, and a Christian. This is my blog about JavaScript, the Web and development tools.</p>\n<p>I live in Durham NC with my wife Claire and our dog Samoa, and prior to that I grew up in Pittsburgh.  I have plenty of pride in both of my homes.  When I’m not writing code or text, you can find me playing basketball, ultimate frisbee, and board games, relaxing with my wife, or volunteering at my church.  I currently work at <a href="http://www.windsorcircle.com">Windsor Circle</a>, and spend my days there writing a lot of JavaScript.</p>\n<p>If you have thoughts about the blog or want to contact me about related opportunities by email at ben AT <a href="http://benmccormick.org">benmccormick.org</a>.</p>\n<h3>Blog Bookkeeping</h3>\n<p><a href="http://benmccormick.org">benmccormick.org</a> is run on top of the <a href="https://pages.github.com/">Github Pages</a> using <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>.  I occasionally link to various books and services when I blog.  These links are often affiliate links, for which I receive a small commission on sales.  When this is the case I do my best to disclose that fact.  I only link to products that I have used and can endorse honestly. These links are there to support the cost of hosting the blog.</p>\n<p>All content on the blog was written by me, and I maintain copyright over it.  If you want to reuse or reprint it somewhere else, please contact me.</p>\n<p>All opinions, positions and thoughts on the blog are my own and do not represent the positions or opinions of my employer, my family, my church, my country, etc.</p>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014",layout:"page",path:"/learning-vim-in-2014",key:"learning-vim",description:"A series of beginner level articles on Vim",hideFooter:!0,body:'<div class="explanation">\nLearning Vim in 2014 was a series of posts I wrote in July & August 2014 documenting a process for newcomers to learn Vim. It was inspired by my own experience learning Vim, running into many out of date resources and online resources that gave me just a quick list of tips, plugins or commands.\n<p>This is a “point in time” snapshot of one man’s advice on how to learn Vim.  It is by no means comprehensive.  I covered some topics in depth, and only skimmed others.  But it’s intended to get new Vim users to a point of comfort where they understand the options available to them in Vim, and can continue learning on their own as they go forward.</p>\n<p>Below is a collected page of the posts in the series:</p>\n</div>\n<ol>\n<li>\n<p><a href="http://benmccormick.org/2014/06/30/learning-vim-in-2014-the-basics/">The Basics</a> - A quick look at getting started in Vim.  Gives instructions for installing Vim, a minimal vimrc file, and learning the basics of the editor using vimtutor.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/">Vim as Language</a> - An exploration of Vim’s composable command language, and the power that it provides.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/07/learning-vim-in-2014-working-with-files/">Working With Files</a> - A look at managing files using Vim, both using built-in methods and plugins.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim/">Configuring Vim</a> - Vim is a highly configurable editor.  This is a look at the different things you can change, along with some tips and hints.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/16/learning-vim-in-2014-vim-as-art/">Vim as Art</a> - A look at the power of Vim’s repetition commands, and the tremendous efficiency gains they allow.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/21/learning-vim-in-2014-getting-more-from-vim-with-plugins/">Getting more from Vim with plugins</a> - A look at how plugins can add to your Vim experience, and when to use them.  I also look at the current (2014) Vim plugin ecosystem and make some suggestions for plugins to meet common use cases.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/07/27/learning-vim-in-2014-copy-and-paste-the-vim-way/">Copy And Paste The Vim Way</a> - Vim ignores modern copy and paste conventions in favor of it’s own system, keybindings, and vocabulary.  This piece explains the method behind Vim’s copy and paste madness.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/08/04/learning-vim-in-2014-search/">Search</a> -  Good search techniques, either for text or files, is one of the most important things you need when working with large code bases or documents.  This takes a look at different search techniques in Vim and when to use them.</p>\n</li>\n</ol>\n<h3>Acknowledgements</h3>\n<p>I’m heavily indebted to <a href="https://twitter.com/nelstrom">Drew Neil</a> and <a href="http://wynnnetherland.com/">Wynn Netherland</a>. Drew’s book <a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356980&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=FE3JFKHYVRYCUOVS">Practical Vim</a> helped me to really understand Vim and influenced the posts above.  His <a href="http://vimcasts.org/">Vimcasts</a> site also continues to be the best Vim resource on the internet.  Wynn’s talk at BlendConf 2013 inspired me to get a deeper understanding of Vim, after being frustrated by trying to use it for a while without really understanding it.</p>\n'
}},function(e,t){e.exports={title:"Marionette: Explained",layout:"page",path:"/marionette-explained",key:"mn-series",description:"A series of posts explaining Marionette.js",hideFooter:!0,body:'<div class="explanation">\nMarionette: Explained was a series of posts I wrote in winter 2014-2015 explaining the whats, whys and hows of Marionette, the Backbone Framework.  Marionette is a powerful set of patterns and components built on top of Backbone.js, a minimalist JavaScript MV* framework. It is widely used in the Backbone community, but since most of the resources I found about it were written prior to it\'s 2.0 version, and the framework had continued to evolve significantly since then, I felt there was a need for a detailed resource on using it.  This was my attempt at creating that resource.  Note that since I published this, Marionette has released a 3rd major version, Marionette 3.  Most of the concepts here still apply, but some specific syntax may be out of date.  \n</div>\n<ol>\n<li>\n<p><a href="http://benmccormick.org/2014/12/02/the-case-for-marionette-js/">The Case For Marionette.js</a> - A quick overview of what Marionette is and why it’s useful.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/12/10/marionette-explained-connecting-your-data-to-your-views/">Connecting Data To Your Views</a> - A look at Marionette’s approach to Views and data-binding</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/">Building Complex Layouts with Marionette.js</a> - A post to explain Marionette’s Regions and layout system, with a focus on complex nested layouts.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/01/05/marionette-view-life-cycles/">The Life of a Marionette View</a> - A rundown of the various stages of a Marionette View’s life cycle</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/01/26/backbone-radio/">Building Modular Web Apps with Backbone.Radio</a> - This post examines how to use Backbone.Radio to improve the maintainability of your Marionette projects.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/03/23/staying-dry-with-marionette-behaviors/">Staying DRY with Marionette Behaviors</a> - A look at Behaviors and how they help you avoid repetition in your Backbone code.</p>\n</li>\n</ol>\n<h3>Acknowledgements</h3>\n<p>I’ve had the opportunity to learn a lot from the Marionette team and community through their <a href="https://gitter.im/marionettejs/backbone.marionette">gitter room</a>. These posts have been much more accurate as a result. I also originally began to understand Marionette after reading <a href="https://leanpub.com/building-backbone-plugins?a=3a4Srv2pP9p87WQ_eoDoGp">Building Backbone Plugins</a> by Derick Bailey, the creator of Marionette. I highly recommend both of those resources to anyone interested in Marionette or Backbone development.</p>\n'}},function(e,t){e.exports={title:"Recommended Reading For Developers",layout:"page",path:"/readinglist",hideFooter:!0,body:'<p>These are the books that have helped me grow most as a developer.  I highly recommend them all.  Please note that the links are affiliate links and a small portion of any purchases you make will go towards the costs of maintaining this site.</p>\n<hr>\n<h2>JavaScript</h2>\n<h4>JavaScript: The Good Parts, By Douglas Crockford</h4>\n<span class="reading-img">\n<img alt="JavaScript the Good Parts" src="/pages/images/goodparts.jpg">\n</span>\n<p>This is the first book I’d recommend for anyone interested in getting started with Front End development and JavaScript.  It’s getting a bit dated now, 6 years after it was published, but I haven’t found anything else that explains as well the basics of the language and how to use it.</p>\n<p>Buy: <a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596517742&linkCode=as2&tag=benmccormicko-20&linkId=XZEWUV7PCEO7DNTY">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=0596517742" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<h4>Effective JavaScript by David Herman</h4>\n<span class="reading-img">\n<img alt="Effective JS" src="/pages/images/effjs.jpg">\n</span>\n<p>You can find my full review <a href="http://benmccormick.org/2013/01/06/book-review-effective-javascript/">here</a>, but Effective JavaScript is a great read for developers with a good comfort level with the language who want to dig a bit deeper.  It’s presented as a series of imperative tips (do this, don’t do that), and each one is backed up with a tremendous depth of knowledge and insight.  A must read for any JavaScript dev.</p>\n<p>Buy: <a href="http://www.amazon.com/gp/product/0321812182/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321812182&linkCode=as2&tag=benmccormicko-20&linkId=HOPC6ZNKSVMH3NZ7">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=0321812182" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<hr>\n<h2>Tools</h2>\n<h4>Practical Vim by Drew Neil</h4>\n<span class="reading-img">\n<img alt="Practical Vim" src="/pages/images/vim.jpg">\n</span>\n<p>Practical Vim is a must have book for anyone who wants to be efficient while editing text.  While it’s a book about Vim, it will challenge you to use your editor more efficiently and powerfully no matter what you use (and maybe convince you to switch to Vim).  Highly recommended for anyone who deals with code or text for a living.</p>\n<p>Buy: <a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356980&linkCode=as2&tag=benmccormicko-20&linkId=FE3JFKHYVRYCUOVS">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=1934356980" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<h4>Tmux: Mouse Free Productivity By Brian Hogan</h4>\n<span class="reading-img">\n<img alt="Tmux" src="/pages/images/tmux.jpg">\n</span>\n<p>Tmux is a terminal multiplexer, a program that allows you to split and organize your terminal windows.  With an unfriendly <a href="http://tmux.sourceforge.net/">project page</a> and a dearth of great tutorials out there, it can be a bit difficult to get started with.  Tmux: Mouse Free Productivity is a short (88 pages) little guide to using Tmux effectively.  It helped me get up and running with what is now an indispensable tool in my workflow.</p>\n<p>Buy: <a href="http://www.amazon.com/gp/product/1934356964/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356964&linkCode=as2&tag=benmccormicko-20&linkId=ITHR5LSXMGMXCPS7">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=1934356964" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<hr>\n<h2>General Programming</h2>\n<h4>The Pragmatic Programmer by Andrew Hunt and David Thomas</h4>\n<span class="reading-img">\n<img alt="The Pragmatic Programmer" src="/pages/images/pp.jpg">\n</span>\n<p>This is a classic in the programming field, easily the most well known book on this list.  But it also is an indispensible explanation of the process of making great software.  There’s not a lot of code in this book, and thats a feature, not a bug.  This is a book about the techniques of building a software project, not the nitty gritty details.  As such, it’s relevance has lasted a lot longer than instructional books which have come and gone.</p>\n<p>Buy: <a href="http://www.amazon.com/gp/product/020161622X/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=020161622X&linkCode=as2&tag=benmccormicko-20&linkId=OGOUQY6XAPDGUA4T">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=020161622X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n'}},function(e,t){e.exports={title:"Speaking",layout:"page",path:"/speaking",description:"A list of my past talks at meetups and conferences",keywords:"speaking talks meetups conferences",hideFooter:!0,body:'<p>I occasionally give talks about JavaScript and software development.  If you’re interested in having me speak to your group, feel free to contact me through <a href="ben@benmccormick.org">email</a>.</p>\n<p>I am open to talking about pretty much anything that I write about on this blog.  Here are some talks I’ve given in the past:</p>\n<h3>2017</h3>\n<p><strong>The Vim Survival Guide</strong> <em>Open Source 101 Conference</em></p>\n<ul>\n<li><a href="http://www.slideshare.net/BenMcCormick/vim-survival-guide-71763917">Slides</a></li>\n</ul>\n<p>This talk was at the <a href="http://opensource101.com/">Open Source 101</a> conference (a one day offshoot of the yearly All Things Open conference).\nIt was an introduction to Vim, both for those who needed to “survive” Vim on a server, and those\nwho were interested in using it as their primary editor.</p>\n<h3>2016</h3>\n<p><strong>Saving Time With Jest</strong> <em>Triangle ReactJS Meetup</em></p>\n<ul>\n<li><a href="http://benmccormick.org/2016/12/10/saving-time-with-jest/">Writeup</a></li>\n</ul>\n<p>I gave a talk at the first Triangle ReactJS meetup about testing with Jest and how it can save you time.</p>\n<h3>2015</h3>\n<p><strong>Backbone.js</strong> <em>Triangle JavaScript Meetup</em></p>\n<ul>\n<li><a href="http://www.slideshare.net/BenMcCormick/backbonemeetup">Slides</a></li>\n<li><a href="https://github.com/benmccormick/bb-comments/tree/master">Code</a></li>\n</ul>\n<p>I gave a talk to the Triangle JavaScript Meetup about Backbone and where it fits into today’s JavaScript landscape, specifically comparing it to more “modern” frameworks like Angular and React, and demonstrating how you can incorporate new technologies like Firebase and a virtual DOM into a Backbone app.</p>\n<h3>2014</h3>\n<p><strong>Component Based Development</strong> <em>Triangle DevCon</em></p>\n<ul>\n<li><a href="http://www.slideshare.net/BenMcCormick/component-based-development">Slides</a></li>\n</ul>\n<p>I gave a talk at Triangle DevCon about the web trend towards component based development strategies, going into detail about the Web Components standards as well as the various component implementations from React, Ember, Knockout and Angular.</p>\n'}},function(e,t){e.exports={title:"",layout:"page",path:"/subscribe",hideFooter:!0,body:'<h4>Subscribe To My Mailing List</h4>\n<!-- Begin MailChimp Signup Form -->\n<div id="mc_embed_signup">\n<form action="//benmccormick.us8.list-manage.com/subscribe/post?u=115446b80fd9d930ba091cc27&amp;id=f5b9f5acf2" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate>\n    <div id="mc_embed_signup_scroll">\n<div class="mc-field-group">\n\t<input type="email" value="" name="EMAIL" class="required email" id="mce-EMAIL" placeholder="Email Address">\n  <input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button">\n</div>\n\t<div id="mce-responses" class="clear">\n\t\t<div class="response" id="mce-error-response" style="display:none"></div>\n\t\t<div class="response" id="mce-success-response" style="display:none"></div>\n\t</div>    <!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups-->\n    <div style="position: absolute; left: -5000px;" aria-hidden="true"><input type="text" name="b_115446b80fd9d930ba091cc27_f5b9f5acf2" tabindex="-1" value=""></div>\n    <div class="clear"></div>\n    </div>\n</form>\n</div>\n<!--End mc_embed_signup-->\n<hr>\n<h4>Subscribe via RSS</h4>\n<p><a href="/rss/">Feed link</a></p>\n<hr>\n<h4>Subscribe via Twitter</h4>\n<div class="twitter-row">\n  <div>\n    <h5>For site updates</h5>\n    <p>\n    <a href="https://twitter.com/benmccormickorg" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @benmccormickorg</a>\n    </p>\n  </div>\n  <div>\n    <h5>My personal account</h5>\n    <p>\n    <a href="https://twitter.com/ben336" class="twitter-follow-button" data-show-count="false" data-size="large">Follow @ben336</a>\n    </p>\n  </div>\n</div>\n'}},function(e,t){e.exports={title:"2015 Roundup",date:"2015-12-31 05:56:04+00:00",layout:"post",path:"/2015/12/31/2015-roundup-2",category:"meta",description:"A look back at benmccormick.org in 2015",pageViews:"381",last30pageViews:"3",body:'<p>Thanks to all of you who have followed my blog this year. More people visited the blog this year than in its previous 2 years of existence combined.  I’m excited to continue writing and starting conversations in 2016.</p>\n<h3>Most Read Posts of 2015</h3>\n<ol>\n<li>\n<p><a href="http://benmccormick.org/2015/09/09/what-can-backbone-developers-learn-from-react/">What Backbone Developers Can Learn From React</a> - A look at lessons that Backbone developers can take from the React community.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/01/26/backbone-radio/">Building Modular Web Apps With Backbone.Radio</a> - A deep dive into Backbone.Radio, a messaging system for Backbone and Marionette applications.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">ES5, ES6, ES2016, ES.Next: What’s going on with JavaScript versioning?</a> - An explanation of the weird and confusing naming conventions for JavaScript versions</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2015/04/07/es6-classes-and-backbone-js/">Why Backbone.js and ES6 Classes don’t mix</a> - An examination of the problems that developers face trying to use ES6 classes and Backbone together.  A <a href="http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/">followup article</a> explored some potential solutions.</p>\n</li>\n</ol>\n<h3>Code I wrote in 2015</h3>\n<p>Most of the code I wrote this year was for my work at Windsor Circle and on a React based side project that is not yet ready for prime time.  But I did get</p>\n<p>to release a small <a href="http://benmccormick.org/2015/05/25/marionette-service-service-objects-for-marionette/">service library</a> for Marionette developers, and made several contributions to the core Marionette library.</p>\n<h3>Languages and Libraries I started using in 2015</h3>\n<ul>\n<li><a href="https://babeljs.io/">Babel</a> has had by far the biggest impact on my code in 2015.  Being able to write modern JavaScript without compatibility concerns has been a breath of fresh air</li>\n<li>My team switched from Underscore to <a href="https://lodash.com/">lodash</a> at the end of 2014, and I’ve been using it a lot more this year.  Like Babel, it changes the way I write code.</li>\n<li>I don’t use it day to day, but I’ve loved playing with <a href="https://facebook.github.io/react/">React</a> and <a href="https://github.com/rackt/redux">Redux</a>.  I think UI as a pure function of state with a defined set of user actions/mutations is the future.</li>\n</ul>\n<h3>Languages and Libraries I stopped using in 2015</h3>\n<ul>\n<li>With ES6 becoming a valid option, I’ve moved on from <a href="http://coffeescript.org/">Coffeescript</a>.  It’s a beautiful, non-standard language that is never going to develop the tooling that is building up around the standard JavaScript language.</li>\n<li>I haven’t stopped using <a href="http://jquery.com/">jQuery</a>, since Marionette uses it for event handling and ajax, but I’ve begun looking at direct jQuery-style DOM manipulation as a code smell</li>\n<li>This mainly happened early in 2014, but 2015 was the first year I didn’t write a single line of Java.  I haven’t missed it.</li>\n</ul>\n<h3>Languages and Libraries I used (more or less) every day in 2015</h3>\n<p>JavaScript (ES6), Python, Backbone, Marionette, lodash</p>\n<h3>Languages and Libraries I want to try in 2016</h3>\n<p>Elm or ClojureScript, Rust or Go, Flow, Ember, Pandas and other python data analysis libraries</p>\n<h3>Blogs I started following in 2015</h3>\n<ul>\n<li><a href="http://www.2ality.com/">2ality</a> is a great blog by Axel Rauschmayer focused on the JavaScript language</li>\n<li><a href="http://rauchg.com/essays">rauchg.com</a> is not updated often, but all 3 posts so far have been fantastic</li>\n<li><a href="http://raganwald.com/">raganwald.com</a> is a great resource for functional programming fans who write JavaScript</li>\n</ul>\n<h3>Blogs I read every post from in 2015</h3>\n<p>Rands In Repose, Stratechery, <a href="http://Marco.org">Marco.org</a>, <a href="http://rauchg.com">rauchg.com</a>, Little Big Details, Bull City Rising</p>\n<h3>Software I started using in 2015</h3>\n<ul>\n<li>\n<p>I started using <a href="https://atom.io/">Atom</a> this fall as my primary code editor.  There are things about it I like less than Vim or Sublime Text, but it’s configurability and the fact that people have used it to make beautiful, intuitive UIs for tools that I use have sold me for now.  I still use Vim on a regular basis when I want to stay in the terminal, and am keeping an eye on <a href="https://neovim.io/">Neovim</a></p>\n</li>\n<li>\n<p><a href="https://www.ghostery.com/">Ghostery</a> is a fantastic ad blocker that focuses on transparency, showing you the ad networks and trackers that are running on a page and allowing you to selectively block ad networks or sites, helpful for those of us who want to support sites we use and allow analytics but are overwhelmed by the slimy, slow state of the web.</p>\n</li>\n<li>\n<p><a href="https://overcast.fm/">Overcast</a> is a great podcast app for iOS that has convinced me to start listening to podcasts.  (I’ve enjoyed <a href="https://changelog.com/podcast/">The Changelog</a>, <a href="http://exponent.fm/">Exponent</a>, and <a href="https://serialpodcast.org/">Serial</a>).</p>\n</li>\n</ul>\n<h3>Software I stopped using in 2015</h3>\n<ul>\n<li><a href="https://www.mailboxapp.com/">Mailbox</a>: RIP</li>\n<li><a href="https://www.onenote.com/">OneNote</a>: I made an effort to switch from Evernote to OneNote this summer, but it failed because it’s much harder to get stuff into OneNote for those of us who live in Apple-Land.  Not enough integrations</li>\n</ul>\n<h3>Software I used (nearly) every day in 2015</h3>\n<p>OSX/iOS, Google Search, Chrome/Safari, Gmail, Twitter/Tweetbot, Feedbin/Reeder, Instapaper, iMessage, Slack, Trello, 1Password, Atom/Vim, iTerm, Fish Shell, tmux, Bitbucket, Fantastical</p>\n'}},function(e,t){e.exports={title:"2016 Roundup",date:"2016-12-30 02:15:00+00:00",layout:"post",path:"/2016/12/31/2016-roundup",category:"meta",description:"A look back at benmccormick.org in 2016",pageViews:"212",last30pageViews:"14",body:'<p>Thanks to all of you who have followed my blog this year! It was a busy year and I didn’t get as many posts out as years past, but you all have been as supportive as ever.  I’m excited about the things I’ve been able to do with the new site this month, and am looking forward to a great 2017.  But first, a look back.</p>\n<h3>Most Read Posts of 2016</h3>\n<p>I wrote 15 posts in 2016, down from my pace of 19 in 2015 and 25 in 2014.  Some of that was an unusually busy work year, and some of the time I normally put into the site went to the redesdign. I also sat on a few articles that didn’t turn out that great when actually written out.  But I made a good run at the end and hopefully will be writing more in 2017.  The most read posts from this site in 2016 were:</p>\n<ol>\n<li>\n<p><a href="http://benmccormick.org/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far/">The Most Interesting Atom Packages I’ve found so far</a> - I started using <a href="https://atom.io/">Atom</a> as my primary text editor late in 2015.  This was my roundup of the coolest and most unique plugins I had found for Atom at that point.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/">Testing with Jest Snapshots</a> - This was my review of <a href="https://facebook.github.io/jest/">Jest</a>’s snapshot testing feature.  I found it extremely useful for testing UI components.  I also wrote about Jest again <a href="http://benmccormick.org/2016/12/10/saving-time-with-jest/">this month</a>, transcribing a talk I gave at a local meetup on <a href="http://benmccormick.org/2016/12/10/saving-time-with-jest/">How Jest can save you time</a>.</p>\n</li>\n<li>\n<p><a href="http://benmccormick.org/2016/01/08/reusable-code-patterns/">Reusable Code Patterns</a> - This article was a high level look at the ways you can approach sharing code for 2 different use cases.</p>\n</li>\n</ol>\n<h4>Honorable Mention</h4>\n<p><a href="http://benmccormick.org/2015/12/30/es6-patterns-converting-callbacks-to-promises/">ES6 Patterns: Converting Callbacks to Promises</a> - This article was technically written in 2015, but it was published during the last week of the year and thus wasn’t eligible to be included last year. However it has proven quite popular.  This was my attempt at a straightforward explanation of how to convert a callback based API to a Promise based one.</p>\n<h3>Code I wrote in 2016</h3>\n<p>Most of the code I wrote this year was for my work at Windsor Circle.  But I have spent some time getting this blog up and running, and anyone interested in what it takes to get a fully functioning blog running on <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> is welcome to take a look at the <a href="https://github.com/benmccormick/benmccormickorg">github repo</a>.</p>\n<h3>Languages, Libraries, and Technologies I started using in 2016</h3>\n<ul>\n<li>\n<p><a href="https://facebook.github.io/jest/">Jest</a> is a JavaScript testing library that I started using this year. It’s fantastic, and I’ve had the opportunity to <a href="http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/">write</a> and <a href="http://benmccormick.org/2016/12/10/saving-time-with-jest/">speak</a> about it a few times already.</p>\n</li>\n<li>\n<p><a href="https://github.com/gatsbyjs/gatsby">Gatsbyjs</a> now powers this blog. Gatsby is a ReactJS based static site generator, and it has been a pleasure to work with.</p>\n</li>\n<li>\n<p>My team started using <a href="https://www.docker.com/">Docker</a> this year.  It’s been a mixed bag for me personally, but I love the idea of what it provides</p>\n</li>\n</ul>\n<h3>Languages, Libraries, and Technologies I stopped using in 2016</h3>\n<ul>\n<li>Despite my affection for <a href="http://marionettejs.com/">Marionette</a>, I’m no longer actively using it other than in some legacy code for my work application</li>\n</ul>\n<h3>Languages and Libraries I used (more or less) every day in 2016</h3>\n<p>JavaScript (ES6), Python, React, PostgreSQL, Backbone, lodash</p>\n<h3>Languages and Libraries I want to try in 2017</h3>\n<p>RxJS, Flow, VueJS, <a href="https://github.com/FormidableLabs/victory">Victory</a>, Pandas and other python data analysis libraries, Rust</p>\n<h3>Blogs I started following in 2016</h3>\n<p>Nothing new this year,</p>\n<h3>Blogs I read every post from in 2016</h3>\n<p>Rands In Repose, Stratechery, Daring Fireball,  <a href="http://Marco.org">Marco.org</a>, <a href="http://rauchg.com">rauchg.com</a>, <a href="http://purposedworking.com">purposedworking.com</a></p>\n<h3>Podcasts I started listening to in 2016</h3>\n<ul>\n<li><a href="http://www.npr.org/podcasts/510310/npr-politics-podcast">NPR Politics</a> - Approachable and fun while still being informative, one of the best ways to follow this years election.</li>\n</ul>\n<p><a href="http://www.npr.org/podcasts/510313/how-i-built-this">How I Built This</a> - This has been a great new podcast on entrepreneurship</p>\n<h3>Software I started using in 2016</h3>\n<ul>\n<li>\n<p><a href="http://inbox.google.com">Google Inbox</a> + <a href="http://airmailapp.com/">Airmail</a> for email: I’m not sure I’m ever going to be happy with an email client, but I’m currently using the combo of Google Inbox on iOS and Airmail on MacOS.  Post <a href="https://www.mailboxapp.com/">Mailbox</a>, Inbox is my favorite iOS mail app.  On desktop though I like to have universal inbox and tight integration with the rest of the operating system, so I use Airmail, which is less bad than the rest of the MacOS mail clients I’ve tried</p>\n</li>\n<li>\n<p><a href="http://copiedapp.com/">Copied</a>: Copied is a clipboard manager for MacOS (and sort of iOS).  It’s been great to be able to keep multiple things in the clipboard at once, and be able to go back and get something if I blow it away.  I’m not a power user.  I haven’t really figured out a reason to use their lists features, or their iOS client, but it has been great for the limited things I use it for.</p>\n</li>\n<li>\n<p><a href="https://caskroom.github.io/">Homebrew Cask</a>: I’ve used homebrew for a while.  But being able to install GUI apps as easily as command line apps has been pretty amazing.  If you are on OSX and don’t use homebrew to install pretty much everything, you’re missing out.  Of course the real effect is that it makes me dread and hate the Mac App Store even more.</p>\n</li>\n<li>\n<p><a href="http://www.nytimes.com/services/mobile/">The New York Times App</a>: Ok this is a bit of a cheat since this is more about content than software, but if you’re out of touch on what is going on in the world, there’s never been a better time to support a good source of news and reporting, whichever outlet is your preference.</p>\n</li>\n</ul>\n<h3>Software I stopped using in 2016</h3>\n<p>Nothing I’m aware of, though I am currently checking out <a href="http://www.bear-writer.com/">Bear</a> and <a href="https://itunes.apple.com/us/app/annotate-capture-and-share/id918207447?mt=12">Annotate</a> as potential replacements for Evernote and Skitch.</p>\n<h3>Software I used (nearly) every day in 2016</h3>\n<p>MacOS/iOS, Google Search, Chrome/Safari, Google Inbox/Airmail, Twitter/Tweetbot, Feedbin/Reeder, Instapaper, iMessage, Slack, Trello, 1Password, Atom/Vim, iTerm, Fish Shell, tmux, Bitbucket, Fantastical, Spotify, Evernote, Skitch, Dash</p>\n'}},function(e,t){e.exports={title:"90% Done, Halfway There",date:"2013-06-09 18:45:00+00:00",layout:"post",path:"/2013/06/09/90-done-halfway-there",description:"A post on the difficulties of estimating development projects",category:"opinion",pageViews:"301",last30pageViews:"1",body:'<p>There’s a running joke on my team at work when somebody asks about progress on another engineers bug.</p>\n<blockquote>\n<p>“I’ve done 90% of the work, so I’m about halfway there!”</p>\n</blockquote>\n<p>It’s really hard to estimate software development times.  I would in fact say that from a project planning perspective, that may be THE hardest problem when planning a big project.  Its certainly a question that engineers are asked all the time, and not one that is usually easy to answer even on an individual level.</p>\n<!-- more -->\n<h2>Why do we care?</h2>\n<p>Estimating development time accurately is important both in the big picture and in day to day development work.</p>\n<ol>\n<li>It allows you to set healthy and reasonable expectations</li>\n<li>It allows for proper prioritization and planning of features</li>\n<li>It gives a team flexibility to make changes early if the current schedule is untenable</li>\n<li>It allows you on a personal level to properly prioritize and balance your time</li>\n</ol>\n<h2>Why Is This So Hard?</h2>\n<p>I’ve been thinking about this lately, and I’ve identified the factors that I’ve found contribute the most to the “90% done, halfway there” mindset.</p>\n<h3>Scale</h3>\n<p>The first factor is also the most inevitable.  More code, bigger teams, and more complex requirements all make software estimation harder.  When I work alone on a side project, I rarely have trouble estimating how long a particular feature will take to implement.  This is true for a few reasons.  First, and most importantly, I know and understand all of the code in the project.  If I see code that looks out of place, I either remember, or can quickly work out, why it was put there.  I also have a comfort level with all the tools and technologies in use because I chose them myself, and have either used them before or specifically wanted to learn them.</p>\n<p>Working in a larger team however means greater uncertainty about the original intentions of existing code, less familiarity with the code base as a whole, and (on sufficiently large projects) possibly an acceptance that you cannot understand the whole code base.  This unfamiliarity is usually mitigated by having engineers focus within a specific portion of the code.  That is a great strategy, provided our second problem is not present.</p>\n<h3>Tight Coupling</h3>\n<p>When it comes to issues within the code base itself, I think the biggest obstacle to accurately estimating development time is tightly coupled software components.  Anybody who’s ever read <a href="http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X">The Pragmatic Programmer</a> can tell you that tight coupling is a <em>BAD THING</em>, but in practice it can be seductively easy to fall into.  The problem is that tight coupling means that when making changes to a piece of code you don’t have to worry just about its internal function, but also about side effects.  When combined with the first issue of scale, this means that changes to code you’re working on may have effects on other code that you don’t fully understand or anticipate.  Too much of this can easily lead to</p>\n<blockquote>\n<p>90% done, and now I have 4 more bugs to work on.</p>\n</blockquote>\n<h3>Defining Coding As The Task</h3>\n<p>The first 2 issues are to a certain extent unavoidable when working on a large existing code base like my teams.  But bad estimates can also  appear for reasons completely unrelated to the particular problem or code base. One issue that can be a problem for a programmer on a new team and also cause issues with programmer-manager communication is viewing coding as the task, without worrying about design, testing, documentation or code reviews.  When the programmer says to his manager that something is a 3 line fix what he’s really saying is that the coding seems easy so the rest should be quick.  If his initial solution has problems, he not only is missing the time to write a new one, but also the time for it to be discovered by test, formulating a new design, and any review or paperwork required for making the change.</p>\n<h3>Poor Communication</h3>\n<p>Finally the easiest way to be 90% done and only halfway there is to spend your first 90% writing the wrong code.  When the specs aren’t clear and the programmer doesn’t understand the requirement (whether it comes from a customer, test, or a project manager)  wasted time and poor estimates are pretty much a given.  The key here is the same as the last point.  There is more to software development than just writing code.</p>\n<h2>Improvement</h2>\n<p>So how can we do better?  I’m still learning.  But here is the main way that I’m trying to do to get better at this.</p>\n<h3>Tightening The Feedback Loop</h3>\n<p>One thing that can really improve the communication issues, and also make you aware of any tight coupling early on is tightening the feedback loop for your code.  What is that?  It means working to find out about errors and problems as soon as possible. Some ways to do this:</p>\n<ol>\n<li>Automated Testing</li>\n<li>Asserts or other constructs to test assumptions</li>\n<li>Early prototypes of even small features to show requirement-setters</li>\n</ol>\n<p>I’ve known for a while that there’s value in building a subset of a feature to make sure I’m on the right track before coding the rest.  If a picture is worth 1000 words, working code is worth 1000 emails.  When you build something, even if its only partial or simplistic, you immediately get a sense for the challenges involved, and you also get the chance to immediately find out whether you are on the same page as the requirement creators.  For many people, especially non-programmers, its much easier to critique an existing system than to describe one ex nihilo.</p>\n<p>Several of us are also working to introduce more automated testing on our team.  We have a great team of manual testers, but there is great value in the immediate feedback that automated testing can bring, especially in revealing the type of unexpected side effects that tight coupling causes.</p>\n<h2>Summary</h2>\n<p>Software Development estimation is hard. There are a variety of challenges, some of them inherent to the practice or certain projects, some of which can be overcome or mitigated through experience and attention.  In the end, accurate estimation is a skill worth cultivating, bringing value to both you and the team. Take the time, get it right.</p>\n<p><em>Got some great tips for estimating software development times? Let me hear them on twitter <a href="https://www.twitter.com/ben336">@ben336</a></em></p>\n'
}},function(e,t){e.exports={title:"A look at Ack",date:"2013-11-25 23:50:00+00:00",layout:"post",path:"/2013/11/25/a-look-at-ack",category:"tools",key:"look-at-ack",description:"An introduction to using Ack for file searching",pageViews:"5465",last30pageViews:"38",body:'<p>Do you spend a lot of time searching your projects for a specific piece of code?  Frustrated by grep’s weird syntax or slow IDE search tools?  <a href="http://beyondgrep.com/">Ack</a> is a tool like grep designed for programmers.  I use it for searching my source code to track down sections of code or look for occurences of a variable or reference.  It’s a simple open-source tool that does one job well, and does it with blazing speed.</p>\n<p>Ack performs a subset of grep’s functionality, optimizing for the programmer’s use case. In the simplest usage it will allow you to enter an expression, and will search files in the current directory/subdirectory for it, ignoring version control artifacts like .svn and .git files.</p>\n<pre><code># search all files in current directory recursively\n# to see if they contain &quot;foobar&quot;\nack foobar\n</code></pre>\n<p>Ack then spits out nicely formatted output with the full file paths and line numbers of each occurence. For instance here is the output of searching the directory containing my blog posts for references to Microsoft.</p>\n<p><img src="/posts/images/ack_msft.png" alt="ack usage example"></p>\n<p>These are very simple examples.  Because of ack’s sensible defaults and focused design, these basic commands cover about 80% of what I’m looking for from a code search tool. But for those who want to do a bit more, ack can be much more powerful.  Because ack is written in perl, any perl-compatible regular expression can be used to search your files.  Ack provides plenty of options for formatting the output and it’s also very easy to filter by filetype.</p>\n<p>For instance, I have a small side project where I’m creating an event signup site with the front end code written in CoffeeScript.  If I want to see which files I’ve referenced events in without necessarily seeing all the details, I can use the <code>-l</code> flag to only show file names.</p>\n<p><img src="/posts/images/ack_signup.png" alt="filenames only"></p>\n<p>Obviously this search brings up several types of files. Along with the CoffeeScript files I’m interested in, ack shows some html and css files, as well as a random server side file.  It also shows the generated JavaScript files.  I could get rid of these files by specifying a different root directory, but instead I’m going to show ack’s  smart filtering by filetype.  To search only coffeescript files, I just need to add the <code>--coffee</code> flag to see all CoffeeScript matches.</p>\n<p><img src="/posts/images/ack_event.png" alt="ack filetype filtering"></p>\n<p>Its also easy to add multiple filetype flags in order to search several filetypes, and you can even define custom filetype flags with an .ackrc file.  These also let you specify default options and set certain directories to be ignored on a global or per-project basis.</p>\n<h4>Other Options</h4>\n<p>Ack is hardly the only code search tool out there.  It’s meant to improve on grep by focusing on the programmer’s use cases, but there are <s>many</s> some situations where grep is still a good option.  Ack is situationally optimized for searching code, <s>and doesn’t work as well for filtering piped output</s>. Grep is also installed on many remote servers where you won’t have access to ack.  So ack makes a great complement to grep, moreso than a replacement.</p>\n<p><em>Update: You can totally use Ack to filter piped output.  Another reason to use grep gone.</em></p>\n<p>In terms of direct competition, <a href="https://github.com/ggreer/the_silver_searcher">ag</a> is an attempt to improve on ack, mostly in terms of speed. Ag uses various tricks to optimize speed performance for code search, using an ack compatible syntax. Since its written in C rather than perl, it is indeed significantly faster.  I personally am more comfortable with ack.  Its more mature, has better documentation, and has always been fast enough for me.</p>\n<p><s>Ag was not updated to support ack 2’s filetype filtering, and generally seems to have focused on speed over all else.</s>  It also has dependencies that I’ve found are a problem on old operating systems. Ack only depends on perl, and is thus very portable, even to Windows systems.  Still, if you find ack to be slow on your code base, or just like knowing you’re doing everything as fast as possible, ag is a great alternative.</p>\n<p><em>Update: As of version 0.22.0 ag supports ack’s filetype syntax, but does not allow you to define custom file types, a very useful ack feature.</em></p>\n<h4>Summary</h4>\n<p>If you’ve been using grep or slow GUI tools to search your source code, you can do better. Ack is fast, easy to use, and optimized for programmers.  It’s also free, open-source code you can use without cost or licensing worries.  If you want to go even faster, consider using ag.  Just make sure you’re using a tool that was built for the work you’re doing.</p>\n'}},function(e,t){e.exports={title:"A New Look",date:"2013-04-06 17:00:00+00:00",layout:"post",path:"/2013/04/06/a-new-look",description:"A clean redesign for benmccormick.org",category:"meta",pageViews:"109",last30pageViews:"0",body:'<p>I’m switching to a modified version of the excellent <a href="https://github.com/gluttony/object-octopress-theme">Object</a> theme by <a href="https://github.com/gluttony">gluttony</a> for this blog.  I like the cleaner content-focused look that it brings, and especially feel like it helps my code samples stand out.  I hope you like it.</p>\n<p>My site continues to be generated as static pages by <a href="http://octopress.org/">octopress</a>, and written using <a href="http://www.sublimetext.com/">Sublime Text</a>.  Both are unreservedly recommended.</p>\n'}},function(e,t){e.exports={title:"A Quick Review Of Google Inbox",date:"2014-11-04 03:45:30+00:00",layout:"post",description:"A product review of Google's new email UI",path:"/2014/11/04/a-quick-review-of-google-inbox",category:"reviews",pageViews:"357",last30pageViews:"0",body:'<p>Google announced their new email product, <a href="http://www.google.com/inbox/?gclid=CNqBxtSE28ECFQMT7AodrBYAVQ">Google Inbox</a> last week, and I was able to get a Day 1 invitation from a friend at Google.  I’ve been using it for my personal email account since then.  A few people have asked me about it, so I thought I’d write up my impressions so far.</p>\n<p>I think it’s important to start by making it clear what Inbox is, because it seems like there’s a lot of confusion out there.  Inbox is an alternative view to your existing Gmail account.  It is not a new webmail account, and it is not a generic mail client <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  Changes that are made in Inbox are reflected in Gmail and vice versa.  Inbox is a “fresh coat of paint” with some add-on features, not a “whole new thing”.  You can access the Inbox interface on the web at <a href="http://inbox.google.com">inbox.google.com</a>, or through apps for iOS and Android.  This review is primarily of the web interface, since I prefer to deal with my work and personal email through a single app on my phone, and that’s not yet possible with Inbox.</p>\n<p><img src="/posts/images/sidebyside.png" alt="Inbox and Mailbox"></p>\n<p>Using Inbox for the first time was a little bit of deja vu.  Google seems to have borrowed heavily from <a href="http://www.mailboxapp.com/">Mailbox</a>, my current iPhone email app of choice.  The interface is heavily simplified compared to the a traditional mail client like Gmail or Outlook.  It relies heavily on the “To-Do” list metaphor that several modern clients like Mailbox and <a href="http://www.dispatchapp.net/">Dispatch</a> have popularized.  So instead of archiving or deleting messages, you mark them done, and if you aren’t ready to deal with a particular email yet, you can “pin it” in your inbox, or set a reminder to bring it back up later.  Other than pinning<sup id="fnref:2"><a href="#fn:2">2</a></sup> , this format maps pretty well to how I deal with email in general, and is almost exactly Mailbox’s workflow, so at least for me it felt natural. Like Mailbox, Inbox is opionionated software. It’s optimized for triaging and processing email quickly.  If you spend more time composing emails than reading them, you’ll probably find Inbox lacking in terms of compose tools.  But for the majority of us who are just trying to keep our heads above the email ocean, this type of streamlined workflow saves a lot of time.</p>\n<p>Inbox’s biggest innovation is its “bundles” concept.  Bundles are the next generation of Gmail’s label system, and roughly map to labels when moving back and forth between Gmail and Inbox.  They’re a standardized interface for the way I used labels to organize things anyway.</p>\n<p><img src="/posts/images/skiptheinbox.png" alt="Here\'s what your labels look like"></p>\n<p>In Gmail, I’ve set up a bunch of rules that apply a label to emails that meet a criteria, then have it skip the inbox.  This has the effect of being able to show things like unread updates from a social network as numbers on the left side of the screen, without cluttering my inbox.  I like that system in Gmail, but it has always been annoying that I can’t easily see those numbers anywhere except the Gmail web interface.  On my phone, those labels/folders are hidden away unless I dig down for them.  With Inbox, I can change that rule to just apply the label without moving to the inbox, and then make that label a “bundle”.  When I do that, those emails show up as grouped within my inbox, taking up minimal space.  It’s easy to skim past them, or to bulk archive them if necessary.  Apparently I’m not the only one who’s hacked this feature in on their own before, because Inbox contains a category of labels in its sidebar marked as “skipped the inbox”, where it puts any labels set up as I’ve described.  Inbox lets you convert these labels to bundles in one click, meaning you don’t actually have to go into Gmail and change the rules.  This has been nice for my personal email, I expect it to be amazing for my work email if/when Google Apps starts supporting the Inbox interface.  I get a lot of automated status/notification style emails for work, which I currently tend to auto-archive without reading.  For the most part this is fine, but for messages that indicate warnings of some type, I’d love to be able to see the count of current warnings in my inbox, with the option to bulk-delete with a click.</p>\n<p><img src="/posts/images/smalldelights.png" alt="The compose feature is very slick"></p>\n<p>Other than Bundles, Inbox’s other features can all clearly be traced back to Gmail or the new wave of to-do style mail clients.  The compose window and email viewing screen will both feel familiar to anyone used to Gmail’s current interface, albeit a bit stripped down and simplified.  The compose button has the nice touch of showing the last few people you’ve emailed as default options to receive your new message.  Reminders is a Mailbox feature that I’ve never used much, but Inbox steps it up a bit by allowing you to enter your own reminders without an existing email (much better than sending yourself an email), and by integrating Google Now style intelligence, for instance including directions to the restaurant when it reminds you about a dinner. I still don’t expect to get much use out of it personally, since I like my todos to get out of the email client to a more permanent resting place, but for those who use the inbox as their todo manager, it looks pretty slick.</p>\n<p>One more praise: Inbox’s interface is simple, but avoids the mistake Mailbox makes of going too far down that road.  Mailbox doesn’t allow you to filter by label and de-emphasizes the “sent from” email, 2 attempts to simplify the interface that have caused me grief in the past.  Inbox avoids both those pitfalls while still removing a lot of clutter from the crowded Gmail interface.  My one complaint in this area is that chat received the short end of the stick in Inbox.  It’s tucked up into the header bar by default, with no quick visual cue as to who is currently online.  Since I began writing this post, I’ve discovered it’s possible to pin a contact list to the right side of the screen, which makes me quite happy.  That’s not at all obvious or discoverable though, and the default is a huge step down from classic Gmail’s wonderful in-browser chat interface.</p>\n<p>Of course the reason that Inbox can be simple is that it is “just Gmail”.  It ignores a lot of complex configuration that you’d want in an email client, and in doing so simplifies the UI.  There’s no rules editor for handling different types of mail beyond the built-in intelligent bundles, and no ability to handle things like email forwarding or aliases as far as I’ve seen.  It offloads that complicated stuff to the classic Gmail interface.  That fact allows Inbox to be simple and clear for less sophisticated users, while still allowing power users a backdoor to customize, but it does mean that Inbox is an addition to, not a replacement for Gmail, at least for now.</p>\n<p>Inbox is an extremely impressive piece of UI design.  It’s the first major app to feature Google’s  new Material Design style, and if this is the type of imaginative rethinking that we’ll get from Google’s design teams going forward, I’m excited to see more.  My only real complaints at this point are the lack of support for Google Apps, something I’m sure will be rectified in the future, and the fact that, like Mailbox, it’s design encourages users to treat the inbox as a long term todo list, rather than a triaging area.  I don’t expect that second issue to be fixed, it’s ingrained right down to the name of the application.  But since there isn’t currently a better option on that front, I will happily enjoy Inbox’s simplicity and nice design touches.  It has already replaced the default Gmail interface for me as my desktop mail client, and I expect it to replace Mailbox on my phone as soon as it supports Google Apps.  If Inbox sounds interesting to you I definitely recommend finding a friend with an invite and checking it out.</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        I\'ve seen some speculation that Inbox might eventually support clients other than Gmail to allow Google to gather data on email outside their ecosystem, but I highly doubt it.  Inbox is built on Gmail\'s proprietary concepts, and trying to pull things like reminders off without controlling the backend servers would be hacky at the very least.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        I don\'t want my inbox to be a long term to do list (which is what pinning seems to be for).  The to do metaphor is more helpful as a triaging tool, to split email into "ignore", "handle now", and do later.  If I\'m ignoring or replying right away, I can do that and then mark them done.  If it needs to be done later, I don\'t want it to sit in the inbox.  I\'ll put it into a todo list app or my calendar instead and then archive it for reference if necessary.  \n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Ack Tips",date:"2016-04-30 15:48:25+00:00",layout:"post",path:"/2016/04/30/ack-tips",description:"A set of tips for using Ack, a command line search tool",keywords:"ack, command line, grep, ag",category:"tools",readNext:"learning-vim,look-at-ack,interesting-atom",pageViews:"572",last30pageViews:"14",body:'<p><em>Last summer I briefly considered creating a separate blog focused on command line tools.  The idea is that the articles would be shorter and more practical than the longer pieces I write here.  I ended up scrapping the idea, but had written a few posts on one of my favorite command line tools Ack, so I wanted to preserve them here, as a single, longer piece, separated into 3 “tips”</em></p>\n<h3>#1: Prefer ack or ag to grep</h3>\n<p><a href="http://linux.die.net/man/1/grep">grep</a> is one of the most well known unix utilties.  If you’ve had any exposure to the command line at all, you’ve probably searched for something using grep.  grep’s standalone use is searching for content inside of files, but with Unix’s piping philosophy it is useful as a general search and filtering tool.  Originally created for Version 4 Unix 42 years ago, it has been a staple of *Nix operating systems ever since.   If you’ve been using it for even half that time, I’m sure a blog post isn’t enough to convince you to stop.  But for the rest of us, there’s an opportunity to do better.</p>\n<p><a href="http://beyondgrep.com/">ack</a> and <a href="https://github.com/ggreer/the_silver_searcher">ag</a> <sup id="fnref:1"><a href="#fn:1">1</a></sup> are similar projects with the same goal: providing a better experience than grep when searching directories of files, particularly for programmers.  The key selling points:</p>\n<ol>\n<li>Improved speed when searching through directories</li>\n<li>Ignores version control and binary files by default when searching</li>\n<li>Easy filtering by file-type</li>\n<li>A cleaner API for searching directories, without adding complexity to the single file case</li>\n</ol>\n<p>This is easiest to see by comparing commands.</p>\n<h4>Searching for “javascript” in a file</h4>\n<pre><code>grep javascript foo<span class="hljs-selector-class">.txt</span>\n</code></pre>\n<pre><code>ack javascript foo<span class="hljs-selector-class">.txt</span>\n</code></pre>\n<h4>Searching every file in the current directory for “javascript”</h4>\n<pre><code>grep -r javascript .\n</code></pre>\n<pre><code><span class="hljs-attribute">ack javascript</span>\n</code></pre>\n<h4>Searching every file in the current directory for “javascript”, excluding a .git directory</h4>\n<pre><code><span class="hljs-keyword">grep</span> -r javascript . $(<span class="hljs-keyword">find</span> . -<span class="hljs-built_in">type</span> <span class="hljs-keyword">f</span> | <span class="hljs-keyword">grep</span> -v <span class="hljs-string">\'\\.git\'</span>)\n</code></pre>\n<pre><code><span class="hljs-attribute">ack javascript</span>\n</code></pre>\n<h4>Searching every HTML file in the current directory for “javascript”, excluding a .git directory</h4>\n<pre><code>grep -r javascript . $(<span class="hljs-built_in">find</span> . -<span class="hljs-built_in">name</span> <span class="hljs-string">\'*.html\'</span> -<span class="hljs-built_in">or</span> -<span class="hljs-built_in">name</span> <span class="hljs-string">\'*.htm\'</span>| grep -v <span class="hljs-string">\'\\.git\'</span>)\n</code></pre>\n<pre><code>ack --<span class="hljs-selector-tag">html</span> javascript\n</code></pre>\n<p>Basically, as the complexity of what you’re trying to do increases in terms of multiple files, the overhead of using grep increases proportionately.  Because ack and ag are optimized for common use cases, they’re able to scale much better.</p>\n<h3>#2: Use Ack to get familiar with a new codebase</h3>\n<p><a href="http://beyondgrep.com/">ack</a> is an incredibly useful tool when approaching a new codebase, especially if you’re focused on a specific feature. It allows you to quickly get a view of the codebase, and then zero in on the functionality you’re interested in.  To see how this works, let’s use jQuery’s <a href="https://github.com/jquery/jquery">source repo</a> as an example, and see what happens if we want to get a look at how it implements ajax.</p>\n<pre><code class="language-bash">❯ git <span class="hljs-built_in">clone</span> git@github.com:jquery/jquery.git\n❯ <span class="hljs-built_in">cd</span> jquery\n</code></pre>\n<p>We can start by trying to get a general idea of the size of the codebase.  Running <code>ack -f</code> to show all files in the directory will immediately overrun our terminal, so we can get a file count using <code>wc</code> instead</p>\n<pre><code class="language-bash">❯ ack <span class="hljs-_">-f</span> |wc <span class="hljs-_">-l</span>\n    249\n</code></pre>\n<p>Ok thats a good amount of files.  But how many of them are actually source files?  We can filter down to just the javascript files.</p>\n<pre><code class="language-bash">❯ ack <span class="hljs-_">-f</span> --js |wc <span class="hljs-_">-l</span>\n    155\n</code></pre>\n<p>But thats probably still a bit high, since not all of the JavaScript files are source files.  A quick <code>ls</code> shows that we probably want to filter down to the src directory.</p>\n<pre><code class="language-bash">❯ ack <span class="hljs-_">-f</span> --js src |wc <span class="hljs-_">-l</span>\n    92\n</code></pre>\n<p>Ok so now we’re down to 92 source files.  Still a bit much, but its probably worth printing them with <code>ack -f --js src</code> at this point to get an idea of the directory structure.  When we do that, we can see there’s an ajax folder, which is probably what we’re interested in.  To make sure we’re not missing related files, we can continue on to searching for files with ajax in the file name directly.</p>\n<pre><code class="language-bash">❯ ack -g --js ajax src\n    src/ajax/jsonp.js\n    src/ajax/load.js\n    src/ajax/parseJSON.js\n    src/ajax/parseXML.js\n    src/ajax/script.js\n    src/ajax/var/location.js\n    src/ajax/var/nonce.js\n    src/ajax/var/rquery.js\n    src/ajax/xhr.js\n    src/ajax.js\n    src/event/ajax.js\n</code></pre>\n<p>That gets us down to 11 files to look at.  But we might be getting a bit greedy.  Not every file related to ajax may have ajax in the file path.  We can use the <code>-l</code> option of ack to display the list of files that contain ajax somewhere in their text.</p>\n<pre><code class="language-bash">❯ ack --js <span class="hljs-_">-l</span> ajax src\n    src/ajax/jsonp.js\n    src/ajax/load.js\n    src/ajax/script.js\n    src/ajax/xhr.js\n    src/ajax.js\n    src/event/ajax.js\n    src/jquery.js\n    src/manipulation/_evalUrl.js\n    src/serialize.js\n</code></pre>\n<p>Ok that adds 3 additional files with ajax references.  But its not clear that they’re relevant to jQuery’s ajax implementation, it may just be a file reference or comment.  Lets use ack to get a quick look at how ajax is referenced in those files.  This part gets a bit more complicated.  We can use ack’s <code>-v</code> option to invert our matching and find non-matching inputs, then use unix piping to filter our previous command.</p>\n<pre><code class="language-bash">❯ ack --js <span class="hljs-_">-l</span> ajax src |ack -v ajax\n    src/jquery.js\n    src/manipulation/_evalUrl.js\n    src/serialize.js\n</code></pre>\n<p>Now we can use ack’s <code>-x</code> argument to search the files piped in through standard input.</p>\n<pre><code>❯ ack --js -l ajax src |ack -v ajax|ack -x ajax\n\n    src/jquery.js\n    <span class="hljs-number">20</span>:     <span class="hljs-string">"./ajax"</span>,\n    21:     <span class="hljs-string">"./ajax/xhr"</span>,\n    22:     <span class="hljs-string">"./ajax/script"</span>,\n    23:     <span class="hljs-string">"./ajax/jsonp"</span>,\n    24:     <span class="hljs-string">"./ajax/load"</span>,\n    25:     <span class="hljs-string">"./event/ajax"</span>,\n\n    src/manipulation/_evalUrl.js\n    2:      <span class="hljs-string">"../ajax"</span>\n    6:      <span class="hljs-keyword">return</span> jQuery.ajax({\n    <span class="hljs-number">9</span>:              // Make <span class="hljs-keyword">this</span> explicit, since user can override <span class="hljs-keyword">this</span> through ajaxSetup (#11264)\n\n    src/serialize.js\n    61:             traditional = jQuery.ajaxSettings &amp;&amp; jQuery.ajaxSettings.traditional;\n</code></pre>\n<p>So we can see pretty quickly that these files are safe to ignore in terms of understanding how ajax works in jQuery.  They’re just module loads, an actual call to the ajax method for other purposes, and settings serialization. It is useful to note that <code>src/ajax</code> is loaded into the main jQuery file first. Its probably worth looking at it as the starting point for our investigation. We’re well on our way to diving into the ajax functionality, able to focus on 11 of the 249 files in the repo immediately, already knowing how those files are loaded into the main library.</p>\n<p>This was just a simple example.  Whenever you’re spelunking into new code territory, consider using ack to get your bearings.  Things go a lot faster when you know the lay of the land in advance.</p>\n<h3>#3: Take advantage of Ack’s configurability</h3>\n<p>One of the nice things about <a href="http://beyondgrep.com/">ack</a> is the fact that it takes an <code>.ackrc</code> configuration file <sup id="fnref:2"><a href="#fn:2">2</a></sup>. These files can be scoped at a directory level, a user level or at a root level, and mirror the options available on the executable itself.  This allows you to extend and customize acks behavior in 3 primary ways.</p>\n<h4>a. Add new filetypes, and bundle existing ones</h4>\n<p>One of ack’s most useful features is the ability to add a <code>--&lt;filetype&gt;</code> flag to your searches to restrict your searches to a specific filetype.   ack comes with 75 builtin types including almost all common languages.  But those aren’t always good enough.  To handle obscure languages, and not so obscure syntaxes like handlebars templates, ack lets you define new filetypes.  You’re also able to modify existing filetypes to add additional file extensions to include under that filetype.  So for instance my ackrc includes these lines:</p>\n<pre><code>--type-<span class="hljs-keyword">add</span><span class="bash">\nhbs=hbs\n</span>--type-<span class="hljs-keyword">add</span><span class="bash">\njs=js,es6\n</span></code></pre>\n<p>The first 2 lines allow me to specifically search handlebars files, which are where all of the html content for my work projects is stored.  The next 2 lines include es6 files in my JavaScript searches, useful since I append JavaScript files that I intend to process with <a href="https://babeljs.io/">Babel</a> with the <code>.es6</code> extenstion.  Customizing the js extension allows me to search all of my JavaScript together.  You can also define richer types in ackrc <a href="http://beyondgrep.com/documentation/ack-2.14-man.html#defining_your_own_types">based on file names using regular expressions or direct name matching</a>.</p>\n<h4>b. Set default options</h4>\n<p>Any option that the ack executable takes can have a default set or changed in an ackrc file.  This is mainly useful for the display option.  By default ack groups matches from different files and gives the file information above each group of matches.  It also shows all output in color.  Any of those things can be disabled or changed in your ackrc file.</p>\n<h4>c. Exclude unwanted directories or files</h4>\n<p>Oftentimes there are a predictable group of files that you may want to ignore in searches.  Perhaps you have a build directory that mirrors your source code, or documentation files mingled with your source.  You can put <code>--ignore-directory</code> or <code>--ignore-file</code>.  Ignore directory takes a directory name, while ignore-file takes matches in the same format as the custom filetypes mentioned above.</p>\n<p>If you’re starting to use ack, don’t miss the chance to make your searches even more efficient by removing any rough edges with an <code>.ackrc</code>.</p>\n<h4>Installation Instructions</h4>\n<ul>\n<li><a href="http://beyondgrep.com/install/">ack</a></li>\n<li><a href="https://github.com/ggreer/the_silver_searcher#installing">ag</a></li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n    <p>\n       ack came first; ag was created as a faster version of ack.  ack is written in perl, making it more portable, and has a few more configuration options.  ag is written in C and is generally faster.  Your choice may vary depending on your use case.\n    </p>\n    <a href="#fnref:1" title="return to article"> ↩</a>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n       This is also one of the main traits that separates ack from <a href="https://github.com/ggreer/the_silver_searcher">ag</a>.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Thoughts on Angular 2.0",date:"2014-11-08 19:24:09+00:00",layout:"post",path:"/2014/11/08/all-about-angular-2-0",category:"frameworks",description:"An early look at the next version of Angular",pageViews:"765",last30pageViews:"2",body:'<p>Rob Eisenberg has a pretty incredible rundown of the current Angular 2.0 proposal and the thought process behind it <a href="http://eisenbergeffect.bluespire.com/all-about-angular-2-0/">on his blog</a>.</p>\n<blockquote>\n<p>Given Angular’s design origins in combination with the changing web and general computing landscape, it’s pretty clear that some changes are needed. In fact, without starting to address these issues now, Angular runs the risk of being obsolete within a year’s time. A framework that cannot work with Web Components, bogs down on mobile or continues to push its own module and class API against the standards, is not going to last long. The Angular team’s answer to these problems is a new version: Angular 2.0. It is essentially a re-imagining of AngularJS for the modern web, taking into account everything that has been learned over the last five years.</p>\n</blockquote>\n<p>He describes in detail the various challenges that the Angular team has faced in keeping the current version modern, the justification for a drastic breaking change, and provides a fascinating look at the inner debates and thought process that produced the current controversial proposal. It’s long, but well worth reading for any Angular developer or anybody interested in the near future changes coming to the web platform.  The trends he identifies here are going to effect every library and framework out there, and it will be interesting to see how they respond.</p>\n<p>As for Angular’s specific response, it’s a bit hard not to see their approach as throwing their hands up in the air, giving up and building something new, but keeping the name.  Rob (a recently added member of the core team) even calls them out on this to a certain extent.</p>\n<blockquote>\n<p>Even though I haven’t got to the details yet, you can probably tell that AngularJS 2.0 is quite different from 1.x. One might ask if it’s even the same framework. I think that’s a good question. As I’ve mentioned earlier, I think the Angular team needs to shoulder the burden of providing a concrete timeline for 1.x support, a migration path to 2.0 and some guidance for companies making decisions today or who would like to plan in advance for 2.0. These are not particularly exciting tasks for the technically-minded Angular team, but I think they are necessary, helpful and respectful to the community.</p>\n</blockquote>\n<p>If you haven’t yet seen the changes coming in Angular 2.0, the tl;dr version is that everything has changed.  Syntax is different across the board, not just at a micro level but also at the structural level.  Several of the key concepts that Angular developers have had to learn including controllers, scope, and 2 way binding are either definitely gone, still being debated, or changed beyond recognition.  And the core concepts of modules, dependency injection and directives have all had major compatibility breaking syntax changes.  Keeping the Angular name seems to be more a matter of the new project sharing a general philosophy and set of maintainers with the old project rather than a suggestion that this is simply a large iteration on an existing framework.</p>\n<p>A few more assorted thoughts:</p>\n<ul>\n<li>\n<p>I really appreciated the listing of the challenges Angular is facing at the beginning. From my outsider perspective (I’m a web developer but have not spent a lot of time with Angular recently), it seems like they’ve nailed the first step of asking the right questions.  Any framework that isn’t optimized for mobile browsers or doesn’t integrate with ES6 classes and modules is likely to look silly in a few years.  And while web components are still not a sure thing, they’re rapidly <a href="http://benmccormick.org/2014/08/07/component-based-development/">becoming a standard for reusable code on the web</a>.</p>\n</li>\n<li>\n<p>Creating a custom JS preprocessor to support the framework you’re building is starting to look like a trend.  And that is not a good thing.  I was not a fan of React bundling JSX, and Angular 2.0’s use of AtScript seems to be equally unfortunate.  In both cases the language is not required to use the framework, but instead is treated as a “First Class” language used as an escape hatch to smooth over rough patches in their API.  At least JSX is a spec, even if it’s a very React centric one.  AtScript appears to be a Google only thing at the moment, inspired by but incompatible with Typescript.</p>\n</li>\n<li>\n<p>The next time I hear a developer claim that marketing is worthless, I’m going to bring up the last few weeks in the JavaScript framework world.  Angular announced their 2.0 plans for the world in a presentation that many people saw only as a <a href="https://docs.google.com/presentation/d/1XQP0_NTzCUcFweauLlkZpbbhNVYbYy156oD--KLmXsk/preview?utm_content=bufferf1174&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer&amp;slide=id.p">set of slides filled with tombstones</a>.  By focusing (at least on the slides) on the things being lost and the drastic changes to syntax, the online conversation focused on the compatibility problems with the release, rather than the problems it would solve.  Now we finally have a detailed explanation of why these breaking changes are happening, but it’s in the form of an opinionated blog post that emphasizes the current uncertainty around the project.  Angular seems to have found an awkward middle ground between involving the community from the beginning and releasing a polished product, where they’ve introduced a “not quite ready” concept to the world.</p>\n<p>Contrast that to the <a href="http://emberjs.com/">EmberJS</a> team, which has pretty transparently taken advantage of the marketing confusion around Angular in order to double down on a message of &quot;stability without stagnation.  Their <a href="https://github.com/emberjs/rfcs/pull/15">Ember 2.0 RFC</a> is clearly informed by the reception to Angular’s plans, especially the 2nd paragraph.</p>\n<blockquote>\n<p>This is not a big-bang rewrite; we will continue development on the master branch, and roll out changes incrementally on the 1.x release train. The 2.0.0 release will simply remove features that have been deprecated between now and then. Our goal is that you can move your Ember app to 2.0 incrementally, one sprint at a time.</p>\n</blockquote>\n<p>Ember and Angular are facing roughly the same challenges in terms of deprecating old syntax and adapting to changes in the web platform.  Regardless of what you think of their different approaches, by clearly articulating their plans in a united way before they begin actually writing the code to accomplish them, Ember is winning the marketing battle here by a mile.</p>\n</li>\n<li>\n<p>Related to all of the above, it’s hard to recommend starting a new Angular project to anyone right now.  While the 1.x branch will continue to receive support going forward if for no other reason than the number of people currently using it, the issues that 2.0 is trying to solve are real and will make it harder for 1.0 to keep up with the rest of the web as it goes forward.  This is not a Python 2/3 situation where Python 2 still remains a viable language to start a project with 6 years later.  Because the web platform will continue shifting under the code, a language that doesn’t support modern idioms will quickly begin to fall behind alternatives.  It’s very possible that Angular 2.0 will regain Angular 1.x’s current spot as the most popular MVC framework on the web, but until it’s released or the core team can show a clear migration path from 1.x to 2.0, Angular development is going to look like a dead end road.</p>\n</li>\n</ul>\n'
}},function(e,t){e.exports={title:"Alternative JavaScript",date:"2014-11-24 03:58:00+00:00",layout:"post",path:"/2014/11/24/alternative-javascript",description:"A non-comprehensive run-through of the various compile to JS languages out there",category:"javascript",pageViews:"4502",last30pageViews:"23",body:'<p>It’s become a bit of a cliche that JavaScript is the “machine code of the web”. But now that mobile browsers have conclusively killed Flash, Silverlight and other “plugin languages”, JavaScript has become the only language that can reasonably claim to be “write once, run anywhere”.  That’s still a bit inflated though.  More accurately, you can use a subset of modern JavaScript that is compatible with the set of browsers and JavaScript environments that you want to support and run it in those places.  In practice this ends up being a version of JavaScript that matches the EcmaScript 5 spec <sup id="fnref:0"><a href="#fn:0">1</a></sup> for users who want to support modern browsers, or a very limited subset of the language that is somewhat similar to the ES3 spec for developers supporting old versions of Internet Explorer.  Because of the strange dynamic that the user rather than the developer of JavaScript code controls the language runtime that code uses, the JavaScript language has been forced to evolve slowly, with very few developers using the latest language features at any given time.  This, combined with a dislike of JavaScript from some developers has led to a proliferation of “compile to JavaScript” languages.</p>\n<p>There’s a problem with talking about “compile to JS” languages though.  That category groups 2 types of languages that are not especially similar.  The first type are languages that are completely different than JavaScript, which are then compiled down into JavaScript so that they can run in a web browser.  This is where the term “machine code of the web” really applies.  From the developer’s point of view, the fact that the code is compiled to JS is an implementation detail, and the JavaScript that is generated is likely to be unreadable, without any clear relation to the structure of the original code. Examples of this type of “compile to JS” language include new languages created for this purpose like <a href="https://www.dartlang.org/">Dart</a> and <a href="http://haxe.org/">Haxe</a>, as well as existing languages like <a href="https://github.com/clojure/clojurescript">Clojure</a> and <a href="http://www.gwtproject.org/">Java</a>.  The most extreme example of this has probably been <a href="http://asmjs.org/">ASM.js</a> and <a href="http://kripken.github.io/emscripten-site/">emscripten</a>, which together allow developers to compile C++ code to a subset of JavaScript that browsers can optimize for performance.  This type of language is great for developers who have a strong preference in language style, or an existing codebase that they want to port to the web.</p>\n<p>But there’s a second type of “compile to Javascript” language. These are languages that embrace the structure and semantics of JavaScript and focus on providing an alternative syntax that provides some benefit.  Benefits can include better code readability, cleaner syntax for common operations,  and support for modern JavaScript features that are not yet safe to use in common browsers without a compile step.  These languages will generally compile down to readable ES5 JavaScript that can easily be matched up 1 to 1 with the original source code.  They’re not intended to excuse you from learning JavaScript, instead they \'re meant to smooth over the development process as you build JavaScript applications.  Examples of this second type of language include <a href="http://coffeescript.org/">CoffeeScript</a>, <a href="http://www.typescriptlang.org/">TypeScript</a>, <a href="http://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a>, <a href="http://sweetjs.org/">Sweet.js</a>, and <a href="https://github.com/google/traceur-compiler">Traceur</a>.  In this post I’m going to take a look at the strengths and weaknesses of some of these alternative Javascript syntaxes, and thinking through when it’s a good idea to use them.</p>\n<p>I’ll start by standing up for the much maligned vanilla ES5 JavaScript syntax.  It has advantages.  It’s supported in many environments these days, including most browsers that people actually still use.  It has an incredible stable of tooling built up around it that allows for a smooth development experience.  And you can use it without jumping through any compile step hoops, or having to mentally translate the production code back to the source.  I’d argue that JavaScript sets a high bar for an alternate syntax to meet. Whether you agree or disagree with that, let’s at least admit that there is a bar and that the convenience of broad support and 1-1 mapping is an advantage that any alternative has to overcome.</p>\n<p>So what type of advantages can alternatives offer?  The different syntaxes I go through below all provide different strengths, but one mostly shared strength is that they allow you to start using some features of the newest version of JavaScript, EcmaScript 6.  ES6 brings a bunch of new features that make common development patterns easier, and looks to be a great improvement to the language.  By allowing you to take advantage of those features now, alternative syntaxes can speed up development and ease the transition into the new version of the language.  To get an idea of the more specific benefits an alternate syntax can bring, I’m going to go through 4 of the most popular syntaxes and explain why somebody would want to use them.</p>\n<p><img src="/posts/images/logo.png" alt="coffeescript logo"></p>\n<p>CoffeeScript was the first alternative JavaScript syntax to gain popularity, and it is also one of the biggest breaks from the normal syntax.  Rewriting a simple Backbone view from the <a href="http://todomvc.com/">TodoMVC project</a> in CoffeeScript would look something like this.</p>\n<pre><code class="language-coffeescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AppView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span></span>\n    el: <span class="hljs-string">\'#todoapp\'</span>\n    statsTemplate: _.template $(<span class="hljs-string">\'#stats-template\'</span>).html()\n    events:\n        <span class="hljs-string">\'keypress #new-todo\'</span>: <span class="hljs-string">\'createOnEnter\'</span>\n        <span class="hljs-string">\'click #clear-completed\'</span>: <span class="hljs-string">\'clearCompleted\'</span>\n        <span class="hljs-string">\'click #toggle-all\'</span>: <span class="hljs-string">\'toggleAllComplete\'</span>\n\n    initialize: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span>\n        @allCheckbox = @$(<span class="hljs-string">\'#toggle-all\'</span>)[<span class="hljs-number">0</span>]\n        @$input = @$(<span class="hljs-string">\'#new-todo\'</span>)\n        @$footer = @$(<span class="hljs-string">\'#footer\'</span>)\n        @$main = @$(<span class="hljs-string">\'#main\'</span>)\n        @$list = $(<span class="hljs-string">\'#todo-list\'</span>)\n\n        @listenTo(app.todos, <span class="hljs-string">\'add\'</span>, @addOne)\n        @listenTo(app.todos, <span class="hljs-string">\'reset\'</span>, @addAll)\n        @listenTo(app.todos, <span class="hljs-string">\'change:completed\'</span>, @filterOne)\n        @listenTo(app.todos, <span class="hljs-string">\'filter\'</span>, @filterAll)\n        @listenTo(app.todos, <span class="hljs-string">\'all\'</span>, @render)\n        app.todos.fetch({reset: <span class="hljs-literal">true</span>})\n\n    render: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span>\n        completed = app.todos.completed().length\n        remaining = app.todos.remaining().length\n\n        <span class="hljs-keyword">if</span> app.todos.length\n            @$main.show()\n            @$footer.show()\n\n            @$footer.html @statsTemplate\n                completed: completed,\n                remaining: remaining\n\n            filter = app.TodoFilter <span class="hljs-keyword">or</span> <span class="hljs-string">\'\'</span>\n\n            @$(<span class="hljs-string">\'#filters li a\'</span>)\n                .removeClass <span class="hljs-string">\'selected\'</span>\n                .filter <span class="hljs-string">"[href=\\"#/<span class="hljs-subst">#{filter}</span>\\"]"</span>\n                .addClass <span class="hljs-string">\'selected\'</span>\n        <span class="hljs-keyword">else</span>\n            @$main.hide()\n            @$footer.hide()\n\n        @allCheckbox.checked = !remaining\n\n    addOne: <span class="hljs-function"><span class="hljs-params">(todo)</span> =&gt;</span>\n        view = <span class="hljs-keyword">new</span> TodoView\n            model: todo\n        @$list.append view.render().el\n\n    addAll: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span>\n        @$list.html <span class="hljs-string">\'\'</span>\n        app.todos.each @addOne, @\n\n   <span class="hljs-comment"># ... and so on</span>\n</code></pre>\n<p>As you can see, Coffeescript uses Ruby and Python style significant whitespace, which gives it a very different feel than JavaScript.  But it retains the language’s structure, giving it a low learning curve.  All of CoffeeScript’s built in structures compile down to ES3-compatible code, so anything you write in CoffeeScript will work in any modern JavaScript environment as long as you don’t use any incompatible APIs.</p>\n<p>Coffeescript gives you plenty of niceties to help you write faster and more succinct code.  In general it’s focused on taking common patterns and finding a short succinct way of representing them.  It removes some of the boilerplate from JavaScript code by replacing <code>function(){}</code> and <code>this.</code> with <code>() -&gt;</code> and <code>@</code> respectively.  It’s a small change, but giving these common patterns easily recognizable shorthand saves plenty of characters across a code base.  These aren’t the only shorthands.  For instance it provides destructuring and string interpolation capabilities, allowing you to do things like this.</p>\n<pre><code class="language-coffeescript">a = <span class="hljs-string">"example"</span>\nb = <span class="hljs-string">"This is an <span class="hljs-subst">#{a}</span>"</span>\n\n[a, b] = [b,a]\n\n<span class="hljs-comment"># a ends up as "this is an example", b is "example"</span>\n</code></pre>\n<p>It’s easy to see that the EcmaScript 6 spec has been greatly influenced by CoffeeScript.  Features like classes, arrow functions, and splats/spreads are all parts of CoffeeScript that are going to be melded into the future of the language.  So why use it instead of something like Traceur which allows us to write ES6 code now?  The best answer I’ve seen was <a href="https://github.com/raganwald-deprecated/homoiconic/blob/master/2011/12/jargon.md">this short piece</a> by Reg Brathwaite.  He argues that CoffeeScript is essentially a tool for writing good JavaScript.  The structure of the language encourages you to take advantage of JavaScript’s good parts, and the compilation process is able to encode many JavaScript best practices.  CoffeeScript features don’t add new capabilities to JavaScript, instead they encode accepted design patterns.</p>\n<p>In terms of tooling, CoffeeScript has been around a while, and has built up a good base of support in the JavaScript community.  It’s the recommended JavaScript syntax for Ruby on Rails projects and has wide support in the NodeJS community.  This community adoption means that many tools offer integrations for it.  You can also find some Coffeescript specific tooling.  For instance, there’s a <a href="http://www.coffeelint.org/">CoffeeLint</a> tool that provides linting similar to JSHint.  CoffeeScript still doesn’t have the ecosystem that basic JavaScript enjoys in this area, but it has established itself enough that most common scenarios are addressed.</p>\n<p><strong>Why use Coffeescript:</strong> You like the transformed syntax, you want concise shorthand for common JavaScript design patterns, and you want to be able to write more readable code <sup id="fnref:1"><a href="#fn:1">2</a></sup></p>\n<p><img src="/posts/images/CRS-56479.png" alt="TypeScript logo"></p>\n<p>TypeScript is a language created by Microsoft to provide static type checking for JavaScript.  It allows you to annotate variables with types, then validates your code when it’s compiled into JavaScript. The benefits are pretty obvious.  Type checking forces you to think about the values that will get passed into functions and help you catch bad logic at compile time rather than runtime.   Static types also allow for smart intellisense-style completion.  As a Microsoft creation, this is fully supported in Visual Studio, but it’s also available in other IDES like WebStorm, and there’s some support for making it work in text editors like Vim and Sublime Text as well.</p>\n<p>Although TypeScript is primarily about types, it also provides some other niceties that fit with it’s theme of tools for building large JavaScript applications.  It provides classes that matches JavaScript’s ES6 class syntax, and modules that can compile down to AMD or CommonJS format.  You also can use ES6 lambda functions.</p>\n<p>Unlike CoffeeScript, TypeScript is unlikely to shorten your code.  Instead writing type definitions will likely lead to a larger code base, but one that’s easier to reason about in a given context.</p>\n<p>The TypeScript Hello World program from their site doesn’t look too much different than the original Javascript.  The important thing to note is the ability to use ES6 features as well as the type annotations on functions.</p>\n<pre><code class="language-javascript">\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Greeter</span> </span>{\n    <span class="hljs-keyword">constructor</span>(public greeting: string) { }\n    greet() {\n        <span class="hljs-keyword">return</span> <span class="hljs-string">"&lt;h1&gt;"</span> + <span class="hljs-keyword">this</span>.greeting + <span class="hljs-string">"&lt;/h1&gt;"</span>;\n    }\n};\n<span class="hljs-keyword">var</span> greeter = <span class="hljs-keyword">new</span> Greeter(<span class="hljs-string">"Hello, world!"</span>);\n<span class="hljs-keyword">var</span> str = greeter.greet();\n<span class="hljs-built_in">document</span>.body.innerHTML = str;\n</code></pre>\n<p>TypeScript was obviously built to be tool friendly, and if you’re using an IDE like Visual Studio or WebStorm, they’ll be able to take full advantage of that.  But the tooling around the text editors used by most JavaScript developers is less advanced.  There’s a nice <a href="https://github.com/clausreinke/typescript-tools">community effort</a> to build a TypeScript server that text editors can plug into for completion information and other IDE functions, similar to the way that <a href="http://ternjs.net/">TernJS</a> works.  But there’s none of the official support that Microsoft has built into Visual Studio, and the lack of attention shows.  Still, the compiler itself fills many of the roles that linting tools play for normal JavaScript, and many developers interested in type safety are probably already using an IDE style editor that will provide full support.</p>\n<p><strong>Why Use TypeScript:</strong> You want static type checking as well as the option to use some ES6 syntax now.  Also a great choice if you’re using an IDE and want better “intellisense” while writing code.</p>\n<p><img src="/posts/images/sweetjs-35aabaff7e0dd24e.png" alt="Sweet.js logo"></p>\n<p>Sweet.js is a very different animal than the other syntaxes I’m covering here.  Strictly speaking it’s not an alternative syntax at all.  It’s a toolkit to building your own your own alternate syntax.  You do that by defining <em>macros</em>, which the compiler then loads and uses to transform your code.  For instance the example from <a href="http://sweetjs.org/">their website</a> shows how you can define ES6 style classes in your code.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// Define the class macro here...</span>\nmacro <span class="hljs-class"><span class="hljs-keyword">class</span> </span>{\n\n  rule {\n\n    $className {\n        <span class="hljs-keyword">constructor</span> $cparams $cbody\n        $($mname $mparams $mbody) ...\n    }\n\n  } =&gt; {\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">$className</span> <span class="hljs-title">$cparams</span> <span class="hljs-title">$cbody</span>\n\n    <span class="hljs-title">$</span>(<span class="hljs-params">$className.prototype.$mname\n      = function $mname $mparams $mbody; </span>) ...\n\n  }\n\n}\n\n// <span class="hljs-title">And</span> <span class="hljs-title">now</span> <span class="hljs-title">classes</span> <span class="hljs-title">are</span> <span class="hljs-title">in</span> <span class="hljs-title">JavaScript</span>!\n<span class="hljs-title">class</span> <span class="hljs-title">Person</span> </span>{\n  <span class="hljs-keyword">constructor</span>(name) {\n    <span class="hljs-keyword">this</span>.name = name;\n  }\n\n  say(msg) {\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.name + <span class="hljs-string">" says: "</span> + msg);\n  }\n}\n<span class="hljs-keyword">var</span> bob = <span class="hljs-keyword">new</span> Person(<span class="hljs-string">"Bob"</span>);\nbob.say(<span class="hljs-string">"Macros are sweet!"</span>);\n\n</code></pre>\n<p>Sweet.js basically removes limits in terms of what your JavaScript syntax looks like.  If you can programatically define a syntax, you can use it.  And because Sweet.js macros are hygienic you can have confidence that you can use them without side effects.  This means that you can wipe away boilerplate, hiding it behind a new operator or keyword.  The modular nature of macros is also a big plus.  Rather than being locked into a syntax and set of capabilities <sup id="fnref:2"><a href="#fn:2">2</a></sup>, using macros allows you to mix and match the syntax you need.</p>\n<p>Relative to the other languages on this list though, Sweet.js lacks a lot of the benefits of a community standard. Any macros you write will only be documented to the extent you document them, and while you can run linting tools on the output, pretty much any other tooling out there, including basic stuff like syntax highlighting, is likely to be unable to parse the non-standard syntax created by macros.</p>\n<p><strong>Why use Sweet.js:</strong> You want your JavaScript syntax to work in a very specific way, and none of the existing options appeal to you, or you find yourself writing a lot of repetitive boilerplate that you can remove with a syntax change.</p>\n<p><img src="/posts/images/68747470733a2f2f676f6f676c652e6769746875622e636f6d2f747261636575722d636f6d70696c65722f6c6f676f2f74632e737667.svg" alt="Traceur logo"></p>\n<p>The last alternate syntax that I’m going to be going in depth on is a bit different, because it’s technically just JavaScript syntax.  But it’s a form of JavaScript syntax that’s not supported everywhere yet.  <a href="https://github.com/google/traceur-compiler">Traceur</a> is a project by Google that allows you to write code that’s valid in EcmaScript 6, and transpile it down into browser-compatible ES5 JavaScript.  Effectively it’s tomorrow’s JavaScript a bit early.  This has some obvious advantages.  First, it will eventually obsolete the compile step as all of the features of ES6 will be supported in browsers someday, and the changing world of browser release policies seem likely to make that sooner than you might expect.  Secondly, tools and other support around ES6 is shaping up nicely, and it’s guaranteed to get better, because this is just JavaScript.  It’s the future of the web platform.</p>\n<p>The case against using Traceur?  Besides the repeated themes of weaker tooling and an additional build step, Traceur simply doesn’t offer as much as the other syntaxes mentioned here.  It doesn’t significantly change the feel of the language like CoffeeScript, provide any clear new features like Typescript, or offer the flexibility of Sweet.js.  In the end it’s “just Javascript”, arriving a little bit early.  The question you need to answer is whether that’s enough to justify the compile step.</p>\n<p><strong>Why use Traceur:</strong> You like JavaScript but are frustrated by slow standards adoption.  You want to use the newest features of the language now while still supporting a variety of platforms.</p>\n<p><strong>Update:</strong> <em>Since I originally wrote this post, <a href="babeljs.io">Babel</a> (formally 6to5) has exploded in usage and popularity as a tool for using future JavaScript features today. There are very good reasons for this.  It is much better documented than Traceur, supports more features, and generally aims to be a tool that people are using to build things, whereas Traceur has always felt like more of a tool for learning about the future of JavaScript.  I would highly recommend Babel for anyone looking to use future JavaScript features in their web projects.</em></p>\n<h3>Other Options</h3>\n<p>I chose to highlight the 4 syntaxes above because they’re the most popular general purpose alternate syntaxes for JavaScript.  But there are a few others worth mentioning here, for the sake of completeness if nothing else.</p>\n<p><a href="http://facebook.github.io/react/docs/jsx-in-depth.html">JSX</a> is seemingly becoming quite popular as an extension to the JavaScript syntax, but I chose not to highlight it here because it is currently so tightly knit to <a href="http://facebook.github.io/react/">React</a>.  While it is <a href="http://blog.vjeux.com/2013/javascript/jsx-for-the-real-dom.html">technically possible</a> to use JSX for things other than React apps, in practice JSX has a limited enough scope <sup id="fnref:3"><a href="#fn:3">3</a></sup> that there’s no real motivation to do so.  If you’re building a React application though, JSX is certainly worth exploring, as is the next syntax.</p>\n<p><a href="http://flowtype.org/">Flow</a> is a new JavaScript syntax created by Facebook that uses the same type annotations as TypeScript, but does so in a way that aims to provide better type inference as well as supporting JSX.  I’m very interested to see where it goes, but for now it’s still early days as it was only announced <a href="https://code.facebook.com/posts/1505962329687926/flow-a-new-static-type-checker-for-javascript/">last week</a>.</p>\n<p><a href="https://docs.google.com/document/d/11YUzC-1d0V1-Q3V0fQ7KSit97HnZoKVygDxpWzEYW0U/edit">AtScript</a> also uses TypeScript’s type annotations, is mostly tied to a single framework, and in terms of public usage doesn’t really even exist yet <sup id="fnref:4"><a href="#fn:4">4</a></sup>.  So why is it worth a mention?  Because it is the syntax that AngularJS 2.0 is being developed in, and will be the first class “recommended syntax” for that framework when it is released next year.  Since Angular is currently the <a href="http://www.google.com/trends/explore#q=AngularJS%2C%20BackboneJS%2C%20KnockoutJS%2C%20EmberJS%2C%20ReactJS&amp;date=1%2F2012%2035m&amp;cmpt=q">most popular</a> JavaScript MV* framework, that carries some weight and makes AtScript worth tracking, especially for Angular developers. But in today’s world it’s not a real contender to be used in a project.</p>\n<h3>Decisions</h3>\n<p>So how do you decide what JavaScript syntax to use?  My recommendation is to start by assuming ES5 JavaScript as a default.  Then examine any problems you’ve run into while using it.  Does your team struggle with JavaScript gotchas?  Has your project become large enough that a strong type system would provide more benefits than cost?  Do you really need some domain specific syntax to clean up your code?  Or are you happy and productive as is?  At that point you can decide whether a different syntax could help you get around those problems, or if the hassle of compilation steps and overhead of a new syntax would just end up making things worse.  You don’t want to use CoffeeScript or Traceur because they’re cool or different.  You’ll want to use them if they solve your problems.</p>\n<h3>More Resources</h3>\n<ul>\n<li>I linked to Reg Brathwaite’s <a href="https://github.com/raganwald-deprecated/homoiconic/blob/master/2011/12/jargon.md">CoffeeScript is not a language worth learning</a> above, but I want to reiterate that it’s worth a read for anyone who’s interested in CoffeeScript, or who wants to understand why people would be excited to use it.</li>\n<li>Steve Sanderson’s vide on <a href="http://vimeo.com/97519516">Architecting large Single Page Applications with Knockout.js</a> covers a lot of stuff and it’s worth watching the whole thing.  But if you skip to the 49:30 mark, he has a nice 10 minute discussion of TypeScript, his teams experience building a large application in it, and the pros and cons they found.</li>\n<li>I’m admittedly a bit skeptical about the value of Sweet.JS, but if you want to hear the case for it from somebody who really believes in it, take a look at this essay: <a href="http://jlongster.com/Stop-Writing-JavaScript-Compilers--Make-Macros-Instead">Stop Writing JavaScript Compilers! Make Macros Instead</a>.  It does a great job of laying out the case for composable macros as an alternative to “monolithic” compilers.</li>\n<li>Finally, Axel Rauschmayer has a <a href="http://www.2ality.com/2014/10/typed-javascript.html">great roundup</a> of the various languages looking to add type systems to JavaScript, diving pretty deep into each and clearly explaining the differences between TypeScript, Flow and AtScript.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:0">\n        <p>\n        <a href="http://en.wikipedia.org/wiki/ECMAScript">EcmaScript</a> is the "official" name for the JavaScript language as described in its specification.  EcmaScript 5 was the most recent finalized spec, published in December 2009. In practice though, JavaScript environements are never strict implementations of a specific spec.  Instead they gradually bring in features over time alongside the standards process.\n        </p>\n        <a href="#fnref:0" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:1">\n        <p>\n        Yes readable is a "beauty is in the eye of the beholder thing".  But readability is certainly a reason that many people are interested in CoffeeScript, and many of it\'s operators are designed as meaningful shorthand for operations that are more bloated in JavaScript.  While that  may present an initial readability barrier, in the long term it can make for a more to the point code base.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        For instance it\'s taken CoffeeScript a looong time to implement support for generators.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:3">\n        <p>\n        Effectively all JSX does is allow for a convenient representation of the DOM within JavaScript.  While this is very important for React, and may be useful in some other cases, it does not provide the level of general purpose value of any of the other syntaxes mentioned in this article.\n        </p>\n        <a href="#fnref:3" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:4">\n        <p>\n        You can use it and get it to compile by passing an option to Traceur, but as far as I know nobody is actually doing so yet outside of the Angular 2.0 team.\n        </p>\n        <a href="#fnref:4" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Awesome Software: Trello",date:"2012-12-20 12:00:00+00:00",layout:"post",path:"/2012/12/20/awesome-software-trello",category:"reviews",description:"A quick review of the project management app Trello",pageViews:"116",last30pageViews:"0",body:"<p>I’ve been using Trello to manage the development process for my new project.  It is an absolutely fantastic tool for managing any type of small scale project.  It keeps things simple and helps you see the big picture. Its deeply flexible workflow consists of a hierarchy of boards, lists, cards and notes/checklists.  You can have multiple team members  sharing a board, with different cards assigned to different members.</p>\n<p>My personal setup has been to use a board to hold a new project, with lists for backlog (To Do), doing, and complete.  The cards hold feature level tasks, and I fill in the details for those tasks into the details section.  I’ve had no need for the card checklists yet, but those could be useful for more complicated features that don’t easily break down into subfeatures I suppose.  This has been great for staying organized.</p>\n<p>Trello is fast and intuitive, with surprising depth for a simple looking concept. It has apps for iOS, android and windows 8, as well as its web app.  I highly recommend it for anyone who has to organize any type of project involving 10 or fewer people.</p>\n"}},function(e,t){e.exports={title:"Backbone and ES6 Classes Revisited",date:"2015-07-06 11:22:22+00:00",layout:"post",path:"/2015/07/06/backbone-and-es6-classes-revisited",description:"A second look at using ES6 classes with Backbone",keywords:"ES6, Backbone, classes, JavaScript, decorators",category:"frameworks",key:"bb-es6-2",readNext:"bb-es6-1,backbone-devs-react,mn-series",pageViews:"14438",last30pageViews:"362",body:'<p>A few weeks ago I wrote <a href="http://benmccormick.org/2015/04/07/es6-classes-and-backbone-js/">an article</a> explaining why the final spec for classes in the ES6/ES2015 version of JavaScript was not usable in Backbone applications.  That post got a lot of great feedback, including this <a href="https://github.com/jashkenas/backbone/issues/3560">discussion</a> with the Backbone core team. The gist of that discussion has been that there are several ways to make ES6 classes work with Backbone now, though they may be less clean than the current <em>Backbone.extend</em> syntax.  But there’s hope for a really great experience: decorators, a <a href="https://github.com/wycats/javascript-decorators">proposed feature for the ES7/ES2016 spec</a>, provide a much cleaner interface when working with Backbone and native classes.</p>\n<p>Let’s start with a quick reminder on the problem that Backbone developers face when adapting ES6 classes.  Both <em>Backbone.extend</em> and ES6 classes serve as syntactic sugar around traditional JavaScript inheritance methods.  So the following code snippets are effectively equivalent:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> ExampleView = Backbone.View.extend({\n    <span class="hljs-attr">foo</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        alert(<span class="hljs-string">\'foo\'</span>)\n    }\n});\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n    foo() {\n        alert(<span class="hljs-string">\'foo\'</span>);\n    }\n}\n</code></pre>\n<p>and each corresponds roughly to this vanilla ES5 snippet</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ExampleView</span>(<span class="hljs-params"></span>) </span>{\n    Backbone.View.call(<span class="hljs-keyword">this</span>);\n}\n\nExampleView.prototype = <span class="hljs-built_in">Object</span>.create(Backbone.View);\nExampleView.prototype.constructor = Backbone.View;\nExampleView.prototype.foo = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    alert(<span class="hljs-string">\'foo\'</span>);\n};\n</code></pre>\n<p>All of that works fine.  The problem is that even though these abstractions are similar, they’re not quite the same.  Specifically ES6 class syntax supports an opinionated subset of what you can accomplish with plain prototype inheritance.  There’s good reason for this, since many developers don’t understand prototype inheritance and can shoot themselves in the foot.  But ES6 class restrictions don’t mesh well with Backbone’s conventions.  Specifically, Backbone relies on adding properties to a class’ prototype before a class’ constructor is invoked <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  ES6 classes don’t provide any way to define properties on the prototype as part of the class definition.  They also do not allow you to add instance properties to a constructor prior to calling super() to run a parent class’ constructor.  As a result, properties that are processed within Backbone objects’ constructors like <code>events</code>, <code>className</code>, <code>urlRoot</code> and others can’t be set within an ES6 class definition without resorting to some less than beautiful syntax.  There are however at least 3 different ways of dealing with this problem under the ES6 spec.  I’ll take a look at each of them.</p>\n<h3>ES6 solutions</h3>\n<p>The 3 main solutions I’ve seen proposed for using the current ES6 class spec with Backbone classes are passing properties to the <code>super</code> function, creating everything as a method, and adding properties to the prototype outside of the class definition.  I’ll go through those one by one, using <a href="https://github.com/tastejs/todomvc/blob/gh-pages/examples/backbone_require/js/views/todos.js">a view from one of the Backbone TodoMVC implementations</a> as an example.</p>\n<h4>Pass properties to the super constructor</h4>\n<p>The first solution is to define a constructor function for each Backbone object that has properties, and pass the properties directly to the constructor.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">\'jquery\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Backbone <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">\'underscore\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> todosTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">\'text!templates/todos.html\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Common <span class="hljs-keyword">from</span> <span class="hljs-string">\'common\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">super</span>({\n            <span class="hljs-attr">tagName</span>:  <span class="hljs-string">\'li\'</span>,\n\n            <span class="hljs-attr">template</span>: _.template(todosTemplate),\n\n            <span class="hljs-attr">events</span>: {\n                <span class="hljs-string">\'click .toggle\'</span>:    <span class="hljs-string">\'toggleCompleted\'</span>,\n                <span class="hljs-string">\'dblclick label\'</span>:   <span class="hljs-string">\'edit\'</span>,\n                <span class="hljs-string">\'click .destroy\'</span>:   <span class="hljs-string">\'clear\'</span>,\n                <span class="hljs-string">\'keypress .edit\'</span>:   <span class="hljs-string">\'updateOnEnter\'</span>,\n                <span class="hljs-string">\'keydown .edit\'</span>:    <span class="hljs-string">\'revertOnEscape\'</span>,\n                <span class="hljs-string">\'blur .edit\'</span>:       <span class="hljs-string">\'close\'</span>\n            },\n        });\n    }\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'change\'</span>, <span class="hljs-keyword">this</span>.render);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'destroy\'</span>, <span class="hljs-keyword">this</span>.remove);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'visible\'</span>, <span class="hljs-keyword">this</span>.toggleVisible);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template(<span class="hljs-keyword">this</span>.model.toJSON()));\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'completed\'</span>, <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>));\n\n        <span class="hljs-keyword">this</span>.toggleVisible();\n        <span class="hljs-keyword">this</span>.$input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.edit\'</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n\n    toggleVisible() {\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'hidden\'</span>,  <span class="hljs-keyword">this</span>.isHidden());\n    }\n\n    isHidden() {\n        <span class="hljs-keyword">let</span> isCompleted = <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>);\n        <span class="hljs-keyword">return</span> (<span class="hljs-comment">// hidden cases only</span>\n            (!isCompleted &amp;&amp; Common.TodoFilter === <span class="hljs-string">\'completed\'</span>) ||\n            (isCompleted &amp;&amp; Common.TodoFilter === <span class="hljs-string">\'active\'</span>)\n        );\n    }\n\n    toggleCompleted() {\n        <span class="hljs-keyword">this</span>.model.toggle();\n    }\n\n    edit() {\n        <span class="hljs-keyword">this</span>.$el.addClass(<span class="hljs-string">\'editing\'</span>);\n        <span class="hljs-keyword">this</span>.$input.focus();\n    }\n\n    close() {\n        <span class="hljs-keyword">let</span> value = <span class="hljs-keyword">this</span>.$input.val();\n        <span class="hljs-keyword">let</span> trimmedValue = value.trim();\n\n        <span class="hljs-keyword">if</span> (trimmedValue) {\n            <span class="hljs-keyword">this</span>.model.save({ <span class="hljs-attr">title</span>: trimmedValue });\n\n            <span class="hljs-keyword">if</span> (value !== trimmedValue) {\n                <span class="hljs-keyword">this</span>.model.trigger(<span class="hljs-string">\'change\'</span>);\n            }\n        } <span class="hljs-keyword">else</span> {\n            <span class="hljs-keyword">this</span>.clear();\n        }\n\n        <span class="hljs-keyword">this</span>.$el.removeClass(<span class="hljs-string">\'editing\'</span>);\n    }\n\n    updateOnEnter(e) {\n        <span class="hljs-keyword">if</span> (e.keyCode === Common.ENTER_KEY) {\n            <span class="hljs-keyword">this</span>.close();\n        }\n    }\n\n    revertOnEscape(e) {\n        <span class="hljs-keyword">if</span> (e.which === Common.ESCAPE_KEY) {\n            <span class="hljs-keyword">this</span>.$el.removeClass(<span class="hljs-string">\'editing\'</span>);\n            <span class="hljs-comment">// Also reset the hidden input back to the original value.</span>\n            <span class="hljs-keyword">this</span>.$input.val(<span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'title\'</span>));\n        }\n    }\n\n    clear() {\n        <span class="hljs-keyword">this</span>.model.destroy();\n    }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoView;\n</code></pre>\n<p>There are a few advantages to this approach.  It keeps everything within the class definition, and lets Backbone itself manage attaching properties to the prototype, assuring compatibility with existing code.  However it adds a constructor call to a class that otherwise wouldn’t need one, making it less obvious when a developer is actually modifying the constructor to do something important.  It also isolates properties from methods, whereas Backbone philosophically has always treated them interchangeably.  In fact that philosophy is the key to the next solution.</p>\n<h4>Treat everything like a method</h4>\n<p>Backbone evaluates all of its properties using Underscore’s <code>_.result</code> function <sup id="fnref:2"><a href="#fn:2">2</a></sup>. <code>_.result</code> checks to see if an object property is a function. If it is then <code>_.result</code> will evaluate it and return the result.  This allows Backbone to accept its properties as either an object or a function.  Very handy.  So one workaround to the constructor problem is to make everything a method, including properties.  We can actually go one better than this, and use the <code>get</code> keyword to make our methods serve as <em>getters</em> for a property.  This means they will be accessible as properties, but defined as methods, retaining compatibility with any existing references if you’re converting existing code.</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    get tagName() { <span class="hljs-keyword">return</span> <span class="hljs-string">\'li\'</span>}\n\n    get template() { <span class="hljs-keyword">return</span> _.template(todosTemplate)}\n\n    get events() {\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-string">\'click .toggle\'</span>:    <span class="hljs-string">\'toggleCompleted\'</span>,\n            <span class="hljs-string">\'dblclick label\'</span>:   <span class="hljs-string">\'edit\'</span>,\n            <span class="hljs-string">\'click .destroy\'</span>:   <span class="hljs-string">\'clear\'</span>,\n            <span class="hljs-string">\'keypress .edit\'</span>:   <span class="hljs-string">\'updateOnEnter\'</span>,\n            <span class="hljs-string">\'keydown .edit\'</span>:    <span class="hljs-string">\'revertOnEscape\'</span>,\n            <span class="hljs-string">\'blur .edit\'</span>:       <span class="hljs-string">\'close\'</span>\n        }\n    }\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'change\'</span>, <span class="hljs-keyword">this</span>.render);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'destroy\'</span>, <span class="hljs-keyword">this</span>.remove);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'visible\'</span>, <span class="hljs-keyword">this</span>.toggleVisible);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template(<span class="hljs-keyword">this</span>.model.toJSON()));\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'completed\'</span>, <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>));\n\n        <span class="hljs-keyword">this</span>.toggleVisible();\n        <span class="hljs-keyword">this</span>.$input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.edit\'</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n\n    toggleVisible() {\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'hidden\'</span>,  <span class="hljs-keyword">this</span>.isHidden());\n    }\n\n    <span class="hljs-comment">//... etc</span>\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoView;\n</code></pre>\n<p>This approach uses only standard class syntax, which is great.  Getters and methods are highly idiomatic class structures, and work fine with Backbone right now.  They also enforce the immutability of these properties, a design concern with the current Backbone property implementation <sup id="fnref:3"><a href="#fn:3">3</a></sup>.  But lets be real, <code>get tagName() { return \'li\'}</code> is a significantly less clean interface than the <code>tagName: \'li\'</code> syntax you get with <em>Backbone.extend</em>.</p>\n<h4>Defining properties directly on the prototype</h4>\n<p>The final example is the most straightforward.  Since there’s no special class syntax for adding properties to the prototype, we can just do so directly after we’ve defined the class.</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'change\'</span>, <span class="hljs-keyword">this</span>.render);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'destroy\'</span>, <span class="hljs-keyword">this</span>.remove);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'visible\'</span>, <span class="hljs-keyword">this</span>.toggleVisible);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template(<span class="hljs-keyword">this</span>.model.toJSON()));\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'completed\'</span>, <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>));\n\n        <span class="hljs-keyword">this</span>.toggleVisible();\n        <span class="hljs-keyword">this</span>.$input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.edit\'</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n\n    toggleVisible() {\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'hidden\'</span>,  <span class="hljs-keyword">this</span>.isHidden());\n    }\n\n    <span class="hljs-comment">//... etc</span>\n};\n\nTodoView.prototype.tagName = <span class="hljs-string">\'li\'</span>;\nTodoView.prototype.template = _.template(todosTemplate);\nTodoView.prototype.events = {\n    <span class="hljs-string">\'click .toggle\'</span>:    <span class="hljs-string">\'toggleCompleted\'</span>,\n    <span class="hljs-string">\'dblclick label\'</span>:   <span class="hljs-string">\'edit\'</span>,\n    <span class="hljs-string">\'click .destroy\'</span>:   <span class="hljs-string">\'clear\'</span>,\n    <span class="hljs-string">\'keypress .edit\'</span>:   <span class="hljs-string">\'updateOnEnter\'</span>,\n    <span class="hljs-string">\'keydown .edit\'</span>:    <span class="hljs-string">\'revertOnEscape\'</span>,\n    <span class="hljs-string">\'blur .edit\'</span>:       <span class="hljs-string">\'close\'</span>\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoView;\n</code></pre>\n<p>This approach is unambiguous, but its also removes the advantages of using abstracted syntax to begin with.  Adding directly to the prototype takes properties out of the context of the class definition, making it harder to view the class as a holistic unit.  Forcing properties to appear after the class definition also breaks with Backbone community conventions.  Almost all examples of Backbone code that I’ve seen put properties at the top of Backbone class declarations, above any methods, since they’re usually important to read when trying to understand the purpose and role of an object.  They’re then followed by methods, which often contain extensive logic that is less helpful in understanding a class’ overall purpose.</p>\n<p>Of these 3 solutions, I personally prefer using methods and getters.  However I don’t see any of them as an improvement on the existing <em>Backbone.extend</em> syntax.</p>\n<h3>ES7 and Decorators</h3>\n<p>JavaScript is not staying stagnant however.  The TC39 committee recently approved the final spec for ES6 and is aiming to release a new spec on a yearly basis going forward.  One proposed feature for a future spec is <a href="https://github.com/wycats/javascript-decorators">JavaScript decorators</a>.  Decorators are a declarative way of adding extra behavior to a class or class method.  They’re simple functions that take a class or method as an argument and then return an augmented version.</p>\n<p>For instance here’s a simple example from the proposal of a decorator that adds an isTestable property to classes that it decorates.</p>\n<pre><code class="language-javascript">@isTestable(<span class="hljs-literal">true</span>)\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> </span>{ }\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isTestable</span>(<span class="hljs-params">value</span>) </span>{\n   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">target</span>) </span>{\n      target.isTestable = value;\n   }\n}\n</code></pre>\n<p>Based on that example, it’s not hard to see how this is relevant to the syntax struggle we experienced above.  Here’s a naive solution to our properties problem that utilizes a <code>props</code> decorator to add a Backbone-esque hash of properties to the prototype.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//decorators.js</span>\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">props</span>(<span class="hljs-params">value</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">target</span>) </span>{\n        _.extend(target.prototype, value);\n    }\n}\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">\'jquery\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Backbone <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">\'underscore\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> todosTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">\'text!templates/todos.html\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Common <span class="hljs-keyword">from</span> <span class="hljs-string">\'common\'</span>;\n<span class="hljs-keyword">import</span> {props} <span class="hljs-keyword">from</span> <span class="hljs-string">\'decorators\'</span>\n\n@props({\n\n    <span class="hljs-attr">tagName</span>:  <span class="hljs-string">\'li\'</span>,\n\n    <span class="hljs-attr">template</span>: _.template(todosTemplate),\n\n    <span class="hljs-attr">events</span>: {\n        <span class="hljs-string">\'click .toggle\'</span>:    <span class="hljs-string">\'toggleCompleted\'</span>,\n        <span class="hljs-string">\'dblclick label\'</span>:   <span class="hljs-string">\'edit\'</span>,\n        <span class="hljs-string">\'click .destroy\'</span>:   <span class="hljs-string">\'clear\'</span>,\n        <span class="hljs-string">\'keypress .edit\'</span>:   <span class="hljs-string">\'updateOnEnter\'</span>,\n        <span class="hljs-string">\'keydown .edit\'</span>:    <span class="hljs-string">\'revertOnEscape\'</span>,\n        <span class="hljs-string">\'blur .edit\'</span>:       <span class="hljs-string">\'close\'</span>\n    },\n})\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'change\'</span>, <span class="hljs-keyword">this</span>.render);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'destroy\'</span>, <span class="hljs-keyword">this</span>.remove);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'visible\'</span>, <span class="hljs-keyword">this</span>.toggleVisible);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template(<span class="hljs-keyword">this</span>.model.toJSON()));\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'completed\'</span>, <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>));\n\n        <span class="hljs-keyword">this</span>.toggleVisible();\n        <span class="hljs-keyword">this</span>.$input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.edit\'</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n\n    toggleVisible() {\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'hidden\'</span>,  <span class="hljs-keyword">this</span>.isHidden());\n    }\n\n    <span class="hljs-comment">//... etc</span>\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoView;\n</code></pre>\n<p>That’s a big improvement over our ES6 solutions above.  Our properties are added declaratively at the top of the class and are still clearly associated with the class.  Everything lines up reasonably well with both Backbone and native idioms. This is also reminiscent of the <a href="https://angular.io/docs/js/latest/quickstart.html#section-angular-create-account">approach that Angular 2 is taking</a> with its interface, using decorators heavily for component configuration.  It turns out though that we can actually do better.</p>\n<p>I got a tweet from Steven Langbroek last week asking me to look at his <a href="https://gist.github.com/StevenLangbroek/6bd28d8201839434b843">idea for using decorators to provide a cool new syntax for event binding in Backbone</a>.  I thought it was awesome and it inspired me to think in a more fine grained way about using decorators with Backbone.  How can we make the syntax better, as opposed to just replicating the current experience.  Here’s what a more “fine grained” decorators approach might look like with our example.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//decorators.js</span>\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">tagName</span>(<span class="hljs-params">value</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">target</span>) </span>{\n        target.prototype.tagName = value;\n    }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">template</span>(<span class="hljs-params">value</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">decorator</span>(<span class="hljs-params">target</span>) </span>{\n        target.prototype.template = _.template(value);\n    }\n}\n\n<span class="hljs-keyword">export</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">on</span>(<span class="hljs-params">eventName</span>)</span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">target, name, descriptor</span>)</span>{\n    <span class="hljs-keyword">if</span>(!target.events) {\n        target.events = {};\n    }\n    <span class="hljs-keyword">if</span>(_.isFunction(target.events)) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">\'The on decorator is not compatible with an events method\'</span>);\n        <span class="hljs-keyword">return</span>;\n    }\n    <span class="hljs-keyword">if</span>(!eventName) {\n        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">\'The on decorator requires an eventName argument\'</span>);\n    }\n    target.events[eventName] = name;\n    <span class="hljs-keyword">return</span> descriptor;\n  }\n}\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> $ <span class="hljs-keyword">from</span> <span class="hljs-string">\'jquery\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Backbone <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> _ <span class="hljs-keyword">from</span> <span class="hljs-string">\'underscore\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> todosTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">\'text!templates/todos.html\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Common <span class="hljs-keyword">from</span> <span class="hljs-string">\'common\'</span>;\n<span class="hljs-keyword">import</span> {tagName, template, on} <span class="hljs-keyword">from</span> <span class="hljs-string">\'decorators\'</span>;\n\n@tagName(<span class="hljs-string">\'li\'</span>)\n@template(todosTemplate)\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodoView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'change\'</span>, <span class="hljs-keyword">this</span>.render);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'destroy\'</span>, <span class="hljs-keyword">this</span>.remove);\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">\'visible\'</span>, <span class="hljs-keyword">this</span>.toggleVisible);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(<span class="hljs-keyword">this</span>.template(<span class="hljs-keyword">this</span>.model.toJSON()));\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'completed\'</span>, <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>));\n\n        <span class="hljs-keyword">this</span>.toggleVisible();\n        <span class="hljs-keyword">this</span>.$input = <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.edit\'</span>);\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n\n    toggleVisible() {\n        <span class="hljs-keyword">this</span>.$el.toggleClass(<span class="hljs-string">\'hidden\'</span>,  <span class="hljs-keyword">this</span>.isHidden());\n    }\n\n    isHidden() {\n        <span class="hljs-keyword">let</span> isCompleted = <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'completed\'</span>);\n        <span class="hljs-keyword">return</span> (<span class="hljs-comment">// hidden cases only</span>\n            (!isCompleted &amp;&amp; Common.TodoFilter === <span class="hljs-string">\'completed\'</span>) ||\n            (isCompleted &amp;&amp; Common.TodoFilter === <span class="hljs-string">\'active\'</span>)\n        );\n    }\n\n    @on(<span class="hljs-string">\'click .toggle\'</span>)\n    toggleCompleted() {\n        <span class="hljs-keyword">this</span>.model.toggle();\n    }\n\n    @on(<span class="hljs-string">\'dblclick label\'</span>)\n    edit() {\n        <span class="hljs-keyword">this</span>.$el.addClass(<span class="hljs-string">\'editing\'</span>);\n        <span class="hljs-keyword">this</span>.$input.focus();\n    }\n\n    @on(<span class="hljs-string">\'blur .edit\'</span>)\n    close() {\n        <span class="hljs-keyword">let</span> value = <span class="hljs-keyword">this</span>.$input.val();\n        <span class="hljs-keyword">let</span> trimmedValue = value.trim();\n\n        <span class="hljs-keyword">if</span> (trimmedValue) {\n            <span class="hljs-keyword">this</span>.model.save({ <span class="hljs-attr">title</span>: trimmedValue });\n\n            <span class="hljs-keyword">if</span> (value !== trimmedValue) {\n                <span class="hljs-keyword">this</span>.model.trigger(<span class="hljs-string">\'change\'</span>);\n            }\n        } <span class="hljs-keyword">else</span> {\n            <span class="hljs-keyword">this</span>.clear();\n        }\n\n        <span class="hljs-keyword">this</span>.$el.removeClass(<span class="hljs-string">\'editing\'</span>);\n    }\n\n    @on(<span class="hljs-string">\'keypress .edit\'</span>)\n    updateOnEnter(e) {\n        <span class="hljs-keyword">if</span> (e.keyCode === Common.ENTER_KEY) {\n            <span class="hljs-keyword">this</span>.close();\n        }\n    }\n\n    @on(<span class="hljs-string">\'keydown .edit\'</span>)\n    revertOnEscape(e) {\n        <span class="hljs-keyword">if</span> (e.which === Common.ESCAPE_KEY) {\n            <span class="hljs-keyword">this</span>.$el.removeClass(<span class="hljs-string">\'editing\'</span>);\n            <span class="hljs-comment">// Also reset the hidden input back to the original value.</span>\n            <span class="hljs-keyword">this</span>.$input.val(<span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'title\'</span>));\n        }\n    }\n\n    @on(<span class="hljs-string">\'click .destroy\'</span>)\n    clear() {\n        <span class="hljs-keyword">this</span>.model.destroy();\n    }\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> TodoView;\n</code></pre>\n<p>Now we’re getting somewhere.  Steven’s <code>on</code> decorator provides a really nice upgrade to Backbone’s event system.  Event handlers are now in the context of the methods they refer to, making it much easier to get context as you scroll through a large view.  Our tagName gets a nice declarative setter at the top of the view rather than being bundled into an object hash.  And our template processing gets standardized, with the call to <code>_.template</code> abstracted away into the decorator.  That last decorator would probably be project specific, but the other 2 could easily be incorporated into a general Backbone decorator library.</p>\n<p>The main downside I see to this is one shared by a few of the other approaches.  Specifically that declaring a property like tagName as a method or as a property requires different implementation styles.  Backbone philosophically treats these scenarios as equivalent, and its not unusual to start with a static property for keys like <code>className</code>, <code>url</code>, or <code>template</code> and then refactor to use a function as code is reused in different situations.  Artificially separating out those scenarios is not very Backbone-like and might discourage that type of refactoring.</p>\n<h3>Recommendations</h3>\n<p>If you want to use ES6 classes with Backbone in production today, you should probably make everything a method, and make liberal use of the getter functionality.  That seems to be the most Backbone-like, with everything contained in a single class definition, and easy refactoring when a property begins to require logic around it.  If you’re experimenting though, you should definitely consider playing with decorators and see how you can make Backbone’s interface better.</p>\n<p><em>If you have ideas about this, feel free to contribute on the <a href="https://github.com/jashkenas/backbone/issues/3560">github issue</a></em></p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        I completely screwed up explaining this in my first piece.  I was under the mistaken impression that Backbone was adding properties like `className` and `events` to each instance rather than to the prototype.  Which makes no sense in retrospect, since those properties need to be present before the Backbone.View is run.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n        <li class="footnote" id="fn:2">\n            <p>\n            Well, almost all. iDAttribute <a href="https://github.com/jashkenas/backbone/pull/3684">is still catching up</a>.\n            <a href="#fnref:2" title="return to article"> ↩</a></p>\n        </li>\n        <li class="footnote" id="fn:3">\n            <p>\n            Oh you didn\'t realize that adding an item to the event hash for your view would add it to every instance of that View?  Whoops.\n            <a href="#fnref:3" title="return to article"> ↩</a></p>\n        </li>\n</ol>\n</div>\n'
}},function(e,t){e.exports={title:"Building Modular Web Apps With Backbone.Radio",date:"2015-01-26 12:00:00+00:00",layout:"post",path:"/2015/01/26/backbone-radio",description:"An overview of using Backbone.Radio in Marionette apps",keywords:"Backbone, JavaScript, Backbone Radio, Marionette, messaging",category:"frameworks",key:"bb-radio",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"20022",last30pageViews:"155",body:'<p><em>This is the fifth post in a series on <a href="http://marionettejs.com/">Marionette.js</a>.  For more background on what Marionette is, check out the series page, <a href="http://benmccormick.org/marionette-explained/">Marionette Explained</a></em></p>\n<p>One of the great things about Backbone is how it encourages a modular approach to building UIs.  Different portions of the pages are separated into individual Views, allowing you to simplify your reasoning about your code by focusing on bite-sized chunks at a time.  Easier said than done though, right?  In practice, it’s not hard to create Backbone applications with large views that have tight dependencies on each other.  This usually isn’t an intentional decision, but part of a slow decay as developers work to connect the various aspects of their applications.</p>\n<p>So far in this series I’ve talked about how Marionette makes it easier to create maintainable Views.  Now I’m going to look at <a href="https://github.com/marionettejs/backbone.radio">Backbone.Radio</a>, Marionette’s tool for communication between application components.</p>\n<h3>What’s so hard about modular architecture?</h3>\n<p>There are many advantages to designing your web UI in a modular or component-based fashion.  Your code tends to be easier to reason about and test, it’s easier to swap out one piece of code for another, and it greatly increases the chances that you’ll be able to reuse your code in other places.  Unfortunately for all except the most basic applications, different components of a UI always have to be aware of the things that happen in other areas of the UI.  It may be something simple like responding to a button click by showing a modal, or more complicated like updating multiple dashboard items when the user applies a filter, but these connections will exist.  At this point you have options.  You can begin having components reference each other directly for example, or you could try to capture state within a shared data object that each component watches.  But there’s another solution that borrows from many years of development best practice on backend systems.  You can use a message bus.</p>\n<h3>A simple Message Bus</h3>\n<p>A message bus is a software architecture model for communicating between two systems.  The idea is that instead of referencing each other directly, system components are able to send messages through a shared mediator object.  It’s quite straightforward to create a simple message bus using Backbone.</p>\n<p>Backbone.Events is Backbone’s event object, which gets mixed into the various Backbone classes to provide the Backbone event functions (<code>on</code>, <code>off</code>, <code>listenTo</code>, <code>trigger</code>, etc).  It’s easy and common to mix it into a separate object.  That’s all you need to create a message bus: something like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> mediator = _.extend({},Backbone.Events);\n</code></pre>\n<p>Now Models and Views can listen to or trigger events on the mediator object, allowing them to communicate without having to be directly aware of each other.  This is a great pattern, and quite useful as is, but there are some limitations.  With a mediator object, all events are global.  Any object can listen to any event, and you have to be careful to avoid naming collisions when using common terms.  It’s also a single object for multiple types of communication.</p>\n<h3>The Backbone.Radio API</h3>\n<p>Backbone.Radio builds on this concept to provide a more powerful message bus.  Instead of a single object, Radio provides multiple “channels” each of which can correspond to a page or functional section of your web app. Also, instead of a single events API, Radio provides three, Events, Commands, and Requests, each built for a different use case.</p>\n<h4>Events</h4>\n<p>Radio Events are the exact same as our simple message bus.  When you create a channel with Radio, they extend Backbone.Events.  That means you can call any Backbone.Events function on them, or pass them to the <code>listenTo</code> method of other Backbone objects.  Events provide Radio’s publish-subscribe functionality.  Multiple objects can subscribe to an event using <code>on</code> or <code>listenTo</code>.  And any object can publish an event using <code>trigger</code>.  For those of you unfamiliar with Backbone’s events, they have two features that you might not expect.  First, unlike native browser events or jQuery events, Backbone events are synchronous; when you trigger an event, all callbacks that are registered on that event run immediately.  Second, it’s easy to pass data with Backbone events.  Unlike native browser events which tend to simply consist of an event and a target, any data you pass when you trigger an event gets passed directly to the callback function, making it a true messaging system.</p>\n<p><img src="/posts/images/68747470733a2f2f692e636c6f756475702e636f6d2f75396f433353314c78452e737667.svg" alt="events diagram"></p>\n<p><strong>Functions Provided</strong> - <code>on</code>, <code>off</code>, <code>trigger</code>, <code>once</code>, <code>listenTo</code>, <code>listenToOnce</code>, <code>stopListening</code></p>\n<h4>Commands</h4>\n<p><strong>Update January 2016</strong> - <em>During 2015, Commands were deprecated from Backbone.Radio as part of their 1.0.0 release.  From a code level, they’re simply a request that doesn’t return a value, so feel free to keep any existing code, but change command to request and comply to reply</em></p>\n<p>Radio Commands are similar to Events, with the distinction that only a single callback can handle or “comply” to a given command.  Commands do not add any functionality on top of events; instead, they provide a semantic distinction and enforce simpler logic.  When <code>exampleChannel.command(\'something\')</code> is called, you know that it is requesting an action be performed, and you can be confident that there will be no side effects.  Only one object will comply to the command.  Commands are a maintenance-friendly tool; they make your code easier to follow by doing less and doing it more obviously.</p>\n<p><img src="/posts/images/68747470733a2f2f692e636c6f756475702e636f6d2f3765394d35724b464f722e737667.svg" alt="commands diagram"></p>\n<p><strong>Functions Provided</strong> - <code>comply</code>, <code>stopComplying</code>, <code>command</code>, <code>complyOnce</code></p>\n<h4>Requests</h4>\n<p>Radio Requests share the one-to-one nature of Commands, but provide functionality not seen in Backbone.Events.  You can use Requests to retrieve information from other objects.  Each request can be serviced by a single response callback, with the request receiving the return value of the callback function.  This is very useful for providing resources in a decoupled manner, where a View or other object doesn’t have to know the details of how an object is stored or retrieved.</p>\n<p><img src="/posts/images/68747470733a2f2f692e636c6f756475702e636f6d2f744556555f74755249582e737667.svg" alt="commands diagram"></p>\n<p><strong>Functions Provided</strong> - <code>reply</code>, <code>stopReplying</code>, <code>request</code>, <code>replyOnce</code></p>\n<h4>Channels</h4>\n<p>Radio Channels are a method of segmenting out your messaging across functions.  Instead of holding every event inside a global namespace, objects can interact with a Channel that’s limited to the functionality they need.  This minimizes the chances of naming collisions across the app, and provides additional semantic guidance for future readers of the code.  It’s much easier to trace through small, focused messaging networks than a large, global one when you’re trying to understand a complex behavior.</p>\n<h3>Backbone.Radio in practice</h3>\n<p>Radio’s API is fairly small and simple.  Its power comes from the development patterns it enables.  The following are examples from my own code of how Radio assists in building modular testable UI code.</p>\n<h4>Decouple your Views with Radio Events</h4>\n<p><a href="http://en.wikipedia.org/wiki/Loose_coupling">Loose coupling</a> is one of the most commonly cited design principles in Object Oriented Programming.  In Backbone, loose coupling can be applied to mean that your Views should know as little about each other as possible.  In my own work I implement this by allowing Views to know about and reference their own child Views, but do not allow them to directly reference any other Views.  If Views need to communicate up or across a tree of Views, I use Radio.</p>\n<p>Radio Events are great for alerting other parts of the application about a change of state.  For instance, in an application where we have a main content area and a sidebar that provides context for the main area (for instance, a mail app like Gmail that shows contact info in the sidebar next to an open email), we could use Radio Events to keep our sidebar in sync with the main content.  That might look something like this.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> Mn = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'backbone.marionette\'</span>);\n<span class="hljs-keyword">var</span> Radio = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'backbone.radio\'</span>);\n\n<span class="hljs-keyword">var</span> inboxChannel = Radio.channel(<span class="hljs-string">\'inbox\'</span>);\n\n<span class="hljs-keyword">var</span> ContactView = Mn.ItemView.extend({\n\n    <span class="hljs-attr">template</span>: <span class="hljs-string">\'#contact-template\'</span>,\n\n    <span class="hljs-attr">initialize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">this</span>.listenTo(inboxChannel, <span class="hljs-string">\'show:email\'</span>, <span class="hljs-keyword">this</span>.showContact);\n        <span class="hljs-keyword">this</span>.listenTo(inboxChannel, <span class="hljs-string">\'show:inbox\'</span>, <span class="hljs-keyword">this</span>.showAd);\n    },\n\n    <span class="hljs-attr">showContact</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">emailObject</span>) </span>{\n        <span class="hljs-comment">//show the contact for the emailObject</span>\n    },\n\n    <span class="hljs-attr">showAd</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//when we don\'t have a contact to show, show an ad instead</span>\n    }\n\n});\n\n<span class="hljs-built_in">module</span>.exports = ContactView;\n</code></pre>\n<p>Note that our sidebar View doesn’t need to know anything about the inbox area.  The <code>show:email</code> event could be fired by our inbox view, by a navigation View, or by our router on page load.  The sidebar doesn’t know and doesn’t care.</p>\n<p>It’s also important to note that the event represents a change in state external to our component.  Something else changed (the state of the inbox), and the sidebar component is reacting to this.  There might be many coponents that react to this state change, or just this one.  Our View doesn’t know or care.</p>\n<h4>Centralize UI Logic with Commands</h4>\n<p>While Events are a way of notifying other components about a change in state, commands are useful when you want to cause a change in state without having to know the implementation.  For instance, in an application that I work on, we have a centralized event-logging module that can take application events that we want logged and send them to a backend API and also to Google Analytics.  We use commands for this.  In practice the logging module looks a bit like this.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> Radio = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'backbone.radio\'</span>);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">event</span>) </span>{\n    <span class="hljs-comment">// Send event to the backend API and Google Analytics</span>\n}\n\nRadio.channel(<span class="hljs-string">\'appEvents\'</span>).comply(<span class="hljs-string">\'log\'</span>,log);\n\n</code></pre>\n<p>Then we can run <code>Radio.channel(\'appEvents\').command(\'log\', event)</code> anywhere we want to log an application event.  We could use events for this, but there’s value in using commands.  We’re explicitly saying that we want our application to log a specific piece of data, whereas a similar event would have the connotation that an event had occured, and anything that wanted to respond to it could.  We can be more confident of what’s happening here.</p>\n<h4>Share Resources Across Nested Views with Requests</h4>\n<p>One of the challenges of nested View architectures like Marionette or ReactJS is deciding how to pass data down to deeply nested View components.  One approach is to pass all necessary data into the top level view and then pass it down along the View tree to whatever View needs it.  That has the advantage of a clear data flow, but the disadvantage of cluttering up parent Views with data they don’t need and tightly coupling the parent Views to the implementation of their children.  Another approach is simply making the data available globally, which has all the disadvantages that global data normally brings.  Radio requests provide a nice solution to this problem.  You can define “data providers” that are responsible for providing any data you need that is not passed directly down a view chain. These could be separate modules similar to Angular’s service objects.  They could be other UI components like a datepicker.  Or they could just be models and collections you define at the root of your application but don’t pass directly to your Views.  In the same application as above, I have a set of task views that can have users assigned to them.  Because these tasks are deeply nested in the UI, I don’t pass the collection of possible Users to assign down the View tree.  Instead, I define that collection within my top level application object and then request it when the user opens up the user-picker View.  I use jQuery deferreds to make sure that the collection has been populated before the picker appears.  That all looks something like this:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//in app.js</span>\n<span class="hljs-keyword">var</span> usersDeferred = (<span class="hljs-keyword">new</span> UserCollection()).fetch();\nresourceChannel.reply(<span class="hljs-string">\'userlist\'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> usersDeferred;\n});\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-comment">//in task.js</span>\n<span class="hljs-keyword">var</span> usersDeferred = resourceChannel.request(<span class="hljs-string">\'userlist\'</span>);\nusersDeferred.done(<span class="hljs-keyword">this</span>.showUserPicker);\n</code></pre>\n<h3>A Quick Note on Backbone.Radio and Marionette</h3>\n<p>Those of you who have used Marionette before may be a bit confused as to why this post is part of my Marionette article.  As of version 2.3, the current shipping version of Marionette, Radio is not distributed as part of the library.  Marionette instead ships with <a href="https://github.com/marionettejs/backbone.wreqr">Backbone.Wreqr</a> as its message bus implementation.  Wreqr is a precursor to Radio with a significantly more confusing API.  Radio provides a cleaner approach, as well as a more intuitive name.  However, because Marionette follows semantic versioning, they’re waiting for 3.0 to make Radio the default.</p>\n<p>In the meantime, though, it’s easy to replace Wreqr with Radio.  You can simply make sure that you’re loading in Radio instead of Wreqr, and then implement the following <a href="https://gist.github.com/thejameskyle/48afb443b8c8c6ee4f46">shim</a>:</p>\n<pre><code>(<span class="hljs-name">function</span>(<span class="hljs-name">root</span>, factory) {\n  if (<span class="hljs-name">typeof</span> define === <span class="hljs-symbol">\'function</span>\' &amp;&amp; define.amd) {\n    define([<span class="hljs-symbol">\'backbone.marionette</span>\', <span class="hljs-symbol">\'backbone.radio</span>\', <span class="hljs-symbol">\'underscore</span>\'], factory)<span class="hljs-comment">;</span>\n  } else if (<span class="hljs-name">typeof</span> exports !== <span class="hljs-symbol">\'undefined</span>\') {\n    module.exports = factory(<span class="hljs-name"><span class="hljs-builtin-name">require</span></span>(<span class="hljs-symbol">\'backbone.marionette</span>\'), require(<span class="hljs-symbol">\'backbone.radio</span>\'), require(<span class="hljs-symbol">\'underscore</span>\'))<span class="hljs-comment">;</span>\n  } else {\n    factory(<span class="hljs-name">root.Backbone.Marionette</span>, root.Backbone.Radio, root._)<span class="hljs-comment">;</span>\n  }\n}(<span class="hljs-name">this</span>, function(<span class="hljs-name">Marionette</span>, Radio, _) {\n  <span class="hljs-symbol">\'use</span> strict\'<span class="hljs-comment">;</span>\n\n  Marionette.Application.prototype._initChannel = function () {\n    this.channelName = _.result(<span class="hljs-name">this</span>, <span class="hljs-symbol">\'channelName</span>\') || <span class="hljs-symbol">\'global</span>\'<span class="hljs-comment">;</span>\n    this.channel = _.result(<span class="hljs-name">this</span>, <span class="hljs-symbol">\'channel</span>\') || Radio.channel(<span class="hljs-name">this.channelName</span>)<span class="hljs-comment">;</span>\n  }\n}))<span class="hljs-comment">;</span>\n</code></pre>\n<p>It’s also worth pointing out that Radio has no direct dependency on Marionette, and can be used on any Backbone project.  For example, it might be an interesting tool to implement a Flux-style dispatcher in an application using Backbone and React. All of the benefits Radio provides can help any application with decoupled View components.</p>\n<p><strong>Thanks to the Marionette Teams for the diagrams above, which come directly from the Backbone.Radio <a href="https://github.com/marionettejs/backbone.radio">README</a>.</strong></p>\n<h3>More Resources</h3>\n<ul>\n<li>Although it’s focused on Node and backend use cases, <a href="https://www.youtube.com/watch?v=rWz8OoVuDls">this video</a> is a great rundown of semantic messaging patterns.</li>\n</ul>\n'}},function(e,t){e.exports={title:"Bayesian Witch Hunt",date:"2012-11-09 12:00:00+00:00",layout:"post",path:"/2012/11/09/bayesian-witch-hunt",category:"opinion",description:"A nerd tribute from a friend",pageViews:"85",last30pageViews:"1",body:'<p><a href="http://benhamner.com/2012/11/9/is-nate-silver-really-a-witch/">Ben Hamner: Is Nate Silver Really a witch?</a></p>\n<p>Funny nerd tribute from Ben</p>\n'}},function(e,t){e.exports={title:"BlendConf 2013: Takeaways From A Very Human Tech Conference",date:"2013-09-10 20:00:00+00:00",layout:"post",path:"/2013/09/10/blendconf-2013-takeaways-from-a-very-human-tech-conference",category:"software-productivity",description:"My takeaways from BlendConf",pageViews:"18",last30pageViews:"0",body:'<p>After 3 great days at <a href="http://blendconf.com/">Blendconf</a>, my brain is pretty overloaded with cool ideas. One of the cool things about the conference was seeing certain themes emerge across different sessions.  Here are three of my takeaways from a great weekend.</p>\n<h2>Modular Web Development</h2>\n<p>The biggest technical theme that I noticed in the different sessions I attended was a focus on modular design in JS and CSS. <a href="https://twitter.com/shayhowe">Shay Howe</a> gave a great workshop where he encouraged us to view CSS at a component level rather than at a page level.  That was followed by talks from <a href="https://twitter.com/jina">Jina Bolton</a> and <a href="http://wiseheartdesign.com/">John Long</a>, who reinforced the patterns that Shay had advocated for, and also showed how they could be implemented with preprocessors like SASS. <a href="https://twitter.com/vernonk">Vernon Kesner</a> also gave a great talk on using requireJS for modular Javascript.  That’s a relevant topic to me, since I’ve spent the last 2 months working to convert a large codebase to AMD modules, and Vernon did a great job explaining the motivation for modular JS.</p>\n<h2>Design and Development should not be separate processes</h2>\n<blockquote>\n<p>Design is how it works. – Steve Jobs</p>\n</blockquote>\n<p>One of the real key points that multiple speakers hammered home was the importance of having tightly bound design and development.  <a href="https://twitter.com/cameronmoll">Cameron Moll</a> talked about the importance of really understanding and being true to the things that you’re creating.  <a href="https://twitter.com/imathis">Brandon Mathis</a> argued convincingly that its important for designers to know their material.</p>\n<h2>Leave Things Better Than You Found Them</h2>\n<blockquote>\n<p>Aspire to change your world in some small but significant way --Cameron Moll</p>\n</blockquote>\n<p>I feel like this final point in some ways sums up what BlendConf is all about.  Its the result of <a href="https://twitter.com/bermonpainter">one man</a> thinking about how cool it would be to have a big-time tech conference in Charlotte and then going and making it happen, then going out and finding speakers who set a vision of a tech career that was about more than money.  <a href="https://twitter.com/carlsmith">Carl Smith</a> talked about his quest to find a more humane company structure.  <a href="https://twitter.com/ashedryden">Ashe Dryden</a> encouraged us to look for the people who are being excluded from tech culture and find ways to bring them in. <a href="https://twitter.com/greggyb">Greg Baugues</a> told us about how he’d worked through his bipolar disorder at least partially through the support of his coworkers and friends, while also showing that many people still don’t receive that support. Cameron Moll set the goal as “aspiring to change the world in a small but significant way.”</p>\n<p>Blendconf was the first major tech conference I’ve attended.  I wasn’t totally sure what to expect, but it defied whatever expectations I did have with it’s humanity. I’m excited to see that it is becoming an annual conference, and can’t wait to see where it goes from here.</p>\n<h2>A Great Summary From Twitter</h2>\n<div>\n<blockquote class="twitter-tweet"><p>The best part of <a\nhref="https://twitter.com/blendconf">@blendconf</a> wasn’t the device\npolicy or the talks, it was the uniformly awesome love and energy from\neveryone there.</p>&mdash; Tim Cheadle (@timcheadle) <a\nhref="https://twitter.com/timcheadle/statuses/376491690791817217">September\n7, 2013</a></blockquote>\n</div>\n'}},function(e,t){e.exports={title:"Book Review: Effective Javascript",date:"2013-01-06 22:00:00+00:00",layout:"post",path:"/2013/01/06/book-review-effective-javascript",description:"A book review of Effective Javascript by David Herman",keywords:"JavaScript, David Herman, Book Review, Effective JavaScript",key:"effective-js",category:"reviews",pageViews:"1622",last30pageViews:"2",body:'<p><img src="/posts/images/effectivejs.png" alt="Effective JS"></p>\n<p>After seeing some positive early reviews, I went to Amazon last week and bought “Effective JavaScript” by David Herman.  I’m glad that I did.  The book is a great experience for anyone who wants to deepen their understanding of the JavaScript language in a practical grounded fashion.</p>\n<h3>Whats the book like?</h3>\n<p>The subtitle of the book, “68 Specific Ways To Harness The Power Of JavaScript”, gives you a hint as to what it will be like.  The book contains 68 best-practice&quot;items&quot;, each an imperative sentence (Prefer Primitives to Object Wrappers, Get comfortable using Higher-Order Functions), divided into 7 chapters (Accustoming yourself to JavaScript, Variable Scope, Objects and Prototypes,  Arrays and Dictionaries, Library and API design, Concurrency).  Each of these items contains an in depth examination of why it is a best practice.  You could read through the table of contents and get something out of the book, but the heart of this book is the way that the author fully digs into each best practice, explaining not only why its a good idea but also what the exception cases are, and why it might be a good idea to break the rule.  The way the discussion of language attributes is grounded by the practical imperative statements, combined with the clear and concise explanations of the author makes everything feel extremely relevant.</p>\n<h3>Who is the book for?</h3>\n<p>This is a great book for people who are familiar with JavaScript, and maybe know some of the best practices, but want to deepen their understanding of how the language works and how to use it better.  This is not a comprehensive reference book, or an introductory text for people just starting with Javascript.  I would recommend <a href="http://www.amazon.com/gp/product/1118026691/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1118026691&linkCode=as2&tag=productjavasc-20">Professional JavaScript for Web Developers</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&l=as2&o=1&a=1118026691" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> and <a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0596517742&linkCode=as2&tag=productjavasc-20">JavaScript: The Good Parts</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&l=as2&o=1&a=0596517742" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> respectively for those cases.  This book will increase understanding, not knowledge of the syntax or basics.</p>\n<h3>What is good about the book?</h3>\n<p>The layered explanations are fantastic.  On the top layer the author gives you the <strong>specific</strong> best practices, then follows that with an explanation of the underlying reasons for these practices, gives examples of them in action, and following up with any cases where it might be best to use a different method.  The book communicates clearly and concisely about complex subjects.  The payoff is understanding.</p>\n<h3>What is not so great?</h3>\n<p>I felt the chapter on Library and API design was significantly weaker than the rest of the book.  Perhaps it’s because I’m not currently working on building a library, but these chapters felt less like deep explanations and more like quick writeups to justify the stating of the best practices.  The depth of the other explanations was not there.</p>\n<h3>Want to buy it?</h3>\n<p>Its available on <a href="http://www.amazon.com/gp/product/0321812182/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0321812182&linkCode=as2&tag=benmccormicko-20&linkId=HOPC6ZNKSVMH3NZ7">Amazon</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=0321812182" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />\n.</p>\n'}},function(e,t){e.exports={title:"Book Review: Javascript Testing with Jasmine",date:"2013-04-23 20:30:00+00:00",layout:"post",path:"/2013/04/23/book-review-javascript-testing-with-jasmine",description:"A book review of JavaScript Testing with Jasmine by Evan Hahn",keywords:"JavaScript Book Review JavaScript Testing with Jasmine",category:"reviews",pageViews:"102",last30pageViews:"0",body:'<p>I received a copy of Javascript Testing with Jasmine by Evan Hahn this week, and it seemed like perfect timing.  The developers on my team at work have been discussing using Jasmine to automate the testing of Javascript code in our product, and I may be spending a significant amount of time with it soon.  I was hoping to pick up on some tips and tricks, and maybe learn some things about testing.  It ended up being a quick read with some useful tidbits that left me wanting more.</p>\n<h3>What is it?</h3>\n<p>Javascript Testing with Jasmine is a short little book about testing with Jasmine, a testing framework inspired by the Behavior Driven Development style.  The book is short (only 52 pages), which is appropriate for its limited scope. It’s split into 7 chapters with each chapter comprised of a few pages of example and explanation:</p>\n<ol>\n<li>What is Software testing?</li>\n<li>Jasmine</li>\n<li>Writing good tests</li>\n<li>Matchers in depth</li>\n<li>More Jasmine Features</li>\n<li>Spies</li>\n<li>Using Jasmine with other tools</li>\n</ol>\n<h3>What’s it like?</h3>\n<p>Unfortunately the book manages to simultaneously feel like its filling space in many spots, and like it missed opportunities to provide value in others. Chapters 4 and 5 for instance fail to say much that is not already in Jasmine’s <a href="http://pivotal.github.io/jasmine//">“describe by showing”-style documentation.</a> Chapter 1 seems to be searching for interesting things to say about testing, and failed to meaningfully explain the distinction between BDD and generic Test Driven Development.  The section on Jasmine and Coffeescript in Chapter 7 could be succinctly summarized as “Yes you can use Jasmine with Coffeescript”.  At the same time, the book misses opportunities to talk about things like writing testable code, or refactoring existing code to be meaningfully tested with Jasmine. I would have loved to see more about automating testing and fitting it into the development process, or running tests from the command line with phantomJS.</p>\n<p>That’s not to say that there’s nothing good here.  I found the explanation of spies to be very helpful, and the detailed documentation-like aspects would be more helpful to a Javascript beginner than Jasmine’s <strong>“show me the code”</strong> docs.  All in all the book serves as a great reference guide for the library.  I’m just not sure how much value it adds compared to a quick Google search.</p>\n<h3>Summary</h3>\n<p>In the end this feels like the type of book that made sense before Google took over the Internet.  It provides all the basic how-tos and background information, but fails to provide any deep insight.  If you’re starting a new Javascript BDD project and want a quick reference this may make sense as a quick reference guide, but for most people the information in here can be found just as easily with a little use of your favorite search engine and a trip to the Jasmine docs.</p>\n<h3>Where can I buy it?</h3>\n<p>You can get it from Amazon here: <a href="http://www.amazon.com/gp/product/1449356370/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449356370&linkCode=as2&tag=benmccormicko-20&linkId=JTR6CUZAHM7HLHOQ">JavaScript Testing with Jasmine (Affiliate Link)</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=1449356370" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li><a href="http://pivotal.github.io/jasmine//">Jasmine Home Page</a> - Learn more about Jasmine straight from the source</li>\n<li><a href="http://blog.mediumequalsmessage.com/book-review-javascript-testing-with-jasmine">Medium Equals Message</a> - another review of the book from Chris Webb</li>\n</ul>\n<p>This review is part of the <a href="http://oreilly.com/bloggers/">O’Reilly Blogger Program</a>.  I am not compensated for this review, but did receive a free review copy of the book.  The opinions expressed here are my own.</p>\n'
}},function(e,t){e.exports={title:"Book Review: Talking with Tech Leads",date:"2015-06-15 11:30:44+00:00",layout:"post",path:"/2015/06/15/book-review-talking-with-tech-leads",description:"A book review of Talking with Tech Leads",keywords:"Book Review, Tech Leads",category:"reviews",pageViews:"1138",last30pageViews:"3",body:'<p>Can we be honest for a moment?  Figuring out a career path is hard for software developers.  Talking to some people, you’ll get the impression that we face a pretty bleak binary choice.  Behind door number #1 lies a relatively rapid path to a “senior developer” role, followed by stagnation the rest of your career as you reimplement the same solutions in new technologies for minimally increasing pay over time, until youth-friendly tech culture decides that you’re too old to be useful.  Door #2 serves basically as an escape hatch, as you trade the opportunity to work with code for a path into management, where you receive a few more pay raises in return for your soul.</p>\n<p><img src="/posts/images/twtl.png" alt="Talking with Tech Leads Cover"></p>\n<p>I’m not that cynical, and hopefully not that dramatic, but as a relatively young developer it’s been hard to figure out what I want from a career and harder still to know exactly what different options would look like if I got there.  I know that I love technology; at the same time I want to have real influence on the things that I’m building, and in most places it’s the product and people challenges that ultimately determine whether software projects succeed or fail, rather than the pure technical ones.  So what does it look like to build a career leading across these different areas? That’s the question that <a href="https://leanpub.com/talking-with-tech-leads?a=3a4Srv2pP9p87WQ_eoDoGp">Talking with Tech Leads</a> tries to answer.</p>\n<p>Talking with Tech Leads is an eBook about what it’s like to pursue a middle path between the two sides of the false dichotomy above.  It’s structured as a series of interviews with “Tech Leads”, which the author defines as <a href="https://www.thekua.com/atwork/2014/11/the-definition-of-a-tech-lead/">a developer leading a development team</a>.  Each interview shares a series of questions, as well as an open space for interviewees to share more freeform thoughts and advice.</p>\n<blockquote>\n<ul>\n<li>What should a Tech Lead focus on and why?</li>\n<li>What has been your biggest challenge as a Tech Lead?</li>\n<li>Any time-management tips?</li>\n<li>How do you strike the right balance between writing code and dealing with other issues?</li>\n</ul>\n</blockquote>\n<p>As you would expect from a series of nearly forty interviews with the same structure, there is plenty of repetition across answers.  Themes emerge quickly: a need to look beyond code for solutions without losing sight of your technical skills, the importance of enabling your team members to succeed, and the need to bridge the communication gap between technical and non-technical participants in a business.  At the same time it’s clear that many of these individuals view their roles drastically differently despite superficially similar job descriptions.  Some focus on leading people, some on software architecture, and some on aligning business and technical objectives.  What the interviews expose are a wide and varied set of niches that fall between the traditional “Senior Developer” and “Management” career paths.</p>\n<p>I have no idea how this book would read to a seasoned tech lead.  I expect that it would be affirming to see how others have approached similar challenges, but I’m not sure it does a good enough job pulling the various threads from the interview into practical insights to provide much tangible big picture advice for current tech leads.  Instead it would likely be a collection of small useful ideas and nuggets.</p>\n<p>For a developer like myself who is still figuring out what it looks like to have a career in this industry though, this book is a tapestry of ideas and possibilities.  I’d recommend it to anyone who’s been underwhelmed by the extreme career paths that serve as the “path of least resistance” in some organizations, and want to become leaders without sacrificing their roots.</p>\n<p><em>You can purchase Talking with Tech Leads as an e-book through <a href="https://leanpub.com/talking-with-tech-leads?a=3a4Srv2pP9p87WQ_eoDoGp">Leanpub</a> or as a paperback on <a href="http://amzn.to/1KQdC90">Amazon</a></em></p>\n'}},function(e,t){e.exports={title:"Book Review: User-Centered Design",date:"2013-08-12 15:15:00+00:00",layout:"post",path:"/2013/08/12/book-review-user-centered-design",description:"A book review of User-Centered Design by Travis Lowdermilk",keywords:"Book Review User-Centered Design",category:"reviews",pageViews:"25",last30pageViews:"0",body:'<p>User-Centered Design by Travis Lowdermilk is a solid overview of the principles and practices of designing a software project with a focus on your users.  The book does a good job of laying out the basic tools and processes of user-centered design, like usability studies, surveys, and project plans.  It also argues convincingly for the power  of its central points: user focus, preparation, and a structured process.</p>\n<p>If you’re looking for a deep dive into design theory, this is probably not a book you want.  Rather than dig into abstract design issues, this book instead acts as a survey of the user-centered design landscape, and points you to resources to go deeper if a particular topic catches your interest.  Lowdermilk also does a good job of pointing out examples of the different principles discussed, though for a stretch of the book he appears to be a bit fixated on a small selection of examples, particularly 53 Inc.\'s popular iPad app <a href="https://itunes.apple.com/us/app/paper-by-fiftythree/id506003812?mt=8">Paper</a>.</p>\n<p>I’d recommend this book for developers who want to open their minds to design considerations and improve their ability to make usable products.  It particularly seems suited for the engineer who knows technically how to implement features and write good code, but is still figuring out how to write applications that delight users.  I’d especially recommend it for team leads or independent developers who are more likely to be able to meet users and be a part of managing requirements.  I think all engineers could benefit from the books emphasis on the users point of view, but the real benefits will come to those who are able to make its suggestions part of the structure of their product workflows.</p>\n<p><a href="http://www.amazon.com/gp/product/1449359809/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449359809&linkCode=as2&tag=benmccormicko-20&linkId=5XN7KS7FCBFHZ54O">Buy User-Centered Design on Amazon (Affiliate Link)</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=1449359809" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<p>This review was part of the <a href="http://oreilly.com/bloggers/">O’Reilly Blogger Program</a>.  I am not compensated for this review, but did receive a free review copy of the book.  The opinions expressed here are my own.</p>\n'}},function(e,t){e.exports={title:"Building Complex Layouts With Marionette.js",date:"2014-12-22 04:43:47+00:00",layout:"post",path:"/2014/12/22/building-complex-layouts-with-marionette-js",description:"How to build complex UIs with Marionette.js",keywords:"Marionette, Backbone, UI, Architecture, JavaScript",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"24061",last30pageViews:"241",body:'<p><em>This is the third post in a series on <a href="http://marionettejs.com/">Marionette.js</a>.  For more background on what Marionette is, check out the first post in the series, <a href="http://benmccormick.org/2014/12/02/the-case-for-marionette-js/">The Case For Marionette</a>  Also note that this article was written about Marionette v2.  The current latest version of Marionette is v3, and while most of the high level concepts remain the same, the specific syntax has changed in some cases.</em></p>\n<p>When building complex web applications, many of the first decisions you have to make revolve around the structure and layout of your application. Most applications will have some static portions like navigations or footers, and some dynamic portions holding content or page specific controls.  A good layout manager will allow you to easily control these layouts, helping you keep structure consistent between pages and actions while swapping out content on changes in routes or data.</p>\n<p>Backbone provides Views as a way of managing the display of a web app’s UI.  But it doesn’t provide any guidance on how you should use them to construct complex layouts.  Should you have one view per page and control the layout with templates and jQuery?  Use one View for each section of the page?  Or have a top level view that creates child views to manage different sections?  All of these are possible with Backbone, and none of them are particularly encouraged or discouraged by the library design.  In fact because Backbone doesn’t provide any consistent conventions for managing subviews, rendering content, or attaching rendered content to the DOM, even projects that take the same approach to managing layout might implement these patterns quite differently.</p>\n<p>In my <a href="http://benmccormick.org/2014/12/02/the-case-for-marionette-js/">first post</a>, I talked about how one of the strengths of Marionette is the way it helps remove many of the decisions that Backbone developers have to make for each project by providing components based on community-tested patterns.  Layout is another area where Marionette can give you a standardized solution.  Marionette does this by providing Regions and by making it easy to manage child Views.</p>\n<h3>Layout in Marionette</h3>\n<p>Regions are the primary tool Marionette provides for defining layouts.  A Region is a defined portion of the page, held within a root DOM element. You can swap different Views in and out of Regions, or show one View and let it stay there permanently.  Like everything in Backbone applications, Regions emit events, which allow you to design functionality that is triggered before or after a region’s content changes.  Regions map very well to low fidelity layout wireframes like the one below, but they also can be used for organizing smaller components.  They’re an organization tool for attaching and removing Views in a consistent way.</p>\n<p><img src="/posts/images/marionette_regions-1.png" alt="Regions image"></p>\n<p>Regions really shine when it comes to child Views.  When you’re setting up Views in a normal Backbone application, you have to be very careful to avoid memory leaks by replacing a view without properly destroying it, especially for long-running SPA style apps. If you’re properly cleaning up Views when they’re destroyed, another thing that Marionette can help with, Regions remove that pain by ensuring that a View is properly destroyed if replaced in a Region, removing boilerplate and the opportunity for subtle memory bugs.  They also provide a clean central way to attach child Views, making it easier to maintain consistency across a project and promoting readability when moving into different code.</p>\n<h3>LayoutView</h3>\n<p>Regions are great, but for the most part you’re not going to want to use them directly.  Instead, Marionette provides a special View class, LayoutView.  LayoutViews allow you to build View tree hierarchies.  You can have one top level View that controls the entire page, or a section of the page that your Marionette app lives in.  That root view can then contain Regions which you use to show child Views.  Some of those child Views may themselves be LayoutViews, and so on for as many levels as you like.  This setup allows you to create modular View classes with few responsibilities that you can easily replace or update without having to write a lot of boilerplate code.</p>\n<p>That’s the high level overview, but let’s dig into what the code looks like.  To use regions in a LayoutView, we don’t have to directly create them.  Instead we define a regions object that works similarly to the events object on normal Backbone Views.  The regions object takes a Region name as a key and a jQuery selector as a value, and then create Region objects for each key-value pair and attach them to the View.  If you need to do something more complicated you can create a regions function that returns an object with the key-value pairs that you would like.  Here’s an example of what a LayoutView might look like in practice.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> Mn = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'backbone.marionette\'</span>);\n<span class="hljs-keyword">var</span> Radio = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'backbone.radio\'</span>);\n<span class="hljs-keyword">var</span> FooterView = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'views/footer\'</span>);\n<span class="hljs-keyword">var</span> HeaderView = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'views/header\'</span>);\n<span class="hljs-keyword">var</span> IndexView = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'views/index\'</span>);\n\n<span class="hljs-keyword">var</span> RootView = Mn.LayoutView.extend({\n\n  <span class="hljs-attr">regions</span>: {\n    <span class="hljs-attr">header</span>: <span class="hljs-string">\'#navbar\'</span>,\n    <span class="hljs-attr">content</span>: <span class="hljs-string">\'.content-area\'</span>,\n    <span class="hljs-attr">footer</span>: <span class="hljs-string">\'footer\'</span>\n  },\n\n  <span class="hljs-attr">initialize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    Radio.channel(<span class="hljs-string">\'root\'</span>).comply(<span class="hljs-string">\'set:content\'</span>,<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">contentView</span>) </span>{\n        <span class="hljs-keyword">this</span>.getRegion(<span class="hljs-string">\'content\'</span>).show(contentView);\n    });\n  },\n\n  <span class="hljs-attr">onBeforeShow</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">this</span>.getRegion(<span class="hljs-string">\'header\'</span>).show(<span class="hljs-keyword">new</span> HeaderView());\n    <span class="hljs-keyword">this</span>.getRegion(<span class="hljs-string">\'footer\'</span>).show(<span class="hljs-keyword">new</span> FooterView());\n    <span class="hljs-keyword">this</span>.getRegion(<span class="hljs-string">\'content\'</span>).show(<span class="hljs-keyword">new</span> IndexView());\n  }\n\n});\n\n</code></pre>\n<p>This is an example of a RootView that could be shown in a standalone Region and used as the top-level of a View hierarchy.  There are a few things to note about this example.  It defines 3 regions, a header and footer that render static Views, and a content area that originally contains an index View.  The initialize function uses Backbone.Radio to listen for commands and can swap out the View held in the content region when commanded. Those views could be swapped based on users navigating to a new route, with the routes initializing the Views and passing the commands, or based on a data change of some type.  We can also see that the child Views are shown within the onBeforeShow callback.  I’ll be discussing View life-cycle methods more in my next post, but for now just know that onBeforeShow runs immediately before a View is shown in a region.  You can use it when nesting your Views in order to make sure your Views are only attached to the DOM once, which prevents the browser from having to repaint the window multiple times.</p>\n<h3>It’s Turtles All The Way Down</h3>\n<p>The great thing about Marionette’s View system is that you can take the 3 Views I’ve gone over in my last 2 posts, ItemView, CollectionView, and LayoutView, and use them to represent pretty much any layout you’d like.  The basic rules: LayoutViews are used to structure the page into regions and regions into subregions. ItemViews are used to bind data to a UI, and CollectionViews are used to iterate over a Collection when each item in a Collection has complex data or behaviors associated with it and should be bound to an individual View or View tree<sup id="fnref:1"><a href="#fn:1">1</a></sup>. This consistency makes it easy to learn how to structure Marionette apps, and makes it simple for experienced Marionette developers to jump into a new project quickly and get their bearings.  That’s really the promise of Marionette in a nutshell: consistent patterns that allow for a better development experience.</p>\n<h3>More Resources</h3>\n<ul>\n<li>For more on nesting Marionette Views, you can check out <a href="https://www.youtube.com/watch?v=CTr-tTwRH3o">this talk</a> by Marionette core team member Sam Saccone.  It’s a quick 10 minute video covering much of the same stuff I went through here.</li>\n<li>I’ll talk more about this in a future post, but if you have a Marionette app and want to visualize your View hierarchy, <a href="https://github.com/marionettejs/marionette.inspector">Marionette Inspector</a> is a great new tool for debugging Marionette apps, and it’s primary developer, Jason Lastner gave a <a href="https://www.youtube.com/watch?v=jbGm3mJXh_s">great talk</a> describing how to use it at BackboneConf this week.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Marionette also contains a 4th View type, CompositeView.  But it\'s essentially a helper for the case where you want to display a CollectionView inside a region of a LayoutView, and isn\'t strictly necessary.  Technically you can also use LayoutViews to replace ItemViews, but the semantic difference is useful for encouraging readability.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Career Fairs: How To Not Get Hired (And How To Give Yourself A Chance)",date:"2013-01-25 19:30:00+00:00",layout:"post",path:"/2013/01/25/career-fairs-how-to-not-get-hired-and-how-to-give-yourself-a-chance",description:"What to do when you want a job",category:"opinion",pageViews:"70",last30pageViews:"1",body:'<p>It was 9:15 and I had just arrived at the gym where the career fair was set to start at 10:00.  Company representatives were setting up their wares in the background and enjoying the provided bagels and coffee, chatting with each other before the rush set to begin at 10.  Arriving at my company’s booth, I tossed my bag down and leaned over to fill out a name tag.  As I stood up, I was greeted by a sheet of paper being shoved in my face.  “Here is my resume!” Bob said as he transferred the paper from my face to my hands.  I was then greeted with a 2 minute monologue explaining why Bob would be the perfect candidate to work for my company.  Eventually I was able to get a word in edgewise, introduce myself, and ask him to come back in 45 minutes when the fair started.  As I walked over to get my much needed bagel, I reflected to myself that Bob would really have to be super impressive to get an interview when he came back to our booth.</p>\n<p>Career Fairs should not be hard.  When recruiters come to a career fair, it is with the sole mission to find students who they can interview for jobs.  When students come to career fairs, they do so to find a company willing to give them a job.  But a lot of the time both sides leave disappointed. I received my first interview for my current company at a career fair, and have now worked at several as a recruiter. There is plenty that can be said about how recruiters can improve in how they reach out to students and other candidates.  But in this post I’d like to point out a few simple things that students can do (or not do) to stand out from the crowd and give themselves their best chance for an interview.</p>\n<h4>Prepare</h4>\n<p>This is repeated a lot by career counselors, and I think its hard to understand from the student point of view sometimes.  Students think of career fairs as a place to learn about companies.  And thats valid to some extent.  Certainly for younger students its a great way to see what options are out there.  But as a recruiter the first thing I want to know about a student is “what type of position are you interested in”  If they can’t answer that question, no matter how impressive they are, I would be hesitant to give them an interview.</p>\n<p>Preparing for a career fair means knowing what you want, and having at least some idea who might be able to help you get it.  There’s fairly little I can do to help a student who comes up to me and asks “So do you guys have any jobs that don’t involve technology?” which is actually probably the most common question we receive.  There’s much more that we can say to help a student who comes to us and tells us that they’re interested in marketing, or environmental concerns, or really anything else specific.  The second student lets us picture how they could fit in and help our organization, the first student just emphasizes how they don’t fit.</p>\n<h4>Never apologize for yourself</h4>\n<p>This may be the biggest problem that students have communicating with recruiters.  Perhaps because of the perception of a loaded job market, students seem much more aware of how their resumes fall short compared to their peers rather than how they stand out.  Unfortunately they tend to convey this to recruiters rather frequently.  Bob’s early morning greeting certainly had its issues, but one thing that he did really well was emphasize what he would bring to our company.</p>\n<p>Something that students fail to understand is that recruiters are usually looking for reasons to like an applicant.  They will take a chance on a candidate with weaknesses on his resume if he or she is genuinely able to show how they can fit into a company.  What is a lot harder to work with is a large assortment of candidates who all have good GPAs, some reasonable experience, and absolutely nothing to differentiate themselves from others.  In an interview setting a student will probably have to explain any weaknesses on their resume.  But a career fair is not an interview.  Its an opportunity to make an impression.  That happens when a student shows that they will bring something positive and useful to the company.</p>\n<h4>Take chances, and learn from your mistakes</h4>\n<p>One of the great things about career fairs is that you have the opportunity to instantly apply new lessons you’ve learned.  Recruiters don’t have some sort of group social network that they’re keeping profiles of you on.  If you go to one company’s booth and have a bad conversation, that doesn’t follow you around to the rest of your interactions with companies unless you let it.  Instead you can learn from your mistakes and hopefully get more comfortable and confident as you get more used to how career fair interactions work.</p>\n<h4>Don’t try to cheat the process</h4>\n<p>Our early morning encounter was not the last I saw of Bob that day.  He came back an hour later and I got to hear another, slightly toned down, explanation of why he would be perfect for my company.  I asked him a few questions and as we wrapped up I told him we would take his resume and be in touch if we were able to offer him an interview.  He asked if I would be able to sign him up for an interview right then.  When I said that I could not, he then asked if he could talk to my coworker who was also recruiting for the same position.  I politely told him that I couldn’t stop him, but that I’d prefer that he left him free to talk with other candidates, and that I’d be happy to answer any more questions he had.  He said that it was fine and walked away.  Five minutes later, I looked over to see my coworker being treated to Bob’s full explanation of why he would be a great candidate.</p>\n<p>Assertiveness is in no way a bad thing.  But being able to accept a no and learn from it is also important.  Recruiters will generally be happy to tell a candidate how they could work to be a better candidate for their job, and some may even be willing to meet or exchange emails outside the fair setting to work with a candidate.  If you don’t receive an interview, building a relationship can be an even better outcome of meeting with a recruiter at a career fair.  But trying to subvert the system will pretty much guarantee that you end up with neither.  Other examples of this include trying to badger a recruiter for information they’ve said they don’t know or can’t give, talking down other candidates, or (more obviously) lying about your qualifications.</p>\n<h4>Pay attention</h4>\n<p>I received this advice from a speaker at Carnegie Mellon before I went to the career fair that ended up leading to my first fulltime job.  It turned out to be the best thing he could have said to me.  When you’re in line to talk to a recruiter at a career fair, pay attention to the situation.  What type of questions are they asking candidates?  Are they mostly giving information, or trying to ask more interview style questions.  <a href="http://www.amazon.com/gp/jobs">Some companies</a> will even ask technical questions at a career fair, and thats certainly something that you would want to know before you start talking to them.</p>\n<p>In my case by listening I was able to learn that the recruiter I was interviewing was frustrated by the lack of Computer Science candidates he was meeting that day, and particularly frustrated that he was having to turn away qualified international students because he had a limit on how many candidates his company could sponsor for overseas work.  When it was my turn to talk to him I was able to open by telling him that he could “accept or reject me on my own merits”, and then focused on telling him about my undergraduate computer science degree, with a lesser emphasis on my more management focused graduate program.  As a result I was able to open a personal connection and present myself as an answer to his frustrations,  whereas coming in unaware I may have set myself up as just another student in the wrong degree program who was less of a fit than the international students he was having to send away.</p>\n<h4>Don’t forget that recruiters are human</h4>\n<p>The first 5 points all point to this last one.  Preparation is a way of showing recruiters that you value their time.  When you present yourself as meeting a need rather than apologizing, you’re helping them solve their problem.  You can take chances at career fairs because recruiters are not automatons blindly picking the best resumes, and relationships and personal interaction actually matter.  You shouldn’t cheat the process, because in doing so you’re treating other human beings disrespectfully.  And you should pay attention because when you don’t you’re forgetting that this is a human interaction, and missing out on much of what is involved in it.</p>\n<p>Bob’s biggest mistake was forgetting that he was dealing with a human being.  When he approached me in the morning it was with no awareness of my frame of mind or personal preferences.  He was on a mission to get a job.  But he severely sabotaged his efforts by overlooking the human factors of context, mood, and etiquette.  If you can treat a recruiter as a human being, you’ll find that they are much more likely to be your ally in getting a job.</p>\n'}},function(e,t){e.exports={title:"Cleaning My Digital House",date:"2012-12-29 01:00:00+00:00",layout:"post",path:"/2012/12/29/cleaning-my-digital-house",description:"Organizing what software I use",category:"meta",pageViews:"184",last30pageViews:"0",body:'<p>I’m cleaning my digital house this new year.  I’ve been a confessed addict to trying new services and hardware for some time now.  While I don’t think there’s anything wrong with trying new things and figuring out what you like best, I was beginning to suspect that my experimentation was causing me to be less efficient than I expected.  After reading Chris Webb’s <a href="http://blog.mediumequalsmessage.com/goodbye-ubiquitous-digital-service?utm_source=feedburner&amp;utm_medium=feed&amp;utm_campaign=Feed%3A+mediumequalsmessage%2Fcwebbdesign+%28cwebbdesign%29">excellent post</a> on rethinking his digital services and rereading Alex Payne’s <a href="http://al3x.net/2008/09/08/al3xs-rules-for-computing-happiness.html">Rules for Computing Happiness</a>, I decided to take inventory of my computing services.  The results were… illuminating.</p>\n<h3>Bad Habits</h3>\n<p>Over the past year and a half I have used the following software extensively (used as a main solution for some use case for at least a month):</p>\n<ul>\n<li>5 Desktop Operating Systems (Windows 7, Windows 8, OSX, RHEL, Ubuntu)</li>\n<li>2 Mobile OS’s (Windows Phone 7, iOS)</li>\n<li>3 Browsers (Chrome, Firefox, IE9/10)</li>\n<li>3 Desktop Music Clients (iTunes, Zune, Spotify)</li>\n<li>5 Code Editors (Eclipse, Notepad++, Sublime Text 2, Visual Studio, VIM)</li>\n<li>6 Desktop/web Email Clients (<a href="http://Gmail.com">Gmail.com</a>, <a href="http://Outlook.com">Outlook.com</a>, Outlook, Thunderbird, Mail.app, Sparrow)</li>\n<li>6 Task Management Apps: Things, Omnifocus, Wunderlist, Remember the Milk, Clear, Nirvana (And I downloaded a bunch more)</li>\n<li>3 Note taking solutions (Evernote, OneNote, text notes in markdown)</li>\n<li>4 Blogging Platforms (Blogger,Wordpress, Tumblr, Self-build Django Blog)</li>\n<li>Saving Content For Later (Instapaper, Email, Chrome bookmarks)</li>\n</ul>\n<p>… I could keep going.</p>\n<p>I decided last week that I wanted to simplify the services that I used for the different use cases I’d identified during my inventory.  I then wanted to simplify those services according to the following rules.</p>\n<h3>Ben’s Software Rules</h3>\n<ol>\n<li>Use as little software as possible (this is Alex’s first rule, and I think its his best)</li>\n<li>Learn the software I do use (using 100 different things has not let me go deep into any of the software that I use)</li>\n<li>Pay to own and control my content</li>\n<li>Use software that works together across platforms well</li>\n</ol>\n<h3>A new leaf</h3>\n<p>After looking backwards, I took a look at the things I’m doing with my software and asked: “Do I control my content?”, and “Is there a way this could be simpler?”.  I put the result of my software inventory <a href="https://gist.github.com/ben336/6b80e52a12204e5b449b">here</a>.  In the end I settled on a small(er) subset of the software and services I’d used before, and committed to using that subset for 2013. Rather than sampling every single new thing, I’m going to work on getting the most out of some of the great software and services that are already available to me, and use my apps as tools rather than toys.</p>\n'}},function(e,t){e.exports={title:"Coffeescript Is Great",date:"2013-02-23 23:50:00+00:00",layout:"post",path:"/2013/02/23/coffeescript-is-great",category:"javascript",pageViews:"1024",last30pageViews:"0",body:'<p>This past week I decided to try and learn more about <a href="http://coffeescript.org/">Coffeescript</a> by converting a side project I’ve been working on to use Coffeescript and LESS.  I really enjoyed the experience of working with Coffeescript and hope to use it more in the future. I thought I’d share a quick post about my experience, and outline what I see as the advantages and disadvantages.</p>\n<h3>What is Coffeescript?</h3>\n<p><a href="http://coffeescript.org/">Coffeescript</a> is a programming language with a Ruby-like syntax that compiles transparently into readable, best-practice Javascript.  To break that down:</p>\n<h4>It’s a language with Ruby-like syntax</h4>\n<p>Coffeescript features a short concise syntax with significant whitespace, short operators for many common actions, and syntax that encourages a pseudo-english style of coding.  For instance <code>if empty page then fill page else read page</code> would be valid syntax for calling a function <code>empty()</code> on an object <code>page</code> and then calling the <code>fill</code> method on it if it was empty or the <code>read</code> method if it was not.</p>\n<h4>It compiles to readable best-practice Javascript</h4>\n<p>The coffeescript compiler generates Javascript that is easy to read and avoids common pitfalls like unexpected casting with the <code>==</code> operator.</p>\n<h4>It compiles transparently</h4>\n<p>The generated javascript also matches up in a 1-1 relationship with the coffeescript source, so it’s still easy to debug and understand what coffeescript is related to the associate Javascript.  I’m also excited to try out the <a href="http://ryanflorence.com/2012/coffeescript-source-maps/">Coffeescript source maps</a> for Chrome and bypass this issue completely by debugging directly on the Coffeescript, but haven’t had the opportunity to set this up yet.</p>\n<h3>What I like about Coffeescript</h3>\n<h4>It’s super concise</h4>\n<p>I love writing short code.  Brevity and readability aren’t <strong>exactly</strong> the same thing, but they often overlap, and it’s usually easier to debug code when there’s less of it, all things being equal.  Coffeescript allows you to write less boilerplate.  An easy example is checking whether an element exists. Compare the JS implementation below to the equivalent Coffeescript.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">if</span>(el !== <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-keyword">typeof</span> el ?== <span class="hljs-string">\'undefined\'</span>){\n    <span class="hljs-comment">//do something with el</span>\n}\n</code></pre>\n<pre><code class="language-coffeescript"><span class="hljs-keyword">if</span> el?\n  <span class="hljs-comment">#do something with el</span>\n</code></pre>\n<h4>It doesn’t look like Java</h4>\n<p>This is a bit counterintuitive coming from a guy who learned programming through Java and has never written a line of Ruby, but I think Javascript’s “Java-like” conventions are usually detrimental.  It has curly brace blocks, but not block level scope. It has constructors but not classical inheritance.  It’s possible to write valid code that looks exactly like Java in Javascript, and not understand why the behavior is slightly different than you expect.  Coffeescripts syntax feels less likely to lead you down a bad road.</p>\n<h4>It avoids the “bad parts” of Javascript</h4>\n<p>Javascript has some “features” that cause more problems than they’re worth, including the <code>==</code> operator, automatic semicolon insertion, and the <code>with</code> statement.  Coffeescript either avoids these parts completely, or helps the programmer navigate them without having to think about it.  So you can still write your while statements by dropping into normal Javascript code if you must, but Coffeescript won’t make it easy.</p>\n<h3>What I didn’t like so much</h3>\n<h4>Debugging is slower</h4>\n<p>While it’s certainly much better than it could be due to the transparent compilation, debugging in coffeescript still means that you’re debugging a “product” of your code, not the code itself.  That level of abstraction has a cost.  That cost will vary depending on your experience, code style and tooling (certainly source maps have potential to minimize it), but it will exist, and it needs to be factored in to any language decisions.</p>\n<h4>Function Parameters without Parentheses</h4>\n<p>Coffeescript lets you write function parameters without parentheses.  While this allows the cute <strong>sentence-like</strong> one liners that they demonstrate on their website, in practice I’ve found it to really hurt readability.  It’s often not clear where the function begins and ends, especially if you’re nesting function calls.  Coffeescript is also not consistent in how it applies these rules, because in some cases you DO have to use parentheses.  When declaring a function you must use parentheses if there are 1 or more arguments.  When calling a function you must use parentheses if there are no arguments.    I’ve found that I struggle to read function calls if there are more than 1 parameters without parentheses.  As a result I’ve used parentheses everywhere there is one or more parentheses, and for now on I’m planning on including them even for single param functions just to be consistent.</p>\n<h3>Conclusions</h3>\n<p>I’m very glad I tried Coffeescript.  I think it definitely has its place as a concise syntax on top of Javascript that especially makes sense for larger projects where the investment in adjusting to it will pay off over time.  I overall think it adds readability and maintainability from Javascript, though it is by no means perfect in either area.  I’m excited to see what happens with this language going forward.</p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li>\n<p><a href="http://ryanflorence.com/2011/case-against-coffeescript/">The Case Against Coffeescript</a> - a good roundup of some valid criticisms of Coffeescript, especially with regard to readability</p>\n</li>\n<li>\n<p><a href="http://coffeescript.org/#try:alert%20%22Hello%20CoffeeScript!%22">Interactive Coffeescript Compiler</a> - If you want to mess around with Coffeescript, their website has an interactive compiler that translates your Coffeescript to Javascript side by side.  There is also a full tutorial breaking down the languages syntax.</p>\n</li>\n</ul>\n'
}},function(e,t){e.exports={title:"Come Build With Me",date:"2014-12-18 14:00:00+00:00",layout:"post",path:"/2014/12/18/come-build-with-me",description:"A call for Software Developers to come join me at Windsor Circle",category:"meta",pageViews:"697",last30pageViews:"1",body:'<p>One of the blessings of starting this blog has been the opportunity to answer questions, debate, and learn from the amazingly knowledgeable people who have read my posts.  I’ve talked with so many developers who have incredible enthusiasm for software development and the web platform.  If that’s you, I have a cool opportunity I want to share.</p>\n<p>I try to stay on-topic on this blog and don’t talk about myself very much, but last winter I joined <a href="http://www.windsorcircle.com">Windsor Circle</a>, a tech startup in Durham North Carolina. We’re a software as a service company focused on helping marketers retain their customers.  Since joining, it’s been a crazy ride.  Last April, we were selected as the winner of <a href="https://www.googleforentrepreneurs.com/startup-communities/the-tech-hub-network-demo-day/">Google’s “Tech Hub Demo Day”</a>, a competition where Google brought in 10 leading startups from around the country and gave them the opportunity to pitch to an auditorium full of Silicon Valley venture capitalists.</p>\n<p>This summer we followed that up by raising 6.5 million in Series B funding, and we’re now growing rapidly.  Part of that growth is building out our front end development team, and we have a Front End Developer position that is open now.</p>\n<p>I want to work with great people, so here’s my no BS pitch to any JavaScript developers out there.</p>\n<ul>\n<li>\n<p>Come live (stay?) in Durham NC, get great weather, big city resources for small city cost of living, and amazing food <sup id="fnref:1"><a href="#fn:1">1</a></sup>.</p>\n</li>\n<li>\n<p>Work with a small but growing development team that has a good mix of senior and less experienced developers.</p>\n</li>\n<li>\n<p>Help build and shape an ambitious web app built with Backbone and Marionette.js on top of a Python backend</p>\n</li>\n<li>\n<p>Work with a <a href="http://www.windsorcircle.com/team">team</a> that has a lot of fun while taking care of their work like professionals and places a genuine emphasis on the <a href="http://www.windsorcircle.com/about-us/our-values">company’s values.</a></p>\n</li>\n<li>\n<p>You can even get paid for all of this.</p>\n</li>\n<li>\n<p>Finally, if you’re interested, we’re open to a mix of experience levels.  The main thing we want to see is JavaScript and programming knowledge that matches up to where you are right now, and an enthusiasm for building things on the web.</p>\n</li>\n</ul>\n<p>In all seriousness, if this sounds interesting to you, feel free to get in touch <a href="mailto:ben.mccormick@windsorcircle.com">by email</a> or on <a href="http://www.twitter.com/ben336">Twitter</a>.  You can also see the full job description and apply directly <a href="https://hire.jobvite.com/Jobvite/Job.aspx?b=nMUoipwg&amp;j=oZqQZfwY">on jobvite</a>.</p>\n<hr>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Durham\'s been getting <a href="http://www.newsobserver.com/2014/08/14/4071138_durham-gets-more-love-from-bon.html?rh=1">national attention</a> for its food scene for several years now.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Component Based Development",date:"2014-08-07 11:30:00+00:00",layout:"post",path:"/2014/08/07/component-based-development",category:"platform",key:"component-based-dev",description:"Exploring the Web Components spec, and the future of web architecture",readNext:"custom-elements-example",pageViews:"8824",last30pageViews:"50",body:'<p>If you look back at the history of JavaScript and the client-side web as a development platform, you can see that there were several critical turning points for the language. Javascript has evolved from a <a href="http://www.computer.org/csdl/mags/co/2012/02/mco2012020007.html">10-day toy language</a> to possibly the <a href="http://adambard.com/blog/top-github-languages-for-2013-so-far/">most used language in the world</a>, but that didn’t happen overnight.</p>\n<p><img src="/posts/images/timeline.png" alt="JavaScript timeline"></p>\n<p>JavaScript’s growth started with its adoption as the lingua franca of the web when it shipped with Netscape and Internet Explorer in the 90s.  The introduction of Ajax and asynchronous data exchange in the mid-aughts was another sea change, bringing the potential for truly responsive web applications like Gmail for the first time.  <a href="http://jquery.com/">jQuery</a>’s introduction in 2006 dramatically reduced the pain involved in cross-browser development for rich applications. And the last 5 years have brought 2 more major changes with <a href="http://nodejs.org/">Node.JS</a> and a <a href="http://blog.stevensanderson.com/2012/08/01/rich-javascript-applications-the-seven-frameworks-throne-of-js-2012/">raft of MVC frameworks</a>.  NodeJS is a server-side technology, but it has spurred a huge standardization and improvement in tooling for the web platform. That, along with great work by browser vendors on their developer tools, has led to drastically easier workflows for front end developers.  At the same time, frameworks like BackboneJS, AngularJS and EmberJS have brought architecture concepts to the client-side and made a new type of “Single Page App” possible and easy to build.</p>\n<p>Those 5 shifts, along with other significant events like Google’s creation of Chrome and the rise of mobile, have shaped the web development world as we see it today. Depending on who you listen to though, we may be on the cusp of another pivotal moment.</p>\n<p><em>Component Based Development</em> is a blanket term I’m using to describe a movement that has been growing over the past year in web development.  The results of this movement have taken several forms.  There’s an <a href="http://www.w3.org/standards/techs/components#w3c_all">official W3C standard</a>, Web Components, that will eventually be available in all browsers natively.  That standard has polyfills, which allow developers to begin using Web Components now, along with convenience extensions.  Several existing MVC frameworks have provided component features inspired by the Web Component spec.  And there are alternative component implementations, which embrace the ideas behind component based development without embracing the specific implementation of Web Components.</p>\n<h3>So what is Component Based Development?</h3>\n<p>The heart of the component based development movement is a desire to provide greater code reusability and abstraction by bundling functionality into small composable components.  JavaScript applications started as monoliths.  The language doesn’t provide private attributes by default, and applications were initially mostly small, so everything lived in the global scope.  As applications have become more complex, this has changed, first with namespacing, then with the module pattern, and again with module loaders like requireJS and Browserify.  The features mapped out by the Web Components standard will build on this trend.  Component based development in general is the natural conclusion of the march to modularity.  Components are intended to be “black box” building materials.  They have an API, but the developer doesn’t need to know about the internals, and ideally can’t take advantage of that knowledge regardless.</p>\n<p>Talking about this type of abstraction is nothing new.  Whether you’re using the module pattern or Backbone Views, it’s always been a best practice to keep internal implementations hidden.  But web components in particular give this more teeth, by discouraging external CSS and Javascript from accessing the internal dom tree of the element. Other implementations can’t rely on that native split yet, but they similarly promote a declarative style that discourages tightly coupled micro-managing code.</p>\n<p>Components also have the potential to provide greater readability.  Compare Google Map’s current <em>Hello World</em> example, with a web component powered alternative:</p>\n<pre><code><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css">\n      <span class="hljs-selector-tag">html</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span> }\n      <span class="hljs-selector-tag">body</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> }\n      <span class="hljs-selector-id">#map-canvas</span> { <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span> }\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>\n      <span class="hljs-attr">src</span>=<span class="hljs-string">"https://maps.googleapis.com/maps/api/js?key=API_KEY"</span>&gt;</span><span class="undefined">\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript">\n      <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initialize</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">var</span> mapOptions = {\n          <span class="hljs-attr">center</span>: <span class="hljs-keyword">new</span> google.maps.LatLng(<span class="hljs-number">-34.397</span>, <span class="hljs-number">150.644</span>),\n          <span class="hljs-attr">zoom</span>: <span class="hljs-number">8</span>\n        };\n        <span class="hljs-keyword">var</span> map = <span class="hljs-keyword">new</span> google.maps.Map(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"map-canvas"</span>),\n            mapOptions);\n      }\n      google.maps.event.addDomListener(<span class="hljs-built_in">window</span>, <span class="hljs-string">\'load\'</span>, initialize);\n    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"map-canvas"</span>/&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<pre><code><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"viewport"</span> <span class="hljs-attr">content</span>=<span class="hljs-string">"initial-scale=1.0, user-scalable=no"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"import"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"google-maps.html"</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">google-map</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">google-map</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>\n</code></pre>\n<p>Quite a readability difference right?  Of course all of that Javascript and CSS didn’t simply vanish.  It still needs to exist somewhere, in this case within an imported HTML file.  But it can be encapsulated and looked at only when necessary.  The user who’s just glancing at your template can get a big picture view when she needs it, and then know where to dive in when she’s specifically interested in your mapping technology.</p>\n<p>In the end this is just another way of managing complexity.  There is unavoidable complexity associated with connecting to the Google Maps API and styling the map appropriately.  But when that complexity sits inside an element, it reduces the cognitive load of looking at HTML. That allows you to focus on the semantic meanings of element and the document structure. This kind of clarity is much nicer than our current status quo of searching  through a Javascript modified “div soup” to figure out how our generated DOM is structured.  With current MVC frameworks the HTML may tell you nothing about the final DOM without going through several Javascript files.  The transparency of components is a reclamation of one of the Web’s original central advantages: a semantic markup language that was both human and machine readable.  The tension between the needs of web “documents” and “applications” has slowly eroded the Web’s declarative foundations, but component implementations do their best to embrace it.</p>\n<h3>So Why Should I Care?</h3>\n<p>Did that introduction excite you?  Or are you sitting there yawning?  You may think this is solving problems you don’t have. You also might be the guy still supporting IE8, who can’t even contemplate worrying about “Web Standards” if they aren’t even supported in IE11.  If that’s you, it’s still worth following this movement, even if you’re not coding like this just yet on your current projects.</p>\n<p>For one thing, the component based mentality is already having a big effect on the crop of frameworks that people are using <strong>now</strong>.  EmberJS and Angular have supported component-like features for a while now.  KnockoutJS (which supports back to IE6!) is about to release significant support for a component-based development strategy. And the latest JavaScript Framework darling, Facebook’s ReactJS, is a completely component based library that supports browsers back to IE8.</p>\n<p>Component based development has also gained significant support in the community.  I already mentioned the strong support from existing libraries, but there’s more to it than that. <a href="http://facebook.github.io/react/">Facebook</a>, <a href="http://www.polymer-project.org/">Google</a>, and <a href="http://mozbrick.github.io/">Mozilla</a>, three of the web’s foundational companies, have all released component based libraries.  Google’s Polymer library in particular has been featured as the center of their web developer tooling lately.  Web Components are already supported in Chrome and Firefox.  Along with the community support and the trend towards auto-updating browsers, this is likely to be a relevant every-day technology sooner than you may think.</p>\n<h3>The Takeaway</h3>\n<p>2014 is an interesting time for web development.  There’s a lot to be excited about, as the component paradigm is leading to a lot of interesting experiments that create new possibilities.  Ideas like React’s Virtual DOM and Polymer’s completely declarative application structures are going to be tested and tried, and we’re likely to be better off in the end.</p>\n<p>There’s also plenty to be skeptical about.  The lack of any known support for Web Components in Safari or IE is troubling.  While Polymer’s “everything is an element” philosophy is fascinating, I suspect that we’ll look back and see it as an example of taking a good idea too far.  And like any technology, until it’s been proven in production, we can’t really know how these technologies will evolve.</p>\n<p>For anyone invested in the Web Platform, it’s time to be informed. Regardless of where each individual spec goes, the ideas behind this movement are going to influence our professions for years to come.  Over the next month or so, I’m going to be diving deep into the current state of components, taking a look at the various aspects of the Web Component spec and also looking at the various libraries that are providing their own take on component based development. I hope you’ll come along, and help grow the conversation about the future of the web platform.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>In <a href="http://addyosmani.com/blog/the-webs-declarative-composable-future/">The Web’s Declarative, Composable Future</a> Addy Osmani lays out a manifesto for component based development, and Web Components in particular.  If you’re struggling to understand why somebody would want Web Components, this is the piece to read.</p>\n</li>\n<li>\n<p>TJ VanToll reminds us that <a href="http://developer.telerik.com/featured/web-components-arent-ready-production-yet/">Web Components Aren’t Ready For Production… Yet</a> on Telerik’s Developer Blog.  He does a good job of higlighting the browser support issues along with the difficulties of polyfilling this particular technology.</p>\n</li>\n<li>\n<p>This <a href="https://github.com/knockout/knockout/issues/1273">Github discussion</a> is an interesting look into the thought process of why a traditional MVC library would be interested in providing component features, and the value they bring.</p>\n</li>\n</ul>\n'}},function(e,t){e.exports={title:"Creating a Build System For a Coffeescript Project with Ant",date:"2013-03-23 16:23:00+00:00",layout:"post",path:"/2013/03/23/creating-a-build-system-for-a-coffeescript-project-with-ant",description:"Using Ant to build my coffeescript projects",category:"tools",pageViews:"421",last30pageViews:"8",body:'<p>I’ve recently taken the time to develop an organized build system for a <a href="http://Coffeescript.org/">Coffeescript</a> and <a href="http://sass-lang.com/">SASS</a> <a href="https://bitbucket.org/ben336/scratchcalc">project</a> that I’ve been working on in my free time.  I learned a lot during the process, and I wanted to share my experience here.  I used Ant for my build system, and worked in a variety of different libraries for minification, testing and documentation.</p>\n<h3>Getting Started</h3>\n<p>The first step is to install Ant.  It comes preinstalled on OSX, is <a href="http://www.rndblog.com/how-to-install-ant-on-linux/">fairly straightforward</a> to install on Linux, and is <a href="http://www.nczonline.net/blog/2012/04/12/how-to-install-apache-ant-on-windows/">a bit more involved</a> to install on Windows  If you’re using my exact setup, you’ll also need <a href="http://nodejs.org/">NodeJS</a> (for Coffeescript, UglifyJS,and Docco) and <a href="http://www.ruby-lang.org/">Ruby</a> (for SASS) installed.</p>\n<h3>My Project Structure</h3>\n<p>I went for a structure with 4 directories.</p>\n<ul>\n<li>src</li>\n<li>build</li>\n<li>test</li>\n<li>docs</li>\n</ul>\n<p>All of the source files are in the source directory, with Javascript and Coffeescript files in a scripts directory, and SASS styles in a styles folder.  This particular app has only a single HTML file, which sits in the root of the source directory.  The test folder contains a single HTML page, and a series of unit test files written in Coffeescript, in a structure that mirrors the src directory.  The build and docs directories are initially empty.</p>\n<h3>The Basics</h3>\n<p>We start with a simple Ant setup.  We’ll create an init task, a clean task, and debug and production tasks.  The following code goes into our build.xml file, which is placed at the root of the project directory.</p>\n<pre><code>&lt;project name=&quot;scratchcalc&quot; default=&quot;debug&quot;&gt;\n\n    &lt;loadproperties srcfile=&quot;build.properties&quot; /&gt;\n\n    &lt;target name=&quot;debug&quot; depends=&quot;clean, init&quot;&gt;\n        &lt;echo&gt;ScratchCalc Version ${version} (Debug Version)&lt;/echo&gt;\n    &lt;/target&gt;\n\n    &lt;target name=&quot;production&quot; depends=&quot;clean, init&quot;&gt;\n        &lt;echo&gt;ScratchCalc Version ${version}&lt;/echo&gt;\n    &lt;/target&gt;\n\n    &lt;target name= &quot;init&quot;&gt;\n        &lt;mkdir dir=&quot;${build.dir}&quot; /&gt;\n    &lt;/target&gt;\n\n    &lt;target name=&quot;clean&quot;&gt;\n        &lt;delete dir=&quot;${build.dir}&quot; /&gt;\n    &lt;/target&gt;\n\n&lt;/project&gt;\n</code></pre>\n<p>So for this project, we now have 4 tasks that we can call.  To call the init task, all we need to do is run</p>\n<pre><code>Ant init\n</code></pre>\n<p>from the command line.   Both our debug and production tasks mark clean and init as dependencies, so running them will remove and restore the build directory.  Beyond that, our build doesn’t do much right now.  Lets change that.</p>\n<h3>Copying</h3>\n<p>The simplest thing we can do with our Ant file is basic copying of files.  So lets start with a task that just copies over our files from the src directory to the build directory.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"copy"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Copies files from src to build dirs"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Copying JS, CSS &amp; HTML Files<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">copy</span> <span class="hljs-attr">todir</span>=<span class="hljs-string">"${build.dir}"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"${src.dir}"</span> <span class="hljs-attr">includes</span>=<span class="hljs-string">"**/*.HTML,**/*.css,**/*.js"</span> /&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">copy</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<p>This simply copies any HTML, CSS, or Javascript files in the src directory over to an equivalent position in the build directory.  The segments in the <code>${}</code> format are variables defined in our build.properties file.  For my project, that looks something like this so far:</p>\n<pre><code>version = 0.0.1\ncopyright = Copyright 2012-2013 Ben McCormick.\nsrc.dir = ./src\nbuild.dir = ./build\ntest.dir = ./test\nlib.dir = ${src.dir}/ext\n</code></pre>\n<p>This would be a great place to start for a project thats currently running without a build system.  If you’re able to get your project to build like this, it will set you up to be able to start more interesting things going forward.</p>\n<p>And we of course want to do more interesting things.  This project uses Coffeescript and SASS, so we’ll need to do a bit more than just copy files.  So lets copy those scripts as well, but convert them to Javascript and CSS while we do.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"copy"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Compiles Coffeescript and SASS files,copies the rest"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Copying Coffeescript Files<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">copy</span> <span class="hljs-attr">todir</span>=<span class="hljs-string">"${build.dir}"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"${src.dir}"</span> <span class="hljs-attr">includes</span>=<span class="hljs-string">"**/*.HTML,**/*.css,**/*.js"</span> /&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">copy</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">exec</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"coffee"</span>&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--compile"</span>/&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--map"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--output"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${build.script.dir}"</span> /&gt;</span>\n          <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${src.script.dir}"</span> /&gt;</span>\n     <span class="hljs-tag">&lt;/<span class="hljs-name">exec</span>&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">mkdir</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"${build.styles.dir}"</span> /&gt;</span>\n     <span class="hljs-tag">&lt;<span class="hljs-name">apply</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"sass"</span> <span class="hljs-attr">dest</span>=<span class="hljs-string">"${build.dir}"</span> <span class="hljs-attr">verbose</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">force</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">failonerror</span>=<span class="hljs-string">"true"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--unix-newlines"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">srcfile</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">targetfile</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">filelist</span> <span class="hljs-attr">dir</span> =<span class="hljs-string">"${src.dir}"</span> <span class="hljs-attr">files</span>=<span class="hljs-string">"styles/scratch.sass"</span> /&gt;</span>\n        <span class="hljs-comment">&lt;!--&lt;fileset dir="${src.dir}" includes="**/*.sass"  /&gt;--&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"glob"</span> <span class="hljs-attr">from</span>=<span class="hljs-string">"*.sass"</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"*.css"</span>/&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">apply</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<p>So along with copying the raw files, we also now copy the Coffeescript and SASS files.  For Coffeescript, we run the coffee executable against the entire src dir, and have it mirror the output to the build dir.  For Sass, we only want to run the compile on a single file, which pulls all of the other files into it through import statements.  So we use the filelist and mapper to specify the input and output files.</p>\n<h3>Concatenation</h3>\n<p>Mirroring your directory can be helpful for debugging, and is a good initial step if you’re converting to Ant from a locally run project.  But we’d really like to limit the amount of requests we make when deploying our site.  To do that, we’ll concatenate the js files together.  For my project I create 2 files, one for my external dependencies, and one for my own local files.  I may eventually reduce this to 1, but for now I like separating the 2 for debugging clarity.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"concatenatejs"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Concatenate All the JS together"</span>&gt;</span>\n    <span class="hljs-comment">&lt;!-- Instead of concatenating the JS files directly, use coffee to preserve the source map --&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Concatenating the JS<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">concat</span> <span class="hljs-attr">destfile</span>=<span class="hljs-string">"${build.libs}"</span>&gt;</span>\n         <span class="hljs-tag">&lt;<span class="hljs-name">filelist</span> <span class="hljs-attr">dir</span> =<span class="hljs-string">"${build.script.dir}"</span> <span class="hljs-attr">files</span>=<span class="hljs-string">"lib/jquery.js,lib/knockout.js,lib/BigDecimal.js"</span> /&gt;</span>\n\n          <span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span>=<span class="hljs-string">"${build.script.dir}/lib"</span> <span class="hljs-attr">includes</span>=<span class="hljs-string">"**/*.js"</span>/&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">concat</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">apply</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"coffee"</span>  <span class="hljs-attr">verbose</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">force</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">failonerror</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">"true"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--compile"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--map"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--join"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${build.script.output}"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">srcfile</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">filelist</span> <span class="hljs-attr">dir</span> =<span class="hljs-string">"${src.script.dir}"</span> <span class="hljs-attr">files</span>=<span class="hljs-string">"editor/toolkit.coffee,editor/markupGen.coffee,parser/eqTreeBuilder.coffee,parser/NumberValue.coffee,parser/eqScanner.coffee,parser/eqTokenizer.coffee,parser/tablePlaceHolder.coffee,parser/EQParser.coffee,parser/calcFramework.coffee,editor/editor.coffee"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">apply</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<p>For the external libraries I use Ant’s built in <code>concat</code> task to concatenate the files together.  For the Coffeescript files, I use the coffee compiler rather than concatenating the files that I copied.  I was hoping to do this in order to preserve the source map, which allows for easier debugging.  Unfortunately the compiler has trouble generating source maps for joined files right now.  I’m hoping to fix that in the future, in the meantime I may be using a different approach, possibly using uglifyjs to concatenate the files and generate the maps.</p>\n<h2>Minify</h2>\n<p>Speaking of <a href="https://github.com/mishoo/UglifyJS2">uglifyjs</a>, I use that for minifying my Javascript.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"minify"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Minify the JS for Production"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Minifying the JS For Production with UglifyJS<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">apply</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"uglifyjs"</span> <span class="hljs-attr">verbose</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">force</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">failonerror</span>=<span class="hljs-string">"true"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">srcfile</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--output"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${build.script.output}"</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">filelist</span>  <span class="hljs-attr">files</span> =<span class="hljs-string">"${build.script.output}"</span>/&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">apply</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<p>I only require this for the production task, and leave the full source available for the debug task to preserve the readability of the generated JS.</p>\n<h3>Documentation</h3>\n<p>I use <a href="http://jashkenas.github.com/docco">docco</a> for my Coffeescript documentation.  It converts comments into documentation and runs them through a <a href="http://daringfireball.net/projects/markdown/">Markdown</a> parser to generate a clean HTML page with the code and comments intermingled.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"documentation"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Generate Docco Documentation for coffee files"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Generating Documentation with Docco<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">apply</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"docco"</span> <span class="hljs-attr">verbose</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">force</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">failonerror</span>=<span class="hljs-string">"true"</span>&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">srcfile</span> /&gt;</span>\n        <span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span> =<span class="hljs-string">"${src.script.dir}"</span> &gt;</span>\n            <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"**/*.coffee"</span>/&gt;</span>\n        <span class="hljs-tag">&lt;/<span class="hljs-name">fileset</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">apply</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<h3>Testing</h3>\n<p>I use Jasmine for testing.  <a href="http://pivotal.github.com/jasmine">Jasmine</a> is a “Behavior Driven Development” style unit testing framework for Javascript.  In an ideal world I would be setting up a build task to run on the server and display the results when I run the build.  Unfortunately I wasn’t able to find a way to do that without generating additional dependencies.  Its possible with NodeJS or RequireJS style modules and dependencies, and its also possible using phantomJS, but I didn’t want to require either of those for testing.   So instead I have my build task generate an HTML page with the test results.  I may add some scripting to open this page by default after running a production build in the future.</p>\n<pre><code class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">target</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"test"</span> <span class="hljs-attr">description</span>=<span class="hljs-string">"Generate the JS for testing with Jasmine"</span>&gt;</span>\n  <span class="hljs-comment">&lt;!-- Ideally this would run a server side jasmine test, but that requires better dependency management than we have right now--&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">echo</span>&gt;</span>Generating the Test JS with jasmine<span class="hljs-tag">&lt;/<span class="hljs-name">echo</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">apply</span> <span class="hljs-attr">executable</span>=<span class="hljs-string">"coffee"</span>  <span class="hljs-attr">verbose</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">force</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">failonerror</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">parallel</span>=<span class="hljs-string">"true"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--compile"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"--join"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">arg</span> <span class="hljs-attr">value</span>=<span class="hljs-string">"${test.output}"</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">srcfile</span> /&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">fileset</span> <span class="hljs-attr">dir</span> =<span class="hljs-string">"${test.dir}"</span> &gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">include</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"**/*.coffee"</span>/&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">fileset</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">apply</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span>\n</code></pre>\n<h3>Summary</h3>\n<p>Adding a build system has been great for my project.  Its allowed me to be a lot more organized and to do some cool things that are a pain by hand (unit testing, Coffeescript).  I definitely recommend looking into doing this for any non-trivial Javascript/web project that you’re working on.</p>\n<pre><code>&lt;project name=&quot;scratchcalc&quot; default=&quot;debug&quot;&gt;\n\n  &lt;loadproperties srcfile=&quot;build.properties&quot; /&gt;\n\n  &lt;target name=&quot;debug&quot; depends=&quot;clean, init, copy,concatenatejs&quot;&gt;\n    &lt;echo&gt;ScratchCalc Version ${version} (Debug Version)&lt;/echo&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;production&quot; depends=&quot;clean, init, copy,concatenatejs,minify,documentation,test&quot;&gt;\n    &lt;echo&gt;ScratchCalc Version ${version}&lt;/echo&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;copy&quot; description=&quot;Compiles Coffeescript and SASS files,copies the rest&quot;&gt;\n    &lt;echo&gt;Copying Coffeescript Files&lt;/echo&gt;\n     &lt;copy todir=&quot;${build.dir}&quot;&gt;\n      &lt;fileset dir=&quot;${src.dir}&quot; includes=&quot;**/*.HTML,**/*.css,**/*.js&quot; /&gt;\n     &lt;/copy&gt;\n     &lt;exec executable=&quot;coffee&quot;&gt;\n        &lt;arg value=&quot;--compile&quot;/&gt;\n        &lt;arg value=&quot;--map&quot; /&gt;\n        &lt;arg value=&quot;--output&quot; /&gt;\n        &lt;arg value=&quot;${build.script.dir}&quot; /&gt;\n        &lt;arg value=&quot;${src.script.dir}&quot; /&gt;\n     &lt;/exec&gt;\n     &lt;mkdir dir=&quot;${build.styles.dir}&quot; /&gt;\n     &lt;apply executable=&quot;sass&quot; dest=&quot;${build.dir}&quot; verbose=&quot;true&quot; force=&quot;true&quot; failonerror=&quot;true&quot;&gt;\n          &lt;arg value=&quot;--unix-newlines&quot; /&gt;\n          &lt;srcfile /&gt;\n          &lt;targetfile /&gt;\n          &lt;filelist dir =&quot;${src.dir}&quot; files=&quot;styles/scratch.sass&quot; /&gt;\n          &lt;!--&lt;fileset dir=&quot;${src.dir}&quot; includes=&quot;**/*.sass&quot;  /&gt;--&gt;\n          &lt;mapper type=&quot;glob&quot; from=&quot;*.sass&quot; to=&quot;*.css&quot;/&gt;\n      &lt;/apply&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;concatenatejs&quot; description=&quot;Concatenate All the JS together&quot;&gt;\n    &lt;!-- Instead of concatenating the JS files directly, use coffee to preserve the source map --&gt;\n    &lt;echo&gt;Concatenating the JS&lt;/echo&gt;\n    &lt;concat destfile=&quot;${build.libs}&quot;&gt;\n       &lt;filelist dir =&quot;${build.script.dir}&quot; files=&quot;lib/jquery.js,lib/knockout.js,lib/BigDecimal.js&quot; /&gt;\n\n        &lt;fileset dir=&quot;${build.script.dir}/lib&quot; includes=&quot;**/*.js&quot;/&gt;\n    &lt;/concat&gt;\n    &lt;apply executable=&quot;coffee&quot;  verbose=&quot;true&quot; force=&quot;true&quot; failonerror=&quot;true&quot; parallel=&quot;true&quot;&gt;\n      &lt;arg value=&quot;--compile&quot; /&gt;\n      &lt;arg value=&quot;--map&quot; /&gt;\n      &lt;arg value=&quot;--join&quot; /&gt;\n      &lt;arg value=&quot;${build.script.output}&quot; /&gt;\n      &lt;srcfile /&gt;\n      &lt;filelist dir =&quot;${src.script.dir}&quot; files=&quot;...&quot; /&gt;\n    &lt;/apply&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;documentation&quot; description=&quot;Generate Docco Documentation for coffee files&quot;&gt;\n    &lt;echo&gt;Generating Documentation with Docco&lt;/echo&gt;\n    &lt;apply executable=&quot;docco&quot; verbose=&quot;true&quot; force=&quot;true&quot; failonerror=&quot;true&quot;&gt;\n          &lt;srcfile /&gt;\n          &lt;fileset dir =&quot;${src.script.dir}&quot; &gt;\n            &lt;include name=&quot;**/*.coffee&quot;/&gt;\n          &lt;/fileset&gt;\n      &lt;/apply&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;test&quot; description=&quot;Generate the JS for testing with Jasmine&quot;&gt;\n    &lt;!-- Ideally this would run a server side jasmine test, but that requires better dependency management than we have right now--&gt;\n    &lt;echo&gt;Generating the Test JS with jasmine&lt;/echo&gt;\n    &lt;apply executable=&quot;coffee&quot;  verbose=&quot;true&quot; force=&quot;true&quot; failonerror=&quot;true&quot; parallel=&quot;true&quot;&gt;\n      &lt;arg value=&quot;--compile&quot; /&gt;\n      &lt;arg value=&quot;--join&quot; /&gt;\n      &lt;arg value=&quot;${test.output}&quot; /&gt;\n      &lt;srcfile /&gt;\n      &lt;fileset dir =&quot;${test.dir}&quot; &gt;\n        &lt;include name=&quot;**/*.coffee&quot;/&gt;\n      &lt;/fileset&gt;\n    &lt;/apply&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;minify&quot; description=&quot;Minify the JS for Production&quot;&gt;\n    &lt;echo&gt;Minifying the JS For Production with UglifyJS&lt;/echo&gt;\n    &lt;apply executable=&quot;uglifyjs&quot; verbose=&quot;true&quot; force=&quot;true&quot; failonerror=&quot;true&quot;&gt;\n          &lt;srcfile /&gt;\n          &lt;arg value=&quot;--output&quot; /&gt;\n          &lt;arg value=&quot;${build.script.output}&quot; /&gt;\n          &lt;filelist  files =&quot;${build.script.output}&quot;/&gt;\n      &lt;/apply&gt;\n  &lt;/target&gt;\n\n  &lt;target name= &quot;init&quot;&gt;\n    &lt;mkdir dir=&quot;${build.dir}&quot; /&gt;\n  &lt;/target&gt;\n\n  &lt;target name=&quot;clean&quot;&gt;\n    &lt;delete dir=&quot;${build.dir}&quot; /&gt;\n  &lt;/target&gt;\n\n&lt;/project&gt;\n</code></pre>\n<p><em>Update June 2014: Since writing this post, Javascript based build tools have continued to mature and grow.  These days I’d recommend <a href="http://gruntjs.com/">Grunt</a> or <a href="http://gulpjs.com/">Gulp</a> for your front end build script needs, though Ant is still a fine choice if you’re integrating your builds with a Java project, or have lots of experience with it.</em></p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li><a href="http://www.amazon.com/gp/product/1449327680/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449327680&linkCode=as2&tag=productjavasc-20">Maintainable JavaScript</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&l=as2&o=1&a=1449327680" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /> - This is a great little book for anyone writing Javascript applications in teams.  It has a great section on developing a Javascript build system with Ant</li>\n</ul>\n'
}},function(e,t){e.exports={title:"Custom Elements By Example",date:"2014-08-28 12:33:00+00:00",layout:"post",path:"/2014/08/28/custom-elements-by-example",category:"platform",description:"Explaining Custom Elements and the Web Components spec",key:"custom-elements-example",readNext:"component-based-dev",pageViews:"2961",last30pageViews:"103",body:'<p>The best attribute of HTML is its ability to be simultaneously machine-readable and human-readable.  I’d argue that it’s one of the biggest reasons for the web platform’s success. Anyone can  “view page source” and have some understanding of what they’re seeing.  Javascript based “Single Page Applications” have undermined this a bit.  Now the original HTML of a page may just be an empty body tag, and even when you inspect the generated page, it will probably just be a sea of div tags.</p>\n<p>That’s going to start changing in the near future.  Custom Elements, part of the <a href="http://www.w3.org/standards/techs/components#w3c_all">Web Components spec</a>, are a way of bringing back the semantic web.  They allow you to encapsulate HTML and Javascript functionality into “elements” which you can include in your HTML like any existing native element, with all their semantic benefits.   The best part? They’re <a href="http://developer.telerik.com/featured/web-components-ready-production/">usable in production now</a>.</p>\n<h3>So What does it look like to use custom elements?</h3>\n<p>Talking about this stuff is great, but this is an API for shippable code, not just an abstract spec. So let’s look at a simple example.  In a past job, I made pretty extensive use of the <a href="http://jqueryui.com/">jQuery UI</a> widget library.  jQuery UI is great, but I always found it a bit akward to work with in practice. When it’s used, it takes an existing HTML Element, usually a <code>&lt;div&gt;</code> and transforms it into a widget.  That means that to understand the end result created by the widget code, you have to look in at least 2 places, the original HTML code that contained the transformed element, and the JavaScript code that contained the call. It creates mental overhead knowing that you always had to remember to widgetize the dom element when it’s rendered. It also means accepting that the final result of the widget might look significantly different than the original.  For instance, here’s the before or after for the progress bar widget.  I chose it for it’s simplicity, but you can see that the final result is barely recognizable from the source.</p>\n<p><img src="/posts/images/code_comparison-1.png" alt="source -&gt; display"></p>\n<p>This seems like the perfect opportunity to use a custom element.  If we can encapsulate all that behavior, we’ll be able to ensure that the progress bar is always rendered when it appears, and we can hide any ugly transformed DOM elements underneath a shiny semantic element.  Sounds great! So let’s see how this works.</p>\n<p>To start, we need an object to serve as our progress bar element’s prototype.  It should inherit from the base <em>HTMLElement</em> class. We can create the prototype object like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> ProgressBar  = <span class="hljs-built_in">Object</span>.create(HTMLElement.prototype);\n</code></pre>\n<p>Now that we have our Prototype element, we can register it as a custom element using the <code>document.registerElement</code> API. For now this is only natively available in Chrome, but it’s quite reasonable to <a href="https://github.com/WebReflection/document-register-element">polyfill</a>. <code>registerElement</code> accepts 2 arguments: the name of the element<sup id="fnref:1"><a href="#fn:1">1</a></sup>, and an optional second argument to allow you to specify a prototype for your element.  So let’s set up a <code>progress-bar</code> element:</p>\n<pre><code class="language-javascript"><span class="hljs-built_in">document</span>.registerElement(<span class="hljs-string">\'progress-bar\'</span>,{\n  <span class="hljs-attr">prototype</span>:ProgressBar\n});\n</code></pre>\n<p>Our <code>ProgressBar</code> object will now serve as the prototype for the <code>progress-bar</code> element.  That means we can extend it and give it extra functionality which will then be available on every instance of that element.  Besides allowing us to attach arbitrary properties or functionality to an element, this lets us hook into the “lifecycle callbacks” of HTML Elements, which you can see in this chart from <a href="https://github.com/WebReflection/document-register-element">HTML5Rocks</a>:</p>\n<table class="table">\n  <thead>\n    <tr>\n      <th>Callback name</th>\n      <th>Called when</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>createdCallback</td>\n      <td>an instance of the element is created</td>\n    </tr>\n    <tr>\n      <td>attachedCallback</td>\n      <td>an instance was inserted into the document</td>\n    </tr>\n    <tr>\n      <td>detachedCallback</td>\n      <td>an instance was removed from the document</td>\n    </tr>\n    <tr>\n      <td>attributeChangedCallback(attrName, oldVal, newVal)</td>\n      <td>an attribute was added, removed, or updated</td>\n    </tr>\n  </tbody>\n</table>\n<p>Let’s start by looking at createdCallback.  Since this gets run when the element is first created, this is a great time to run any initialization code that doesn’t require the element to be present in the DOM yet.  Since jQuery UI’s progress bar code doesn’t require the element to be attached to the DOM, we can do all of our initialization here.  That could look something like this:</p>\n<pre><code class="language-javascript">ProgressBar.createdCallback = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> bar = $(<span class="hljs-string">\'&lt;div id="bar"&gt;\'</span>).progressbar({\n    <span class="hljs-attr">value</span>:+<span class="hljs-keyword">this</span>.getAttribute(<span class="hljs-string">\'value\'</span>) || <span class="hljs-number">0</span>\n  });\n  $(<span class="hljs-keyword">this</span>).html(bar);\n};\n</code></pre>\n<p>So using jQuery, we create a new div element and immediately transform it into a progressbar object. Then we attach it inside our custom element container. Pretty straightforward.</p>\n<p>Note that we set the value of our progress bar from the <em>value</em> attribute of our element.  HTML attributes provide a very convenient “public API” for Custom Elements.  You have complete access to an elements attributes inside these callbacks, allowing for easy declarative APIs. In the case of our simple progress bar, <code>value</code> is the only attribute we care about, and other attributes are ignored.</p>\n<p>But what if the value of our element changes?  Attributes aren’t a one time only API.  If we want to react to changes in the attribute, we can use the aptly named <em>attributeChangedCallback.</em>  That callback fires everytime an attribute changes, allowing us to catch the change and respond appropriately.  A more sophisticated element might contain a registry of callbacks for different elements, but for this example we can focus on changes to value.</p>\n<pre><code class="language-javascript">ProgressBar.attributeChangedCallback = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">attrName, oldVal, newVal</span>) </span>{\n  <span class="hljs-keyword">var</span> $bar;\n  <span class="hljs-keyword">if</span>(attrName === <span class="hljs-string">\'value\'</span>) {\n    $bar = $(<span class="hljs-keyword">this</span>.getElementById(<span class="hljs-string">\'bar\'</span>))\n    $bar.progressbar(<span class="hljs-string">\'value\'</span>,+newVal);\n  }\n}\n</code></pre>\n<p>And that’s it! We now have a working <code>progress-bar</code> element, that we can put anywhere in our HTML with no extra js configuration.</p>\n<p data-height="257" data-theme-id="8140" data-slug-hash="cFyep" data-default-tab="result" class=\'codepen\'>See the Pen <a href=\'http://codepen.io/ben336/pen/cFyep/\'>Custom Elements Progressbar Example</a> by Ben McCormick (<a href=\'http://codepen.io/ben336\'>@ben336</a>) on <a href=\'http://codepen.io\'>CodePen</a>.</p>\n<p>Of course there is plenty more we could do.  A more complicated element might require some initialization to be moved to the <code>attachedCallback</code>, and might require better cleanup using the <code>detachedCallback</code>.  For communication with the rest of our app that didn’t fit well into the “changing attributes” model, we might need to implement an eventing system or global registry for accessing data.  But those are all additions on this basic, useful building block.</p>\n<p>If you’re interested in trying out custom elements, there’s never been a better time to get started. It’s easy to try out proof of concepts in Chrome, and there’s a <a href="https://github.com/WebReflection/document-register-element">light-weight polyfill</a> with support back to IE9 for those who want to start using them in production.  If this is something that excites you, there’s no reason not to start using this tool in your code today.</p>\n<h3>More Resources</h3>\n<ul>\n<li>HTML5Rocks has an awesome <a href="https://github.com/WebReflection/document-register-element">detailed look</a> at Custom Elements that covers all of the ground we looked at here, and more.  If you want to dive deeply into this feature, it’s a great read to get started.</li>\n<li>Telerik posted another <a href="http://developer.telerik.com/featured/web-components-ready-production/">great piece</a> on this topic a few weeks ago, which focuses more on the case for Custom Elements being production ready now</li>\n<li>If you’re interested in using more than just Custom Elements, <a href="http://www.polymer-project.org/">The Polymer Project</a> by Google is an ambitious library built around the Web Component spec.  They attempt to polyfill the whole spec, then wrap convenience functions around the low level elements.  It’s an interesting, ambitious project, though not yet ready for production.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        The Web Components spec specifies that valid names should be in the form of 2 words separated by a hyphen in order to avoid conflicts with existing and future "official" HTML elements.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Customer Culture Revisited",date:"2013-06-08 18:45:00+00:00",layout:"post",path:"/2013/06/08/customer-culture-revisited",category:"opinion",description:"Talking about how Microsoft culture impacts their products",pageViews:"96",last30pageViews:"0",body:'<p><a href="http://www.marco.org/2011/09/17/customer-culture-apple-and-microsoft">Marco Arment back in 2011</a>:</p>\n<blockquote>\n<p>For Windows 8 to succeed, especially for its tablets to compete well against the iPad, it will need to adopt a more Apple-like confidence to say “no” to its customers when they ask for everything under the sun. And, surprisingly, they might be doing exactly that.</p>\n</blockquote>\n<blockquote>\n<p>One of the reasons Metro is interesting to people like me who usually ignore Microsoft is that it’s full of very un-Microsoft-like decisions, generally for the better.</p>\n</blockquote>\n<blockquote>\n<p>The question isn’t whether Metro will be good: it probably will be. And that’s a huge accomplishment for Microsoft that they should be commended for.</p>\n</blockquote>\n<blockquote>\n<p>But how will their customers react?</p>\n</blockquote>\n<blockquote>\n<p>Will Metro be meaningfully adopted by PC users? Or will it be a layer that most users disable immediately or use briefly and then forget about, like Mac OS X’s Dashboard, in which case they’ll deride the Metro-only tablets as “useless” and keep using Windows like they always have?</p>\n</blockquote>\n<p>Almost 2 years later, this is looking extremely prescient.  I like what Microsoft was attempting to create with Windows 8, and love the Metro/Modern/Whatever style in general, but 8.1 seems to signal most of the effort since has been spent <a href="http://arstechnica.com/information-technology/2013/06/windows-8-1-gains-boot-to-desktop-to-attract-business-users/">hedging on it</a> instead of doubling down, and I can’t see how its going to get where it needs to go like that.</p>\n'}},function(e,t){e.exports={title:"Digging Into Knockout Builds",date:"2014-01-06 23:30:00+00:00",layout:"post",path:"/2014/01/06/digging-into-knockout-builds",category:"frameworks",description:"An in depth look at how KnockoutJS is organized",readNext:"revertible-observables,effective-js,productive-js-dev",pageViews:"471",last30pageViews:"9",body:'<p>There’s a lot you can learn by looking through other people’s code.  This is especially true when you’re looking at widely used open-source libraries, where you can see how people have solved real problems with code that has been battle-tested and debated.</p>\n<p>In this spirit of code literacy, I spent some time this past weekend to look through the source code for <a href="http://knockoutjs.com/">KnockoutJS</a>.  Knockout is a MVVM library in Javascript designed to make 2 way declarative bindings easy.  I’m wanted to write a bit about what I saw in Knockout’s structure and build process.</p>\n<h3>Intro</h3>\n<p>Some of the first decisions a developer has to make when starting a new javascript project revolve around project structure and build processes.  They need to decide how they’ll handle things like testing and minification.  For a library like Knockout, developers also need to figure out how to make sure that they don’t expose any internal logic to the global scope.  This post takes a look at how Knockout deals with these challenges.  You can follow along by getting <a href="https://github.com/knockout/knockout">the source</a> off of Github.</p>\n<h3>Project Structure</h3>\n<p>Knockout is organized with a traditional <code>src</code>,<code>spec</code>,<code>build</code> structure, with the main src code in the src directory, <a href="http://pivotal.github.io/jasmine/">Jasmine</a> tests in the spec directory, and build-related files in the build directory.  The src directory is fairly flat, with directories for bindings, templating and subscribables.  The spec directory does not mirror it exactly.  The spec files are organized around functional categories at the root of the source files, with a separate directory holding tests for the default bindings.   The build direction contains several files related to the build process, which I’ll discuss below.  In the root directory there are dotfiles for <a href="https://npmjs.org/">NPM</a>, <a href="http://git-scm.com/">git</a>, and <a href="http://about.travis-ci.org/">TravisCI</a>, a package.json file, and the gruntfile.</p>\n<h3>Grunt</h3>\n<p>Knockout’s build process is automated using Grunt, an automation tool built on <a href="xmpux.cisco.com">NodeJS</a>.  Knockout’s gruntfile weighs in at a very readable 150 lines of code, and only defines one task.  That default task looks like this:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Grunt Default Task</span>\ngrunt.registerTask(<span class="hljs-string">\'default\'</span>, [<span class="hljs-string">\'clean\'</span>, <span class="hljs-string">\'checktrailingspaces\'</span>, <span class="hljs-string">\'build\'</span>, <span class="hljs-string">\'test\'</span>]);\n</code></pre>\n<p>So when you build knockout you’re executing 4 steps.</p>\n<h4>Clean</h4>\n<p>This deletes the knockout-latest.debug.js and knockout-latest.min.js files from the <code>build/output</code> directory</p>\n<h4>Check Trailing Spaces</h4>\n<p>This checks source files for trailing spaces and throws an error if they exist, ending the build.</p>\n<h4>Build</h4>\n<p>More detail on this below.</p>\n<h4>Test</h4>\n<p>Test spawns a child process which calls 2 scripts: ‘spec/runner.phantom.js’ and ‘spec/runner.node.js’.  The script runs asynchronously in the background, with the results being passed to standard out through a callback.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Grunt Test Task</span>\ngrunt.initConfig({\n    <span class="hljs-comment">//...</span>\n    test: {\n        <span class="hljs-attr">phantomjs</span>: <span class="hljs-string">\'spec/runner.phantom.js\'</span>,\n        <span class="hljs-attr">node</span>: <span class="hljs-string">\'spec/runner.node.js\'</span>\n    }\n});\n\ngrunt.registerMultiTask(<span class="hljs-string">\'test\'</span>, <span class="hljs-string">\'Run tests\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">var</span> done = <span class="hljs-keyword">this</span>.async();\n    grunt.util.spawn({ <span class="hljs-attr">cmd</span>: <span class="hljs-keyword">this</span>.target, <span class="hljs-attr">args</span>: [<span class="hljs-keyword">this</span>.data] },\n        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error, result, code</span>) </span>{\n            <span class="hljs-keyword">if</span> (code === <span class="hljs-number">127</span> <span class="hljs-comment">/*not found*/</span>) {\n                grunt.verbose.error(result.stderr);\n                <span class="hljs-comment">// ignore this error</span>\n                done(<span class="hljs-literal">true</span>);\n            } <span class="hljs-keyword">else</span> {\n                grunt.log.writeln(result.stdout);\n                <span class="hljs-keyword">if</span> (error)\n                    grunt.log.error(result.stderr);\n                done(!error);\n            }\n        }\n    );\n});\n</code></pre>\n<p>Overall a few things stand out about Knockout’s gruntfile.</p>\n<ol>\n<li>\n<p>It’s written with no dependencies other than the base grunt-cli package, which is specifically called out in package.json to be run locally.  This is in sharp contrast to most Grunt-based projects I’ve seen, which assume a global install of Grunt and then make heavy use of the Grunt plugin ecosystem.</p>\n</li>\n<li>\n<p>The only code consistency check is flagging trailing whitespace. Rather than enforce styling with a tool like jsHint, the build process only protects the integrity of the diffs with the whitespace check. This is probably a consequence of the plugin-free build file set up.  Overall the build philosophy seems to aim to keep things as simple as possible.</p>\n</li>\n</ol>\n<h3>The Build Process</h3>\n<p>So what happens with the build command?  When it’s executed the build command runs a task which creates 2 files, knockout-latest.debug.js and knockout-latest.min. Each of them contain the same content, with the debug version wrapped in an <a href="http://benalman.com/news/2010/11/immediately-invoked-function-expression/">IIFE</a>, and the minified version run through Google closure compiler.</p>\n<p>The content is pulled together with the <code>getCombinedSources</code> function:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Grunt Build Task</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCombinedSources</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">var</span> fragments = grunt.config(<span class="hljs-string">\'fragments\'</span>),\n        sourceFilenames = [\n            fragments + <span class="hljs-string">\'extern-pre.js\'</span>,\n            fragments + <span class="hljs-string">\'amd-pre.js\'</span>,\n            getReferencedSources(fragments + <span class="hljs-string">\'source-references.js\'</span>),\n            fragments + <span class="hljs-string">\'amd-post.js\'</span>,\n            fragments + <span class="hljs-string">\'extern-post.js\'</span>\n        ],\n        flattenedSourceFilenames = <span class="hljs-built_in">Array</span>.prototype.concat.apply([], sourceFilenames),\n        combinedSources = flattenedSourceFilenames.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">filename</span>) </span>{\n            <span class="hljs-keyword">return</span> grunt.file.read(<span class="hljs-string">\'./\'</span> + filename);\n        }).join(<span class="hljs-string">\'\'</span>);\n\n    <span class="hljs-keyword">return</span> combinedSources.replace(<span class="hljs-string">\'##VERSION##\'</span>, grunt.config(<span class="hljs-string">\'pkg.version\'</span>));\n}\n</code></pre>\n<p>So this takes each of the files returned by the getReferencedSources function, and wraps them with 2 more files on each side.  Lets look at the wrapper files first.</p>\n<p>extern-pre.js sets up an IIFE and defines several global values within the local scope.  This is done in order to protect against any reuse of these names in the local scope where knockout is loaded.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//extern-pre.js</span>\n(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">undefined</span>)</span>{\n    <span class="hljs-comment">// (0, eval)(\'this\') is a robust way of getting a reference to the global object</span>\n    <span class="hljs-comment">// For details, see http://stackoverflow.com/questions/14119988/return-this-0-evalthis/14120023#14120023</span>\n    <span class="hljs-keyword">var</span> <span class="hljs-built_in">window</span> = <span class="hljs-keyword">this</span> || (<span class="hljs-number">0</span>, <span class="hljs-built_in">eval</span>)(<span class="hljs-string">\'this\'</span>),\n        <span class="hljs-built_in">document</span> = <span class="hljs-built_in">window</span>[<span class="hljs-string">\'document\'</span>],\n        navigator = <span class="hljs-built_in">window</span>[<span class="hljs-string">\'navigator\'</span>],\n        jQuery = <span class="hljs-built_in">window</span>[<span class="hljs-string">"jQuery"</span>],\n        <span class="hljs-built_in">JSON</span> = <span class="hljs-built_in">window</span>[<span class="hljs-string">"JSON"</span>];\n</code></pre>\n<p>amd-pre.js determines the type of module system in use (if any) and passes the correct object into the inner scope as koExports.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//amd-pre.js</span>\n(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">factory</span>) </span>{\n  <span class="hljs-comment">// Support three module loading scenarios</span>\n  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">require</span> === <span class="hljs-string">\'function\'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> exports === <span class="hljs-string">\'object\'</span> &amp;&amp; <span class="hljs-keyword">typeof</span> <span class="hljs-built_in">module</span> === <span class="hljs-string">\'object\'</span>) {\n    <span class="hljs-comment">// [1] CommonJS/Node.js</span>\n    <span class="hljs-keyword">var</span> target = <span class="hljs-built_in">module</span>[<span class="hljs-string">\'exports\'</span>] || exports; <span class="hljs-comment">//module.exports is for Node.js</span>\n    factory(target);\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> define === <span class="hljs-string">\'function\'</span> &amp;&amp; define[<span class="hljs-string">\'amd\'</span>]) {\n    <span class="hljs-comment">// [2] AMD anonymous module</span>\n    define([<span class="hljs-string">\'exports\'</span>], factory);\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-comment">// [3] No module loader (plain &lt;script&gt; tag) - put directly in global namespace</span>\n    factory(<span class="hljs-built_in">window</span>[<span class="hljs-string">\'ko\'</span>] = {});\n  }\n})\n</code></pre>\n<p>The *-post.js files simply close these function statements.</p>\n<p>So in the end we’re left with an IIFE that wraps all of the content and defines global variables within the scope, and then executes a second IIFE which determines the module format in use and executes the inner factory function accordingly.  The factory function is made up of the various files in the src directory, concatenated together in the order specified in build/fragments/source-references.js.</p>\n<h3>Initializing the library</h3>\n<p>The first few files loaded into the inner function are short files designed to provide a base for the library.</p>\n<p>namespace.js sets up the ko object that is referenced internally in the file.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//namespace.js</span>\n<span class="hljs-comment">// Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).</span>\n<span class="hljs-comment">// In the future, the following "ko" variable may be made distinct from "koExports" so that private objects are not externally reachable.</span>\n<span class="hljs-keyword">var</span> ko = <span class="hljs-keyword">typeof</span> koExports !== <span class="hljs-string">\'undefined\'</span> ? koExports : {};\n</code></pre>\n<p>google-closure-compiler-utils.js defines two helper functions, exportSymbol and exportProperty which allow for greater minimization of the internal ko library while maintaining a consistent external api.  These functions are used everywhere throughout the library for defining externally facing function and property names.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//google-closure-compiler-utils.js</span>\n\n<span class="hljs-comment">// Google Closure Compiler helpers (used only to make the minified file smaller)</span>\nko.exportSymbol = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">koPath, object</span>) </span>{\n    <span class="hljs-keyword">var</span> tokens = koPath.split(<span class="hljs-string">"."</span>);\n\n    <span class="hljs-comment">// In the future, "ko" may become distinct from "koExports" (so that non-exported objects are not reachable)</span>\n    <span class="hljs-comment">// At that point, "target" would be set to: (typeof koExports !== "undefined" ? koExports : ko)</span>\n    <span class="hljs-keyword">var</span> target = ko;\n\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; tokens.length - <span class="hljs-number">1</span>; i++)\n        target = target[tokens[i]];\n    target[tokens[tokens.length - <span class="hljs-number">1</span>]] = object;\n};\nko.exportProperty = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">owner, publicName, object</span>) </span>{\n  owner[publicName] = object;\n};\n</code></pre>\n<p>Finally version.js sets up a placeholder for ko.version, which is then replaced with the version number in Package.json as part of the grunt build task.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//version.js</span>\nko.version = <span class="hljs-string">"##VERSION##"</span>;\n\nko.exportSymbol(<span class="hljs-string">\'version\'</span>, ko.version);\n</code></pre>\n<h3>Conclusion</h3>\n<p>There are a few interesting things we can note from Knockout’s build approach.</p>\n<h4>Using IIFE’s to isolate local scope is a practical and important technique for library design</h4>\n<p>If you’ve been counting, the debug version of the library is wrapped in 3 different levels of IIFEs before any code exposing external functionality is actually included.  This allows Knockout to provide several layers of data protection and abstraction, making sure that it is referencing the correct global variables and preventing scope leaks.</p>\n<h4>Its relatively straightforward to support module formats even if your library doesn’t use them internally</h4>\n<p>Take a look again at amd-pre.js.  Its 15 lines of code to support AMD loaders, CommonJS loaders and normal script tag loading.  Knockout doesn’t use a modern “module solution” approach to code organization.  Instead it uses a more traditional namespacing approach wrapped in IIFEs.  But it still plays well with others nicely.  It’s hard to see how this type of effort wouldn’t be worth it for library designers.</p>\n'}},function(e,t){e.exports={title:"Digging Into React: Choosing Component Styles",date:"2016-05-02 02:32:36+00:00",layout:"post",path:"/2016/05/02/digging-into-react-choosing-component-styles",description:"An examination of the various styles for defining React components",keywords:"JavaScript, React, Component, createClass, class, functional component",category:"frameworks",key:"react-component-styles",readNext:"jest-first,backbone-devs-react,callbacks-to-promises",pageViews:"1766",last30pageViews:"21",body:'<p>Over the past month I’ve been building my first production features using React.  One of the first things I’ve noticed is the amount of choices that come into a new React project.  A lot of this is about the ecosystem around React (Webpack vs Browserify? Redux vs Relay? Do I need CSS modules or Immutable.js?) but many of the choices are just part of the library, figuring out the best, or at least a consistent, way to do things.</p>\n<p>One such choice is the syntax for defining components that you choose to use.  In React, you can define components in at least 3 different styles: the React.createClass style, the ES6 class style, and the pure functional style <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>. Each has some advantages and disadvantages.</p>\n<h3>React.createClass</h3>\n<p>React.createClass is the original style for defining React components, and is still the preferred style in the React documentation.</p>\n<p>Here’s what a theoretical SaveButton component looks like in this style.  It is a simple component that listens for clicks and then uses a separate dispatcher object to send a request to save the data on the page.  After saving the button will either show some specified saved text or “Saved”.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> ‘react’;\n<span class="hljs-keyword">import</span> {dispatcher} <span class="hljs-keyword">from</span> ‘./lib/dispatcher’;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> SaveButton = React.createClass({\n\n    <span class="hljs-attr">propTypes</span>: {\n        <span class="hljs-comment">//text to show after the component is saved</span>\n        savedText: React.PropTypes.string.isRequired,\n        <span class="hljs-comment">//primary text to show on the button</span>\n        text: React.PropTypes.string.isRequired,\n    },\n\n    getDefaultProps() {\n        <span class="hljs-keyword">return</span> {\n             <span class="hljs-attr">savedText</span>: ‘Saved’,\n        };\n    },\n\n    getInitialState() {\n        <span class="hljs-keyword">return</span> { <span class="hljs-attr">saved</span>: <span class="hljs-literal">false</span> };\n    },\n\n    save() {\n        dispatcher.sendMessage(‘saveData’);\n        <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">saved</span>: <span class="hljs-literal">true</span>});\n    },\n\n    render() {\n        <span class="hljs-keyword">let</span> {text, savedText} = <span class="hljs-keyword">this</span>.props;\n        <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">“button”</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{this.save}</span>&gt;</span>\n           {this.state.saved ? savedText : text}\n        <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>);\n    },\n});\n</code></pre>\n<p>One of the best things about this style is its cohesive nature.  Everything about the component is described as a single object passed to React.createClass.  Since it is just an object that React processes, it is also able to accommodate more usage styles than ES6 classes and functional components.  Specifically we can use <a href="https://facebook.github.io/react/docs/reusable-components.html#mixins">mixins</a> and add declarative properties like propTypes directly to the component definition.</p>\n<p>The downside of the createClass approach is the custom nature of it.  External tools can’t inspect a component declaration and know what functions and methods will be available on the final component without either some deep inspection of the React source code or pre-existing knowledge of React.createClass that somebody has to document and maintain.</p>\n<h3>ES6 Classes</h3>\n<p>Last March, with React v0.13, the React team introduced a second syntax for React components using ES6 classes.  The constraints of the ES6 class definition change the component API in a few ways.  With ES6 classes there is no way to add properties to the class property as part of the main definition, they need to be added afterwards <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.  Some niceties that are possible with React.createClass don’t work with ES6 classes as well.  Mixins aren’t possible, and React will no longer “autobind” your functions to the component instance, so when passing class methods as callbacks in your components it is necessary to bind it to the current context, either by using arrow functions like\n<code>&lt;span onClick= {() =&gt; this.save()} &gt;</code> or by binding the function like <code>this.save = this.save.bind(this)</code>.</p>\n<pre><code class="language-javascript">import React from ‘react’;\nimport {dispatcher} from ‘./lib/dispatcher’;\n\nexport class SaveButton extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { saved: false };\n    }\n\n    save() {\n        dispatcher.sendMessage(‘saveData’);\n        this.setState({saved: true});\n    },\n\n    render() {\n        let {text, savedText} = this.props;\n        return (&lt;span className=“button” onClick={() =&gt;this.save()}&gt;\n           {this.state.saved ? savedText : text}\n        &lt;/span&gt;);\n    },\n});\n\nSaveButton.propTypes = {\n    //text to show after the component is saved\n    savedText: React.PropTypes.string.isRequired,\n    //primary text to show on the button\n    text: React.PropTypes.string.isRequired,\n};\n\nSaveButton.defaultProps = {\n    savedText: ‘Saved’,\n};\n</code></pre>\n<p>While this approach makes some syntactic compromises and loses mixins, it has the advantage of standardization and tooling support.  A good JavaScript tool can easily tell that a SaveButton should have render and save methods, as well as detecting the methods it inherits from React.Component.  This is useful for things like auto-complete and linting, as well as (theoretically) run-time performance.</p>\n<h3>Pure Functional Components</h3>\n<p>Last fall with React 0.14, React added a 3rd component style.  Functional components dispose of many of the secondary features of React, and focus on the <code>render</code> function.  They are the least powerful of all the component syntaxes.  In addition to losing mixins, pure functional components don’t have the life-cycle functions of the class based syntaxes and also don’t have any internal state.  For these components, all state must be managed externally through something like Redux, or parent components that do have state.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> ‘react’;\n<span class="hljs-keyword">import</span> {dispatcher} <span class="hljs-keyword">from</span> ‘./lib/dispatcher’;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> SaveButton = <span class="hljs-function">(<span class="hljs-params">{text, savedText, isSaved, setSaved}</span>) =&gt;</span> {\n    <span class="hljs-keyword">const</span> save = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span>{\n        dispatcher.sendMessage(‘saveData’);\n        setSaved();\n    },\n    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">className</span>=<span class="hljs-string">“button”</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">{save}</span>&gt;</span>\n       {isSaved ? savedText : text}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span>);\n};\n\nSaveButton.propTypes = {\n    <span class="hljs-comment">//text to show after the component is saved</span>\n    savedText: React.PropTypes.string.isRequired,\n    <span class="hljs-comment">//primary text to show on the button</span>\n    text: React.PropTypes.string.isRequired,\n    <span class="hljs-comment">// has the data already been saved?</span>\n    isSaved: React.PropTypes.bool.isRequired,\n    <span class="hljs-comment">// a function to update the application state and mark the page as saved</span>\n    setSaved: React.PropTypes.func.isRequired,\n};\n\nSaveButton.defaultProps = {\n    <span class="hljs-attr">savedText</span>: ‘Saved’,\n};\n</code></pre>\n<p>Despite being the least powerful of the 3 component styles, functional components do have some advantages.  First of all, they’re very simple.  It is easy to see what is going on with them, and easy for React to optimize for them.  Like ES6 classes, they’re easy to understand for 3rd party tools since they’re “just functions”, and easy to explain to new developers for the same reason.  They also work well with systems like Redux which already encourages pulling state out of components into global stores.</p>\n<h2>Choosing a component style</h2>\n<p>So given these 3 styles, how do you choose which style to use for a component?  Balance a desire for consistency with a respect for the <a href="https://en.wikipedia.org/wiki/Rule_of_least_power">Principle of Least Power</a>.</p>\n<p>For consistency purposes, don’t use more than 2 of these styles within a single project.  This mostly breaks down to “don’t use createClass and ES6 classes” together in the same project.  There are significant differences in capability and complexity between the first 2 styles and functional components. But the class based styles are similar enough that using both adds complexity but fails to do much in terms of signaling intent.  Switching between 2 different styles of communicating a concept should also indicate a meaningful difference in intent.</p>\n<p>Of course the most consistent approach would be to always use createClass, since it is the most powerful and any component that can be implemented in the other 2 styles can be implemented using createClass.  This is where the principle of least power comes in.  Here is Tim Berners-Lee’s initial description of that principle:</p>\n<blockquote>\n<p>Computer Science in the 1960s to 80s spent a lot of effort making languages which were as powerful as possible. Nowadays we have to appreciate the reasons for picking not the most powerful solution but the least powerful. The reason for this is that the less powerful the language, the more you can do with the data stored in that language. If you write it in a simple declarative from, anyone can write a program to analyze it in many ways. The Semantic Web is an attempt, largely, to map large quantities of existing data onto a common language so that the data can be analyzed in ways never dreamed of by its creators. If, for example, a web page with weather data has RDF describing that data, a user can retrieve it as a table, perhaps average it, plot it, deduce things from it in combination with other information. At the other end of the scale is the weather information portrayed by the cunning Java applet. While this might allow a very cool user interface, it cannot be analyzed at all. The search engine finding the page will have no idea of what the data is or what it is about. This the only way to find out what a Java applet means is to set it running in front of a person.</p>\n</blockquote>\n<p>The less powerful react components styles are the more readable styles, both for humans and computers. That readability also limits the classes of errors and unexpected behaviors we can enact. So we should strive for simple components where we can, while balancing that with our desire for consistency.</p>\n<p>For projects looking into this, there are a few simple questions that you can answer to decide which style to use.</p>\n<ol>\n<li>Do you need to integrate with non-React libraries that modify the DOM?</li>\n<li>Do you need to manage state within your components (IE are you not using an external state management library like Redux)?</li>\n<li>Do you need to use mixins for anything in your project?</li>\n</ol>\n<p>If you answered yes to any of these questions, then you need to include a class based component style in your options for your projects.  If you answered yes to #3, then you will need to use React.createClass.</p>\n<p>Once you’ve made those decisions at the project level, the decisions are easy for an individual component.  If you answered no to all of the questions above (unlikely for a large project, but possible), you should always use functional components.  If not, you can ask the same 3 questions for each new component.  If the answer to all of the questions are no for a component, use a functional component, otherwise use the class based style you’ve chosen for your project.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href="https://facebook.github.io/react/docs/reusable-components.html#es6-classes">The React documentation</a> is the best place to look at the benefits and tradeoffs of the different component styles</li>\n<li><a href="http://jamesknelson.com/should-i-use-react-createclass-es6-classes-or-stateless-functional-components/">James Nelson wrote a similar guide last year</a> focused on the decision tree of what style to use for a component.  He dismisses the createClass style completely and has a similar but slightly different set of questions to ask.</li>\n<li><a href="https://github.com/facebook/react/issues/5677">This github thread</a> makes the important distinction that functional components are not yet optimized in any special way, though they may be in the future.</li>\n</ul>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>Technically you can also use an ES5 class based style, but I’m going to ignore that.  It is not a common idiom for React programs as far as I can tell. <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>There is a proposal for adding static properties to ES6 classes, but it is still in early stages right now and is not guaranteed to end up as part of the ECMAScript spec. <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'
}},function(e,t){e.exports={title:"Discovering Vim",date:"2014-06-02 22:00:00+00:00",layout:"post",path:"/2014/06/02/discovering-vim",category:"tools",description:"The benefits I've found learning Vim",readNext:"learning-vim,interesting-atom,vim-files",pageViews:"956",last30pageViews:"10",body:'<p>I’ve now been using Vim as my primary text editor for the last 9 months.\nWhen I started, I intended to learn it well enough to use in environments that didn’t support Sublime Text. In the end though it ended up becoming my single purpose editor for all occasions. Writing code, blogging, diffs, and reading logs all go through vim.  So why do I use Vim?</p>\n<h4>More Efficient Movement and Editing</h4>\n<p>This is the first thing you hear about from experienced Vimmers, and its an important one.  Once you have your feet under you as a Vim user, you are just able to edit faster.  This can be hard to understand before using Vim (or other keyboard based tools).  Using a mouse doesn’t feel particularly inefficient, and when you start out, Vim’s keyboard mappings can feel arbitrary, unintuitive and slow.  This is one of those times where a little work is needed to get the proper perspective.  Once you’ve had time to learn the basics, even a mediocre typist like me <sup id="fnref:1">\n<a href="#fn:1">1</a></sup> can fly when editing by typing smarter not harder.  This isn’t a tutorial on the basics of Vim, but the keys for me were understanding Vim was <a href="http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118">a language in its own right</a>, and the biggest gains in Vim come when you create repeatable options to eliminate inefficiencies. These can be macros, but can also be as simple as using Vim’s easy control for repeating the last action<sup id="fnref:2"><a href="#fn:2">2</a></sup>.  Vim is a huge toolbox of small tools that you can use together to create a powerful workstation.</p>\n<h4>Rich Plugin Ecosystem</h4>\n<p>Like many things in Vim, the value of its plugin system wasn’t immediately obvious.  Unlike Sublime, which has a community consensus primary package manager and repository, Vim has multiple package managers that pull packages from a variety of locations<sup id="fnref:3"><a href="#fn:3">3</a></sup>.  So you need to do some research to figure out what you should be using<sup id="fnref:5"><a href="#fn:5">5</a></sup> and find the right plugins.  But when you do, you’ll find that Vim has fantastic plugins for key tasks like <a href="https://github.com/kien/ctrlp.vim">fuzzy file search</a>, <a href="https://github.com/scrooloose/syntastic">syntax checking</a>, and <a href="https://github.com/mileszs/ack.vim">in-file search</a>.  It also has a rich depth of plugins for pretty much every language/framework/functionality in common usage, as well as some great plugins that extend Vim’s built in motion/editing language.</p>\n<h4>Long Term Security</h4>\n<p>This one is a judgement call, but from my point of view, Vim is the safest investment of my time out there.  It has a rich open source community, one that has shown that its willing to try <a href="http://neovim.org/">some big ideas</a> to keep from getting stale.  It’s had a great 20 years of usage and doesn’t appear to be in decline.  Sublime Text meanwhile, regrettably seems to be in danger of heading down a similar path to Textmate, with a single developer who has done great work, but <a href="http://www.sublimetext.com/forum/viewtopic.php?f=2&amp;t=14591">doesn’t appear to be interested</a> in being involved in all of the different work that a software business requires.  I don’t think open source is the only way to rely on software<sup id="fnref:4"><a href="#fn:4">4</a></sup>, but for general purpose text editors, Vim seems the safest bet to still be around in 10 years.</p>\n<h4>My Brain is Broken Now</h4>\n<p>This is a warning as much as a reason for using Vim, but I’ve quickly found that I’m no longer able to use Sublime or other editors without being frustrated by the fact that they’re not Vim.  Many editors, including Sublime, provide support for a large subset of Vim’s key bindings and modal controls.  But they all fall down at random places.  The power of vim doesn’t lie in one specific functionality, but the composable nature of their different options.  When some of them aren’t there, all the others are weakened, and my trained brain falls out of high efficiency mode into slow plodding “think through every keystroke mode.”  So don’t say I didn’t warn you.  Vim will break your brain.</p>\n<p>Those are the primary reasons I use Vim now.  There are a few things I haven’t loved though.</p>\n<h4>Vim’s UI is uglier than Sublime Text.</h4>\n<p>I’m a front end developer, used to working with, and working to create, beautiful interfaces.  Vim is not beautiful.  It looks like exactly what it is, a text based program with a lineage reaching back to the 70s.  It doesn’t handle margins or padding well, doesn’t have pretty autocomplete menus or visual alerts.  If you use it in the terminal you may be severely restricted in your color options, and this situation is not something that is going to change anytime soon<sup id="fnref:6"><a href="#fn:6">6</a></sup>.  I still love Sublime Text’s UI.  Nice margins, smooth scrolling, the ability to set different font and syntax highlighting options on a filetype basis are all nice gems that Vim just doesn’t offer.  I’ve come to appreciate Vim’s minimalism, but would love to see if Neovim were to offer a way to beautify some of these things.</p>\n<h4>Vim is harder to learn than it should be.</h4>\n<p>I’ve seen some Vimmers object to this (its a power user tool, etc.) but the truth is, when pretty much every Vim tutorial starts by telling you that you should start by changing a bunch of the default settings, it becomes clear that learning Vim is harder than it should be. There’s no reason that basics like line numbers and syntax highlighting shouldn’t be turned on by default.  Configurability is great, but if you start out in a user-hostile state, many people won’t take the time to find the power.  There have been some efforts to change that.  Neovim seems to be actively rethinking this stuff, and projects like <a href="https://github.com/carlhuda/janus">Janus</a> aim to help people get started with a richer initial setup.  But the very existence of these reforms points to the fact that Vim shoots itself in the foot with defaults that may have made sense in the eighties, but appear archaic next to modern competitors.</p>\n<p>For now I’m enjoying the Vim experience.  Despite a few warts, I really do think its the best text editor you can use today, and I’m excited to see where it goes in the future.</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\nI was never taught to type correctly growing up. Apparently this is unusual in my generation.  Early last year I decided to ditch my hunt and peck 5 finger style for "the proper way."  It was a great learning experience.  I now muddle along at a mediocre 62 WPM according to online typing tests.\n    \t<a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n<pre><code>&lt;li class=&quot;footnote&quot; id=&quot;fn:2&quot;&gt;\n    &lt;p&gt;\n</code></pre>\n<p>I highly recommend Drew Neil’s Practical Vim for anyone who wants to get serious about using Vim.  It taught me about the power of repetition in Vim as well as how to formulate Vim’s many disparate features into a coherent text editing philosophy.\n<a href="#fnref:2" title="return to article"> ↩</a></p>\n</li></p>\n<pre><code>&lt;li class=&quot;footnote&quot; id=&quot;fn:3&quot;&gt;\n    &lt;p&gt;\n</code></pre>\n<p>Yes there’s an official repository, but have you been on <a href="http://Vim.org">Vim.org</a>’s repository?  Its an ugly frustrating site that does nothing to highlightuseful plugins.  It also often contains information that is less up-to-date than the plugins github README, and some important packages like ctrlp are not represented there.</p>\n<pre><code>\t&lt;a href=&quot;#fnref:3&quot; title=&quot;return to article&quot;&gt; ↩&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n\n&lt;li class=&quot;footnote&quot; id=&quot;fn:4&quot;&gt;\n    &lt;p&gt;\n    I\'d have no problem investing time in IntelliJ or Visual Studio for instance if I felt like a heavy IDE like that was the way to go, and that they\'d add productivity to justify their cost.  They have established companies backing them that are able to do things like respond to customer feedback, provide product roadmaps, etc.\n\n\t&lt;a href=&quot;#fnref:4&quot; title=&quot;return to article&quot;&gt; ↩&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n</code></pre>\n   <li class="footnote" id="fn:5">\n    <p>\n  Hint: Use Vundle\n<p><a href="#fnref:5" title="return to article"> ↩</a></p>\n</li></p>\n<pre><code>&lt;li class=&quot;footnote&quot; id=&quot;fn:6&quot;&gt;\n    &lt;p&gt;\n    Due to the terminal compatibility requirement\n\n\t&lt;a href=&quot;#fnref:6&quot; title=&quot;return to article&quot;&gt; ↩&lt;/a&gt;&lt;/p&gt;\n&lt;/li&gt;\n</code></pre>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"ES5, ES6, ES2016, ES.Next: What's going on with JavaScript versioning?",date:"2015-09-14 03:11:34+00:00",layout:"post",path:"/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning",description:"A summary of the naming conventions for the JavaScript language",keywords:"JavaScript, ECMAScript, ES6, ES7, ES5",category:"javascript",readNext:"callbacks-to-promises,clean-higher-order-functions,rauchg-on-es6",key:"ecma-explanation",pageViews:"130067",last30pageViews:"9011",body:'<p>JavaScript has a strange naming history. For its initial release in 1995 as part of Netscape Navigator, Netscape labeled their new language LiveScript, before renaming it to JavaScript a year later, hoping to capitalize on Java’s popularity at the time (<a href="http://www.coderanch.com/t/456377/a/401/javascript-java.jpg">JavaScript has no actual relationship to Java</a>). In 1996 Netscape submitted JavaScript to <a href="http://www.ecma-international.org/">ECMA International</a> for standardization.  This eventually resulted in a new language standard, labeled ECMAScript.  All major JavaScript implementations since have actually been implementations of the ECMAScript standard, but the term JavaScript has stuck for historical and marketing reasons <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  In the real world ECMAScript is usually used to refer to the standard while JavaScript is used when talking about the language in practice.</p>\n<p>This has mostly been trivia for JavaScript developers, because ECMAScript didn’t change much for the first 15 years of its existence, and real world implementations often differed significantly from the standard.  After the initial version of ECMAScript, work on the language continued and two more versions were quickly published.  But after ECMASCript 3 came out in 1999, there were no changes made to the official standard for a decade.  Instead various browser vendors made their own custom extensions to the language, and web developers were left to try and support multiple APIs.  Even after ECMAScript 5 was published in 2009, it took several years for wide browser support of the new spec, and most developers continued to write code in ECMAScript 3 style, without necessarily being aware of the standard.</p>\n<p>Around 2012 things started to change.  There was more of a push to stop supporting old Internet Explorer versions, and writing code in ECMAScript 5 (ES5) style became much more feasible.  At the same time work was underway on a new ECMAScript standard, at which point it became much more common to start referring to JavaScript implementations in terms of their support for different ECMAScript standards.  The new standard was originally named ES.Harmony, before eventually being referred to as ECMAScript 6th Edition (ES6). In 2015 TC39, the committee responsible for drafting the ECMAScript specifications, made the decision to move to a yearly model for defining new standards, where new features would be added as they were approved, rather than drafting complete planned out specs that would only be finalized when all features were ready.  As a result ECMAScript 6th edition was renamed ECMAScript 2015 (ES2015) before it was published in June.</p>\n<p>Currently there are several proposals for new features or syntax to be added to JavaScript.  These include <a href="https://github.com/wycats/javascript-decorators">decorators</a>, <a href="https://github.com/lukehoban/ecmascript-asyncawait">async-await</a>, and <a href="https://gist.github.com/jeffmo/054df782c05639da2adb">static class properties</a>.  These are often refered to as ES7, ES2016, or ES.Next features, but should realistically be called proposals or possibilities, since the ECMAScript 2016 specification hasn’t been written yet, and might include all or none of those features.  TC39 divides proposals into 4 stages.  You can see the current state of various proposals on <a href="https://github.com/tc39/proposals">the TC39 Github repo</a>.</p>\n<p>So where does that leave us in terms of terminology?  The following list might be helpful:</p>\n<ul>\n<li><strong>ECMAScript</strong>: A language standardized by ECMA International and overseen by the TC39 committee.  This term is usually used to refer to the standard itself.</li>\n<li><strong>JavaScript</strong>: The commonly used name for implementations of the ECMAScript standard.  This term isn’t tied to a particular version of the ECMAScript standard, and may be used to refer to implementations that implement all or part of any particular ECMASCript edition.</li>\n<li><strong>ECMAScript 5 (ES5)</strong>: The 5th edition of ECMAScript, standardized in 2009.  This standard has been implemented fairly completely in all modern browsers</li>\n<li><strong>ECMAScript 6 (ES6)/ ECMAScript 2015 (ES2015)</strong>: The 6th edition of ECMAScript, standardized in 2015.  This standard has been partially implemented in most modern browsers.  To see the state of implementation by different browsers and tools, check out <a href="http://kangax.github.io/compat-table/es6/">these compatibility tables</a>.</li>\n<li><strong>ECMAScript 2016</strong>: The expected 7th edition of ECMAScript. This is scheduled to be released next summer.  The details of what the spec will contain have not been finalized yet</li>\n<li><strong>ECMAScript Proposals</strong>: Proposed features or syntax that are being considered for future versions of the ECMAScript standard.  These move through a process of five stages: Strawman, Proposal, Draft, Candidate and Finished.</li>\n</ul>\n<p>Going forward in this blog, I’ll be referring to the recent ECMAScript version as ES6 (since that is how it is best known by most developers), next years spec as ES2016 (since that will be what it is called the whole way through its standardization process, unlike ES6/ES2015) and future language ideas that are not yet part of a draft or finalized spec as ECMAScript proposals or JavaScript proposals.  I’ll do my best to point back to this post in any cases that might be confusing.</p>\n<h3>More Resources</h3>\n<ul>\n<li>TC39 has a <a href="https://github.com/tc39/ecma262">github repo</a> tracking all of their current open proposals.</li>\n<li>If you aren’t familiar with ES6 yet, Babel has a <a href="https://babeljs.io/docs/learn-es2015/">great rundown of its features</a></li>\n<li>If you want to go deeper with ES6 I’ve heard great things  about 2 books on the subject: <a href="http://exploringjs.com/">Exploring ES6</a> by Axel Rauschmayer and <a href="https://leanpub.com/understandinges6">Understanding ECMAScript 6</a> by Nicholas Zakas<sup id="fnref:2"><a href="#fn:2">2</a></sup>.  Axel’s blog <a href="http://www.2ality.com/">2ality</a> is also a great ES6 resource.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        And obviously because ECMAScript is an awful language name\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        Note that I have not read either of these books yet, though I have read plenty of other content from both authors and consider them experts on the JavaScript language. So take that recommendation with an appropriate grain of salt.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Why Backbone.js and ES6 Classes Don't Mix",date:"2015-04-07 03:19:44+00:00",layout:"post",path:"/2015/04/07/es6-classes-and-backbone-js",description:"A rundown of the challenges of using ES6 classes in Backbone",keywords:"Backbone, ES6, JavaScript, classes",category:"frameworks",key:"bb-es6-1",readNext:"bb-es6-2,backbone-eco,backbone-devs-react",pageViews:"20374",last30pageViews:"413",body:'<p>I’ve seen some confusion out there about how to use ES6 Classes with <a href="http://backbonejs.org/">Backbone</a>.  In the original version of the ES6 class spec, this was actually a simple thing to do, though the syntax wasn’t great.  With the finalized specification for classes and subclassing though, it’s no longer practical to try and use the two together.  Here’s a short explanation of the issues, as well as a discussion on whether any of this matters.</p>\n<h3>What are ES6 Classes anyway?</h3>\n<p>ES6 <sup id="fnref:1"><a href="#fn:1">1</a></sup> is the newest version of JavaScript. It provides a variety of new features for JavaScript developers including native Promises, destructuring, modules and default function parameters.  One of these new features is a native JavaScript Class implementation.  It allows us to simplify class patterns that were formerly a bit verbose in JavaScript.  Take this example of JavaScript inheritance from <a href="http://www.amazon.com/gp/product/0596517742/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0596517742&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=XZEWUV7PCEO7DNTY">Javascript: The Good Parts</a>:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> Mammal = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>{\n    <span class="hljs-keyword">this</span>.name = name;\n};\n\nMammal.prototype.get_name = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;\n};\n\nMammal.prototype.says = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.saying || <span class="hljs-string">\'\'</span>;\n};\n\n<span class="hljs-keyword">var</span> Cat = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) </span>{\n    <span class="hljs-keyword">this</span>.name = name;\n    <span class="hljs-keyword">this</span>.saying = <span class="hljs-string">\'meow\'</span>;\n}\n\nCat.prototype = <span class="hljs-keyword">new</span> Mammal();\n\nCat.prototype.purr = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">n</span>) </span>{\n    <span class="hljs-keyword">var</span> i, s = <span class="hljs-string">\'\'</span>;\n    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) {\n        <span class="hljs-keyword">if</span> (s) {\n            s += <span class="hljs-string">\'-\'</span>;\n        }\n        s += <span class="hljs-string">\'r\'</span>;\n    }\n    <span class="hljs-keyword">return</span> s;\n};\n\nCat.prototype.get_name = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.says() + <span class="hljs-string">\' \'</span> + <span class="hljs-keyword">this</span>.name + <span class="hljs-string">\' \'</span> + <span class="hljs-keyword">this</span>.says();\n};\n</code></pre>\n<p>It’s a bit verbose.  With ES6 classes we can instead write:</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mammal</span> </span>{\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">this</span>.name = name;\n    }\n\n    get_name() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;\n    }\n\n    says() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.saying || <span class="hljs-string">\'\'</span>;\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mammal</span> </span>{\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">super</span>();\n        <span class="hljs-keyword">this</span>.saying = <span class="hljs-string">\'meow\'</span>;\n    }\n\n    purr(n) {\n        <span class="hljs-keyword">var</span> i, s = <span class="hljs-string">\'\'</span>;\n        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i += <span class="hljs-number">1</span>) {\n            <span class="hljs-keyword">if</span> (s) {\n                s += <span class="hljs-string">\'-\'</span>;\n            }\n            s += <span class="hljs-string">\'r\'</span>;\n        }\n        <span class="hljs-keyword">return</span> s;\n    }\n\n    get_name() {\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.says() + <span class="hljs-string">\' \'</span> + <span class="hljs-keyword">this</span>.name + <span class="hljs-string">\' \'</span> + <span class="hljs-keyword">this</span>.says();\n    }\n}\n</code></pre>\n<p>This allows us to clean things up a lot, removing some boilerplate and focusing the code on our intended functionality.  ES6 classes work quite nicely for simple JavaScript classes like that.  But what about Backbone objects like Models and Views?</p>\n<p>We might think that we can just treat them as classes and the new syntax will “just work”, similar to how CoffeeScript classes function.  So we’d take this example from the <a href="http://backbonejs.org/">Backbone website</a></p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> DocumentRow = Backbone.View.extend({\n\n  <span class="hljs-attr">tagName</span>: <span class="hljs-string">"li"</span>,\n\n  <span class="hljs-attr">className</span>: <span class="hljs-string">"document-row"</span>,\n\n  <span class="hljs-attr">events</span>: {\n    <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n    <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n    <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n  },\n\n  <span class="hljs-attr">initialize</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">"change"</span>, <span class="hljs-keyword">this</span>.render);\n  },\n\n  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-comment">//...</span>\n  }\n\n});\n</code></pre>\n<p>and convert it to something like this:</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DocumentRow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n  tagName: <span class="hljs-string">"li"</span>\n\n  className: <span class="hljs-string">"document-row"</span>\n\n  events: {\n    <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n    <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n    <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n  }\n\n  initialize() {\n    <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">"change"</span>, <span class="hljs-keyword">this</span>.render);\n  }\n\n  render() {\n    <span class="hljs-comment">//...</span>\n  }\n}\n</code></pre>\n<p>Unfortunately this errors out.  So what’s the problem?  It turns out that ES6 classes don’t support adding properties directly to the class instance, only functions/methods.  This makes sense when you understand what is actually happening.  With JavaScript inheritance, properties are generally meant to be set on an instance when its created, while methods are set on the prototype object and shared between every instance.  If properties are added to the prototype directly they will also get shared between every instance, creating problems if the property is an object with mutable state like an array.  You can see that in the following simple example:</p>\n<pre><code><span class="hljs-keyword">var</span> testClass = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{};\ntestClass.prototype.foo = [];\n\n<span class="hljs-keyword">var</span> testA = <span class="hljs-keyword">new</span> testClass();\n<span class="hljs-keyword">var</span> testB = <span class="hljs-keyword">new</span> testClass();\n\n<span class="hljs-built_in">console</span>.log(testA.foo.length); <span class="hljs-comment">//0</span>\n<span class="hljs-built_in">console</span>.log(testB.foo.length); <span class="hljs-comment">//0</span>\ntestA.foo.push(<span class="hljs-string">\'x\'</span>);\n<span class="hljs-built_in">console</span>.log(testA.foo.length); <span class="hljs-comment">//1</span>\n<span class="hljs-built_in">console</span>.log(testB.foo.length); <span class="hljs-comment">//1</span>\n</code></pre>\n<p>When we place a property on the prototype it can cause unexpected side effects.  Instead most of the time, we want to use the class’ constructor to add any properties to each new instance.  <s>Since that is a bit unwieldy when adding many properties, Backbone abstracts away this difference with its extend function.</s> <strong>Edit: Backbone actually does add properties directly to the prototype, going against conventions a bit.</strong> But ES6 classes are focused on the prototype, and the code that is shared between instances. They make the opinionated default properties for instances are handled in the constructor. This maps very cleanly to the current semantics for existing JavaScript class creation, but is different than Backbone’s abstraction. So using ES6 classes for Backbone, we’ll need to give up this nicety.</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DocumentRow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">this</span>.tagName =  <span class="hljs-string">"li"</span>;\n        <span class="hljs-keyword">this</span>.className = <span class="hljs-string">"document-row"</span>;\n        <span class="hljs-keyword">this</span>.events = {\n            <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n            <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n            <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n        };\n        <span class="hljs-keyword">super</span>();\n    }\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">"change"</span>, <span class="hljs-keyword">this</span>.render);\n    }\n\n    render() {\n        <span class="hljs-comment">//...</span>\n    }\n}\n</code></pre>\n<p>Until recently, this was a valid way of defining a Backbone View with ES6 classes.  It’s questionable whether it was a real gain, given the relative ugliness of the syntax for defining instance properties, but it did work.   Unfortunately, in the final version of the ES6 spec for classes, this is no longer valid.  The final spec requires <code>super()</code> to be called before <code>this</code> is referenced in a constructor for classes that are extending another class.  So we have to change our constructor to look like this:</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DocumentRow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">super</span>();\n        <span class="hljs-keyword">this</span>.tagName =  <span class="hljs-string">"li"</span>;\n        <span class="hljs-keyword">this</span>.className = <span class="hljs-string">"document-row"</span>;\n        <span class="hljs-keyword">this</span>.events = {\n            <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n            <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n            <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n        };\n    }\n}\n</code></pre>\n<p>Unfortunately this doesn’t do what we expect. Backbone does significant initialization processing in its constructor, and most properties that Backbone expects to be defined on a Model or View need to be pulled in prior to the constructor executing in order to be used properly.  So with the final ES6 spec we no longer have any way of using declarative properties on subclasses if we want them to be processed by the constructor.</p>\n<h3>So what are our options?</h3>\n<p>There are a few workarounds here, but they’re ugly.  First, Backbone allows any of of its instance properties to also be defined as methods.  So we can rewrite our View like this:</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DocumentRow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    tagName() { <span class="hljs-keyword">return</span> <span class="hljs-string">"li"</span>; }\n\n    className() { <span class="hljs-keyword">return</span> <span class="hljs-string">"document-row"</span>;}\n\n    events() {\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n            <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n            <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n        };\n    }\n\n    initialize() {\n        <span class="hljs-keyword">this</span>.listenTo(<span class="hljs-keyword">this</span>.model, <span class="hljs-string">"change"</span>, <span class="hljs-keyword">this</span>.render);\n    }\n\n    render() {\n        <span class="hljs-comment">//...</span>\n    }\n}\n</code></pre>\n<p>We’re starting to get ridiculous here though.  First, this isn’t a one to one conversion, so if we’re converting existing code, we could develop bugs from any code that directly referenced a View’s properties.  And if that code modified those properties, its no longer as simple to modify them again.  Of course if it’s a property that isn’t processed within the constructor like the <code>url</code> property for Models, we can simply leave it as is.  But suddenly we’re requiring ourselves to know what properties are processed in the constructor or not, as well as wrapping and rewrapping properties in functions.  We’ve added a lot of complexity, and it’s not totally clear what we’ve gained.</p>\n<p>The second option is to simply re-run the Backbone View or Model constructor a second time after adding the initialization properties.  This has a few issues though.  First, it’s ugly.  Nobody wants to do this:</p>\n<pre><code class="language-javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DocumentRow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Backbone</span>.<span class="hljs-title">View</span> </span>{\n\n    <span class="hljs-keyword">constructor</span>() {\n        <span class="hljs-keyword">super</span>();\n        <span class="hljs-keyword">this</span>.tagName =  <span class="hljs-string">"li"</span>;\n        <span class="hljs-keyword">this</span>.className = <span class="hljs-string">"document-row"</span>;\n        <span class="hljs-keyword">this</span>.events = {\n            <span class="hljs-string">"click .icon"</span>:          <span class="hljs-string">"open"</span>,\n            <span class="hljs-string">"click .button.edit"</span>:   <span class="hljs-string">"openEditDialog"</span>,\n            <span class="hljs-string">"click .button.delete"</span>: <span class="hljs-string">"destroy"</span>\n        };\n        Backbone.View.apply(<span class="hljs-keyword">this</span>);\n    }\n}\n</code></pre>\n<p>But it also opens an opportunity for more subtle bugs.  Constructors aren’t meant to be run twice.  Doing so, will among other things cause the Views initialization function to run twice, with a different <code>cid</code> (Backbone’s internal unique id system) set on the View each time. That violates a ton of expectations, again for no clear gain.  So the long and the short of it is that there’s no longer any viable way to use ES6 classes for Backbone objects without a clear loss in functionality and predictability.</p>\n<h3>So Does Any Of This Matter?</h3>\n<p>The idea of using ES6 classes for Backbone has some appeal.  The “class” keyword is nice syntax and there’s an appeal to using more standardized code and fewer library extensions.  Right now, many developers are also just curious about ES6 and how it fits into their workflow.  But does it really matter that this doesn’t work?  I think a case can be made either way, with 2 clear points in each sides favor.  The case for this being a problem:</p>\n<ol>\n<li>\n<p><strong>ES6 Classes are becoming the standard</strong></p>\n<p>By pretty much any standard, Backbone is currently one of the 4 most popular JavaScript frameworks/libraries for building web applications, along with <a href="https://angular.io/">Angular</a>, <a href="http://emberjs.com/">Ember</a>, and <a href="https://facebook.github.io/react/">React</a>.  What do the Angular, Ember, and React teams all have in common?  They’re each working to make sure that current or future versions of their frameworks use ES6 classes to define objects.  As this style of code becomes ubiquitous, Backbone will start to look even more boilerplate heavy and non-standard.  Developers will also start learning about ES6 classes as part of standard JavaScript training, requiring them to map their knowledge about prototypes and class syntax to Backbone’s concepts, rather than just using things they already understand as in other libraries.</p>\n</li>\n<li>\n<p><strong>More Native == Less Library code</strong></p>\n<p>This is more of a far-future advantage, but at some point ES6 classes will be usable everywhere without library support, allowing libraries based on it to include less code for handling this themselves.<sup id="fnref:2"><a href="#fn:2">2</a></sup></p>\n</li>\n</ol>\n<p>And the case that it doesn’t really matter:</p>\n<ol>\n<li>\n<p><strong>Just because its standardized doesn’t make it reusable</strong></p>\n<p>While it’s true that ES6 classes are a standard, realistically Backbone code written using a class syntax isn’t going to be easier or harder to convert to equivalent code using React for example.  Backbone’s way of using it’s standard functions and properties is a much bigger obstacle to code reuse than the particular way it defines classes.  ES6 classes and Backbone objects are in the end just different syntactic sugar over the same prototypical inheritance concepts.  A developer who understands the concepts will be able to use both, and code written in either style will not be easy to reuse outside the Backbone ecosystem.</p>\n</li>\n<li>\n<p><strong>Sometimes doing it yourself is just better</strong></p>\n<p>The truth is that sometimes there are advantages to writing your own APIs.  Backbone’s class code makes the things that are important to using Backbone easy, without any of the trade offs discussed in this article.  There’s something to be said for using the right interface for the job.  There are trade offs for this, just as their are trade offs in other libraries choice to require or encourage a build step for their code.  Both these choices improve the developer API at a cost (complexity, extra code, extra process, etc).  Whether those trade offs are worth it is a judgment call.</p>\n</li>\n</ol>\n<p>It will be interesting to see how the lack of standardization here effects Backbone in the long run, if it does at all.  Along with native Promises, ES6 now offers 2 major features that are similar to but incompatible with important Backbone features <sup id="fnref:3"><a href="#fn:3">3</a></sup>. Along with ES5’s get and set capabilities and ES7’s Object.Observe <sup id="fnref:4"><a href="#fn:4">4</a></sup>, a significant number of Backbone features that once required library code will someday soon be natively supported. Of course Backbone has never been a set of features as much as a way of writing programs.  Since Backbone is essentially finished and there are <a href="https://github.com/jashkenas/backbone/issues/3405">no plans to significantly change the interface</a>, the continued improvements to the standard language serve as both a validation of Backbone’s core concepts as well as a challenge to its future.</p>\n<p><strong>Update:</strong> <em>There’s been a <a href="https://github.com/jashkenas/backbone/issues/3560">great discussion of this issue</a> on Backbone’s Github issue tracker.  Feel free to weigh in there if you’re interested in figuring this out.</em></p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>If you do want to use ES6 now, <a href="https://babeljs.io/">Babel</a> is the best tool for making that happen.  The Babel website also contains a <a href="https://babeljs.io/docs/learn-es6/">great rundown</a> of the various features that make up ES6.</p>\n</li>\n<li>\n<p>Axel Rauschmayer has <a href="http://www.2ality.com/2015/02/es6-classes-final.html">a great article</a> describing the final spec for ES6 classes, including a description of the changes that made them incompatible with Backbone.</p>\n</li>\n<li>\n<p>React Developers have noted the same issues with property initializers that Backbone users encounter.  As part of version 0.13 of React, they’re supporting a special property initialization syntax for classes, which may eventually be standardized.  There’s more info on that in <a href="https://esdiscuss.org/topic/es7-property-initializers">this ESDiscuss thread</a>.  This standard is still being worked out but an experimental support version is available in Babel 5.0.0.  Unfortunately that version defines class properties as being instantiated after the superclass constructor is run, so this doesn’t solve Backbone’s issues here.</p>\n</li>\n<li>\n<p>If you were confused by the discussion of prototypes and the code examples of non-ES6 JavaScript classes, I wrote a quick explanation of <a href="http://benmccormick.org/2013/01/12/explaining-javascript-object-oriented-programming/">Object Oriented Programming in Javascript</a> back in 2012.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        ECMAScript version 6, now officially ECMAScript 2015\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n        <li class="footnote" id="fn:2">\n            <p>\n            This is admittedly a bigger advantage for Ember, Angular 2.0, and React, which all encourage using a build step to convert ES6/Typescript/JSX to ES5 JavaScript.  That means they can all rely on ES6 class support now, since older browser support is handled through compilation.  \n            </p><p>\n            Backbone doesn\'t require or encourage a transpilation step (although CoffeeScript works very nicely for this case), and so it\'s more important for it to have a top-notch API supported by all JavaScript engines that it is likely to be run on.  It will be a long time before that is true of ES6 classes.\n            <a href="#fnref:2" title="return to article"> ↩</a></p>\n        </li>\n    <li class="footnote" id="fn:3">\n        <p>\n        Promises are similar to jQuery deferreds, which are technically not a Backbone feature, but are a key part of Backbone development for many developers because they\'re used with Backbone sync.\n        <a href="#fnref:3" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'
}},function(e,t){e.exports={title:"ES6 Patterns: Clean Higher Order Functions",date:"2015-11-30 05:06:03+00:00",layout:"post",path:"/2015/11/30/es6-patterns-clean-higher-order-functions",category:"javascript",description:"A quick tip for clean functional syntax in ES6",key:"clean-higher-order-functions",readNext:"ecma-explanation,callbacks-to-promises,what-are-hocs",pageViews:"4080",last30pageViews:"221",body:'<div class="explanation">\nI\'ve been writing code using the new features defined in the ECMAScript 2015 version of JavaScript (<a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">more commonly known as ES6</a>) since January.  Throughout the year I\'ve seen myself start using a few new patterns that I think make my code better.  I\'m going to share them here with a few quick hitter articles, starting with a simpler way of writing higher order functions\n</div>\n<p>A higher order function is a function that either</p>\n<ol>\n<li>\n<p>Takes another function as an argument or</p>\n</li>\n<li>\n<p>Returns a function when called</p>\n</li>\n</ol>\n<p>Although many people have never heard of them, higher order functions are a key part of JavaScript development and something that most JavaScript developers will encounter every day, whether they know the term or not.  jQuery, Underscore, and many other JavaScript libraries are built on higher order functions.  Many of the core JavaScript APIs, like map, filter, forEach, and setTimeout are functions that take functions as arguments.  If you’re not comfortable with these patterns, learning about them can help you understand the JavaScript ecosystem better.  Hopefully this article will pique your interest.</p>\n<p>For this pattern, I’ll be focused on the second class of higher-order functions, functions that return other functions.  They can be useful in a variety of cases.  As an example, let’s consider a blog commenting application with a list of users.  Our task is to get a list of comments for each user.  We can do that with the builtin <code>map</code> and <code>filter</code> functions and a simple helper function like this.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { commentList } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./comments\'</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCommentFromUser</span>(<span class="hljs-params">userId</span>) </span>{\n    <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">user</span>: userId,\n        <span class="hljs-attr">comments</span>:commentList.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">comment</span>) </span>{\n            <span class="hljs-keyword">return</span> comment.user === userId\n        },\n    };\n}\n\n<span class="hljs-keyword">let</span> userIds = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],\n    userComments = userIds.map(getCommentFromUser);\n\n<span class="hljs-comment">//do stuff with comments</span>\n</code></pre>\n<p>We’ve now written some simple, working code.  We take a list of user ids and return a list of users with the ids mapped to their comments.  Everything is fine, and we can move forward to do things with the comments.  If we don’t need to maintain this code base, we could probably stop here.</p>\n<p>The problem is, while this example works for the simple case, it isn’t very flexible.  We pull the comments directly from a single source that we’ve made available to all of the code in our module.  We can’t add any additional filters on the comments used or pull comments from additional sources without rewriting our mapping logic. If we decide we only want comments that were written in the past year for instance, we’ll need to rewrite our function or mutate commentList in a way that could effect code in the rest of the file. That feels pretty sloppy, since mapping comments to users should be unrelated to determining what comments we’re including in our groupings.  Fortunately we can solve this using a higher order function.  If we rewrite the code so that <code>getCommentFromUser</code> takes a list of comments and returns a function that takes an id, we can then control exactly what comments are included in the grouping.  For now we’ll leave our full list, but it could be rewritten later to be a filtered list or to pull comments from multiple sources, without re-writing this logic.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { commentList } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./comments\'</span>;\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getCommentFromUser</span> (<span class="hljs-params">comments</span>)\n    <span class="hljs-title">return</span> <span class="hljs-title">function</span> (<span class="hljs-params">userId</span>) </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-attr">user</span>: userId,\n            <span class="hljs-attr">comments</span>: comments.filter(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">comment</span>) </span>{\n                <span class="hljs-keyword">return</span> comment.user === userId\n            },\n        };\n    }\n}\n\n<span class="hljs-keyword">let</span> userIds = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],\n    userComments = userIds.map(getCommentFromUser(commentList));\n\n<span class="hljs-comment">//do stuff with comments</span>\n</code></pre>\n<p>Our code has gotten much more flexible, but at the cost of readability.  Most developers without significant functional programming experience will have to look twice at the 4 levels of nesting and multiple return statements in our helper function definition to understand what is going on.  We’ve added significant boilerplate in a way that muddies up the meaning of our function, when all we’re really trying to do is provide a way to make the comments list used in the function configurable.  That is extremely “beginner-unfriendly”.  At the same time using higher order functions like this is a useful pattern that serves a real need in the design of our application.  Fortunately, ES6 gives us the opportunity to clean up our syntax.</p>\n<p>ES6 provides “arrow functions”, a shorthand for functions that have 2 main differences from the JavaScript <code>function</code> keyword.  First, they don’t bind a <code>this</code> value as a context, instead using the <code>this</code> of the parent scope.  Secondly, they can be written inline, with no parentheses and an implicit return.  So you can write a squaring function as <code>const square = (x) =&gt; x * x;</code>.  The first property of these functions has many consequences that have been covered in depth elsewhere around the internet.  But when writing non object oriented functions that don’t use <code>this</code> like our example above, it is mostly not relevant.  In this case though, the cleaner syntax that arrow functions provide allow us to write a clear and clean higher order function to solve our use case.  With arrow functions, our example from above now looks like this.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { commentList } <span class="hljs-keyword">from</span> <span class="hljs-string">\'./comments\'</span>;\n\n<span class="hljs-keyword">const</span> getCommentFromUser = <span class="hljs-function">(<span class="hljs-params">comments</span>) =&gt;</span> (userId) =&gt; ({\n    <span class="hljs-attr">user</span>: userId,\n    <span class="hljs-attr">comments</span>: comments.filter( <span class="hljs-function">(<span class="hljs-params">comment</span>) =&gt;</span> comment.user === userId),\n})\n\n<span class="hljs-keyword">let</span> userIds = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>],\n    userComments = userIds.map(getCommentFromUser(commentList));\n\n<span class="hljs-comment">//do stuff with comments</span>\n</code></pre>\n<p>I like to call the <code>() =&gt; () =&gt;</code> pattern a “double function”, and have found it popping up all over the code I write since I began using ES6, especially when I’m using <code>map</code>, <code>filter</code>, and <code>reduce</code>.  Array transformations using those functions often require contextual information beyond the contents of the array.  A naive approach to this would involve having the function reference variables in the outer scope directly, like we did with commentList above.  More commonly that happens when a user inlines a function inside of a <code>map</code> call and references variables in the parent scope.  I’ve found that it is much clearer and less error prone to use a higher order function that takes only the variables that are needed for the transformation in, and returns a new function that can be used for the transformation.  This reduces the number of things that can effect the output of the function, allows for greater configurability without directly changing the transformation logic, and makes it clear to readers what values are expected to be used in the function.  Double functions make this easy, and they’ve easily been one of my favorite new code patterns with ES6.</p>\n<h3>More Resources</h3>\n<ul>\n<li>If you’re interested in higher order functions and JavaScript, I know of no better reference than <a href="https://leanpub.com/javascriptallongesix">JavaScript Allongé</a>.  It’s a fantastic deep dive into the JavaScript language with a functional flavor, building understanding from the bottom up and providing many ideas for code recipes along the way.  And it’s recently been rewritten to reflect the changes to the language that ES6 brought.</li>\n<li>Here’s a nice <a href="http://www.2ality.com/2012/04/arrow-functions.html">deep dive on arrow functions at 2ality</a> by Axel Rauschmayer.  If you haven’t seen his blog, it’s a fantastic reference on ES6 and JavaScript in general</li>\n</ul>\n'}},function(e,t){e.exports={title:"ES6 Patterns: Converting Callbacks to Promises",date:"2015-12-30 03:30:47+00:00",layout:"post",path:"/2015/12/30/es6-patterns-converting-callbacks-to-promises",category:"javascript",description:"How to convert a callback driven API to a Promise-based one",key:"callbacks-to-promises",readNext:"ecma-explanation,clean-higher-order-functions,backbone-devs-react",pageViews:"24241",last30pageViews:"2360",body:'<div class="explanation">\nI\'ve been writing code using the new features defined in the ECMAScript 2015 version of JavaScript (<a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">more commonly known as ES6</a>) since January.  Throughout the year I\'ve seen myself start using a few new patterns that I think make my code better.  I\'m going to share them here with a few quick hitter articles.  If you missed it, I wrote about <a href="http://benmccormick.org/2015/11/30/es6-patterns-clean-higher-order-functions/">clean higher order functions</a> earlier this week.  This post focuses on working with asynchronous code in ES6.  \n</div>\n<h3>Background</h3>\n<p>One of the nicest new features of ES6 JavaScript is the standardization of Promises.  Promises are a method for managing asynchronous code that serve as an alternative to the standard callback function syntax that has been the JavaScript standard for years.  If you’re unfamiliar with them, a good example of a Promise based API is the new <code>fetch</code> api provided by browsers.  <code>fetch</code> is a replacement for the older callback based XMLHttpRequest API.  A quick example of an HTTP request with the 2 APIs provides a nice comparison of how Promises can lead to clearer code.</p>\n<p>A simple get request with XMLHttpRequest looks like this:</p>\n<pre><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reqListener</span>(<span class="hljs-params"></span>) </span>{  \n  <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-keyword">this</span>.responseText);  \n  <span class="hljs-built_in">console</span>.log(data);  \n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reqError</span>(<span class="hljs-params">err</span>) </span>{  \n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Fetch Error :-S\'</span>, err);  \n}\n\n<span class="hljs-keyword">var</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();  \nrequest.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">JSON</span>.parse(<span class="hljs-keyword">this</span>.responseText);  \n  <span class="hljs-comment">//do stuff with data</span>\n};  \n\nrequest.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    alert(<span class="hljs-string">\'There was a problem with the request\'</span>);\n}\nrequest.open(<span class="hljs-string">\'get\'</span>, <span class="hljs-string">\'/api/foo/bar\'</span>, <span class="hljs-literal">true</span>);  \nrequest.send();\n</code></pre>\n<p>whereas with fetch we get this instead</p>\n<pre><code>fetch(<span class="hljs-string">\'/api/foo/bar\'</span>).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(data)</span> {</span>\n    <span class="hljs-keyword">return</span> data.json();\n}).<span class="hljs-keyword">then</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(jsonData)</span> {</span>\n    <span class="hljs-comment">//do stuff with the data</span>\n}).<span class="hljs-keyword">catch</span>(<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(e)</span> {</span>\n    alert(<span class="hljs-string">\'There was a problem with the request\'</span>);\n})\n</code></pre>\n<p>This is admittedly a slightly unfair example due to XMLHttpRequest’s clunky object oriented API, but the key take away here is that promises allow for easier visualization of a program’s flow, as well as the ability to easily chain both synchronous and asynchronous operations together into a unified API.</p>\n<p>Promises have been around for a little while in user-land.  There are a bunch of Promise libraries out there that eventually standardized on a spec called <code>Promises/A+</code>.  Promises/A+ compliant libraries include <a href="https://github.com/kriskowal/q">Q</a>, <a href="https://github.com/petkaantonov/bluebird">Bluebird</a>, and <a href="https://github.com/tildeio/rsvp.js">rsvp</a>.  There are also many older libraries that provide Promise-like capabilities but are not completely spec compatible, most notably <a href="https://api.jquery.com/category/deferred-object/">jQuery deferreds</a>.  But with ES6 Promises are being standardized.  Happily, since the implementation uses the standard that user-land libaries have agreed upon, the Promise spec is compatible with existing implementations, and existing code bases can remove their existing libraries in favor of the browser supplied version, or have code written to use the browser version interop cleanly with their existing code.  Support for Promises now exists in the latest versions of all major browsers, but it never made it to Internet Explorer and is Edge only for Microsoft browsers.  So most developers will still want to consider using a polyfill for the time being.</p>\n<h3>Converting callback-driven code to use Promises</h3>\n<p>If you believe that Promises are worthwhile, you’ll immediately encounter a problem in today’s JavaScript world.  Many JavaScript APIs, including most standard browser APIs and older but still popular libraries like jQuery and Backbone are heavily callback driven.  Rather than mixing 2 different styles of asynchronous code, wouldn’t it be nice if we could easily convert callback-based APIs to use Promises?  It turns out that it’s not that hard.  Let’s take the simplest example possible to start.  <code>setTimeout</code> is a straightforward browser API that waits for a specified period of time and then executes a callback.  A standard use looks like this:</p>\n<pre><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doStuff</span><span class="hljs-params">()</span> </span>{<span class="hljs-comment">/*...*/</span>}\n\nsetTimeout(doStuff, <span class="hljs-number">300</span>);\n</code></pre>\n<p>A Promise-based API for this function would likely look something like this code.</p>\n<pre><code><span class="hljs-function"><span class="hljs-title">timeout</span><span class="hljs-params">(<span class="hljs-number">300</span>)</span></span>.then(doStuff)\n</code></pre>\n<p>We can create an API like that using setTimeout.  To do that, we’ll need a function <code>timeout</code> which takes a timeout variable and returns a Promise.</p>\n<p>You can define A+ compliant Promises using the Promise constructor, which expects a single function as an argument.  That function takes 2 arguments, a <code>resolve</code> function and a <code>reject</code> function.  The wonderful thing is that under the covers these are just callback functions that the Promise api glosses over.</p>\n<p>Since we already have an API that can handle callbacks, the implementation of our <code>timeout</code> function is pretty simple.</p>\n<pre><code><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timeout</span>(<span class="hljs-params">delay</span>) </span>{\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{\n        setTimeout(resolve, delay);\n    });\n}\n</code></pre>\n<p>We don’t use the reject callback, since setTimeout doesn’t provide any hooks for an error state. So we pass resolve as the callback to setTimeout, and that is all we need.  Now we have a great chainable setTimeout function that we could include in a Promise chain.</p>\n<p>Moving on to a more complicated example, let’s take our <code>XMLHttpRequest</code> code from above and see if we can create a simplified version of the <code>fetch</code> API using <code>XMLHttpRequest</code> under the covers.  In this case I’m going to use ES6 style arrow functions to reduce the boilerplate a bit.</p>\n<pre><code><span class="hljs-keyword">const</span> fetch = <span class="hljs-function">(<span class="hljs-params">url, options = {method:<span class="hljs-string">\'get\'</span>}</span>) =&gt;</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    <span class="hljs-keyword">let</span> request = <span class="hljs-keyword">new</span> XMLHttpRequest();  \n    request.onload = resolve\n    request.onerror = reject;\n    request.open(options.method, url, <span class="hljs-literal">true</span>);  \n    request.send();\n});\n</code></pre>\n<p>This is a simplified implementation that doesn’t come close to covering all the use cases of fetch, but it provides a great example of how simple it can be to transform a callback based api to a Promise based one, without having to rewrite the existing code<sup id="fnref:1"><a href="#fn:1">1</a></sup>.</p>\n<p>For what it’s worth, it is equally easy to convert functions in the other direction.  For instance a callback based implementation of fetch can be a one liner.</p>\n<pre><code>const callbackFetch = <span class="hljs-function"><span class="hljs-params">(url, options, succ, err)</span> =&gt;</span> fetch(url, options).<span class="hljs-keyword">then</span>(succ).<span class="hljs-keyword">catch</span>(err);\n</code></pre>\n<p>It’s useful to know that the various syntaxes for asynchronous code in JavaScript are effectively equivalent and interoperable.  When designing APIs for your code, both for public libraries with external libraries and components that you use in an application, these patterns can be useful for providing a consistent API, even if you’re using code under the covers that presents it’s asynchronous code in a different way than your API.</p>\n<h3>More Resources</h3>\n<ul>\n<li>The free online version of Exploring ES6 by Axel Rauschmayer has a <a href="http://exploringjs.com/es6/ch_promises.html">great chapter</a> on ES6 Promises explaining the API and how they fit in with the A+ standard.</li>\n<li>There was also a <a href="http://blogs.msdn.com/b/eternalcoding/archive/2015/09/30/javascript-goes-to-asynchronous-city.aspx">great post by David Catuhe on one of the MSDN blogs</a> earlier this year highlighting how asynchronous code has evolved in JavaScript over the years, including a look at the new <code>async/await</code> patterns proposed for ES2016.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        And even a full implementation of fetch using XMLHttpRequest is only<a href="https://github.com/github/fetch/blob/master/fetch.js"> ~300 lines</a>\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Evergreen Browsers",date:"2013-06-11 18:45:00+00:00",layout:"post",path:"/2013/06/11/evergreen-browsers",description:"A look at the future of browsers",category:"platform",pageViews:"214",last30pageViews:"0",body:'<p><a href="http://tomdale.net/2013/05/evergreen-browsers/">Tom Dale on Evergreen Browsers:</a></p>\n<blockquote>\n<p>If you’re like me, when you’re developing a new web application, you put features into mental buckets. There’s the “works in IE7″ bucket, the “works in IE8″ bucket, “(I think) works in IE9,” and of course, “works in MobileSafari.”</p>\n</blockquote>\n<blockquote>\n<p>The one bucket I don’t have is the “works in Chrome” bucket. That’s too much mental overhead. Instead, if I want to test whether something works in Chrome, I just pop open a new JS Bin and try it out. I don’t worry about which version they’re on—I assume that by the time my code makes it to production, my users will be on more-or-less the same version as me.</p>\n</blockquote>\n<blockquote>\n<p>What would the web platform look like if every browser with significant market share updated itself at the same pace—and lack of user intervention—as Chrome?</p>\n</blockquote>\n<p>I’m excited for this to happen.  Browser diversity is a good thing and worth the pain because it pushes things forward, but the advantages are lost when users aren’t moving forward along with the innovations that diversity and competition bring.  Having an up to date browser shouldn’t be a user concern.  Here’s to a web that moves at the pace of the leaders, rather than being paced by the least common denominator.</p>\n'}},function(e,t){e.exports={title:"Explaining Javascript: Closures",date:"2013-01-08 23:30:00+00:00",layout:"post",path:"/2013/01/08/explaining-javascript-closures",category:"javascript",description:"Diving into one of JavaScripts more confusing concepts",key:"closures",pageViews:"164",last30pageViews:"0",body:'<p>Javascript can be a confusing language when you start to use it.  Designed in a hurry with a functional programming heart and an object oriented skin, Javascript looks a lot like Java or C at first glance.  That expectation causes frustration though when you realize that writing Java style code means that you have no private variables, no block scope, no threads, and no abstract/classes or interfaces.  When I started writing Javascript I had only ever written in pure object oriented languages.  My javascript code was inefficient, fragile, and no fun to write.  I wanted to share some of the things I’ve learned since here, to help other people making that adjustment.</p>\n<h3>Closures</h3>\n<p>Closures are one of the key concepts to understand when you start writing Javascript.  By default, all javascript objects are global, and blocks such as for loops and if statements do not restrict scope.  Closures are Javascript’s mechanism for information hiding and controlling scope.  They also allow for some advanced functionality in an elegant way.</p>\n<h4>Laying the ground</h4>\n<p>There are a few things you need to understand about Javascript before closures make sense.</p>\n<h4>Functions are objects</h4>\n<p>Javascript uses First Class Functions, meaning that Functions are Objects in Javascript.  They can be passed to other functions, assigned properties, and be added as properties of another object.  This is very important to understand about Javascript, and a big difference between Javascript and Java/C++.</p>\n<pre><code class="language-javascript">    <span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{\n        <span class="hljs-keyword">return</span> x*<span class="hljs-number">2</span>;\n    }\n    f(<span class="hljs-number">3</span>);<span class="hljs-comment">//6</span>\n    <span class="hljs-keyword">var</span> f2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">func, param</span>)</span>{\n        <span class="hljs-keyword">return</span> func(param) + <span class="hljs-number">1</span>;\n    }\n\n    f2(f,<span class="hljs-number">5</span>); <span class="hljs-comment">// 11</span>\n</code></pre>\n<h4>Functions have their own scope</h4>\n<p>Functions are effectively the only construct in Javascript that can limit scope.  Unlike other languages, code blocks don’t automatically limit scope.  So variables defined in for loops and if statements are not confined to those constructs, and Javascript doesn’t have an exact equivalent to javascript classes.  Instead functions are used to manage scope.  The key point is that from within a function you can reference variables defined outside the function, but you cannot access variables defined within a function from outside that function.</p>\n<pre><code class="language-javascript">    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;\n\n    <span class="hljs-keyword">var</span> f = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n        <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;\n        alert(a);\n        alert(b);\n    }\n    f();<span class="hljs-comment">// alerts 1, alerts 2</span>\n    a = <span class="hljs-number">3</span>;\n    f(); <span class="hljs-comment">//alerts 3, alerts 2</span>\n    alert(b) <span class="hljs-comment">// undefined</span>\n</code></pre>\n<h4>Functions can be defined inside of other functions</h4>\n<p>This naturally follows from the other two points.  Functions are just objects and can be defined anywhere.  So you can define a function inside another function, and use it as the return value of the outer function.</p>\n<pre><code class="language-javascript">    <span class="hljs-keyword">var</span> outer = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n\n        <span class="hljs-keyword">var</span> inner = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{\n            <span class="hljs-keyword">return</span> x*<span class="hljs-number">2</span>;\n        };\n        <span class="hljs-keyword">return</span> inner;\n    };\n    <span class="hljs-keyword">var</span> a = outer();\n\n    a(<span class="hljs-number">2</span>); <span class="hljs-comment">// 4</span>\n</code></pre>\n<h4>What is a Closure?</h4>\n<p>A closure is a function defined inside of another function and returned by that function which maintains a reference to variables in the outer functions scope.  Since the inner function was created within the scope of the outer function, it can reference variables defined within the scope of the outer function.  This is best seen by example.</p>\n<pre><code class="language-javascript">    <span class="hljs-keyword">var</span> outer = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n        <span class="hljs-keyword">var</span> y = <span class="hljs-number">3</span>\n        <span class="hljs-keyword">var</span> inner = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">x</span>)</span>{\n            <span class="hljs-keyword">return</span> x*y;\n        };\n        <span class="hljs-keyword">return</span> inner;\n    };\n    <span class="hljs-keyword">var</span> triple = outer();\n\n    triple(<span class="hljs-number">2</span>); <span class="hljs-comment">// 6;</span>\n    alert(y); <span class="hljs-comment">//undefined</span>\n</code></pre>\n<p>Since the outer function scope is maintained, you can also use the variables within that class to track state for the function so that it can only be modified through the function.  This is how javascript implements private variables.</p>\n<pre><code class="language-javascript">    <span class="hljs-keyword">var</span> outer = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n        <span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>\n        <span class="hljs-keyword">var</span> inner = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n            alert(y);\n            y++;\n        };\n        <span class="hljs-keyword">return</span> inner;\n    };\n    <span class="hljs-keyword">var</span> message = outer();\n    message() <span class="hljs-comment">// 0</span>\n    message() <span class="hljs-comment">// 1</span>\n    message() <span class="hljs-comment">// 2</span>\n    message() <span class="hljs-comment">// 3</span>\n    <span class="hljs-comment">//...</span>\n</code></pre>\n<h4>Closures in practice</h4>\n<p>Closures are one of the most commonly used idioms in javascript.  They’re used anytime a programmer wants to protect their implementation of a feature, and prevent other code from directly referencing internal variables.  Its also the key concept in the popular <a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth">module pattern</a>, and many more javascript patterns.  If you are writing javascript of any complexity, or need to understand other people’s javascript code, understanding closures is essential.</p>\n<h2>Further Reading</h2>\n<ul>\n<li><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Guide/Closures">Mozilla Documentation on Closures</a></li>\n<li><a href="http://www.adequatelygood.com/2010/3/JavaScript-Module-Pattern-In-Depth">Ben Cherry on the Module Pattern</a></li>\n<li><a href="http://www.amazon.com/Effective-JavaScript-Specific-Software-Development/dp/0321812182">Effective Javascript</a> is a great book for understanding javascript.  I wrote a review of it <a href="http://benmccormick.org/blog/2013/01/06/book-review-effective-javascript/">here</a></li>\n</ul>\n'
}},function(e,t){e.exports={title:"Explaining Javascript: Object Oriented Programming",date:"2013-01-12 03:05:00+00:00",layout:"post",path:"/2013/01/12/explaining-javascript-object-oriented-programming",category:"javascript",description:"A look at Object Oriented programming principles in JavaScript",pageViews:"1006",last30pageViews:"21",body:'<p>I’m continuing this series on Javascript concepts for people new to the language by looking at  object oriented programming.  One of the more confusing concepts for new Javascript programmers, especially those used to the classical inheritance structures of Java or C++ is Javascript’s prototypical inheritance model.  Because it is possible to write syntax for Javascript object creation that can look very similar to classical inheritance in Java, its easy to be misled and have false expectations.  Its important to understand how Javascript’s object model works, so that you can adjust your expectations and write code that takes advantage of the language’s expressive power.</p>\n<h4>Creating a new object</h4>\n<p>Javascript provides multiple ways to create new objects.  The simplest way is to just create an empty object with <code>{}</code>.  The one I’ll be looking at today was modeled after Java syntax and gives the language a deceptively classical vibe:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Creating Objects with new</span>\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Animal</span>(<span class="hljs-params"></span>)</span>{\n        <span class="hljs-keyword">this</span>.home = <span class="hljs-string">"earth"</span>;\n        <span class="hljs-keyword">this</span>.noise = <span class="hljs-string">"roar"</span>;\n    }\n\n    Animal.prototype.sound = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n        alert(<span class="hljs-keyword">this</span>.noise);\n    }\n\n    <span class="hljs-keyword">var</span> animalObject = <span class="hljs-keyword">new</span> Animal();\n    animalObject.sound(); <span class="hljs-comment">// roar</span>\n    <span class="hljs-keyword">var</span> home = animalObject.home <span class="hljs-comment">//earth</span>\n</code></pre>\n<p>This all looks very familiar and comfortable to a Java programmer.  Animal() is the constructor of a class Animal, with a function sound() and animalObject is an instance of that class.  And you can write code like that if you want.  The problem is, that model is not enforced at all by javascript.  Javascript doesn’t have any special “constructor functions” or classes<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.  Any function can be used as a constructor</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Normal Function as constructor</span>\n\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">normalFunc</span>(<span class="hljs-params"></span>)</span>{\n        alert(<span class="hljs-string">"This is a normal function"</span>)\n    }\n    <span class="hljs-keyword">var</span> normal = <span class="hljs-keyword">new</span> normalFunc();\n    normal <span class="hljs-keyword">instanceof</span> normalFunc  <span class="hljs-comment">//true</span>\n    <span class="hljs-keyword">var</span> x = {};\n    x.y = normalFunc;\n\n    <span class="hljs-keyword">var</span> huh = <span class="hljs-keyword">new</span> x.y();\n    huh instance <span class="hljs-keyword">of</span> normalFunc <span class="hljs-comment">//true</span>\n</code></pre>\n<p>So whats actually happening when you call new before a function?  The new operator generates a new object, binds <code>this</code> to that object for the constructor function, calls that function and sets that function as the prototype of the new object.  But what is a prototype?</p>\n<h4>Prototypes</h4>\n<p>Javascript inheritance is at its heart “prototypical inheritance”.  This means that rather than having a concept of “classes” and “implementations” of those classes, javascript objects inherit their properties directly from other objects.  So for the “classical” example above, what is actually happening is that a new object is being created, it is having some of its properties set by the constructor function, and then has the constructor’s prototype set as its prototype.  This means that it has access to any properties on the “prototype chain” of the constructor, which in this case includes the sound method.  All objects have acccess to Object.prototype, giving it access to object properties and methods like toString, hasOwnProperty and others.</p>\n<h4>The ES5 Way</h4>\n<p>The ECMAScript 5 specification defines a new way to create objects from existing objects with the <strong><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></strong> syntax.  Object.create takes an existing object and sets it as the prototype object for a newly created object<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.  This was added to make the syntax for setting the prototype of a new object easier and more clear.<sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>  It also allows us to simulate classical inheritance:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//ES5 Classical Inheritance example</span>\n\n    <span class="hljs-keyword">var</span> Cat = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n        Animal.call(<span class="hljs-keyword">this</span>); <span class="hljs-comment">//Call the Animal constructor to set local variables</span>\n        <span class="hljs-keyword">this</span>.noise = <span class="hljs-string">"meow"</span> <span class="hljs-comment">//override the Animal sound</span>\n    }\n    Cat.prototype = <span class="hljs-built_in">Object</span>.create(Animal.prototype)\n\n   <span class="hljs-keyword">var</span> kitty = <span class="hljs-keyword">new</span> Cat();\n\n   kitty.sound() <span class="hljs-comment">//meow</span>\n   alert(kitty.hasOwnProperty(<span class="hljs-string">"sound"</span>)) <span class="hljs-comment">//false</span>\n   alert(kitty <span class="hljs-keyword">instanceof</span> Cat) <span class="hljs-comment">//true</span>\n   alert(kitty <span class="hljs-keyword">instanceof</span> Animal) <span class="hljs-comment">//true</span>\n</code></pre>\n<p>So as you can see, it is very possible to write Object-Oriented Javascript.  The key is to understand that what’s happening behind the scenes in Javascript is different than Java or C++, even though the syntax may look similar.</p>\n<h4>Summary</h4>\n<ul>\n<li>\n<p>Inheritance and object oriented programming in javascript are possible, but are more of a programmer defined construct rather than an inherent property of the language</p>\n</li>\n<li>\n<p>Javascript supports prototypical inheritance, meaning that it inherits functions and properties from its prototype object.  All objects inherit from Object.prototype.</p>\n</li>\n<li>\n<p>ECMAScript 5 introduced support for Object.create, which provides an easier syntax for creating new objects and simulating inheritance.</p>\n</li>\n</ul>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li>\n<p><a href="https://developer.mozilla.org/en-US/docs/JavaScript/Introduction_to_Object-Oriented_JavaScript">Mozilla’s Developer Documentation</a> has a good summary of implementing Object Oriented Programming concepts in Javascript</p>\n</li>\n<li>\n<p><a href="http://msdn.microsoft.com/en-us/magazine/gg314983.aspx">Managing Javascript Objects</a> is a great article by Nicholas Zakas for MSDN about designing an object oriented application in Javascript.  Zakas also has recently written a <a href="https://leanpub.com/oopinjavascript">book</a> on object oriented programming in Javascript</p>\n</li>\n</ul>\n<hr>\n<h3>Explaining Javascript</h3>\n<p>This is the second article in my Explaining Javascript series for introducing Javascript concepts to new JS developers.</p>\n<ol>\n<li>\n<p><a href="http://www.benmccormick.org/blog/2013/01/08/javascript-explained-closures/">Closures</a></p>\n</li>\n<li>\n<p><a href="http://www.benmccormick.org/blog/2013/01/12/javascript-explained-object-oriented-javascript/">Object Oriented Programming</a></p>\n</li>\n</ol>\n<hr>\n<div class="footnotes"><ol>\n<li class="footnote" id="fn:1">\n<p>\nIn the next version of Javascript ES6 there will be a more formal concept of classes.  You can read more <a href="http://wiki.ecmascript.org/doku.php?id=strawman:maximally_minimal_classes">here</a> if interested\n<a href="#fnref:1" title="return to article"> ↩</a>\n</p>\n</li>\n<li class="footnote" id="fn:2">\n<p>\nWith an optional second argument to set the local properties of the object from another object.  Note that these properties will need to be Objects, not primitive values, or a TypeError will be thrown        \n<a href="#fnref:2" title="return to article"> ↩</a>\n</p>\n</li>\n<li class="footnote" id="fn:2">\n<p>Thanks to <a href="https://plus.google.com/u/0/110077141419510454119/posts">Eric Elliot</a> for pointing out that my original description of Object.Create was misleading.  There are multiple ways to create and reuse object code in Javascript.  I only touch on one of them in this article.<br>\n<a href="#fnref:2" title="return to article"> ↩</a></p>\n</li>\n</ol></div>\n'}},function(e,t){e.exports={title:"How I Use Stack Overflow",date:"2013-06-11 21:19:00+00:00",layout:"post",path:"/2013/06/11/how-i-use-stack-overflow",category:"tools",description:"Getting the most out of Stack Overflow",pageViews:"235",last30pageViews:"0",body:'<blockquote>\n<p>The problem with self directed learning is that our ability to learn is often constrained by the very problem we are trying to solve, our limited knowledge of a field.</p>\n</blockquote>\n<p>One of the first things I learned as I began to work in the software industry was that self driven learning is necessary for staying relevant.  Especially when working on evolving platforms like the web and mobile, things change fast.  The web frameworks of 2005 have little direct relevance to web development in 2013, and mobile development in its current form was a category that didn’t even exist in 2005.  If you want to be at the top of your field, or even anywhere close, learning and growing independently of whatever your current task happens to be is incredibly important.  But it can be hard to put into practice.</p>\n<p>The problem with self directed learning is that our ability to learn is often constrained by the very problem we are trying to solve, our limited knowledge of a field. Some of these problems resolve themselves quite easily.  A beginning Javascript programmer may not know that he needs to include a script in order to use the jQuery syntax he’s seen online, but he’ll discover it very quickly when his script fails to run.  But it’s quite possible to go on programming for years without realizing that it’s bad practice to couple your view and model too tightly, or even without gaining a deep understanding of how a web application model actually works. We create our models of how programming works, and it’s easy to stay inside those closed doors.  It can be easy to try and fit new languages into existing understandings, which is why you find people writing Java that looks like C and Javascript that looks like Java.  We don’t grow because we don’t ask the right questions.</p>\n<h4>Enter Stack Overflow</h4>\n<blockquote>\n<p>The killer feature when asking questions is that developers often won’t answer within the scope of what you asked; they’ll help you ask the right questions instead</p>\n</blockquote>\n<p>If the problem is that we don’t ask the right questions, a Q&amp;A site may seem like a dubious solution.  But <a href="http://stackoverflow.com/">Stack Overflow</a> has been the best tool I’ve ever found for self-directed learning. It’s a crazy hybrid between a wiki, Q&amp;A site, forum, and video game originally conceived by <a href="http://www.codinghorror.com/blog/">Jeff Atwood</a> and <a href="http://www.joelonsoftware.com/">Joel Spolsky</a> back in 2008.  With ambitions to become a comprehensive programming archive for the web, the site has become a critical resource for programmers. In fact it’s the <a href="http://www.alexa.com/siteinfo/stackoverflow.com">92nd most visited website in the world</a> as of June 2013.</p>\n<p>So how does StackOverflow enable self directed learning?  The most obvious way is allowing open-ended questions to be asked, with answers crowd-sourced from a global community of developers.  The killer feature when asking questions is that developers often won’t answer within the scope of what you asked; they’ll help you ask the right questions instead.  If you ask how to change the backgrounds of a group of DOM items given a list of ids, you’re likely to get an answer (or 5) while also helpfully being informed of the existence of classes.  Because multiple answers are allowed you may be exposed to multiple approaches. There is plenty to be learned this way.  Stack Overflow also helps automate this process by suggesting related questions as you type your questions, based on keywords.  The AI behind this is quite good, and usually causes me to abandon my question writing as I realize that my question has already been asked and answered.</p>\n<h4>Learning</h4>\n<blockquote>\n<p>Questions asked by other people that you can’t answer are the best part of Stack Overflow</p>\n</blockquote>\n<p>Stack Overflow really began making a difference in my work and learning though when I moved past asking questions and also began contributing.  At the end of 2012 I started making a serious effort to begin answering questions, both as a way to contribute back to the community, and as a way of learning about my primary language at work, Javascript.  I was, and am, by no means a Javascript expert.  But I have learned a lot through the following process:</p>\n<ol>\n<li>\n<p><em>Browsing regularly through new questions under the Javascript and Coffeescript tags.</em></p>\n</li>\n<li>\n<p><em>Picking out interesting  questions that haven’t been answered satisfactorily yet.  If there are good answers that I can’t add to substantially, I upvote them.  If there are harmfully misleading or unhelpful answers I may downvote them with a comment.</em></p>\n</li>\n<li>\n<p><em>If I know the answer to the question, I answer it, with an attempt to cite some sources for further information.  This happens sometimes, but much more often I don’t know the answer off the top of my head.  This is where learning takes place.</em></p>\n</li>\n<li>\n<p><em>If I don’t know the answer I’ll try to research it.  This may involve some combination of:</em></p>\n<ol>\n<li><em>Making a test with jsFiddle and learning about the behavior hands on.</em></li>\n<li><em>Looking up the relevant spec on MDN, Github, or library documentation</em></li>\n<li><em>Looking at related Stack Overflow questions to see if there are relevant resources or information there.</em></li>\n</ol>\n<p><em>Once I have an answer I’ll return to the original question.  Sometimes (usually in fact) somebody else will have beaten me to a response. If that happens, I evaluate whether I can add value.  If I can, I answer. If not I upvote the best answer and move on.</em></p>\n</li>\n</ol>\n<p>This is where Stack Overflow really begins to show benefits.  When I do the research to answer a question I usually learn many things along with whatever the specific question was. Questions asked by other people that you can’t answer are the best part of Stack Overflow.  They are opportunities to not just expand your field of knowledge, but also to think about problems and solutions that you had never even contemplated.  So go, find a question that you don’t understand, and see what it takes to answer it.  You may just learn something.</p>\n'}},function(e,t){e.exports={title:"How I Work:  Refactoring",date:"2013-02-03 21:00:00+00:00",layout:"post",path:"/2013/02/03/how-i-work-refactoring",category:"software-productivity",description:"Describing the process that goes behind refactoring code",pageViews:"505",last30pageViews:"1",body:'<p>I recently took the time to re-examine a section of code that I’ve worked on as part of a team for the last year.  Looking at it with fresh eyes I saw plenty of room for improvement.  The issues weren’t the result of one bad checkin or poor decision.  Instead they were the result of “death by a thousand cuts”, a series of small decisions made by different people that were individually justifiable but eventually resulted in brittle, hard to maintain code.</p>\n<p>Over the last few days I’ve been taking some time to refactor the code.  Doing so made me think about what questions I should be asking while refactoring code.  Here are a few of the things I look for when I’m working to clean up code:</p>\n<h4>Does each function do only one thing?</h4>\n<p>This has been the hardest bad habit for me to break.  I have a natural inclination when adding new functionality to try to toss it into a related function.  This seems great as first, but its how you go from a function that “removes special characters from a string”, to one that “removes extra characters from a string”, to one that “processes strings”, and finally to “the string function” that takes a string and returns a new output determined by a glob of unreadable code that nobody understands and everyone is scared to touch.</p>\n<p>Functions that perform only one purpose are easier to understand, easier to use, easier to test, and easier to port to new environments.  When functions start to perform multiple purposes it becomes harder to maintain <a href="http://en.wikipedia.org/wiki/Don\'t_repeat_yourself">DRY</a> principles.  If one function performs actions A&amp;B, another performs B&amp;C, and a 3rd one performs A&amp;C, you have to duplicate each action twice, adding code bloat and opening up the risk of inconsistent changes across methods.</p>\n<h4>Does each object/concept have a consistent naming convention throughout the system?</h4>\n<p>One source of frustration I’ve had when debugging the code for my project has been the fact that different developers have started different naming conventions for objects within the code.  This results in a single object being called chartObj within function, chart within another, params in another place, and chartData in another instance.  Sometimes these different references even pop up within the same function.  This inconsistency makes it much harder for an unfamiliar developer to understand how the system functions.  This again can lead to duplicating information, if a developer modifying a function or class doesn’t realize they already have the information they need.</p>\n<h4>What assumptions have I made?</h4>\n<p>One thing that can easily add confusion within a system is making undocumented assumptions.  One common assumption thats made for javascript code is that it will always run in a browser, or have access to a specific library such as jQuery.  While some of these assumptions are necessary, its worthwhile documenting them in some way, either in the comments or through code checks that through exceptions if the assumptions are violated.</p>\n<p>This is important because requirements change.  The particular code that I’m working with was originally intended to run only in the browser, without any thought of server-side use.  When a requirement made it necessary to run it with PhantomJS, plenty of changes were needed.  This isn’t necessarily problematic, because this particular change was not likely when the original code was made, and the adaptation was not hard.  More problematic was the fact that developers not directly involved with the phantomJS work still were acting under the assumption that the code would run within a browser environment.</p>\n<p>These three questions are obviously not the only things that can be wrong in code, but in my experience they’re especially treacherous because they can come in slowly and then make every future change harder.</p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li><a href="http://www.codinghorror.com/blog/2007/03/curlys-law-do-one-thing.html">Coding Horror: Curly’s Law</a> a readable explanation of DRY principles</li>\n<li><a href="http://refactoring.com/">Refactoring.com</a>- A nice collection of resources on refactoring by Martin Fowler, who also has written a well regarded <a href="http://www.amazon.com/gp/product/0201485672/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=0201485672&linkCode=as2&tag=productjavasc-20">book</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&l=as2&o=1&a=0201485672" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />\non refactoring.</li>\n</ul>\n'}},function(e,t){e.exports={title:"How jQuery Works - An Introduction",date:"2015-06-08 11:51:25+00:00",layout:"post",path:"/2015/06/08/how-jquery-works-an-introduction",description:"A dive into the structure of the jQuery library",category:"frameworks",readNext:"underscore-lodash,mn-series,jquery-pub-sub",pageViews:"18933",last30pageViews:"435",body:'<p>Every developer has had the experience of using “magic” code.  Not the “hacked into the NSA in 20 seconds” type of magic code you see in movies. This is the code created when you nervously typed an incomprehensible incantation that somebody else passed on to you, desperately hoping to receive the results you want, ignoring the sinking feeling in your stomach that you have no clue what to do if it fails.  Almost all code feels like this when you’re pushing out to learn new things.  But it doesn’t have to stay that way.</p>\n<p>The primary goal of this blog has always been to help myself understand the tools I’m using, and to share that understanding with as many people as possible.  My experience is that really understanding a library or framework requires diving into the source code and swimming around a bit. Which sounds great.  But often the real world gets in the way. Real world source code is full of “special code”.  Code that handles browser edge cases, performance optimizations that obscure meaning, indirection to allow shared solutions for common problems; all things that are completely necessary, and also likely to obscure the true structure of code.  So while reading the source is the best way to understand a library, it often helps to have some guideposts to lead you through.</p>\n<p>This post is the start of a new series diving into how jQuery (certainly a very magical library for many developers) works.  I’ll pull snippets from the source code, but also try to lay out the big picture approaches the library takes to provide functionality that combines to form by far the best-known and most used JavaScript library out there <sup id="fnref:1"><a href="#fn:1">1</a></sup>. For this introduction, the focus will be on the overall structure of the jQuery repository, how the code is laid out for development purposes, how it’s built into a single file for production use, and a quick look at the core jQuery object code.  Future posts will cover how different features of the libary work, including deep dives into selectors, ajax, animation, and events.</p>\n<h3>So where to start?</h3>\n<p>When you look at the <a href="https://github.com/jquery/jquery">jQuery Github repo</a>, one of the first things you’ll probably notice is that the source isn’t developed as a single file the way it is distributed.  Instead it’s split up into many files separated by functionality.  That makes it easier to find specific functions when you know what you’re looking for, but harder to know where to start when trying to understand the big picture.  If you’re new to the library, it could be overwhelming.</p>\n<p>Fortunately it’s not that hard to get the lay of the land.  jQuery is broken into modules using the AMD format, and built using requireJS.  So each file lists its dependencies, and it’s easy enough to trace back what code is referenced where. So we can start by looking at <code>src/jquery.js</code>, which serves simply as a base file to require all of the other dependencies, then make the jQuery namespace available globally, both as <code>jQuery</code> and the famous <code>$</code>.</p>\n<p><img src="/posts/images/jquery_js.png" alt="jquery_js.png"></p>\n<p>From that file we can see the layout of the library.  The core file is loaded and attached to the window, and all of the other “feature files” are also listed as dependencies to make sure they load.  Each of those files lists <code>core.js</code> as a dependency, so it is loaded first and creates the main jQuery namespace, which other dependencies then edit as needed.  If you’re interested in the process of how the package is built, you can take a read through <a href="https://github.com/jquery/jquery/blob/master/build/tasks/build.js">build/tasks/build.js</a>, where the dependencies are built using requirejs <sup id="fnref:2"><a href="#fn:2">2</a></sup>.</p>\n<h3>A look at core.js</h3>\n<p>We can see from jquery.js that <a href="https://github.com/jquery/jquery/blob/master/src/core.js">core.js</a> is an important file.  It exports the main jQuery namespace, and if we look around we’ll see that it is required by about half of the files in the source directory as a dependency.  So what does it do?  core.js is responsible for defining the jQuery namespace, as well as the prototype for jQuery objects.  This is a great place to start before taking a more detailed look into the library’s features, so lets take a look.</p>\n<pre><code class="language-javascript">define([\n\t<span class="hljs-string">"./var/arr"</span>,\n\t<span class="hljs-string">"./var/document"</span>,\n\t<span class="hljs-string">"./var/slice"</span>,\n\t<span class="hljs-string">"./var/concat"</span>,\n\t<span class="hljs-string">"./var/push"</span>,\n\t<span class="hljs-string">"./var/indexOf"</span>,\n\t<span class="hljs-string">"./var/class2type"</span>,\n\t<span class="hljs-string">"./var/toString"</span>,\n\t<span class="hljs-string">"./var/hasOwn"</span>,\n\t<span class="hljs-string">"./var/support"</span>\n], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> arr, document, slice, concat, push, indexOf, class2type, toString, hasOwn, support </span>) </span>{\n\n<span class="hljs-keyword">var</span>\n\tversion = <span class="hljs-string">"@VERSION"</span>,\n\n\t<span class="hljs-comment">// Define a local copy of jQuery</span>\n\tjQuery = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> selector, context </span>) </span>{\n\t\t<span class="hljs-comment">// The jQuery object is actually just the init constructor \'enhanced\'</span>\n\t\t<span class="hljs-comment">// Need init if jQuery is called (just allow error to be thrown if not included)</span>\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> jQuery.fn.init( selector, context );\n\t},\n</code></pre>\n<p>There’s a lot going on in the first 20 or so lines.  First we see a pattern that will repeat in future files.  jQuery uses a lot of small utility functions throughout its code.  Rather than attaching those to a single object, each one gets its own file in the <code>var</code> directory, and then is imported as a dependency as needed.  These modules are typically quite small and often trivial.  For instance the document module that is pulled in from <code>var/document</code> consists in its entirety of the following code:</p>\n<pre><code class="language-javascript">define(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-keyword">return</span> <span class="hljs-built_in">window</span>.document;\n});\n</code></pre>\n<p>This is obviously a small shortcut, but it allows for consistent use of a pattern across the library. You’ll see small utility modules like this loaded in every significant file throughout the source code.</p>\n<p>After the imports, this file sets the version (the @VERSION annotation is replaced with the version number as part of the build process), and then creates the base jQuery function.  That base function proxies out to the <code>init</code> function if it is available, but more importantly serves as a namespace for the rest of the library.  All future functionality gets extended off of this object or its prototype.  After setting up a few constants, we dive right into that:</p>\n<pre><code>jQuery.fn = jQuery.prototype = {\n\t<span class="hljs-comment">// The current version of jQuery being used</span>\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t<span class="hljs-comment">// The default length of a jQuery object is 0</span>\n\tlength: <span class="hljs-number">0</span>,\n\n\ttoArray: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">return</span> slice.call( <span class="hljs-keyword">this</span> );\n\t},\n\n\t<span class="hljs-comment">// Get the Nth element in the matched element set OR</span>\n\t<span class="hljs-comment">// Get the whole matched element set as a clean array</span>\n\t<span class="hljs-keyword">get</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( num )</span> </span>{\n\t\t<span class="hljs-keyword">return</span> num != <span class="hljs-literal">null</span> ?\n\n\t\t\t<span class="hljs-comment">// Return just the one element from the set</span>\n\t\t\t( num &lt; <span class="hljs-number">0</span> ? <span class="hljs-keyword">this</span>[ num + <span class="hljs-keyword">this</span>.length ] : <span class="hljs-keyword">this</span>[ num ] ) :\n\n\t\t\t<span class="hljs-comment">// Return all the elements in a clean array</span>\n\t\t\tslice.call( <span class="hljs-keyword">this</span> );\n\t},\n\n\t<span class="hljs-comment">// Take an array of elements and push it onto the stack</span>\n\t<span class="hljs-comment">// (returning the new matched element set)</span>\n\tpushStack: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( elems )</span> </span>{\n\n\t\t<span class="hljs-comment">// Build a new jQuery matched element set</span>\n\t\t<span class="hljs-keyword">var</span> ret = jQuery.merge( <span class="hljs-keyword">this</span>.constructor(), elems );\n\n\t\t<span class="hljs-comment">// Add the old object onto the stack (as a reference)</span>\n\t\tret.prevObject = <span class="hljs-keyword">this</span>;\n\n\t\t<span class="hljs-comment">// Return the newly-formed element set</span>\n\t\t<span class="hljs-keyword">return</span> ret;\n\t},\n\n\t<span class="hljs-comment">// Execute a callback for every element in the matched set.</span>\n\t<span class="hljs-keyword">each</span>: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( callback )</span> </span>{\n\t\t<span class="hljs-keyword">return</span> jQuery.each( <span class="hljs-keyword">this</span>, callback );\n\t},\n\n\tmap: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( callback )</span> </span>{\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.pushStack( jQuery.map(<span class="hljs-keyword">this</span>, <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( elem, i )</span> </span>{\n\t\t\t<span class="hljs-keyword">return</span> callback.call( elem, i, elem );\n\t\t}));\n\t},\n\n\tslice: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.pushStack( slice.apply( <span class="hljs-keyword">this</span>, arguments ) );\n\t},\n\n\tfirst: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.eq( <span class="hljs-number">0</span> );\n\t},\n\n\tlast: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.eq( <span class="hljs-number">-1</span> );\n\t},\n\n\teq: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">( i )</span> </span>{\n\t\t<span class="hljs-keyword">var</span> len = <span class="hljs-keyword">this</span>.length,\n\t\t\tj = +i + ( i &lt; <span class="hljs-number">0</span> ? len : <span class="hljs-number">0</span> );\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.pushStack( j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; len ? [ <span class="hljs-keyword">this</span>[j] ] : [] );\n\t},\n\n\tend: <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">()</span> </span>{\n\t\t<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.prevObject || <span class="hljs-keyword">this</span>.constructor(<span class="hljs-literal">null</span>);\n\t},\n\n\t<span class="hljs-comment">// For internal use only.</span>\n\t<span class="hljs-comment">// Behaves like an Array\'s method, not like a jQuery method.</span>\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n</code></pre>\n<p>Here the code sets up the jQuery prototype, which is also made available as <code>jQuery.fn</code>.  jQuery objects, what you get when you select a set of elements with jQuery, have access to all of the methods defined on this prototype.  <code>jQuery.fn</code> is also the extension point for jQuery plugins, so that custom functions are available to jQuery objects.  Most of the functions built here are pretty basic ones that mimic built in array functions for jQuery objects.</p>\n<h3>A note about jQuery objects</h3>\n<p>I’ve glossed over jQuery objects twice now, but we’ve seen enough already to get a deeper understanding of what they are.  jQuery objects are the objects created when the jQuery init function is used as a constructor to create a new object <sup id="fnref:3"><a href="#fn:3">3</a></sup>.  That sounds fancy, but in reality that’s what is happening every time you make a simple jQuery call like <code>$(\'#foo\')</code> or <code>$(\'div\')</code>.  The jQuery namespace function is being called and returns a new object with <code>jQuery.init</code> as the constructor.  Since <code>init</code> shares a prototype with the namespace function <sup id="fnref:4"><a href="#fn:4">4</a></sup>, these objects all have access to <code>jQuery.prototype</code>.  The second post in this series will talk more about how the init function parses the various inputs that you can pass to the namespace function, but for now it’s best to focus on understanding that the namespace function and jQuery.fn are not magic, but are just a wrapper and alias for portions of a fairly normal prototypical inheritance example in JavaScript.</p>\n<h3>Extend</h3>\n<p>After the base functions get added to the prototype, a special function is created and added to both the prototype and the namespace function directly.</p>\n<pre><code class="language-javascript">\njQuery.extend = jQuery.fn.extend = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n\t<span class="hljs-keyword">var</span> options, name, src, copy, copyIsArray, clone,\n\t\ttarget = <span class="hljs-built_in">arguments</span>[<span class="hljs-number">0</span>] || {},\n\t\ti = <span class="hljs-number">1</span>,\n\t\tlength = <span class="hljs-built_in">arguments</span>.length,\n\t\tdeep = <span class="hljs-literal">false</span>;\n\n\t<span class="hljs-comment">// Handle a deep copy situation</span>\n\t<span class="hljs-keyword">if</span> ( <span class="hljs-keyword">typeof</span> target === <span class="hljs-string">"boolean"</span> ) {\n\t\tdeep = target;\n\n\t\t<span class="hljs-comment">// Skip the boolean and the target</span>\n\t\ttarget = <span class="hljs-built_in">arguments</span>[ i ] || {};\n\t\ti++;\n\t}\n\n\t<span class="hljs-comment">// Handle case when target is a string or something (possible in deep copy)</span>\n\t<span class="hljs-keyword">if</span> ( <span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">"object"</span> &amp;&amp; !jQuery.isFunction(target) ) {\n\t\ttarget = {};\n\t}\n\n\t<span class="hljs-comment">// Extend jQuery itself if only one argument is passed</span>\n\t<span class="hljs-keyword">if</span> ( i === length ) {\n\t\ttarget = <span class="hljs-keyword">this</span>;\n\t\ti--;\n\t}\n\n\t<span class="hljs-keyword">for</span> ( ; i &lt; length; i++ ) {\n\t\t<span class="hljs-comment">// Only deal with non-null/undefined values</span>\n\t\t<span class="hljs-keyword">if</span> ( (options = <span class="hljs-built_in">arguments</span>[ i ]) != <span class="hljs-literal">null</span> ) {\n\t\t\t<span class="hljs-comment">// Extend the base object</span>\n\t\t\t<span class="hljs-keyword">for</span> ( name <span class="hljs-keyword">in</span> options ) {\n\t\t\t\tsrc = target[ name ];\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t<span class="hljs-comment">// Prevent never-ending loop</span>\n\t\t\t\t<span class="hljs-keyword">if</span> ( target === copy ) {\n\t\t\t\t\t<span class="hljs-keyword">continue</span>;\n\t\t\t\t}\n\n\t\t\t\t<span class="hljs-comment">// Recurse if we\'re merging plain objects or arrays</span>\n\t\t\t\t<span class="hljs-keyword">if</span> ( deep &amp;&amp; copy &amp;&amp; ( jQuery.isPlainObject(copy) ||\n\t\t\t\t\t(copyIsArray = jQuery.isArray(copy)) ) ) {\n\n\t\t\t\t\t<span class="hljs-keyword">if</span> ( copyIsArray ) {\n\t\t\t\t\t\tcopyIsArray = <span class="hljs-literal">false</span>;\n\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isArray(src) ? src : [];\n\n\t\t\t\t\t} <span class="hljs-keyword">else</span> {\n\t\t\t\t\t\tclone = src &amp;&amp; jQuery.isPlainObject(src) ? src : {};\n\t\t\t\t\t}\n\n\t\t\t\t\t<span class="hljs-comment">// Never move original objects, clone them</span>\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t<span class="hljs-comment">// Don\'t bring in undefined values</span>\n\t\t\t\t} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( copy !== <span class="hljs-literal">undefined</span> ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t<span class="hljs-comment">// Return the modified object</span>\n\t<span class="hljs-keyword">return</span> target;\n};\n</code></pre>\n<p><code>$.extend</code> is jQuery’s way of merging properties from one object into another.  It’s also a very handy shortcut for cloning an object (<code>var clone = $.extend({},obj)</code>).  We’ll see an example usage shortly, but since it’s a common function, it’s worth digging into how it works for a second.</p>\n<p>Looking at the code above, we can see that extend takes a variable number of arguments, the first of which can optionally be a boolean telling the function to “deep copy”.  If only a single object is passed, the function acts as if the jQuery prototype was passed as the first object, and targets that, otherwise it targets the first non-boolean argument.</p>\n<p><code>extend</code> then loops over each argument after the target and for each one goes over each of its keys.  For each object in order, properties are copied from the arguments to the target object.  If deep copy is set, properties that are objects are merged by calling <code>extend</code> recursively.  Otherwise, existing properties are overwritten.  This continues left to right till all arguments have been merged.</p>\n<p>The source code helpfully gives us an immediate example of how <code>extend</code> can be useful.  jQuery makes several properties and helpful functions available directly off of the <code>$</code> namespace.  Several of them are added here using extend.  You can see how the object notation flows much better than a long series of assignments with <code>=</code> would.</p>\n<pre><code class="language-javascript">jQuery.extend({\n\t<span class="hljs-comment">// Unique for each copy of jQuery on the page</span>\n\texpando: <span class="hljs-string">"jQuery"</span> + ( version + <span class="hljs-built_in">Math</span>.random() ).replace( <span class="hljs-regexp">/\\D/g</span>, <span class="hljs-string">""</span> ),\n\n\t<span class="hljs-comment">// Assume jQuery is ready without the ready module</span>\n\tisReady: <span class="hljs-literal">true</span>,\n\n\t<span class="hljs-attr">error</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> msg </span>) </span>{\n\t\t<span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>( msg );\n\t},\n\n\t<span class="hljs-attr">noop</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{},\n\n\t<span class="hljs-attr">isFunction</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>) </span>{\n\t\t<span class="hljs-keyword">return</span> jQuery.type(obj) === <span class="hljs-string">"function"</span>;\n\t},\n\n\t<span class="hljs-attr">isArray</span>: <span class="hljs-built_in">Array</span>.isArray,\n\n\t<span class="hljs-attr">isWindow</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>) </span>{\n\t\t<span class="hljs-keyword">return</span> obj != <span class="hljs-literal">null</span> &amp;&amp; obj === obj.window;\n\t},\n\n\t<span class="hljs-comment">//... many more functions and properties here</span>\n});\n</code></pre>\n<p>After working through 2 more helper functions, the namespace object gets returned, wrapping up <code>core.js</code>.  So 2 files and ~500 lines of source code in, we already have a pretty good idea of how jQuery is structured, both in terms of using AMD modules to separate out the source, and using a namespace function and its prototype as a central object to attach functionality.</p>\n<h3>More Resources</h3>\n<ul>\n<li>It’s no longer maintained with newer versions, but a few years ago Rob Flaherty created an annotated version of jQuery 1.6’s source.  You can see that <a href="http://robflaherty.github.io/jquery-annotated-source/">here</a></li>\n<li>Along the same lines: John Resig, jQuery’s creator, recently went through his original jQuery library (a early ~1.0 version) and <a href="http://ejohn.org/blog/annotated-version-of-the-original-jquery-release/">annotated it with both code commentary and historical notes</a>. It’s a great look inside the history of the library.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        You can see that on <a href="https://www.google.com/trends/explore#q=jQuery%2C%20backbone%2C%20Angular%2C%20Ember%2C%20React&date=1%2F2010%2065m&cmpt=q&tz=">Google Trends</a>, <a href="http://bower.io/stats/">Bower stats</a>, or <a href="https://github.com/jquery/jquery">Github stars</a>\n        </p>\n        <a href="#fnref:1" title="return to article">↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        jQuery\'s build process is actually super intersting, as they allow custom builds that optionally exclude portions of the library.  If you get a chance make sure to look through build.js and note the function to remove requireJS boilerplate after the modules have been built.\n        </p>\n        <a href="#fnref:2" title="return to article">↩</a></p>\n    </li>\n        <li class="footnote" id="fn:3">\n            <p>\n            If you\'re unclear on how constructors and prototypes work in JavaScript, feel free to catch up with <a href="http://benmccormick.org/2013/01/12/explaining-javascript-object-oriented-programming">this post</a> I wrote on Object Oriented Programming in JavaScript a few years back.\n            </p>\n            <a href="#fnref:3" title="return to article"> ↩</a></p>\n        </li>\n            <li class="footnote" id="fn:4">\n                <p>\n                Ok so we didn\'t have quite enough information to fully understand this yet, but you can see where the init function gets its prototye <a href="https://github.com/jquery/jquery/blob/master/src/core/init.js#L115">here</a>.\n                </p>\n                <a href="#fnref:4" title="return to article"> ↩</a></p>\n            </li>\n</ol>\n</div>\n'
}},function(e,t){e.exports={title:"I hate computing ecosystems",date:"2012-12-29 23:06:00+00:00",layout:"post",path:"/2012/12/29/i-hate-computing-ecosystems",category:"opinion",description:"Why does nothing work together?",pageViews:"55",last30pageViews:"0",body:'<p><a href="http://superuser.com/questions/525673/is-there-a-way-to-edit-text-documents-on-the-iphone-and-sync-them-with-skydrive/525700#525700">Is there a way to edit text documents on the iPhone and sync them with Skydrive?</a></p>\n<p>Looks like I need to find a way to get dropbox working on my work laptop again.</p>\n'}},function(e,t){e.exports={title:"Irreplaceable",date:"2013-05-04 17:00:00+00:00",layout:"post",path:"/2013/05/04/irreplaceable",category:"opinion",description:"Your job doesn't need you.  Your family does",pageViews:"129",last30pageViews:"0",body:'<blockquote>\n<p>If you are the average worker in the average job then you can be replaced. The reason I tell people this is because I want to help them realize that there are important things in life and then there are VERY important things in life. Make sure you are good in the areas of life that you aren’t replaceable (family) and then focus on the other areas (work). This is my view, but I think anyone with a family probably feels the same way. Telling someone they are replaceable is a great cure for arrogance.</p>\n<p>I appreciate the work that my folks do and tell them that, but Microsoft will go on without them. Think about the last time someone left your team. How long did it take before they were a distant memory? Probably a day or so then the team moves on with their work. I’m not saying don’t care about work. I’m saying care about the VERY important things more. If your work/life balance is off and the VERY important things are threatened, then take a break and get some help.</p>\n<p>At work you can be replaced in about 5 minutes, but you are effectively irreplaceable at home. Keep that in mind. I think about it every day.</p>\n</blockquote>\n<p><a href="http://blog.jongallant.com/2013/05/work-life-balance-at-microsoft.html?goback=.gde_42347_member_237479036&amp;m=1">My Thoughts on Work/Life Balance at Microsoft- Jon Gallant</a></p>\n<p>Jon Gallant speaks the truth.  Aside from any personal beliefs on which is more important or meaningful<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>, its pretty clear that it would be much easier for your employer to find somebody to do your job than it would be for your spouse/children to find their way without you.  We all have a desire to be significant and necessary I think, we just don’t always value it in the places we are.</p>\n<div class="footnotes"><ol>\n    <li class="footnote" id="fn:1">\n        <p>I fully agree with him on that. Family will always be first for me. <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol></div>\n'}},function(e,t){e.exports={title:"Is Bower Useful?",date:"2015-01-22 04:52:06+00:00",layout:"post",path:"/2015/01/22/is-bower-useful",category:"tools",description:"A defense of Bower as a useful package manager",pageViews:"3134",last30pageViews:"24",body:'<p><img src="/posts/images/bower-1.png" alt="bower logo"></p>\n<p>I first heard about <a href="http://bower.io/">Bower</a> about a year and half ago, and was immediately confused.  Bower is branded as a package manager for the web.  My immediate question: “Why create another package manager for JavaScript, when <a href="https://www.npmjs.com/">npm</a> was just starting to become a standard?”  I certainly wasn’t the only one thinking it.</p>\n<div>\n<blockquote class="twitter-tweet" lang="en"><p>&quot;What&#39;s bower?&quot;&#10;&quot;A package manager, install it with npm.&quot;&#10;&quot;What&#39;s npm?&quot;&#10;&quot;A package manager, you can install it with brew&quot;&#10;&quot;What&#39;s brew?&quot;&#10;...</p>&mdash; Stefan Baumgartner (@ddprrt) <a href="https://twitter.com/ddprrt/status/529909875347030016">November 5, 2014</a></blockquote>\n</div>\n<p>If you can use npm to install Bower, you can use it to install packages directly.  And if you don’t like npm, is it that hard to just pull in your dependencies manually?  Why use a package manager at all?</p>\n<p>A year later, I now believe Bower is a useful and important part of the web development ecosystem, so in the interest of sharing knowledge and because I can’t resist the chance to flout <a href="http://en.wikipedia.org/wiki/Betteridge%27s_law_of_headlines">Betteridge’s law of headlines</a>, here’s my case for why Bower is useful.</p>\n<h3>Manual package management doesn’t scale</h3>\n<p>For quite a while I was content to manage my web dependencies manually.  I would go to a project site, hit the big download button, move the files into my project and get on with my day.  It was simple and required no setup or tools.  I was happy.  However I’m now managing a project that includes almost 30 external front end dependencies of some kind.  At that scale it’s impossible to shrug off the pain points of the “Do It Yourself” approach.</p>\n<p>The biggest problems come around keeping dependencies up to date. Simple solutions unravel quickly here.  First, while it would be lovely if every front end library included a version number in their distributed file, that’s not always the case.  So keeping track of versions reliably invariably means some sort of external documentation.  Even when I knew the version, I would have to manually go to each libraries site to see if there was a newer version, then test it, and then either keep 2 copies of the library around or mess with git branches while I was testing to see if the new version caused any problems or regressions.  That was fine with a few libraries, but it doesn’t scale well.</p>\n<p>So my advice?  Don’t try to manage your assets manually after your projects grow to a certain size.  You’ll spend unnecessary time keeping them up to date, clutter your version control logs, and will have to actually document the versions somewhere anyway.  So manual package management is out.  But why not just use npm?</p>\n<h3>npm is the right answer to the wrong question</h3>\n<p>npm is a fantastic package manager for node development.  Being able to immediately pull in a library and all of its dependencies then be confident that it will work with the module format you use is a fantastic thing, and npm has pulled it off well.  So why not just use it for all of your web development package management needs?</p>\n<p>The problem is that it’s impossible for tools to optimize for everything. npm has optimized for node development.  That leads to problems when using it in other settings.  First of all, many npm packages assume you’re using the commonJS module format.  Node encourages small modules that may have many dependencies, linked with commonJS.  It’s possible to use those modules on the front end of course if you use a tool like <a href="http://browserify.org/">Browserify</a>, but your choice of package manager should not lock you into a specific module format or build tool.  Most major packages do distribute their code in a UMD format that can be loaded in multiple ways, but some do not, and when those packages have dependencies, we have another problem.</p>\n<p>npm has a nested dependency tree, where each module also loads all of its dependencies individually.  This is fine on the server, where you can put node_modules into your .gitignore file and effectively pretend those files are not there.  When writing client-side code though, it’s important to be efficient with bandwidth.  You can’t load multiple versions of a dependency if, for instance, you used multiple libraries that depend on Underscore or jQuery.  That’s a problem if you’re using browserify, since you’ll need to find a way to normalize those dependencies to a single file.  But nested dependencies are also annoying when using other problems, both due to the need to manually figure out what you need and avoid duplication as well as the awkwardness of making deep path references down several layers of node_modules folders.</p>\n<p>Lastly, I’d encourage people considering npm for front-end package management to use a tool scoped for their needs. npm started as a package manager for node, and that is still its main use.  There are plenty of packages that can be useful both on node and in the browser, but many things only make sense in one environment.  For instance CSS libraries are not useful within node, and file system libraries won’t work in the browser.  I’ll admit that this ship may have already sailed though. Many popular browser only libraries like Bootstrap and Angular are available on npm right now as a response to people who are using npm for everything<sup id="fnref:1"><a href="#fn:1">1</a></sup>.</p>\n<h3>So Why Bower?</h3>\n<p>The problems above explain the case for “yet another package manager”.  So now we can talk about how Bower is better.  Bower is focused on front-end development, provides a flat dependency structure, and doesn’t lock you in to a single way of doing things.  Let me break that down.</p>\n<p><strong>Bower is focused on the front end.</strong>  If you find a package registered on <a href="http://bower.io">bower.io</a>, you can be confident that it will useful on the front end, and won’t be using node-specific dependencies.</p>\n<p><strong>Bower has a flat dependency structure.</strong>  If multiple libraries require a dependency, Bower will figure out the best version to load and place it in the top level of your bower_components directory.</p>\n<p><strong>Bower doesn’t lock you in.</strong> Nothing about Bower is specific to a certain module format or build tool.  You can use it with RequireJS and Grunt, Webpack and Gulp, or by loading scripts directly into your HTML.</p>\n<p>Bower addresses the pain points that come from manually managing your scripts or using npm.  You get easy version tracking and updating, keep your git logs clean, and can be confident that it will work cleanly with your existing setup.  If you’re starting a new project or updating your dependencies on an existing one, consider using Bower to make your life easier.</p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Want to hear the case for using npm in your front end development? You can find it <a href="http://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging">on their blog</a>.</p>\n</li>\n<li>\n<p>If you’re interested in Bower, it’s also worth checking out <a href="http://yeoman.io/">Yeoman</a>, a project for quickly scaffolding out web projects using Bower and Grunt.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Something npm is clearly <a href="http://blog.npmjs.org/post/101775448305/npm-and-front-end-packaging">encouraging</a>\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Is Safari being left behind?",date:"2015-06-10 04:03:41+00:00",layout:"post",path:"/2015/06/10/is-safari-being-left-behind",description:"Should we be concerned about Safari holding back the web?",category:"platform",pageViews:"8762",last30pageViews:"12",body:'<p>On Twitter yesterday, <a href="https://alexsexton.com/">Alex Sexton</a> surfaced Apple’s fact sheet on what’s new with Safari 9:</p>\n<div>\n<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://t.co/fVg9U9dEq4">https://t.co/fVg9U9dEq4</a>&#10;&#10;Some ES6 and lots of unprefixed CSS (flexbox!), but I really want Intl, ServiceWorkers, PointerEvents, HTTP2, CSP2…</p>&mdash; Alex Sexton (@SlexAxton) <a href="https://twitter.com/SlexAxton/status/608017541173284864">June 8, 2015</a></blockquote>\n</div>\n<p>Safari 9 is still in developer preview and won’t ship till September or so, so this all could change, but Apple’s changelog is underwhelming to say the least.   The developer facing changes in Safari 9 consist of only standardized versions of CSS properties (that were already supported with a prefix), and a handful of ES6 features.</p>\n<blockquote>\n<p>The following ECMAScript 6 content is now supported by Safari:</p>\n<ul>\n<li>Classes</li>\n<li>Computed Properties</li>\n<li>Weak Set</li>\n<li>Number Object</li>\n<li>Octal and Binary Literals</li>\n<li>Symbol Objects</li>\n<li>Template Literals</li>\n</ul>\n</blockquote>\n<p><em>- <a href="https://developer.apple.com/library/prerelease/mac/releasenotes/General/WhatsNewInSafari/Articles/Safari_9.html#//apple_ref/doc/uid/TP40014305-CH9-SW27">Safari Pre-Release notes</a></em></p>\n<p>While it’s great to see ES6 support, the truth is that by the time Safari is released in the fall, <a href="http://blogs.windows.com/msedgedev/2015/05/12/javascript-moves-forward-in-microsoft-edge-with-ecmascript-6-and-beyond/">Microsoft Edge</a> will have been released, and Safari 9 will release as (at best) the <a href="http://kangax.github.io/compat-table/es6/">3rd most ES6-compliant browser</a> among the 4 major desktop browsers.  And due to its yearly schedule, it’s basically guaranteed to be in last by the end of the year.  At the same time Safari has neglected other APIs like Internationalization, Pointer Events, Web Components, CSS Variables, Service Workers, or ASM.js optimizations, all of which are supported or in progress by each of the other browsers <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  In addition, Safari’s developer tools, which were once best in class, have been slowly falling behind Chrome and Firefox, especially in more advanced performance features.</p>\n<p><img src="/posts/images/safari-question-1.png" alt="safari?"></p>\n<p>So does this mean that Safari is the next IE6?  Not so much.  We’ve come a long way since the IE6 era, and browsers are more standards compliant than ever.  Tools like <a href="https://babeljs.io/">Babel</a> make it easier for developers to participate in the future of the web without being restricted by slow moving browsers or legacy support concerns.   But there’s always going to be some browser that serves as the “bottleneck” for what web developers are able to reasonably use in production.  Currently that is older versions of Internet Explorer and old Android browsers.  But as more and more users upgrade to Android phones using Chrome, and Microsoft makes strong pushes to move users to the <a href="http://benmccormick.org/2013/06/11/evergreen-browsers/">evergreen</a> Edge browser, it’s quite likely that Safari could take their place.  It is now the only major browser being updated yearly, and with Microsoft’s recent re-emphasis on JavaScript and HTML development, Apple is the only major browser vendor who seems to view the web as a second class platform.</p>\n<p>Safari is not going away.  Its monopoly status on iOS more or less guarantees that, and on the desktop I’ve talked to plenty of people who like its simple UI, and others who feel that it’s faster or consumes less memory than Chrome and Firefox.  But it will be a sad sight if it gets left behind.  Here’s hoping that the final release contains more surprises, and that going forward Apple chooses to embrace the web browser as a platform worthy of the respect and effort its competitors have lavished on it.</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Ok, CSS Variables, Service Workers and Web Components are "under consideration" by IE.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"It took a month to get sick of php",date:"2012-10-06 11:00:00+00:00",layout:"post",path:"/2012/10/06/it-took-a-month-to-get-sick-of-php",category:"meta",description:"Porting my blog from Wordpress to Python",pageViews:"160",last30pageViews:"1",body:'<p>I’m not going to claim that its impossible to write nice, well structured code with php. I’m not even going to claim that its impossible to write nice, well structured php code with Wordpress. What I did find during my month of running my blog on Wordpress, is that it is much easier to write bad code with Wordpress than it is to write good code. Which is why I ported my blog to a custom self-written blog based on Django.</p>\n<p>I wouldn’t recommend that most people (even technically inclined people) do this, because generally the primary purpose of a blog is to produce content. And Wordpress is fantastic for that. Many many people have spent a large amount of time making sure it is very easy to create pretty much any type of content you want to produce on Wordpress without writing a single line of code. However, for somebody like me who wants to tinker and customize (having a place to experiment is part of the fun of this site for me), being forced to deal with the php/Wordpress crapshoot every time I wanted to try writing something was tough to get around.</p>\n<p>Django was an attractive option because it was really easy to get a basic prototype running, and it provides significant flexibility to expand. I got the full functionality of my original Wordpress site back up in 3 days after I first downloaded Django (not 3 full days, 3 busy calendar days). In the process I significantly cut down on my code bloat and increased load time. It was crazy easy to define a basic blog design and have it reflected in the code and database.</p>\n<pre><code class="language-python"><span class="hljs-comment"># Basic Blog Format</span>\n<span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Category</span><span class="hljs-params">(models.Model)</span>:</span>\nname = models.CharField(max_length=<span class="hljs-number">100</span>)\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>\n<span class="hljs-keyword">return</span> self.name\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Post</span><span class="hljs-params">(models.Model)</span>:</span>\ntitle = models.CharField(max_length=<span class="hljs-number">200</span>)\ncontent = models.TextField()\npub_date = models.DateTimeField(<span class="hljs-string">\'date published\'</span>)\nslug = models.SlugField(unique=<span class="hljs-keyword">True</span>)\ncategory = models.ForeignKey(Category)\ntags = models.ManyToManyField(<span class="hljs-string">\'Tag\'</span>, blank=<span class="hljs-keyword">True</span>)\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>\n<span class="hljs-keyword">return</span> self.title\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span><span class="hljs-params">(models.Model)</span>:</span>\nname = models.CharField(max_length=<span class="hljs-number">30</span>)\nposts = models.ManyToManyField(Post, through=Post.tags.through, blank=<span class="hljs-keyword">True</span>)\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>\n<span class="hljs-keyword">return</span> self.name\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RelatedLink</span><span class="hljs-params">(models.Model)</span>:</span>\npost = models.ForeignKey(Post)\nname = models.CharField(max_length=<span class="hljs-number">100</span>)\nurl = models.URLField(max_length=<span class="hljs-number">200</span>)\ninternal = models.BooleanField()\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span>\n<span class="hljs-keyword">return</span> self.name\n</code></pre>\n<p>I love Python’s clean syntax, and especially the cleanliness of Django’s template systems. It is 100x more legible and “HTML” like than php code (or the jsp code I have to deal with at work). I’ve thoroughly enjoyed the experience and am looking forward to working more with Django in the future.\n[I wrote 20 short programs in Python yesterday. It was wonderful. Perl, I’m leaving you.]</p>\n<p><img src="http://imgs.xkcd.com/comics/python.png" alt="I wrote 20 short programs in Python yesterday.  It was wonderful.  Perl, I\'m leaving you."></p>\n'}},function(e,t){e.exports={title:"Giving Context to Best Practices",date:"2017-02-18 23:30:00+00:00",layout:"post",path:"/2017/02/18/context-to-best-practices/",description:"What we talk about when we talk about best practices",keywords:"best practices JavaScript",category:"software-productivity",readNext:"staying-productive,orthogonality-css-js,readable-code",key:"ll-context",pageViews:"269",last30pageViews:"52",body:'<p>I’ve noticed a frustrating trend in online discussions about web development where developers take their personal experience with a tool or practice and promote it as a universal truth.  Some of this is the nature of being human: we all see the world through our own lens.  But the best technical observations exist within a specific context.</p>\n<p>Compare</p>\n<blockquote>\n<p>Everybody should be writing code using static types, the extra syntax is worth it because of all the bugs it prevents.</p>\n</blockquote>\n<p>to</p>\n<blockquote>\n<p>If you’re working in a large code base with many developers, static typing is extremely useful, because the overhead from writing extra code and compiler errors is more than made up for by reducing bugs and clearly expressing intent when developers edit code they didn’t write.</p>\n</blockquote>\n<p>The first quote presents a tradeoff and declares a universal preference for one direction in the tradeoff.  The second quote adds more details about the context in which the practice has been beneficial, and explains what about those circumstances (developers editing code they didn’t write) affects the tradeoff decision.</p>\n<p>These type of distinctions are often lost in online discussions about development best practices. I have no interest in naming and shaming, but specifically I’ve seen this in discussions around JavaScript performance, testing, frameworks vs other frameworks vs VanillaJS, responsive design, progressive enhancement, and build pipelines.  For this post, I’m going to try to lay out a list  of some of the context that I’ve found helpful to take into account when giving or interpreting best practice advice.</p>\n<h3>Context to keep in mind when discussing and interpreting best practices</h3>\n<h4>Beginner vs Veteran</h4>\n<p>I’ll start with a distinction that folks seem better about making. Sometimes recommendations that make sense for beginners don’t work as well for more experienced developers and vice versa.  For instance it might make sense to advise a more experienced developer to use and heavily configure a build system like <a href="https://webpack.github.io/">Webpack</a> for a new project. But beginners already have a lot to learn with each new project and might benefit from a simpler system; either a simple project without a build step, or a “batteries included” system like <a href="https://github.com/facebookincubator/create-react-app">Create React App</a> or <a href="https://ember-cli.com/">Ember CLI</a>.  Making these distinctions is important for helping developers who may feel overwhelmed by all the concepts they need to learn when getting started with web development.</p>\n<h4>Big Team vs Small team vs Individual</h4>\n<p>Another dynamic that matters when expressing best practices is the size of a team working on a project.  If a project is being developed by a large team, or several teams, or is meant to be used as a library by many people, techniques like automated documentation, static type checking, and clear style guidelines may be essential.  But for a personal project or a professional project run by a 1 person team, those same techniques may provide a lot of overhead for minimal benefit. Most teams will fall between those extremes and will have to weigh the tradeoffs in each case.</p>\n<h4>Personal Project vs Internal tool vs B2B Products vs Consumer Products</h4>\n<p>The audience of a project is also important.  Some projects we build for ourselves.  Some may be internal for a company, or for a group that we’re a part of.  Other projects are sold professionally to businesses or offered freely to consumers on the web.  There are different goals and expectations for each of these groups, that may impact which practices and techniques are important.  For instance, nobody cares if a personal web application you’ve made to organize your todos crashes in Internet Explorer or doesn’t have alt-text for images.  But browser compatibility and accessibility might be extremely important for a consumer web app aimed at a broad population.  Similarly, it might be ok for your internal web tool to have un-minified JavaScript and large un-optimized CSS and JavaScript bundles, since it will always be served locally over a fast connection.  But it could severely hurt the user experience to do the same things for a high traffic public site.</p>\n<h4>Web page vs Web app</h4>\n<p>Distinguishing between web pages<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> and web apps<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> would short circuit a large number of internet arguments before they started.  Specifically arguments about progressive enhancement, whether we use too much JavaScript and whether a site is “acceptable” if it doesn’t work without JavaScript.  Many accessibility and performance proponents push very strongly for less JavaScript and sites that work without JavaScript.  And that is a good thing… for the sites that <strong>can</strong> function without JavaScript.  Web apps like Trello, Google Docs, or Postman just don’t make sense without JavaScript.  But saying that we should use less JavaScript isn’t bad advice, it’s just bad advice when given or taken without context.</p>\n<h4>Existing project vs Greenfield project</h4>\n<p>Some choices are only easy to make at the start of a project.  It is possible to change the language or framework a project is written in midstream, but it is often extremely risky and painful.  So asking a developer working on a 5 year old JavaScript project with thousands of lines of code why they didn’t write it in <a href="http://elm-lang.org/">Elm</a> or <a href="https://clojurescript.org/">ClojureScript</a> is not helpful.  But suggesting that somebody write a new project in Elm may be just fine.</p>\n<h4>Short term project vs Long term project</h4>\n<p>Some software projects are meant to be written, completed, and never seen again.  For instance a promotional site for an event.  Some projects, like financial software, are meant to last for decades.  This is yet another distinction than can impact best practice discussions.  When working on a short term project, speed of delivery and initial quality tend to matter a lot.  For long term projects it may be better to prioritize maintainability, security and ease of deployment.</p>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>Web page: sites that are mostly content focused with some possible interactivity layered on top <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>Web app: sites that are primarily an interactive experience for the user and behave more like traditional desktop or mobile applications <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Configuring Vim",date:"2014-07-14 10:50:00+00:00",layout:"post",path:"/2014/07/14/learning-vim-in-2014-configuring-vim",description:"How to set up a modern vim config",keywords:"vim configuration vimrc",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"39160",last30pageViews:"719",body:'<p>Plenty of Vim articles you’ll find online start you off in the wrong place. Instead of teaching you how Vim works, they toss a bunch of scary looking code at you, tell you to shove it in a file, and claim that it will make Vim just like Textmate / Sublime / Emacs / Visual Studio. Except way cooler!  People quickly find out that if what they want is to use their old editor, they should just <em>use their old editor</em>, and learn to use it as efficiently as possible.</p>\n<p>While writing about Vim the last few weeks, I’ve avoided recommending any configuration changes, other than the quick <a href="https://gist.github.com/benmccormick/4e4bc44d8135cfc43fc3">sanity vimrc</a> I recommended in the first article, because I think it’s important to learn what sets Vim apart before trying to configure it.  Not because it’s good enough without configuration (honestly it’s not), but because once you understand the core, you can use configuration to build a great version of Vim instead of trying to hack together a Rube-Goldberg Textmate clone. But now that I’ve covered some of the basics (and if you haven’t yet, feel free to go ahead and start at <a href="http://benmccormick.org/2014/06/30/learning-vim-in-2014-the-basics/">the beginning</a>), it’s time to look at Vim configuration.</p>\n<h3>Basic Configuration</h3>\n<p>Configuration for Vim starts with a vimrc file. It’s a text file located by default at <code>~/.vimrc</code> on *nix systems, and <code>$VIM\\_vimrc</code> on Windows.  To begin configuration you need to open that file, creating it if it doesn’t exist. But before we go further, we should stop and figure out what we’re doing.</p>\n<p>I said that configuration starts with the vimrc file, but the truth is that your vimrc is just a normal text file that Vim sources by default.  The heart of Vim configuration is Vimscript, Vim’s custom scripting language.  Vimscript is a full programming language, with variables and control structures.  But for this article we’re going to focus on using it for configuration.</p>\n<p>The basic commands that Vimscript uses for configuration are <code>let</code>, <code>set</code>, and <code>map</code>. <code>let</code> allows you to change a variable value with the syntax <code>let &lt;var-name&gt;=&lt;value&gt;</code>. <code>set</code> allows you to read or change an option value using <code>set &lt;option-name&gt;</code> for toggle options or <code>set &lt;option-name&gt;=&lt;option-value&gt;</code> for numeric or string-based options. <code>map</code> and its many variations allow you to create new keymappings by setting the output of one key combination to produce the value of another key combination.  You can use variations on map to specify how a key sequence should behave in different vim modes.</p>\n<h3>Know what you’re configuring</h3>\n<p>Now that you know the basic commands, I could show you an example .vimrc, explain it a bit and then tell you to copy it, change the stuff you don’t like, and go on your way.  The problem with that? It leaves your vimrc file as a “pile of junk”, that I understand and you don’t.   If I did a good job, you might understand the purpose of individual lines, but they probably wouldn’t be the best fit for you, and you probably wouldn’t know exactly how to make it better.  In the end you’ll keep tossing junk onto it until it becomes a confusing mess you want to avoid.  So instead, I’m going to walk through the types of configurations you might want to consider, give a few examples, and let you build from there.  So here are a few concepts to think about as you construct your vimrc file:</p>\n<h4>Adapt to your environment</h4>\n<p>Vi and Vim were originally developed in a low-resource terminal based environment.  Many of their default settings and assumptions reflect that.  Today though Vim is used in a wide variety of ways, from multimonitor Mac Pros with 16+GB of memory running multiple MacVim windows, to low memory remote servers running Vim in the terminal over ssh.  If you know what your environment will look like, you can optimize Vim for your own use.</p>\n<p>For instance, if you’re running in a high resource environment, (and pretty much any modern laptop or desktop these days qualifies as a high resource environment) you may want to enable some features that Vim disables by default, since those removing those features allow it to work well in very low memory situations.  Some  common choices:</p>\n<pre><code class="language-vimscript"><span class="hljs-keyword">syntax</span> enable " Turn <span class="hljs-keyword">on</span> <span class="hljs-keyword">syntax</span> highlighting\n<span class="hljs-keyword">set</span> hidden " Leave hidden buffers <span class="hljs-keyword">open</span>\n<span class="hljs-keyword">set</span> history=100 "<span class="hljs-keyword">by</span> default Vim saves your last 8 commands.  We can handle <span class="hljs-keyword">more</span>\n</code></pre>\n<p>On the other hand, if you know you’re going to be running remotely on low resource machines, you might choose to disable those options to minimize the load and increase speed. I’ll talk more about plugins in a later post, but they’re another thing that works much better in your local environment than on remote servers, for both performance and logistical reasons.</p>\n<h4>Add some visual niceties</h4>\n<p>If we’re honest, I think most people can agree Vim is pretty hard to look at out of the box.  Very few visual affordances, no syntax highlighting or line numbers, and it’s style is dependent on your terminal color scheme or an ugly default gVim theme. But that’s pretty easy to fix. We can get syntax highlighting and line numbers with this snippet:</p>\n<pre><code class="language-vimscript"><span class="hljs-keyword">syntax</span> enable\n<span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span>\n</code></pre>\n<p>Getting a decent color scheme will require you to download it as a plugin, but if you’ve done that or if you like one of the colorschemes that ship with your Vim distribution it’s easy to set up with <code>colorscheme &lt;theme-name&gt;</code>.  Beyond that, there’s plenty more you can do to improve the visual feel of Vim.  I’d look into customizing your status bar, relative vs absolute line numbers, and plugins like <a href="https://github.com/bling/vim-airline">Airline</a> and <a href="https://github.com/reedes/vim-thematic">Vim-Thematic</a>.</p>\n<h4>Set up keybindings</h4>\n<p>Many of Vim’s useful commands are either not given default keybindings, or are given hard to remember obtuse ones.  Don’t want to spend your whole life typing <code>source ~/.vimrc</code> into each file everytime you add something to your configuration? I shortcut that to <code>\\rr</code>.</p>\n<pre><code class="language-vimscript"><span class="hljs-keyword">map</span> <span class="hljs-symbol">&lt;leader&gt;</span>rr :<span class="hljs-keyword">source</span> ~/.vimrc<span class="hljs-symbol">&lt;CR&gt;</span>\n</code></pre>\n<p>You might be wondering what the <leader> notation is there.  The <code>&lt;leader&gt;</code> key is a Vim convention for a key that comes before user created keystrokes.  It’s meant to minimize conflicts, and allow plugins to provide default mappings while still allowing the user a bit of flexibility.  The leader key can be set in your vimrc with the command <code>let mapleader=&lt;yourleaderkey&gt;</code>.  The default is <code>\\</code>, and I would recommend leaving it that way to start.  You can change it later if you find it to be inconvenient, and it doesn’t cause any conflicts since its the default key.  Common replacements like <code>,</code> overwrite useful functionality that may not be immediately obvious (<code>,</code> allows you to move backwards on a characterwise search for instance).</p>\n<h4>Configure plugins and file-type specific settings</h4>\n<p>I’ll touch more on plugins in a future post, but many of them allow extensive configuration, including setting keybindings, changing default behaviors, and enabling/disabling extra functionality. All of that happens here in the vimrc and should mostly use the let/set/map commands that we’ve already seen.</p>\n<p>You can also set file-type specific rules.  Rather than placing these in your main vimrc, these go into a special “file type plugins” directory, <code>~/.vim/ftplugin</code>.  Within that directory, you can create files like javascript.vim, python.vim or html.vim, and those files will be loaded after the vimrc when you open files of that type. Using those files, you can create completely separate profiles for each file type.</p>\n<h3>Discover what’s out there</h3>\n<p>I’ve intentionally avoided telling you what your vimrc should look like here.  I’ve tried to show you the big picture of what you can do, and now I’ll leave it to you to figure out what pieces you need to be comfortable and productive.  It will be different for everybody.</p>\n<p>My advice?  Now that you know what you’re looking for, go and take a look at other people’s configurations. Start with something like this <a href="https://github.com/benmccormick/dotfiles/blob/master/vim/vimrc.symlink">vimrc boilerplate</a>, and add the things you like.</p>\n<p>It’s pretty easy to find good configurations online if you look.  <a href="https://github.com/ben336/dotfiles/blob/master/vim/vimrc.symlink">My vimrc file</a> is on Github.  It’s certainly not the best out there, but its relatively small and easy to follow.  If you know developers you admire who use Vim, ask to see their vimrc files, or see if they have any fancy tricks to share.  For those without those resources,  Github’s <a href="http://dotfiles.github.io/">dotfile page</a> is a great place to look.  It contains links to several very detailed “dotfile repos” from various developers. You don’t have to copy everything from these files (in fact you shouldn’t), but you can pull the things that look useful, get rid of things that don’t, and try things out as you slowly build up your own workspace, built to do the jobs that you need it to do.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li><a href="http://dotfiles.github.io/">Github’s dotfile page</a> provides some great pointers to dotfile repositories from experienced developers that can help you come up with cool configuration ideas</li>\n<li><a href="https://github.com/carlhuda/janus">Janus</a> is a great resource for users who’d prefer to avoid configuration and just start with a useable editor.  Though if that’s you, you may find you’re better off <a href="http://delvarworld.github.io/blog/2013/03/16/just-use-sublime-text/">just using Sublime Text</a></li>\n</ul>\n<hr>\n'
}},function(e,t){e.exports={title:"Learning Vim in 2014: Copy and Paste the Vim Way",date:"2014-07-27 23:00:00+00:00",layout:"post",path:"/2014/07/27/learning-vim-in-2014-copy-and-paste-the-vim-way",description:"How to use copy and paste in Vim",keywords:"vim, copy, paste, registers, yank, delete",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"1675",last30pageViews:"83",body:'<p>If you’ve been following <a href="http://benmccormick.org/tag/learning-vim-in-2014/">my series on Vim</a>, it should be clear now that Vim has a pretty clear philosophy of how text editing should work. It’s based on the Unix philosophy of small composable tools, and doesn’t necessarily match up with the conventions that other editors use for common commands.  So it’s probably not surprising that Vim has its own way of handling copy and paste operations, and in fact doesn’t even use those terms.  Vim’s copy and paste handling is minimalist, composable, and powerful, but most people take some time to adjust to it.  I’m going to walk through the basics here, along with a few advanced features that are worth knowing about.</p>\n<p>The primary Vim commands for copying something are <code>y</code> (yank) which acts like most people’s view of copy, and the delete/substitute commands <code>d</code> (delete),<code>c</code> (change), <code>x</code> (single character delete), and <code>s</code> (substitute), which unintuitively all act like the more common concept of “cut”.  These can be <a href="http://benmccormick.org/2014/07/16/learning-vim-in-2014-vim-as-art/">composed with motion commands to select different regions</a>.</p>\n<p>Any Vim command that deletes text will also save a copy of that text unless you specifically tell it not too.  The idiomatic Vim method of deleting without copying is <code>&quot;_d</code>, which probably sounds bizarre.  We’ll come back to that later, and you’ll see that it makes sense in the bigger scheme of Vim’s copy and paste system.</p>\n<p>The basic Vim commands for paste are <code>p</code> (put) which pastes after of the current character/line and <code>P</code> which pastes before the current character/line.  Vim auto detects whether you’ve yanked text on a line by line basis or a character by character basis, and pastes accordingly. Basically, if you select only full lines it will paste line by line and not break on the cursor position, if you select any partial lines it will paste at the character level, starting or ending at the current cursor location.  Note that <code>p</code> also works in visual mode, where it will replace the current selection.</p>\n<p>All of this leads to a very common annoyance for new Vim users.  They’re editing a document and yank some text.  Then they go to a new location, delete a few lines, and hit <code>p</code> to replace them with the copied text.  Do you see the problem?  The text that is “put” is not what they originally yanked, but instead it’s the contents of their last delete action. Obviously this can be worked around by changing the order of the actions, but it’s frustrating to users who are used to being able to easily delete without blowing away their paste action.  Even more frustrating is when an experienced Vim user comes by and tells them the answer to their problem is to just type <code>&quot;0p</code> instead. Which will in fact put the correct text. So what’s going on with the weird syntax for these basic action?</p>\n<h4>Registers</h4>\n<p>What we’re missing is a clear understanding of how Vim handles copy and paste operations.  So let’s clarify.  Unlike most modern systems, which have a clipboard that holds a single value, Vim can store the values of yank and delete commands in one of many registers.  It has 26 normal registers, which correspond to the letters of the alphabet, and several “special” registers.  One of those special registers is the default register, which is where yank and delete commands store their content by default.  Other registers can be accessed with the <code>&quot;&lt;char&gt;</code> prefix that we’ve already seen.  So in the above example, the text from the initial example is moved into the default register, and then replaced there by the deleted text.  But it remains in the 0 register, which always points to the last “yanked” text, ignoring text gained by deleting.</p>\n<p>The 26 alphabetical registers serve as great “medium term” storage.  You can use them to yank something that you want to have around for a while, and then put it in a few different places, even if you’re yanking and deleting other things in the meantime.  These will even persist across sessions as long as you have the <code>nocompatible</code> option set in your vimrc file.  However if you overwrite one, there’s no easy way to get it back.</p>\n<p>One cool feature of registers is the built in ability to append to the end of them.  If you want to add text to an existing register, for instance if you missed part of the text you wanted to yank, you can do so by capitalizing the register.  So if you had deleted a line and put it in the <code>a</code> register with <code>&quot;add</code>, but meant to include a second line, you could then delete the next line and append it to the register with <code>&quot;Add</code>. <code>&quot;ap</code> would then put the 2 lines back into the document.</p>\n<h4>Special Registers</h4>\n<p>In addition to the alphabetical registers, there are several <em>special registers</em> that are worth knowing about.  I already mentioned the default register, which most Vim users know about, even if they don’t understand exactly how registers work.  Other important registers are the clipboard register, the black hole register, and the numbered registers.</p>\n<p>If you have to learn one special register, learn the clipboard register.  One of the first things people notice about copy and paste in Vim is that it doesn’t interact nicely with other applications’ copy and paste by default.  If you yank a line of text in Vim, it’s not added to the system clipboard.  If you copy some code from Stack Overflow and try to paste it in Vim with <code>p</code>, it won’t work <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  But, since we know about registers, it makes sense that the default register might not be mapped to the clipboard, which we don’t want getting blasted away everytime we delete a character.</p>\n<p>Vim isn’t completely disconnected from the system clipboard though.  The clipboard register <code>+</code> is Vim’s proxy to your system clipboard.  So <code>&quot;+y&lt;motion&gt;</code> and <code>&quot;+p</code> act like traditional copy and paste.  Your version of Vim does have to be compiled with clipboard support in order to use the <code>+</code> register. You can check to see if you have clipboard support with <code>:echo has(\'clipboard\').</code><sup id="fnref:2"><a href="#fn:2">2</a></sup> On OSX you can use MacVim to get clipboard support, since the default version of Vim shipped with OSX is not compiled with it.  On other operating systems you’ll have to investigate the easiest way to install with clipboard support if your version doesn’t have it.  It should be enabled for most modern mainstream distributions.</p>\n<p>Another register to quickly note is the black hole register <code>_</code>.  The black hole register, as you would expect, doesn’t retain what’s passed to it.  So <code>&quot;_y</code> and <code>&quot;_p</code> are no-ops, and <code>&quot;_d</code> is “true delete”, as opposed to the delete commands default “cut” like behavior.  Of course since most people don’t use all 26 alphabetical registers, you can also achieve effective true delete by deleting to any unused register.</p>\n<p>Finally, the number keys also have special register functionality.  You can’t yank text directly to a numbered register.  Instead the <code>0</code> register contains the last yanked text, and the <code>1</code> through <code>9</code> registers contain the last 9 deleted chunks of text.  This feature is a cool idea, but unfortunately the implementation is inconsistent and a bit weird.  For one thing the distinction between yanked and deleted text seems arbitrary, and since they act the same in other ways, puts an added cognitive load on the user to remember which one they used.  Secondly, for whatever reason, deletions that span less than a line get special behavior.  If you delete these to an alphabetical register, they’re saved to <code>&quot;1</code> just like any other delete.  But if you delete them to the default register, they’re saved to <code>&quot;-</code> and not put in <code>&quot;1</code>.  The logic is complicated enough that the numbered registers become tough to use in day to day tasks, and I’ll have to agree with Drew Neil in labeling them one of Vim’s <a href="http://vimcasts.org/blog/2013/11/registers-the-good-the-bad-and-the-ugly-parts/">“bad parts.”</a></p>\n<h4>Macros</h4>\n<p>One last important thing to know about registers is that along with being used for copy and paste, they serve as a place to save macros, Vim’s reusable command language.  You can save a macro by typing <code>q&lt;register key&gt;&lt;commands&gt;q</code>, and the macro will be saved to the register.  Like yank and delete, capitalizing the register name will let you append to the register instead of replacing it. So there’s a few things you should know about that.  One, if you use macros, don’t save macros to the same registers that you use for copy and paste.  If you use the <code>y</code> register a lot for the convenience of <code>&quot;yy&lt;motion&gt;</code>, don’t use <code>qy</code> to save your macro unless you’re ok with it being blown away by your next yank.  Two, the sharing of registers allows you to copy text to use as a macro.  So if you for instance wanted to have a file with a list of common operations, it would be easy to go to that file, copy a line, and then execute it as a macro.  This isn’t the first thing most people will want to do, but it illustrates the power and flexibility that come when you start combining Vim’s tools.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>For a more in depth look at Vim’s special registers, including a bunch I didn’t cover here, you can check out this great <a href="http://blog.sanctum.geek.nz/advanced-vim-registers/">roundup</a></p>\n</li>\n<li>\n<p><a href="http://vimcasts.org/categories/copy-and-paste/">Vimcasts</a> has a whole series of posts on copy and paste in Vim.</p>\n</li>\n</ul>\n<hr>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Of course some people would probably see that as a feature, not a bug\n    \t<a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        Thanks to schweinschmeisser on Reddit for reminding me to add a way to check for support.\n    \t<a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Getting More from Vim with Plugins",date:"2014-07-21 10:50:00+00:00",layout:"post",path:"/2014/07/21/learning-vim-in-2014-getting-more-from-vim-with-plugins",description:"How plugins fit into a Vim workflow",keywords:"vim, plugins, vundle, nerdtree, ack, ctrlp",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"84406",last30pageViews:"530",body:'<p>It’s impossible to design a tool that fits everyone’s workflow perfectly.  No matter how many cases you hit, somebody will want to do something you don’t support, will find your solution for their problem confusing, or they’ll try to use your tool in a way you never imagined. Vim tries to deal with situations like that in 2 ways.  First by making it easy to <a href="http://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim/">configure</a>, and second by making it easy to extend.  Extending Vim happens through plugins. <span class="aside">\n<img src="/posts/images/xkcdworkflow.png" alt="xkcd workflow">\n</span>\nVim plugins allow you to enhance, change, or add to Vim’s existing behaviors.  They’re a powerful tool, and a key part of what has helped Vim remain relevant for 23 years, even as the computing world has changed dramatically around it.  They allow Vim to support languages that didn’t exist the last time its core was updated, handle niche use cases that would never get solutions in the main Vim distribution, and also allow for powerful new features that benefit all users.</p>\n<p>Your key focus when it comes to Vim plugins should be identifying your needs and finding plugins to fit them.  Don’t just toss every plugin you see recommended somewhere into your .vim/bundle folder.  Plugins have costs; they slow down file loads, can fill up the key mapping space, and add complexity for users.  But they’re also extremely powerful, and I recommend that everyone who controls their development environment think about using at least a few.</p>\n<h3>Plugin Management: Hello Vundle</h3>\n<p>Before you install anything, you’re going to need a strategy for managing your plugins.  Plugin management for Vim has a bit of a troubled history.  There’s never been an official plugin management solution, and unlike Sublime Text’s Package Control, there wasn’t a simple, easy to use solution that the community standardized.  Instead, plugins were initially just placed into the .vim folder or elsewhere and then sourced in ~/.vimrc.  To allow for download or installation, authors used a variety of compression formats, including a Vim specific Vimball format.  Early efforts to standardize a process didn’t go particulary well.</p>\n<p>That changed with the rise of Github and Tim Pope’s <a href="https://github.com/tpope/vim-pathogen">Pathogen</a>.  Pathogen was the first plugin manager to make it relatively simple to include new plugins, by encouraging a standard directory format and installation process (using git repositories).  It began a standardization process that now means pretty much any modern Vim plugin can be installed with Pathogen without modification.</p>\n<p>Despite Pathogen’s historical significance, in 2014 you should use <a href="https://github.com/gmarik/Vundle.vim">Vundle</a>, not Pathogen, to manage your plugins.  Vundle is an easy to use plugin manager that is compatible with the Pathogen format.  Vundle improves on Pathogen in several ways.  It allows you to list the plugins you want to use in your vimrc file, then will pull them down and install them for you.  So adding and removing plugins is just a configuration change, and it’s always easy to see which ones you’re currently using.  It makes it easy to pull plugins from a variety of sources, but optimizes for Github, and <a href="http://Vim.org">Vim.org</a>.  Since roughly 99% of plugins that most users will need are available from one of those sources, this is extremely convenient.  You can find full documentation for using Vundle in its <a href="https://github.com/gmarik/Vundle.vim">Github repo</a>, but trust me, it’s the best option out there for 99% of users.</p>\n<h3>What Can Plugins do for you?</h3>\n<p>Before you start installing plugins, it’s worth thinking about what you need from them.  There are a few main purposes for using plugins.  I’m including a few examples of each to get you started as you figure out which plugins make sense for you.</p>\n<h4>Let Vim Get Your Files In Order</h4>\n<p>File management plugins are some of the most important plugins you can use with Vim.  Vim’s built-in file management is pretty weak in some ways compared to editors like Sublime Text and TextMate.  Plugins can fill that gap.  The plugins listed below show several approaches to file management.  There’s plenty of overlap in functionality here, but they’re all worth trying to see which ones fit your style.</p>\n<ul>\n<li>\n<p><a href="https://github.com/kien/ctrlp.vim">CtrlP</a> is probably my most used Vim plugin.  It provides fuzzy finding capabilities for Vim, to allow you to search for files in a similar way to Sublime Text’s “Go To Anything” bar.</p>\n</li>\n<li>\n<p><a href="https://github.com/mileszs/ack.vim">Ack.vim</a> and <a href="https://github.com/rking/ag.vim">Ag.vim</a> are plugins to connect Vim with Ack and Ag respectively.  If you’re not using one of these tools for code search, you <a href="http://benmccormick.org/2013/11/25/a-look-at-ack/">really should be</a>.  They’re much faster than grep or an IDE’s built in search.  These plugins provide seamless integration for each within Vim, allowing you to easily jump to the code you’re searching on, opening new tabs or splits if you like.</p>\n</li>\n<li>\n<p><a href="https://github.com/Shougo/unite.vim">Unite.vim</a> is an interesting attempt to combine the functionality of plugins like ctrlp, ack.vim and others into a single “omnisearch” interface.  I personally found it a bit unintuitive and poorly documented, but some people <a href="http://www.codeography.com/2013/06/17/replacing-all-the-things-with-unite-vim.html">swear by it</a>. If you are able to make sense of it, it’s certainly a great concept to pull in related functionality into a single interface.</p>\n</li>\n<li>\n<p><a href="https://github.com/scrooloose/nerdtree">The NERDTree</a> is one of the most popular Vim plugins out there.  It provides a more traditional side-drawer style navigation interface to complement Vim’s other navigation options.  I personally prefer a “search over specifying” navigation style, so ctrlp and ack.vim work better for me.  But I keep NERDTree around for looking at other people’s code in new projects, when I want to look around a directory to see what’s available and how it’s structured before diving in.</p>\n</li>\n<li>\n<p><a href="https://github.com/tpope/vim-projectionist">Projectionist.vim</a> is something I’ve just begun to look into.  It’s an interesting approach by Tim Pope to provide a more intuitive way to navigate structured projects.  Rather than fuzzy finding or sidebars, Projectionist invites you to create categories of files that you can open files from (for instance  model, view and controller files in a BackboneJS project).  This gives you the simplicity of traditional Vim file path opens while removing some of the memorization and clutter from the process.  Projectionist also allows you to specify alternate files for each file. That allows you to, for instance, jump quickly from a file to its unit test file.</p>\n</li>\n</ul>\n<h4>Building On Vim’s Built In Language</h4>\n<p>Another interesting class of Vim plugins are plugins that extend Vim’s existing language concepts.  In my past few posts I’ve looked at how Vim is intended to be used by <a href="http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/">combining composable commands with motions and text objects</a>, then efficiently <a href="http://benmccormick.org/2014/07/16/learning-vim-in-2014-vim-as-art/">repeating that process when possible</a>.</p>\n<ul>\n<li>\n<p><a href="https://github.com/tpope/vim-surround">Surround.vim</a> is another plugin by Tim Pope.  It provides an extra command to use with Vim’s built in text objects. That command, <code>ys</code> allows you to surround a text object with some sort of enclosing tag. So <code>ysiw\'</code> surrounds the current word with <code>\'</code>, and <code>ysip&lt;div class=&quot;example&quot;&gt;</code> surrounds the current paragraph with <code>&lt;div class=&quot;example&quot;&gt;...&lt;/div&gt;</code> tags.  There’s also a separate command to replace surrounding characters with different ones.  It’s extremely useful, especially for HTML editing and quoting.</p>\n</li>\n<li>\n<p><a href="https://github.com/tpope/vim-commentary">commentary.vim</a> adds a “commenting” action, <code>gc</code> that can be used with existing motions.  So <code>gcc</code> comments out the current line, <code>gcG</code> comments out the remainder of a file, and so on.  This is yet another Tim Pope plugin.  I promise I’m not trying to make up for recommending Vundle over Pathogen, the guy has just been prolific.</p>\n</li>\n<li>\n<p><a href="https://github.com/tpope/vim-repeat">Repeat.vim</a> is one final Tim Pope plugin for now.  Repeat allows you to extend the <code>.</code> command to work with user created commands.  It works with surround and commentary out of the box, but you can also set it up to work with your own commands. <a href="http://benmccormick.org/2014/07/16/learning-vim-in-2014-vim-as-art/">The . command is one of the most important Vim commands</a>, so being able to use it in more situations is definitely a win.</p>\n</li>\n<li>\n<p><a href="https://github.com/kana/vim-textobj-user">vim-text-obj-user</a> is an interesting project to make it easy to create plugins that define custom text objects which then can be used with Vim commands like any other text object.  If that sounds scary to you, you can also take a look at the <a href="https://github.com/kana/vim-textobj-user/wiki">list</a> of plugins already built with the project, and use any that will be useful to you.</p>\n</li>\n</ul>\n<img alt="Vim side by side styles" class="full-width" src="/posts/images/vimvisuals.png">\n<h4>Help Vim Look Good</h4>\n<p>One of the best uses for plugins is making Vim a bit easier on the eyes. We can do a lot to change Vim’s default look and feel.  For instance the screenshot above shows what MacVim looks like with and without loading my ~/.vimrc file and plugins.  If you’re a writer or developer, you may be looking at Vim for as much as 8-10 hours a day.  So make it something you’re happy to look at.</p>\n<ul>\n<li>\n<p>Syntax highlighting plugins are one of the main things you can use to make your code easier to read.  Vim packages syntax highlighting for many common languages, but for less mainstream languages you’ll need to download plugins to get syntax highlighting.  These plugins often may contain other niceties for the language, like syntax checking or support for compiling from within Vim.  For instance I use plugins for <a href="https://github.com/groenewege/vim-less">Less</a>, <a href="https://github.com/kchmck/vim-coffee-script">CoffeeScript</a>, and <a href="https://github.com/plasticboy/vim-markdown">Markdown</a>.</p>\n</li>\n<li>\n<p>Colorschemes are also an important part of helping Vim look its best.  Most distributions of Vim bundle several colorschemes, but the most popular ones come as plugins.  If you’re somebody who needs to know that somebody else has sweated the details of the tools you use so that you don’t have to, I recommend <a href="http://ethanschoonover.com/solarized">Solarized</a>, a color scheme based on the relationships between different colors and designed to echo the readability of words on paper.  If you like to try different things and have more options, consider looking at <a href="https://github.com/chriskempson/base16">Base16</a>, a project to standardize color scheme creation for multiple editors.  The advantage of both of these schemes is that they’re available for pretty much any editor or tool you’d want to use alongside or in place of Vim.</p>\n</li>\n<li>\n<p><a href="https://github.com/reedes/vim-thematic">Thematic</a> is a tool to allow you to manage your visual schemes.  So if you like to use different color schemes or fonts in different situations, Thematic can make that easy. You can define a set of “themes”, and then switch between them whenever you feel like it.  As somebody who uses Vim for both writing and programming, it’s nice to be able to use different themes for different situations.  I currently use Solarized for code, and the Pencil theme for writing.  Thematic and Pencil are two of a <a href="http://wynnnetherland.com/journal/reed-esau-s-growing-list-of-vim-plugins-for-writers">wide variety of plugins for writers</a> that Reed Esau has written.</p>\n</li>\n<li>\n<p><a href="https://github.com/bling/vim-airline">Airline</a> is a plugin to pretty up your status bar.  It creates the nice triangular effects in the image above, and integrates with other plugins to show helpful information in the status bar.  It does require modified fonts to use though, so you’ll need to have pretty full control of the system you’re on to use this one.</p>\n</li>\n</ul>\n<h4>Help Vim Understand Your Code</h4>\n<p>Vim is not an IDE.  By default it doesn’t understand much about code, and very little about specific languages.  It offloads that knowledge to the operating system, through things like <code>:make</code> and <code>ctags</code>, and to plugins.  Here are a few plugins that can help make Vim a bit more “code aware”.</p>\n<ul>\n<li>\n<p><a href="https://github.com/scrooloose/syntastic">Syntastic</a> is a syntax checking plugin for Vim that integrates with external syntax checkers to provide in-editor feedback on your code as you make changes.  For instance, it can integrate with jshint, llvm or javac to provide immediate feedback on a file.</p>\n</li>\n<li>\n<p><a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> is a code completion engine for Vim that builds on Vim’s built in autocomplete features to offer “smart completion” for as many situations as possible.  It can integrate with Clang, Jedi, Omnisharp, and Vim’s omnicompletion in order to bring smart autocomplete to a variety of languages.</p>\n</li>\n<li>\n<p><a href="https://github.com/tpope/vim-fugitive">Fugitive</a> and <a href="https://github.com/jisaacks/GitGutter">Git-gutter</a> are 2 plugins that bring Git integration into Vim.  Fugitive provides a wrapper around the Git executable to allow you to easily manage your git actions from within Vim. GitGutter focuses on individual files and lets you see where you’ve made uncommited modifications in the current file.  They complement each other well, and are both very useful for heavy Git users.</p>\n</li>\n<li>\n<p><a href="https://github.com/Raimondi/delimitMate">delimitMate</a> is a simple plugin that removes a huge annoyance by auto inserting matching braces and brackets in a smart, intuitive way.  Lack of auto brace insertion was a big mental hurdle for me coming from Sublime Text.  DelimitMate makes things work the way I expect.</p>\n</li>\n<li>\n<p>Language specific plugins are another plugin group worth investigating.  There are way too many examples to list here, but one that I use and enjoy is <a href="http://ternjs.net/">TernJs</a>, a code intelligence plugin for Javascript that you can use with something like YouCompleteMe to get the type of IDE style autocompletion that is very rare for Javascript code.</p>\n</li>\n</ul>\n<h4>Help Vim Play Nice With Others</h4>\n<p>Some plugins exist to provide tighter integration between Vim and external programs.  We’ve already touched on a few of those, like Ack.vim and Syntastic.  Vim is intended to follow the Unix philosophy of doing one thing well and working well with other programs.  Integration plugins allow for deeper versions of that.</p>\n<ul>\n<li>\n<p><a href="https://github.com/christoomey/vim-tmux-navigator">Tmux Navigator</a> is a must have plugin for <a href="http://tmux.sourceforge.net/">Tmux</a> users.  It allows you to easily move between tmux and Vim splits using a single set of keyboard mappings.  It lets Vim and tmux work together in a completely natural way, without the user having to keep track of where one ends and the other begins.</p>\n</li>\n<li>\n<p><a href="http://kapeli.com/dash">Dash.vim</a> is an OSX only plugin that provides integration with Dash.app, a documentation manager app for OSX, making it easy to look up library method definitions from within Vim.</p>\n</li>\n</ul>\n<h4>Grant Vim Superpowers</h4>\n<p>The last category of plugins are scripts that allow Vim to do things that are totally different than anything it can do on its own.  These may be features pulled from other editors, or features inspired by Vim but implemented differently than the Vim core.  These can be pretty amazing, but I’d be careful with them to start.  You’ll want to learn how Vim works before piling a bunch of big extensions on top of it.</p>\n<ul>\n<li>\n<p><a href="https://github.com/SirVer/ultisnips">Ultisnips</a> allows Vim to use Textmate like “snippets” that allow you to save canned templates of code or text, then insert and modify them whenever you’re ready.  If this sounds interesting, I’d recommend checking out the recent <a href="http://vimcasts.org/episodes/meet-ultisnips/">Vimcast</a> episodes where Drew explores Ultisnips.</p>\n</li>\n<li>\n<p><a href="https://github.com/Lokaltog/vim-easymotion">EasyMotion</a> is a plugin that introduces a new type of movement to Vim.  It creates alternative versions of the Vim movements like <code>f</code> and <code>w</code> that allow you to find a character or word anywhere on the screen, and specify it by using a key character that temporarily appears on the screen in place of each possible target character.  If that’s hard to follow, check out the <a href="https://camo.githubusercontent.com/d5f800b9602faaeccc2738c302776a8a11797a0e/68747470733a2f2f662e636c6f75642e6769746875622e636f6d2f6173736574732f333739373036322f323033393335392f61386539333864362d383939662d313165332d383738392d3630303235656138333635362e676966">demo</a>.</p>\n</li>\n</ul>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p><a href="http://vimawesome.com/">VimAwesome</a> is a recent project to collect popular Vim plugins in a beautiful, searchable format. It lists some categories similar to what I have above and sorts plugins by popularity.  It seems to pull rankings based on mentions in Github dotfiles, which is a creative and useful way of ranking plugins.</p>\n</li>\n<li>\n<p><a href="http://vimcasts.org/categories/plugins/">Vimcasts has a bunch of plugin related episodes</a>, many of which touch on some of the plugins mentioned in this article</p>\n</li>\n<li>\n<p>Plugins are great, but only have real value if you understand how Vim can make you productive.  If you haven’t seen them yet, consider checking out the <a href="http://benmccormick.org/tag/learning-vim-in-2014/">other posts</a> in this series to learn how Vim works before loading up on plugins.</p>\n</li>\n</ul>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Search",date:"2014-08-04 01:16:20+00:00",layout:"post",path:"/2014/08/04/learning-vim-in-2014-search",description:"How to search for anything in Vim",category:"tools",keywords:"vim, search",readNext:"learning-vim,vim-files,vim-language",pageViews:"10328",last30pageViews:"25",body:'<p>Have you ever tried to summarize something that was just too big to explain?  I’ve covered a lot of ground in my posts on Vim this past month, but it’s only scratched the surface of what Vim has to offer.  The goal was to create a foundation that people could start with, and then let them build on their own. There’s not a conclusive way to say what somebody “needs to know” when learning Vim.  Most people don’t (and shouldn’t) use every feature of the editor, they use the ones that make sense for them.  So I’ve tried to cover the things that I know people have found useful, and the philosophy behind how Vim works, and then let you figure out what you’d like to use on your own.  This post wraps up the series, but I wanted to highlight one last feature of Vim, its fantastic search capabilities.</p>\n<h3>Search</h3>\n<p>Vim has an extremely powerful built in search tool.  To use it, you can type <code>/</code> at anytime in normal mode to start entering search terms.  For instance <code>/foo</code> followed by enter searches for the next occurrence of <code>foo</code> in the document.  You can then skip over matches with <code>n</code> or go backwards with <code>N</code>.  If you wanted to start by searching backwards, you could have started with <code>?foo</code> instead of <code>/foo</code>, in which case <code>n</code> and <code>N</code> would reverse behavior, with <code>N</code> moving forward in the document and <code>n</code> moving back.  It’s easiest to think of <code>n</code> as “next match” and <code>N</code> as “previous match”, with the direction determined by the search operator, <code>/</code> or <code>?</code>.</p>\n<p>The search tool can be used for more than simple literal expressions, it also takes regular expressions.  So <code>/fo.\\|bar</code> will match <code>foo</code>, <code>fox</code>, and <code>bar</code>.  You also can search for lines containing both foo and bar with the expression <code>/.*foo\\&amp;.*bar</code>.  If you want to dig deeper into Vim’s regex language, I’d recommend typing in <code>:h pattern</code> to check out the excellent documentation.</p>\n<h3>Substitute</h3>\n<p>Search is great, but in many cases what we want to use it for is replacing or acting on each instance.  Vim’s search and replace command looks something like <code>:%s/foo/bar/g</code>, which will replace all occurences of <code>foo</code> in the document with <code>bar</code>.  Let’s break that down a bit.  <code>:s</code> (substitute) is Vim’s search and replace command.  By default it only works on the current line, so in order to get it to act on the whole document I prepended the <code>%</code> character, which sets the range to include everything.  If you want a smaller range, you can select the text you want to act on in visual mode. Typing <code>:</code> will then preload the range into the command area.  Substitute takes an expression in the form <code>/&lt;search expression&gt;/&lt;replace string&gt;/&lt;modifiers&gt;</code>  where search expression defines the search, replace string is the text to substitute in, and modifiers are single letter arguments that change the behavior.  By default only the first instance of an expression per line is substituted, so I added the <code>g</code> modifier to tell Vim to substitute all instances of the search expression on a line.  Other useful modifiers are <code>i</code>, which makes the search case insensitive, and <code>c</code> which has Vim prompt for confirmation before substituting each instance. Confirmation is helpful if you want to change most but not all occurences of a phrase. One useful behavior of substitute to be aware of: If you leave the search expression blank, it reuses your last search.  So if you’ve been playing around with a regex to get the right expression, once you get it right you can type <code>:%s//&lt;replacement&gt;/g</code>, and it will replace all instances, without forcing you to retype your complicated regex.</p>\n<p>Finally, it’s worth noting that search plays nicely with Vim’s <a href="http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/">composable actions</a>, and you can use it as a motion command with <code>y</code>, <code>c</code>, <code>d</code> or other actions.  For instance <code>d/foo</code> will delete all text up to the next occurence of foo in the document. <code>y?foo</code> will yank all text backwards to the previous occurence of foo in the document.</p>\n<h3>Inline Searching</h3>\n<p>Along with the primary search and substitute commands, Vim has other specialty searching tools.  One of these is its <code>f</code> and <code>t</code> commands. <code>f&lt;char&gt;</code> moves to a single character on the current line.  While less powerful than <code>/</code>, this can be super useful because of its quick composability and guarantee of not moving out of the current scope.  It’s really easy to type <code>cf)</code> to delete through the end of the parentheses.  <code>t</code> works similarly, but is non-inclusive, so you can use <code>ct)</code> to delete everything up to and not including the parentheses.  I remember it as “change find character” and “change to character” respectively.  Like <code>/</code>, these commands support backwards and repeated search.  <code>F</code> and <code>T</code> search backwards on the current line, and <code>;</code> and <code>,</code> are the default commands for “next match” and “previous match” respectively.</p>\n<h3>Cross-file searching with vimgrep and grep</h3>\n<p>Searching within a file is nice, but what if you want to search in multiple files?  Vim provides 2 commands for that.  The first, <code>:vimgrep</code>, uses Vim’s internal regex engines to search across multiple files. You could for instance type <code>:vimgrep /function/i ./*.js</code> to search all Javascript files in the current directory for the “function” keyword.  You’d then be able to loop through them using the <code>:ln</code> and <code>:lp</code> commands.</p>\n<p>The second command, <code>:grep</code>, integrates with an external search application (grep by default), to do the searching.  The advantage of the first is that it’s portable and will be available anywhere and everywhere that Vim is.  But generally external tools are going to be faster than Vim’s internal search engine.  Grep for instance is faster than vimgrep.  I personally use the external tool <a href="http://beyondgrep.com/">ack</a> which is faster than grep.  Regardless though, Vim has support for whatever approach you choose to take.</p>\n<h3>Cross-file replace with the arglist</h3>\n<p>Up till now we’ve mostly been dealing with tasks that Vim has good answers for.  If you want to do a search and replace across multiple files in Vim though, you end up in some of the more esoteric parts of Vim-land.  In order to do a search and replace across multiple files in Vim, you need to first define a set of files to edit, and then run the replace command.  Unfortunately there is no way in Vim to cleanly do this all in a single command.  Instead you must pull your list of files from one of 3 places, the arglist, the buffer list, or the window list.  The arglist is by default the files that you specified to open when you initially opened Vim, the buffer list is your list of currently opened buffers, and the window list is the list of files in currently open windows.  Since you probably don’t want to have to open or view all the files that you want to run a search/replace on, and you may want to have files open or visible without running a replace on them, the arglist is the list of choice for replacements.  Vim allows you to edit the contents of the arglist at any time using the <code>:argadd</code> and <code>argdelete</code> commands.  So to replace <code>foo</code> with <code>bar</code> for all javascript files in the current directory you might type something like.</p>\n<pre><code class="language-vimscript">:<span class="hljs-keyword">argd</span> * <span class="hljs-comment">"Clear arglist</span>\n:<span class="hljs-keyword">arga</span> ./*.js  <span class="hljs-comment">"Add javascript files</span>\n:<span class="hljs-keyword">argdo</span> %s/foo/bar/g <span class="hljs-comment">"Substitute on each file</span>\n</code></pre>\n<p><code>argdo</code> is the command to execute a command across all files in the arglist.  <code>bufdo</code>, <code>tabdo</code>, and <code>windo</code> work the same way for every “open buffer”, “active window in each tab”, and “window in the current tab” respectively. Personally I find this all to be a pain.  A single command that let you specify an action and a range to run it on like <code>:do \'%s/foo/bar/g\' ./*.js</code> would make plenty of sense.  But since that doesn’t exist, it’s worth at least knowing that the arglist is there, and being able to resort to it if necessary.</p>\n<h3>The Power Of Search</h3>\n<p>Most people start out using Vim knowing that they can move around with <em>hjkl</em> and switch between files with <code>:e &lt;filename&gt;</code> as they learn more they grow their toolbox. Search is a great tool for moving quickly around text in Vim, and for powerfully making big edits.  Searching allows you to allow your brain to focus on the big picture, rather than remembering exactly where each piece of code or content is located. Like everything else in Vim, it’s a tool that you can combine with other tools to create powerful workflows.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p><a href="http://vimcasts.org/episodes/operating-on-search-matches-using-gn/">Vimcasts</a> has a nice piece on the <code>gn</code> command, an alternative to <code>n</code> that lets you select the next search match in visual mode</p>\n</li>\n<li>\n<p><a href="http://vim.wikia.com/wiki/Search_and_replace">Vim’s wiki</a> also has a nice writeup of the <code>:substitute</code> command, with lots of examples and details.</p>\n</li>\n</ul>\n'
}},function(e,t){e.exports={title:"Learning Vim in 2014: The Basics",date:"2014-06-30 11:28:00+00:00",layout:"post",path:"/2014/06/30/learning-vim-in-2014-the-basics",description:"The basics of learning Vim",keywords:"vim, basics, beginner, tutorial",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"20805",last30pageViews:"211",body:'<p>Do you want to be efficient writing code?  Using Vim can be a powerful help.  Using it has let me move more effectively through the process of writing and editing code.  But getting to where I am now was frustrating. Vim resources are scattered across the web, and contain a lot of different advice.  It’s tough to figure out how to make Vim work for you.  In my next few posts, I’m going to talk about the process of learning a 23 year old programming power tool, and what you need to know in 2014 to be productive with Vim.  Today I’ll start with the basics, stuff that goes back all the way to the 1970s, and we’ll grow from there.</p>\n<h3>Why has Vim Survived?</h3>\n<p>Vim has been around for a while.  Originally released in 1991 as an improvement on vi (which had been around since 1976), it has outlasted a generation of programmers. The software world has changed a lot since 1991.  So why do people still use it?</p>\n<p>Vim provides a system for editing text that is quite simply more powerful than its modern graphical based alternatives.  It asks a lot of its users. To use Vim effectively you have to internalize the syntax for many commands that have better affordances on other editors.  But you’re rewarded with a friction-free editing environment.  Vi’s commands are fast, composable, and powerful. So let’s get started.</p>\n<h3>Step 0: Setup</h3>\n<p>The first thing you need to do is install a copy of Vim. If you’re on a Linux or Mac system, there is likely already a system copy, but it is probably not up to date.  So use your system’s package manager to get the latest version (7.4 at the time of this writing).  For Mac users I recommend using <a href="http://brew.sh/">Homebrew</a> to download <a href="https://code.google.com/p/macvim/">MacVim</a>. Windows users can download the latest executable on <a href="http://www.vim.org/download.php">Vim.org</a>.</p>\n<p>The second thing you’ll need is a vimrc (the file vim uses for configuration).  These files can become quite extensive, setting up many different options, configurations, and plugins.  But we’re going to start simple.  Download <a href="https://gist.github.com/benmccormick/4e4bc44d8135cfc43fc3">this minimal vimrc file</a> and install it in the appropriate directory for your OS as instructed.  If you already have a .vimrc file but don’t understand it, I’d recommend saving it elsewhere and using a minimal one for now. You can then build it out as you learn more.</p>\n<h3>Step 1: Learn the Syntax</h3>\n<p>Just like a programming language, the first thing to learn for Vim is the basic syntax.  Vim has a built in tool to help you get comfortable called vimtutor.  It’s a text file set up to help you learn to navigate Vim. Once vim is installed you can run it by calling vimtutor on unix-style systems.  On Windows you can follow the instructions <a href="http://superuser.com/questions/270938/how-to-run-vimtutor-on-windows">here</a>. It will take you through a series of 7 lessons that will familiarize you with the basic commands.</p>\n<p>Vim has rather non-standard commands, and it may be frustrating at first adapting to its different terminology and conventions.  The payoff comes slowly, but it does come.</p>\n<h4>Modes</h4>\n<p>The most important thing to understand is that Vim is a modal editor.  At any given time you’re in one of 6 modes.  You will have different abilities and keystrokes available to you in each of these modes.  For right now the key modes to understand are Normal Mode, Insert Mode, and Command line Mode.</p>\n<p>Normal Mode is the default mode.  It’s roughly equivalent to the state that other editors are in when you’re holding down the ctrl or cmd keys.  Instead of entering text onto the screen, different keys trigger different commands.  Initially this is a bit weird.  Those of us coming from other editors or IDEs are used to being able to type text by default.  The thought is that adding text is the primary task in a text editor.  But Vim treats adding text as sitting on equal footing with editing, deleting and manipulating existing text, and starts us in a mode where we can quickly make any change. To steal an analogy from Drew Neil, normal mode is the opportunity to take our paintbrush off the canvas while we decide our next stroke.</p>\n<p>Insert mode is the equivalent of most editor’s normal state.  When you type a key in normal mode, it appears on the screen. You can enter insert mode by pressing <code>i</code> in visual mode, and exit it by hitting <code>&lt;esc&gt;</code>.</p>\n<p>Command line mode lets you enter ex-commands, a command line language that complements normal modes shortcuts.  You enter it by hitting <code>:</code> in normal mode.  Important commands are <code>:w</code> to write (save) a file, and <code>:q!</code> to quit.</p>\n<p>The above commands, and an understanding of the modes are enough for you to survive in Vim, and treat it as a sort of awkward Notepad clone.  You can edit files, save them, and quit.  Going through vimtutor will introduce you to many more commands, and a few more modes.  But you can learn those at your own pace.  Right now you want to see what taking time to learn this awkward unfamiliar syntax can buy you.</p>\n<h3>Step 2: Learn the Language</h3>\n<p>Vim’s key commands are different than you’ll find in other editors like Sublime Text.  They’re not a series of standalone actions that you can do one after another to get what you want.  Instead they form a language.</p>\n<p>Vim statements are made up of actions and motions.  The actions are what you’re trying to do, the motions are where you want to do them.</p>\n<p>For example let’s take the <code>d</code> action. <code>d</code> deletes. You can delete a single character by typing <code>dl</code>.  You can delete 2 characters by typing <code>d2l</code>. You can delete a whole line by typing <code>dd</code>, or delete inside a word by typing <code>diw</code>.</p>\n<p>Once you learn the d action, you can use it with every motion you know. Similarly, when you learn a new motion, you can then use it with every action you know.</p>\n<p>So if somebody shows me the <code>y</code> action and tells me that it yanks (copies) text, I’ll know I can yank a character with <code>yl</code> a line with <code>yy</code> and inside the current word with <code>yiw</code>.  Each new Vim command is a tool in your toolbox, and since the tools build off of each other they become exponentially more valuable.</p>\n<h3>Step 3: Learn the Mindset</h3>\n<p>Vim can make you hyper-efficient.  But to get there you need to know more than just the command combinations available.  You have to shift your mindset.  Vim commands aren’t just easy to learn, they’re designed to be repeatable.  Bram Moolenar, Vim’s creator has listed out <a href="http://www.moolenaar.net/habits.html">7 habits of effective text editing</a>.  The second habit, don’t type it twice, is a pretty good summary of the “Vim Way” of doing things.</p>\n<p>Vim provides a bunch of ways to avoid repetition.  I’ll get into them in another post. For now though, let’s take a look at <code>.</code>, the dot command.  The dot command repeats the last action you’ve taken. For instance, you can use <code>ciw</code> to change a word, hit <code>&lt;esc&gt;</code> to return to normal mode, then move to another word and type <code>.</code> to replace that word as well.  You are able to avoid retyping the replacement word as well as the <code>ciw</code> command. You can run the whole replace with one keystroke, regardless of what words you’re replacing.  Like other Vim commands, the dot command is small on its own, but gains power as you add more tools to your toolbox.</p>\n<h3>More Resources</h3>\n<p>If you enjoyed this article you’ll probably also enjoy</p>\n<ul>\n<li>\n<p><a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1934356980&linkCode=as2&tag=benmccormicko-20&linkId=FE3JFKHYVRYCUOVS">Practical Vim</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=as2&o=1&a=1934356980" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" />: This amazing book by Drew Neil, the creator of <a href="http://vimcasts.org/">Vimcasts</a> was the single best resource I found as I learned Vim.  I highly recommend it for anyone who uses Vim.</p>\n</li>\n<li>\n<p><a href="http://yehudakatz.com/2010/07/29/everyone-who-tried-to-convince-me-to-use-vim-was-wrong/">Everyone Who Tried to Convince Me to use Vim was Wrong</a>: This blog post is another take on how to start learning Vim, by Yehuda Katz, the prolific developer who’s a core member of the Rails, EmberJS, and jQuery teams.</p>\n</li>\n<li>\n<p><a href="https://github.com/carlhuda/janus">Janus</a>: Janus is another Yehuda Katz project.  It’s a starting configuration for Vim meant to make it feel more comfortable for developers who want to come in and be productive immediately.  I personally found that it didn’t work for me. The plugin list overwhelmed me and prevented me from learning the basics.  But it may be a better fit for some people and is a great place to look to see configuration ideas and plugins that you can try out on your own.</p>\n</li>\n</ul>\n<hr>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Vim as Art",date:"2014-07-16 10:41:00+00:00",layout:"post",path:"/2014/07/16/learning-vim-in-2014-vim-as-art",description:"How using Vim is more of an artform than a science",keywords:"vim dot command",category:"tools",readNext:"learning-vim,vim-files,vim-language",key:"vim-art",pageViews:"15243",last30pageViews:"56",body:'<p>How do you feel about being efficient?  If you’re reading this blog, I bet you like it.  What if I told you your text editor could help you cut the amount of time you spend typing in half, with just a little reading and a bit of practice?  For you Vim users, it’s very possible that you’re spending way more time typing than needed.</p>\n<p>The software developers reading this have probably heard of the <em>Don’t Repeat Yourself</em> principle.  Developers want to avoid duplicating work, and try to write each distinct meaningful chunk of code only once.  DRY is extremely powerful when it comes to code, but it’s also a very useful principle in text editing.  Much of the editing work we do is extremely repetitive. Vim can help you remove those inefficiencies.</p>\n<p>If Vim’s composable commands are the <a href="http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/">language of Vim</a>, then repeating commands are it’s art.  For pretty much any thing you do in Vim, there are ways to automate and repeat it.  These “repeating commands” are powerful tools, but it’s not always easy to know what to do with them.  There aren’t simple rules you can learn for when to use repeating commands.  Instead it takes practice, awareness, and experience.</p>\n<p>All of Vim’s commands are designed to be repeatable and undoable.  So if you find yourself typing something a lot, there is likely to be a good solution for making it easier and faster.  I’m going to lay out the tools for doing that, along with a few hints for knowing when to use them.</p>\n<h4>Repetition Basics: The dot command</h4>\n<p>The most important Vim tool for repetition is the dot command.  Pressing <code>.</code> at any time will repeat the last native command you used in Vim.  How is this useful?  Let’s say we’re faced with the following code</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> widget = <span class="hljs-keyword">new</span> Widget();\n<span class="hljs-keyword">var</span> widgets = <span class="hljs-keyword">new</span> WidgetCollection();\nwidgets.push(widget);\n<span class="hljs-keyword">if</span>(widget.test()) {\n    sendMessage(<span class="hljs-string">\'widget passed test\'</span>);\n}\n</code></pre>\n<p>If we want to rename the <code>widget</code> variable to be more informative, how could we go about it? We’ll ignore “language-wise” refactoring solutions, like <a href="http://ternjs.net/">ternjs</a>, and look at the basic Vim options.</p>\n<p>A simple find and replace causes problems.  We can’t distinguish between the widget we want and other occurences.  <code>:%s/widget/testWidget/g</code> results in plenty of unwanted changes.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> testWidget = <span class="hljs-keyword">new</span> Widget();\n<span class="hljs-keyword">var</span> testWidgets = <span class="hljs-keyword">new</span> WidgetCollection();\ntestWidgets.push(testWidget);\n<span class="hljs-keyword">if</span>(testWidget.test()) {\n    sendMessage(<span class="hljs-string">\'testWidget passed test\'</span>);\n}\n</code></pre>\n<p>It might be possible to find a complex regex that only hit the variables we want, but thats suddenly a lot of thought for what should be a simple change.  We could go one by one and knock out each word one by one.  But that would be a lot of repeated typing of <code>testWidget</code>.  So what can we do?</p>\n<p>The dot command is a nice solution.  If we start on the first occurence of <code>widget</code>, we can use <code>ciw</code> to replace the current word with new text.  When we’ve added our new text and exit insert mode, we’ll have a <em>command</em>, which we can then repeat with <code>.</code>. After that we can move to the next occurence we want to change and hit <code>.</code> to replace it without retyping the variable name.  If we accidentally use it in the wrong place, it’s easy to undo with <code>u</code>.</p>\n<p>Of course it would still be a pain to navigate between each widget with hjkl.  Fortunately, Vim has more commands that allow us to avoid unecessary work.  If we start on one instance of <code>widget</code>, we can use <code>*</code> to search for all occurences of that word.  We can then use <code>n</code> to move from occurence to occurence. If we overshoot and go too far, we can use <code>N</code> to go backwards.  So if we start with <code>*</code> (shift+8 in the gif below) and then use ciw to replace the word, we can then use <code>n</code> and <code>.</code> to clean up the other widgets in only 5 keystrokes.</p>\n<img alt="vim gif" src="/posts/images/vimdotcommand.gif" class="full-width">\n<h4>The Vim Way</h4>\n<p>If you’re used to another editor, I’m guessing you’re justifiably a bit skeptical at this point.  After all, this example is something people do all the time, and many editors have tools to make it easy (multiple selections in Sublime Text and refactoring tools in language specific IDEs like Eclipse for instance).  They may take even fewer keystrokes than Vim. And they don’t require you to learn 6 separate commands to use well.  So what’s so special here?</p>\n<p>Let’s have a quick refresher on the philosophy of Vim.  Like the Unix ecosystem it came from, Vim provides <strong>small</strong>, <strong>composable</strong> tools that you can combine to create powerful actions.  The power isn’t in a specific use case.  Instead it comes from the range of possibilities that open up when we start mixing and matching the code.  As with verbs, movements, and text objects, repeating commands and their corresponding reverse commands are tools we can add to our toolbox.  Using the commands above and some of the other composable commands from my <a href="http://benmccormick.org/2014/07/02/learning-vim-in-2014-vim-as-language/">language post</a>, we can do some cool things.</p>\n<p>We can:</p>\n<ul>\n<li>Search through json files and selectively remove lines that contain an attribute we don’t want to use (start on the attribute, <code>*</code>,<code>dd</code>, then use <code>n</code> and <code>.</code> repeatedly to select lines to delete)</li>\n<li>Replace a long, hard to type function name throughout the document with another version without having to type out the function name (start on the function name, <code>*</code>,<code>:%s//&lt;newname&gt;/g</code>)</li>\n<li>Fix poorly indented lines using the <code>.</code> command (<code>&gt;&gt;</code> or <code>&lt;&lt;</code>, <code>.</code> repeatedly, <code>u</code> to undo if you go too far. This can easily be used on groups of lines using visual mode too)</li>\n</ul>\n<p>What do all of these have in common?  They all use a command once, and a movement at most once, then allow for as much repetition as you like.  In <a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356980&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=FE3JFKHYVRYCUOVS">Practical Vim</a>, Drew Neil encourages actively thinking about making your actions repeatable.  In many scenarios, once you’ve made a change and movement once, you can then get by with a single keystroke for each future action and movement, with another keystroke available to cancel an action if you go too far.  Here’s a partial list of repeating commands, with the corresponding cancel command to undo them.</p>\n<table>\n<tr><th>Repeating Command</th><th>Purpose</th><th>Canceling Command</th></tr>\n<tr><td>.</td><td>Repeat the last normal mode command</td><td>u</td></tr>\n<tr><td>n</td><td>Repeat the last Search</td><td>N</td></tr>\n<tr><td>;</td><td>Repeat the last character-wise search</td><td>,</td></tr>\n<tr><td>/<replacement>/</td><td>Repeat the last search</td><td>N/A</td></tr>\n<tr><td>@:</td><td>Repeat the last ex-mode command</td><td>N/A</td></tr>\n<tr><td>@@</td><td>Repeat the last Macro used</td><td>u</td></tr>\n</table>\n<p>None of these commands are all that useful on their own, but they’re each valuable things to learn as you build up your Vim toolbox. Focus on one or two to start, and learn to make edits so that you can easily repeat them. The art of Vim is learning to look for those opportunities, and crafting your commands so that they’re short, powerful, and repeatable.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>Some of you are probably confused that I wrote a whole post on repeating commands in Vim with only one side-reference to Macros.  Macros are Vim’s DRY power tool, and different enough from the rest of these commands that I didn’t want to lump it all together.  But for those interested, Drew Neil has a <a href="http://vimcasts.org/episodes/converting-markdown-to-structured-html-with-a-macro/">great screencast</a> on how to build a good Vim macro.</li>\n<li>On a similar note, Drew’s book <a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356980&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=FE3JFKHYVRYCUOVS">Practical Vim</a> is the best guide I’ve found on making good use of repetition in Vim.  I learned plenty of the stuff in this article from that book.  For those who don’t want to pay, I’m currently giving <a href="http://benmccormick.org/2014/07/11/new-twitter-feed-and-practical-vim-giveaway/">new subscribers a chance to win 2 copies of the book</a>.  You can also see more about repetition from Drew online at <a href="http://vimcasts.org/categories/repetition/">Vimcasts</a>.</li>\n<li>Tim Pope has published a plugin that allows you to extend the dot command to work on arbitrary user commands.  It also works out of the box with many of his other plugins.  You can see it on <a href="https://github.com/tpope/vim-repeat">Github</a>.</li>\n</ul>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Vim as Language",date:"2014-07-02 11:27:00+00:00",layout:"post",path:"/2014/07/02/learning-vim-in-2014-vim-as-language",description:"An explanation of the grammar behind Vim",keywords:"vim language grammar text object",category:"tools",key:"vim-language",readNext:"learning-vim,vim-files,vim-art",pageViews:"36087",last30pageViews:"479",body:'<p>Wouldn’t it be nice if your text editor just did what you said instead of making you slowly and manually add and delete characters?  Vim doesn’t speak English, but it has a language of its own, built out of composable commands, that is much more efficient than the simple movement and editing commands you’ll find in other editors.  In my <a href="http://benmccormick.org/2014/06/30/learning-vim-in-2014-the-basics/">last post</a>, I took an initial look at Vim as a language.  I’m going to dive deeper into that here.</p>\n<h3>Vim Verbs: What can you do?</h3>\n<p>Vim’s “verbs” mostly fall into 2 main categories.  Some of them act on a single character, and others act on a “motion” or “text object”.  We’ll look at motions in a second, but lets start by looking at the verbs.</p>\n<h4>Single character verbs</h4>\n<p>So like I said, there are a few vim actions that act on a single character.  They act as shortcuts for actions that you can also perform with motions, and allow you to save a few keystrokes.</p>\n<table>\n<tr>\n<th>Command</th>\n<th>Action</th>\n</tr>\n<tr>\n<td>x</td>\n<td>Delete character under the cursor</td>\n</tr>\n<tr>\n<td>r</td><td>Replace character under cursor with another character</td>\n</tr><tr>\n<td>s</td><td>Delete character under cursor and move to insert mode</td>\n</tr>\n</table>\n<p>These are great commands to know, and things that I use daily, but they act as a bit of an island.  Let’s look at some verbs with more power.</p>\n<table>\n<tr>\n<th>Command</th>\n<th>Action</th>\n</tr>\n<tr>\n<td>d<motion></td><td>Delete text specified by motion</td>\n</tr><tr>\n<td>c<motion></td><td>Delete text specified by motion and go into insert mode</td>\n</tr><tr>\n<td>y<motion></td><td>Yank (copy) text specified by motion</td>\n</tr>\n</table>\n<p>These aren’t the only 3 actions that you can use with motions, but they’re probably the most important. The first 2 are roughly the same as deleting or cutting in most instances, with the option to choose what mode you end in. The 3rd is Vim’s version of copying.</p>\n<h4>Motions</h4>\n<p>So how do we use these actions?  You’ll notice that if you type any of the above characters into Vim by themselves, nothing happens.  That’s because they’re expecting something to act on.  If you’re a grammar nerd or remember your 8th grade english classes, you can think of these as transitive verbs that need to act on a direct object.  These “direct objects” come in 2 forms, motions and text objects.  Motions are the motion commands that you can use at any time to move around Vim.  Some examples:</p>\n<table>\n<tr>\n<th>Command</th>\n<th>Motion</th>\n</tr>\n<tr>\n<td>$<motion></td><td>Go to the end of the line</td>\n</tr><tr>\n<td>G<motion></td><td>Go to the end of the file</td>\n</tr><tr>\n<td>f.<motion></td><td>Go to the next occurrence of `.` on the current line</td>\n</tr>\n</table>\n<p>All of these commands work as motions on their own, but when you combine them with actions you can get powerful effects.  So <code>d$</code> means “delete to the end of the line”.  <code>cf)</code> means “change through the next closing parentheses” and <code>yG</code> means copy everything through the end of the file.  The list above is only a small subset of the motions available.  I’d suggest learning 1 or 2 to start and using them when appropriate.  As you get more comfortable with Vim you can continue to add more, and each one will unlock a set of commands for all of the actions you know.</p>\n<p>The second type of “direct object” that Vim verbs can take is a text object.  You can think of text objects as a “defined chunk of text.”  Some examples include selecting words, html tag contents, or the contents of a function.</p>\n<table>\n<tr>\n<th>Command</th>\n<th>Text Object</th>\n</tr>\n<tr>\n<td>iw</td><td>Applies to everything in the current word</td>\n</tr><tr>\n<td>it<motion></td><td>Applies to everything in current xml/html tag</td>\n</tr><tr>\n<td>i{<motion></td><td>Applies to everything inside nearest curly brackets</td>\n</tr>\n</table>\n<p>So using text objects you can change the contents of a word with the easily memorizable <code>ciw</code> (change in word), or copy the contents of an html <code>&lt;a&gt;</code> tag with yit.  It’s worth mentioning here that one of the most powerful text objects is a bit of an oddball.  A really common thing people do is applying an action to the current line.  Vi’s language makes this easy by allowing the shortcut for this text object to be a simple repeat of the action.  So <code>yy</code> yanks the current line, <code>dd</code> deletes it, and <code>cc</code> changes it.</p>\n<h4>Piece by Piece</h4>\n<p>The key here is that learning Vim isn’t something you do in a weekend. It’s an iterative process. Since the actions, motions, and text objects build on themselves, you can start to grow your toolbox exponentially as time goes on.  But you’ll want to start with a few commands that you find make you productive.  I’ve personally found <code>ciw</code>, <code>dd</code> and <code>ci(</code> to be incredibly useful commands, and a great place to start as you learn to use these commands instead of the slower “mouse and select” methods that you may be used to. When we learn languages we all start with basic sentences, learn the grammar rules and grow from there.  Vim is no different. Start small and add to your toolbox as you build great things with it.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li><a href="http://stackoverflow.com/a/1220118/1424361">Your problem with Vim is that you don’t grok vi</a> - A concise explanation of what makes vi/vim special, and one of the most popular answers ever on Stack Overflow.</li>\n<li><a href="https://medium.com/@mkozlows/why-atom-cant-replace-vim-433852f4b4d1">Why Atom can’t replace Vim</a> - A great piece on the big picture importance of composable commands.</li>\n<li><a href="http://blog.carbonfive.com/2011/10/17/vim-text-objects-the-definitive-guide/">Vim Text Objects: The Definitive Guide</a> - This is a nice rundown of the different text objects available, including some that you can add using plugins.</li>\n</ul>\n<hr>\n<h4>Update</h4>\n<p>This post is currently on the front page of Hacker News. Feel free to join in the conversation <a href="https://news.ycombinator.com/item?id=7976493">there</a></p>\n'}},function(e,t){e.exports={title:"Learning Vim in 2014: Working with Files",date:"2014-07-07 11:10:37+00:00",layout:"post",path:"/2014/07/07/learning-vim-in-2014-working-with-files",description:"How to easily navigate the file system in Vim",keywords:"vim files file system splits buffers",category:"tools",readNext:"learning-vim,vim-files,vim-language",pageViews:"13474",last30pageViews:"80",body:'<p>As a software developer, you shouldn’t have to spend time thinking about how to get to the code you want to edit.  One of the messiest parts of my transition to using Vim full time was its way of dealing with files.  Coming to Vim after primarily using Eclipse and Sublime Text, it frustrated me that Vim doesn’t bundle a persistent file system viewer, and the built-in ways of opening and switching files always felt extremely painful.</p>\n<p>At this point I appreciate the depth of Vim’s file management features. I’ve put together a system that works for me even better than more visual editors once did. Because it’s purely keyboard based, it allows me to move through my code much faster.  That took some time though, and involves several plugins. But the first step was me understanding Vim’s built in options for dealing with files. This post will be looking at the most important structures Vim provides you for file management, with a quick peek at some of the more advanced features you can get through plugins.</p>\n<h3>The Basics: Opening a new file</h3>\n<p>One of the biggest obstacles to learning Vim is its lack of visual affordances.  Unlike modern GUI based editors, there is no obvious way to do anything when you open a new instance of Vim in the terminal.  Everything is done through keyboard commands, and while that ends up being more efficient for experienced users, new Vim users will find themselves looking up even basic commands routinely.  So lets start with the basics.</p>\n<p>The command to open a new file in Vim is <code>:e &lt;filename&gt;</code>.  <code>:e</code> opens up a new buffer with the contents of the file inside. If the file doesn’t exist yet it opens up an empty buffer and will write to the file location you specify once you make changes and save. Buffers are Vim’s term for a “block of text stored in memory”. That text can be associated with an existing file or not, but there will be one buffer for each file you have open.</p>\n<p>After you open a file and make changes, you can save the contents of the buffer back to the file with the write command <code>:w</code>.  If the buffer is not yet associated with a file or you want to save to a different location, you can save to a specific file with <code>:w &lt;filename&gt;</code>. You may need to add a <code>!</code> and use <code>:w! &lt;filename&gt;</code> if you’re overwriting an existing file.</p>\n<p>This is the survival level knowledge for dealing with Vim files.  Plenty of developers get by with just these commands, and its technically all you need.  But Vim offers a lot more for those who dig a bit deeper.</p>\n<h3>Buffer Management</h3>\n<p>Moving beyond the basics, let’s talk some more about buffers.  Vim handles open files a bit differently than other editors.  Rather than leaving all open files visible as tabs, or only allowing you to have one file open at a time, Vim allows you to have multiple buffers open.  Some of these may be visible while others are not.  You can view a list of all open buffers at any time with <code>:ls</code>.  This shows each open buffer, along with their buffer number.  You can then switch to a specific buffer with the <code>:b &lt;buffer-number&gt;</code> command, or move in order along the list with the <code>:bnext</code> and <code>:bprevious</code> commands. (these can be shortened to <code>:bn</code> and <code>:bp</code> respectively).</p>\n<p>While these commands are the fundamental Vim solutions for managing buffers, I’ve found that they don’t map well to my own way of thinking about files.  I don’t want to care about the order of buffers, I just want to go to the file I’m thinking about, or maybe to the file I was just in before the current one.  So while its important to understand Vim’s underlying buffer model, I wouldn’t necessarily recommend its builtin commands as your main file management strategy.  There are more powerful options available.</p>\n<img alt="splits example" class="full-width" src="/posts/images/skitch.jpeg">\n<h3>Splits</h3>\n<p>One of the best parts of managing files in Vim is its splits.  With Vim, you can split your current window into 2 windows at any time, and then resize and arrange them into any configuration you like.  Its not unusual for me to have 6 files open at a given time, each with its own small split of the window.</p>\n<p>You can open a new split with <code>:sp &lt;filename&gt;</code> or <code>:vs &lt;filename&gt;</code>, for horizontal and vertical splits respectively.  There are keyword commands you can use to then resize the windows the way you want them, but to be honest this is the one Vim task I prefer to do with my mouse.  A mouse gives me more precision without having to guess the number of columns I want or fiddle back and forth between 2 widths.</p>\n<p>After you create some splits, you can switch back and forth between them with <code>ctrl-w [h|j|k|l]</code>.  This is a bit clunky though, and it’s important for common operations to be efficient and easy. If you use splits heavily, I would personally recommend aliasing these commands to <code>ctrl-h</code> <code>ctrl-j</code> etc in your .vimrc using this snippet.</p>\n<pre><code class="language-vimscript"><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-J&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-J&gt;</span> <span class="hljs-comment">"Ctrl-j to move down a split</span>\n<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-K&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-K&gt;</span> <span class="hljs-comment">"Ctrl-k to move up a split</span>\n<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-L&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-L&gt;</span> <span class="hljs-comment">"Ctrl-l to move\tright a split</span>\n<span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;C-H&gt;</span> <span class="hljs-symbol">&lt;C-W&gt;</span><span class="hljs-symbol">&lt;C-H&gt;</span> <span class="hljs-comment">"Ctrl-h to move left a split</span>\n</code></pre>\n<h3>The jumplist</h3>\n<p>Splits solve the problem of viewing multiple related files at a time, but we still haven’t seen a satisfactory solution for moving quickly between open and hidden files.  The jumplist is one tool you can use for that.</p>\n<p>The jumplist is one of those Vim features that can appear weird or even useless at first.  Vim keeps track of every motion command and file switch you make as you’re editing files.  Every time you “jump” from one place to another in a split, Vim adds an entry to the jumplist. While this may initially seem like a small thing, it becomes powerful when you’re switching files a lot, or moving around in a large file.  Instead of having to remember your place, or worry about what file you were in, you can instead retrace your footsteps quickly using some quick key commands.  <code>Ctrl-o</code> allows you to jump back to your last jump location.  Repeating it multiple times allows you to quickly jump back to the last file or code chunk you were working on, without having to keep the details of where that code is in your head. You can then move back up the chain with <code>ctrl-i</code>. This turns out to be immensely powerful when you’re moving around in code quickly, debugging a problem in multiple files or flipping back and forth between 2 files. Instead of typing file names or remembering buffer numbers, you can just move up and down the existing path.  It’s not the answer to everything, but like other Vim concepts, it’s a small focused tool that adds to the overall power of the editor without trying to do everything.</p>\n<h3>Plugins</h3>\n<p>So let’s be real, if you’re coming to Vim from something like Sublime Text or Atom, there’s a good chance all of this looks a bit arcane, scary, and inefficient.  “Why would I want to type the full path to open a file when Sublime has fuzzy finding?”  “How can I get a view of a project’s structure without a sidebar to show the directory tree?”  Legitimate questions.  The good news is that Vim has solutions.  They’re just not baked into the Vim core.  I’ll touch more on Vim configuration and plugins in later posts, but for now here’s a pointer to 3 helpful plugins that you can use to get Sublime-like file management.</p>\n<ul>\n<li>\n<p><a href="https://github.com/kien/ctrlp.vim">CtrlP</a> is a fuzzy finding file search similar to Sublime’s “Go to Anything” bar.  It’s lightning fast and pretty configurable.  I use it as my main way of opening new files.  With it I only need to know part of the file name and don’t need to memorize my project’s directory structure.</p>\n</li>\n<li>\n<p><a href="https://github.com/scrooloose/nerdtree">The NERDTree</a> is a “file navigation drawer” plugin that replicates the side file navigation that many editors have.  I actually rarely use it, as fuzzy search always seems faster to me.  But it can be useful coming into a project, when you’re trying to learn the project structure and see what’s available.  NERDTree is immensely configurable, and also replaces Vim’s built in directory tools when installed.</p>\n</li>\n<li>\n<p><a href="https://github.com/mileszs/ack.vim">Ack.vim</a> is a code search plugin for Vim that allows you to search across your project for text expressions.  It acts as a light wrapper around Ack or Ag, <a href="http://benmccormick.org/2013/11/25/a-look-at-ack/">2 great code search tools</a>, and allows you to quickly jump to any occurrence of a search term in your project.</p>\n</li>\n</ul>\n<p>Between it’s core and its plugin ecosystem, Vim offers enough tools to allow you to craft your workflow anyway you want.  File management is a key part of a good software development system, and it’s worth experimenting to get it right.</p>\n<p>Start with the basics for long enough to understand them, and then start adding tools on top until you find a comfortable workflow. It will all be worth it when you’re able to seamlessly move to the code you want to work on without the mental overhead of figuring out how to get there.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li><a href="http://robots.thoughtbot.com/seamlessly-navigate-vim-and-tmux-splits">Seamlessly Navigate Vim &amp; Tmux Splits</a> - This is a must read for anyone who wants to use vim with <a href="http://tmux.sourceforge.net/">tmux</a>.  It presents an easy system for treating Vim and Tmux splits as equals, and moving between them easily.</li>\n<li><a href="http://vim.wikia.com/wiki/Using_tab_pages">Using Tab Pages</a> - One file management feature I didn’t cover, since it’s poorly named and a bit confusing to use, is Vim’s “tab” feature.  This post on the Vim wiki gives a good overview of how you can use “tab pages” to have multiple views of your current workspace</li>\n<li><a href="http://vimcasts.org/episodes/the-edit-command/">Vimcasts: The edit command</a> - Vimcasts in general is a great resource for anyone learning Vim, but this screenshot does a good job of covering the file opening basics mentioned above, with some suggestions on improving the builtin workflow</li>\n</ul>\n'
}},function(e,t){e.exports={title:"Marionette Explained: Connecting Data to Your Views",date:"2014-12-10 12:30:00+00:00",layout:"post",path:"/2014/12/10/marionette-explained-connecting-your-data-to-your-views",description:"How to bind data to your views in Marionette.js",keywords:"JavaScript Marionette.js Backbone MVC Model View",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"25012",last30pageViews:"381",body:'<p><em>This is the second post in a series on <a href="http://marionettejs.com/">Marionette.js</a>.  For more background on what Marionette is, check out the first post in the series, <a href="http://benmccormick.org/2014/12/02/the-case-for-marionette-js/">The Case For Marionette</a>.  Also note that this article was written about Marionette v2.  The current latest version of Marionette is v3, and while most of the high level concepts remain the same, the specific syntax has changed in some cases.</em></p>\n<p>One of the most interesting design choices of <a href="http://backbonejs.org/">Backbone</a> was the decision to not provide a default render function for Views. Backbone Views by default are an empty function that adds nothing to the DOM when rendered.  Although a View can have a Model or Collection associated with it, there is no built in way to associate that with the generated View.  When you contrast that to other modern frameworks like Ember, Angular and KnockoutJS, and their emphasis on using 2 way bindings to associate a data object to a rendered View, Backbone can feel a bit incomplete.  The goal is to allow for a variety of rendering approaches, without making one of them a favored approach.  But it leaves a situation where choosing a rendering procedure is one of the first steps in any new Backbone project.  Marionette provides a structured approach for binding your data to your view layer, while still providing flexibility to introduce customization.</p>\n<h3>Rendering and Data-Binding in Marionette</h3>\n<p><img src="/posts/images/renderpattern-3.png" alt="rendering diagram"></p>\n<p>Marionette.JS handles rendering in a way that is similar to the <a href="http://en.wikipedia.org/wiki/Model_View_ViewModel">Model-View-ViewModel</a> pattern that developers who have used KnockoutJS or Durandal will be familiar with <sup id="fnref:1"><a href="#fn:1">1</a></sup>. Marionette implements its render cycle through 2 primary methods available in all of its base View classes.  The first is <code>serializeData</code>. serializeData is a function that produces what is essentially a <code>ViewModel</code> in the sense of an MVVM application. It takes your data (a Backbone Model or Collection), and pulls it into a simplified form that a View can easily render.  By default Marionette will simply call the Model or Collection’s <code>toJSON</code> function to serialize the Backbone object down into a simple JavaScript object.  But it’s possible to override serializeData to provide more complicated logic.  For instance here’s an example from the <a href="https://github.com/tastejs/todomvc/tree/gh-pages/examples/backbone_marionette">Marionette TodoMVC project</a> that takes a collection of todos and calculates a few values to show the number of completed todos.</p>\n<pre><code class="language-javascript">serializeData: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">var</span> active = <span class="hljs-keyword">this</span>.collection.getActive().length;\n    <span class="hljs-keyword">var</span> total = <span class="hljs-keyword">this</span>.collection.length;\n\n    <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">activeCount</span>: active,\n        <span class="hljs-attr">totalCount</span>: total,\n        <span class="hljs-attr">completedCount</span>: total - active\n    };\n},\n</code></pre>\n<p>Once the serialized data/view model has been prepared, data is passed to the render function which starts by looking for a template to render.  In Marionette, templates are defined by setting the template property on your View, or by setting a getTemplate method if you want to conditionally load your templates. The render function takes that template, passes it the serialized data, and renders it using a template engine.  The default Marionette template engine is Underscore, which makes sense since it’s a Backbone dependency already.  But it’s easy to switch to a different templating engine.  Here’s the entire chunk of code I wrote to use Handlebar templates in Windsor Circle’s Marionette app.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//render templates with Handlebars instead of Underscore</span>\nBackbone.Marionette.Renderer.render = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">template, data</span>)</span>{\n    <span class="hljs-keyword">var</span> renderer = Handlebars.compile(template);\n    <span class="hljs-keyword">return</span> renderer(data);\n};\n</code></pre>\n<h3>ItemView and CollectionView</h3>\n<p>Marionette provides several View classes that you can use as bases, but the core Views for representing data are ItemView and CollectionView.  An ItemView takes a single data object, either a Model or Collection and passes it to the template to render.  A CollectionView iterates over a Collection and renders a child View for each Model. You can either use the same View for every Collection, or mix and match Views based on the Model’s properties.</p>\n<p>So for instance, views for a simple todo list might look something like this <sup id="fnref:2"><a href="#fn:2">2</a></sup>:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> TodoView= Marionette.ItemView.extend({\n    <span class="hljs-attr">tagName</span>: <span class="hljs-string">\'li\'</span>,\n    <span class="hljs-attr">template</span>: <span class="hljs-string">\'&lt;span class="checkbox" {{checked}}&gt;&lt;/span&gt;&lt;span class="text"&gt;{{ text}}&lt;/span&gt;&lt;span class="delete"&gt;&lt;/span&gt;\'</span>,\n    <span class="hljs-attr">events</span>: {\n        <span class="hljs-string">\'click .checkbox\'</span>: <span class="hljs-string">\'toggleChecked\'</span>,\n        <span class="hljs-string">\'click .delete\'</span> : <span class="hljs-string">\'deleteItem\'</span>\n    },\n\n    <span class="hljs-attr">serializeData</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> {\n            <span class="hljs-attr">checked</span>: <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'checked\'</span>) ? <span class="hljs-string">\'checked\'</span>:<span class="hljs-string">\'\'</span>,\n            <span class="hljs-attr">text</span>: <span class="hljs-keyword">this</span>.model.get(<span class="hljs-string">\'text\'</span>)\n        };\n    },\n\n    <span class="hljs-attr">toggleChecked</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//logic for checking the box</span>\n    },\n\n    <span class="hljs-attr">deleteItem</span> : <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//logic for deleting the todo</span>\n    }\n});\n\n<span class="hljs-keyword">var</span> TodoListView = Marionette.CollectionView.extend({\n    <span class="hljs-attr">childView</span>: TodoView,\n    <span class="hljs-attr">tagName</span>: <span class="hljs-string">\'ul\'</span>\n\n});\n</code></pre>\n<p>When the TodoListView is given a collection and rendered, it will display an unordered list of rendered TodoViews, with the data for each model bound to the template object associated with TodoView.</p>\n<h3>A brief note on 2 way data-binding</h3>\n<p>Marionette data-binding is one-way by default.  Over the last few years the discussion around data-binding has gone from “cool there’s structured data-binding” when Backbone first came out, to “how can you ship without 2-way data-bindings?” when Knockout, Angular and Ember popularized the 2-way approach, to “1 way bindings keep things simple and they’re cool again” based on the popularity of React.  I’m not going to go deep into that debate during this post, but the important takeaway is that Marionette generally prefers explicit bindings to implicit.  So when model values change, it will be based on code that you’ve written, not implicit library code.</p>\n<h3>Wrap-Up</h3>\n<p>I kept things pretty simple in this post, but consistent data binding is a core part of what Marionette provides.  Having a single documented system for attaching Model and Collection data to Views is a big win for keeping Backbone applications lean and readable.  When using these conventions you can move from View to View or project to project and quickly pick up on the intent and structure of the code.  Instead of trying to solve these problems for every  View, you can rely on the experience of others and focus on writing code to achieve your application’s goals.</p>\n<p>This was a short but important start to diving deeper into Marionette. I’ll talk more about layouts, view life-cycles, and other Marionette features in future posts, but at their heart, web applications are about exposing data in rich UIs.  Without that core, your web applications won’t have much function at all.  So make sure to understand and take advantage of this aspect of Marionette before you move on to anything else.</p>\n<h3>More Resources</h3>\n<ul>\n<li>If you absolutely must have 2 way data bindings in Backbone, <a href="http://nytimes.github.io/backbone.stickit/">Backbone.stickit</a> is a good project to check out.  At Windsor Circle we use it for binding model data to forms (2 way data-binding’s best use case).  Rather than the template based approach most libaries use for 2 way data-binding, stickit allows you to configure bindings declaratively in your view code.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        MVVM is normally associated with 2 ways bindings though, which Backbone and Marionette do not provide\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        In practice Marionette developers would likely use a ui hash on the TodoView, pull the template out into a separate file, and might have the CollectionView be a CompositeView to provide structure around the list.  But I\'ll dive into all of those things in more detail in future posts.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"marionette-service: Service Objects for Marionette",date:"2015-05-25 14:02:00+00:00",layout:"post",path:"/2015/05/25/marionette-service-service-objects-for-marionette",description:"Introducing marionette-service, a services library for Marionette apps",keywords:"Marionette JavaScript marionette-service services Backbone Radio",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"1605",last30pageViews:"36",body:'<p><a href="http://backbonejs.org/">Backbone.js</a> is a great way to structure web applications.  Its built in Models, Collections, Views and Routers are a very reasonable “minimum common ground” that pretty much any web project will be able to put to good use.  But more sophisticated applications have needs that extend beyond these basic concepts.  In addition to having some data that needs to be displayed, rich web apps often have resources and functionality that need to be shared across many different Views and Models.  There’s no definitive way to implement this consistently, but a common pattern is to create “services” of some type that Views and Models can communicate with.</p>\n<p>This pattern is easiest to show with an example.  Let’s take a look at a simple logging implementation.  We might start out just using simple console commands throughout our code like this:</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doFoo</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">// Do a thing</span>\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'We did Foo\'</span>);\n}\n</code></pre>\n<p>That’s fine for a while, but what if we wanted to switch to a logging library like <a href="http://js.jsnlog.com/">JSNLog</a> or some 3rd party service?  We’d have a huge find and replace job to work through.  It’s better to centralize.  <a href="https://github.com/marionettejs/backbone.radio">Backbone.Radio</a> is perfect for this purpose.  We can use it to centralize our logic and create a logging module:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Radio <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone.radio\'</span>\n\n<span class="hljs-keyword">let</span> loggingChannel = Radio.channel(<span class="hljs-string">\'log\'</span>);\n\nloggingChannel.comply(<span class="hljs-string">\'log\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n    <span class="hljs-built_in">console</span>.log(message);\n});\n\nloggingChannel.comply(<span class="hljs-string">\'logError\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n    <span class="hljs-built_in">console</span>.error(message);\n});\n\nloggingChannel.comply(<span class="hljs-string">\'logWarning\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n    <span class="hljs-built_in">console</span>.warn(message);\n});\n</code></pre>\n<p>We could then log a message like this:</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">doFoo</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-comment">// Do a thing</span>\n  loggingChannel.command(<span class="hljs-string">\'log\'</span>, <span class="hljs-string">\'We did Foo\'</span>);\n}\n</code></pre>\n<p>There are 2 main use cases for this sort of service pattern: centralizing common tasks and UI actions like logging or displaying an alert, and requesting a resource without having to worry about where it came from.  Both are easily possible using Backbone Radio, using code very similar to whats above.</p>\n<p>Using Backbone Radio like this is a useful pattern, but it’s very ad hoc and imperative.  Not very Backbone-like.  What if we could follow the Marionette route of pulling a useful pattern into an object and allow it to be configured declaratively?  We could instead create a “Service Object” like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Mn <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone.marionette\'</span>\n\n<span class="hljs-keyword">let</span> LoggingService = Mn.Service.extend({\n\n    <span class="hljs-attr">radioCommands</span>: {\n        <span class="hljs-string">\'log log\'</span>: <span class="hljs-string">\'logMessage\'</span>,\n        <span class="hljs-string">\'log logError\'</span>: <span class="hljs-string">\'logError\'</span>,\n        <span class="hljs-string">\'log logWarning\'</span>: <span class="hljs-string">\'logWarning\'</span>,\n    },\n\n    <span class="hljs-attr">logMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n        <span class="hljs-built_in">console</span>.log(message);\n    },\n\n    <span class="hljs-attr">logError</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n        <span class="hljs-built_in">console</span>.error(message);\n    },\n\n    <span class="hljs-attr">logWarning</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message</span>) </span>{\n        <span class="hljs-built_in">console</span>.warn(message);\n    },\n});\n\n<span class="hljs-keyword">let</span> logger = <span class="hljs-keyword">new</span> LoggingService();\n</code></pre>\n<p>This is much more in the Backbone and Marionette style, with a declarative hash to delegate to different functions based on channels and the events passed.  It makes it much easier to create “service objects” to make functionality available in a decoupled way.</p>\n<p>Declarative radio handling will be <a href="https://github.com/marionettejs/backbone.marionette/pull/2431">coming to Marionette Core</a> as part of Marionette version 3, but for now I’ve written a small library to make it available in the short term.</p>\n<p><a href="https://github.com/benmccormick/marionette-service">marionette-service</a> provides the above Service Object to Marionette.  It allows you to listen to Radio Events, Commands or Requests, and associate them with callback functions.  It’s compatible with plans for Marionette v3, so all that will be required to remove it when upgrading will be a name change for service objects to use Marionette.Object rather than Marionette.Service. I’m excited to see how people use it.</p>\n<p>Marionette-service is available to install both on <a href="https://www.npmjs.com/package/marionette-service">npm</a>, and <a href="http://bower.io/search/?q=marionette%20service">bower</a>.  Or you can clone the repo directly from <a href="https://github.com/benmccormick/marionette-service">Github</a>.</p>\n<h3>More Resources</h3>\n<ul>\n<li>If you’re new to Backbone.Radio you can learn more about it from <a href="http://benmccormick.org/2015/01/26/backbone-radio/">my post</a>, or from the <a href="https://github.com/marionettejs/backbone.radio">official docs</a>.</li>\n<li>If you’re confused why somebody would want to separate out the implementation of a service through Radio rather than passing a service object directly, <a href="http://arguments.callee.info/2009/05/18/javascript-design-patterns--mediator/">this is a nice piece by HB Stone</a> on the power of loose coupling and the Mediator Pattern</li>\n</ul>\n'}},function(e,t){e.exports={title:"The Life of a Marionette View",date:"2015-01-05 04:01:45+00:00",layout:"post",path:"/2015/01/05/marionette-view-life-cycles",description:"A breakdown of the lifecycle of Marionette Views",keywords:"Marionette.js JavaScript Backbone Views life cycle",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"19611",last30pageViews:"321",body:'<p><em>This is the fourth post in a series on <a href="http://marionettejs.com/">Marionette.js</a>, a framework for developing apps with <a href="http://backbonejs.org/">Backbone.js</a>.  For more background on what Marionette is, check out the series page: <a href="http://benmccormick.org/marionette-explained/">Marionette Explained</a>  Also note that this article was written about Marionette v2.  The current latest version of Marionette is v3, and while most of the high level concepts remain the same, the specific syntax has changed in some cases.</em></p>\n<p>When building Single Page Applications, it’s important to manage UI components throughout their existence on the page, making sure they’re properly created, attached, and destroyed.  Marionette.js helps Backbone developers manage that by providing life cycle methods that developers can use when defining their Views.  These life cycle functions fit nicely with the rest of Marionette’s features, and can help simplify UI development with Backbone.</p>\n<p>Building scalable user interfaces is hard.  It’s a challenge that sits at the intersection of fields requiring very different skill sets: Software Development, Graphic Design, User Experience and Information Architecture.  Because interface code is concerned with both presentation and interaction logic and is exposed directly to user input, it can be difficult to reason about.  Fortunately, as modern web developers, we have 30+ years of industry knowledge to fall back on.  One lesson learned is the value of Object Oriented Programming concepts in UI design; specifically, the idea of breaking interfaces into a set of independent components, and giving each component a consistent “life cycle”, a set of events that occur between a component’s creation and destruction.</p>\n<p>Having a clear life cycle for UI components makes a developer’s life easier in a few ways:  It eases the process of reasoning about changes in a component over time, and how it interacts with other elements of the UI.  It creates consistent hooks to add behaviors, which promotes readability and reduces boilerplate code.  Finally, it smooths integrations with outside code that may need to be run when the component is in a specific state, without needing a bunch of conditional logic to detect when it should run.  Marionette Views provide a life cycle for Backbone Views that help give all of these benefits.</p>\n<p>The Marionette View life cycle is made up of a list of events and conventions.  Events are fired at each signficant step in a View’s life cycle.  Each event has a corresponding View method associated with it that Marionette automatically runs when the event is fired. These events and callbacks follow a consistent naming convention.  An event that occurs before a moment in the life cycle is fired in the form <code>before:&lt;eventname&gt;</code> and the callback is called <code>onBeforeEventName</code>. An event that is fired after the same moment in the life cycle will have the form <code>eventname</code> and the callback will be called <code>onEventName</code>.  By default the callback functions for each event do nothing, but developers can overwrite them to define behavior for a specific View instance.  For instance, defining the callback functions for the <code>render</code> and <code>before:render</code> events on a new View would look like this.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> ExampleView = Mn.ItemView.extend({\n\n    <span class="hljs-attr">onRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">// do stuff after the View is rendered</span>\n    },\n\n    <span class="hljs-attr">onBeforeRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">// do stuff before the View is rendered</span>\n    }\n\n});\n</code></pre>\n<p>Render is only one of the relevant moments in a View’s life cycle.  This is the full list of relevant methods and events, with a brief explanation of how each one might be used.</p>\n<h4>Initialize</h4>\n<p>The first function in a View’s life cycle is <code>initialize</code>. <code>initialize</code> isn’t a Marionette-specific method. It’s part of Backbone, but it’s important to make sure you understand where it fits into the View’s life.  Backbone provides two functions that are run when a View is instantiated, <code>constructor</code> and <code>initialize</code>.  <code>constructor</code> is used for Backbone and Marionette’s internal setup, and shouldn’t normally be overridden.  <code>initialize</code> is the suggested function for defining behavior on View setup.  It’s a great place for setting up event listeners, and allows workings directly with the options passed to the View on creation <sup id="fnref:1"><a href="#fn:1">1</a></sup>. Unlike the other methods on this list, <code>initialize</code> only provides a single method with no associated event.</p>\n<h4>onRender/onBeforeRender</h4>\n<p>The second step in the Marionette View life cycle is the render step, which exposes two events <code>render</code> and <code>before:render</code>, corresponding to the <code>render</code> and <code>onBeforeRender</code> callbacks.  These events fire before and after the View template is rendered.  In a Marionette View, rendering means that the View has generated a fragment of HTML, but it may or may not be visible or attached to the DOM.  onRender is useful for any direct manipulation of the generated HTML that doesn’t require it to be visible or attached to the DOM.</p>\n<h4>onAttach/onBeforeAttach (Marionette 2.3+)</h4>\n<p>After rendering, the next set of events that might fire in a Marionette View’s life cycle is <code>before:attach</code> and <code>attach</code>.  These events are fired whenever showing a View in a region causes it to be attached to the DOM.  Because Views can be rendered independently of Regions, and some Regions may not be attached to the DOM when a View is shown, this event may not always be fired immediately (or at all).  But if you’re using Regions to render all your Views, it can be very useful for setting up jQuery plugins or other operations that require HTML to be attached to the DOM before being acted on.  A nice aspect of the attach events is that they will propagate down a tree of LayoutViews if you’ve set up a View hierarchy as described in <a href="http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/">my last post</a>, so you can count on the event firing even if you build the View tree and then attach the top View to the DOM later.</p>\n<h4>onShow/onBeforeShow</h4>\n<p>Another Region-specific set of events, <code>show</code> and <code>before:show</code> fire before and after a View is shown within a region.  These events are great for rendering child Views.  The Marionette docs recommend using <code>onBeforeShow</code> specifically for rendering children, since it allows for only a single DOM paint when rendering nested Views, and prevents attach events from firing multiple times, which might happen if the child Views are attached to the parent after the parent View has already been shown.</p>\n<h4>onDomRefresh</h4>\n<p>The <code>dom:refresh</code> event is the last Region-specific event  It’s triggered after an already shown View is rerendered.  Like onAttach, this can be useful for managing UI plugins that manipulate the DOM, if they need to be reinitialized when the HTML tree is refreshed. It differs from <code>onRender</code> in that it will not run the first time the View is rendered, and you can count on the View always being attached to the document when it fires.  So if an operation requires the View to be attached to the DOM, you can run any initial logic in <code>onShow</code>, and then put any refresher logic into an <code>onDomRefresh</code> callback.  If you’re running Marionette 2.3 or later though, onDomRefresh is less useful because onAttach provides similar functionality in a more consistent way.</p>\n<h4>onBeforeAddChild/onBeforeRemoveChild/onAddChild/onRemoveChild (CollectionView Only)</h4>\n<p>CollectionViews get their own special life-cycle events to manage adding and removing Models to the Collection.  CollectionViews automatically display a new ChildView when a Model is added to its Collection, and destroy the View when the Model is removed.  They fire events before and after each of these changes, to allow you to customize the behavior around each.  You could for instance hide specific Views if necessary. You could also modify them based on some logic, though that type of thing may be more appropriate within the child View’s code itself.</p>\n<h4>onDestroy/onBeforeDestroy</h4>\n<p>The final Marionette life-cycle event set is <code>destroy</code> and <code>before:destroy</code>.  Appropriately, these events are fired when a View is destroyed and serve as a place to handle any custom cleanup.  The most common use case for these functions is unbinding any events not covered by Marionette’s built-in event cleanup<sup id="fnref:2"><a href="#fn:2">2</a></sup>. It’s worth noting that you cannot use <code>onBeforeDestroy</code> to prevent the View being destroyed.  The Marionette team’s position here is basically that you should not call destroy directly on any View you don’t want destroyed.  If you’re swapping a View out of a region but don’t want it to be destroyed, Marionette provides a <code>preventDestroy</code> option to its show method that allows you to preserve the existing View.</p>\n<h3>Cogs In A Machine</h3>\n<p>The nice thing about Marionette’s View life cycles is the consistency it shares with the rest of Marionette.  The life cycles are built to work with the Region and Layout system I described in my last post.  If you lay out your Views using the system described in that post, you’ll be able to take advantage of all of the above functions consistently across your application.  Regions themselves have similar life cycle methods, with callbacks that run before and after showing Views, swapping Views and emptying the region. Finally, Marionette Applications, the object that Marionette uses to initialize the app, also has a single set of life-cycle events, <code>onStart</code> and <code>onBeforeStart</code> that can be hooked into when setting up your application.  This sense of cohesiveness in a set of components that share conventions makes Marionette easy to learn without obscuring what happens with the type of magic you see in other frameworks.</p>\n<h3>Take What You Need</h3>\n<p>Like everything else in Marionette and Backbone, life cycles are a pattern that you can choose to use or ignore.  If you want to define your own way of managing a Views life cycle, it’s perfectly possible to do so.  But the advantages provided by Marionette’s implementation are quite nice.  It presents a simple mental model of what occurs to a View over time, fits in with the other patterns provided by Marionette, and doesn’t require any extra boilerplate when you choose not to use them.  I personally use some of these methods a lot, and have never used a few of them at all.  But it’s helpful to know what is available so that you can keep that simple model of how a View changes over time and choose the appropriate hook for any given View code.  Code is scalable when you can take a few simple concepts and use them repeatedly to build up to something big.  That’s what Marionette can do for you.</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Marionette also exposes those options later using the <code>view.getOption()</code> method\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        Marionette cleans up events created through its event hash objects, and any defined using listenTo.  But any custom eventing stuff you do will need to be cleaned up directly\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Medium: The end of History and the last website",date:"2012-12-25 21:00:00+00:00",layout:"post",path:"/2012/12/25/medium-the-end-of-history-and-the-last-website",description:"Is there any use in personal websites anymore?",category:"opinion",pageViews:"57",last30pageViews:"1",body:'<blockquote>\n<p>the whole experience I’ve just described is part of the argument for a site like Medium. That argument goes: No writer should be in the business of making a personal website. They’re hard to find, readers rarely return to them, and besides—let me just contribute this last part myself—they aren’t even fun to make anymore.</p>\n</blockquote>\n<p><a href="https://medium.com/the-sea-of-fog/3877ef6d968c">Robin Sloan, Medium</a></p>\n<p>So are websites heading the way of cars?  Becoming so specialized and complicated that only teams of  professionals with specialized knowledge can handle them?</p>\n<p>I would argue that they’re differentiated by the virtual nature of their materials.  Websites have effectively no upfront cost after the initial cost of a working computer and internet connection, which is getting lower all the time.  And their virtual nature allows for easy sharing of materials.  This is best seen in the open source movement.  To make a website it’s not necessary to write a webserver, because Apache exists.  To create a blog, its not necessary to know php or even html.  You can use Wordpress, Moveable Type or Octopress.  To have a professional design, you can use any of many themes provided by designers across the web for free or cost.</p>\n<p>To build a website, you don’t need to know everything, you can build on the foundations laid by others.  I’m building this blog on top of octopress, and for now am only contributing content of my own.  But its likely that in the future I’ll choose to add more, either with the theming or in plugins.  I won’t have to build everything from scratch, but I’ll be able to tinker.  It’s a middle ground that doesn’t exist for cars.  And it means that the amateur web can continue to move along and reap benefits from the work of professional teams, while history continues as normal.</p>\n'
}},function(e,t){e.exports={title:"Meetings And Concurrency",date:"2013-12-30 11:00:00+00:00",layout:"post",path:"/2013/12/30/meetings-and-concurrency",description:"The trouble with in-person meetings",category:"opinion",pageViews:"114",last30pageViews:"0",body:'<p>Working with a large number of people on any significant project eventually involves meetings.  You can delay it for a while, and you can try to replace them with all sorts of things, including email, IM, wikis, and guessing people’s intentions.  Doing so is, of course, completely worthwhile.  Eventually though, meetings are inevitable.</p>\n<p>There are several different flavors of meetings.  There are decision-making meetings, where a crowd of people gather together, either to argue, watch other people argue, or to carefully watch the hands of the clock make their way around its circumference. There are Powerpoint meetings, wherein an individual gathers his victims (sorry was that coworkers?) together and proceeds to read bullet points from a set of slides to them.  There is also the conference call meeting, which has led many people to a deeper appreciation for the mute button on their phone.  Rarest of all is the actual productive meeting, where information is exchanged, decisions are made, and life continues without irreparable harm.</p>\n<p>So is there any hope for productive meetings?  It’s important to realize that a meeting should be the last resort for most things.  Meetings are blocking synchronous activities.  Everyone gives up a set piece of time and that time is the same for everyone. The meeting length is limited by the attendee most willing to keep talking. Generally that time cannot be used for anything else by the people involved in the meeting.</p>\n<p>Programmers have several options for handling long running blocking operations while coding.  The first is the naive approach.  The following coffeescript is an example:</p>\n<pre><code class="language-coffeescript">meetingDone = <span class="hljs-literal">false</span>\n\n<span class="hljs-comment"># are we done yet?</span>\n<span class="hljs-keyword">until</span> meetingDone\n    <span class="hljs-keyword">if</span> person1Ready() <span class="hljs-keyword">and</span> person2Ready() <span class="hljs-keyword">and</span> person3Ready()\n        longRunningMeeting()\n\n<span class="hljs-comment">#Do whatever\'s next, plus anything that depends on the meeting</span>\nfollowUpOnMeeting()\nbackToWork()\n</code></pre>\n<p>This is how things often work when it comes to meetings, but that code wouldn’t last long in a professional software environment.  Everything grinds to a halt until the meeting is done, which keeps the program from doing anything else or responding to user input.</p>\n<p>A second option while coding is the multi-threaded approach.  In coffeescript that looks something like this:</p>\n<pre><code class="language-coffeescript">\n<span class="hljs-comment"># Do meeting tasks in a worker thread</span>\nmeeting = <span class="hljs-keyword">new</span> Worker <span class="hljs-string">"meeting.js"</span>\n\n<span class="hljs-comment"># When the meeting is done, act on a follow up message</span>\nmeeting.addEventListener <span class="hljs-string">"message"</span>, <span class="hljs-function"><span class="hljs-params">(e)</span> -&gt;</span>\n    followUpOnMeeting(e.data)\n\nmeeting.postMessage <span class="hljs-string">"Start"</span>\n\n<span class="hljs-comment"># get back to work right away</span>\nbackToWork()\n</code></pre>\n<p>This is equivalent in the real world to limiting the people in a meeting.  Rather than allowing a meeting to block all our resources, we put only some of our resources into the meeting and then pass the results of the meeting on to the rest of the team once the meeting is complete.</p>\n<p>This is an important principle for meetings. Meetings should contain the minimum amount of people needed to accomplish their purpose.  When meetings grow beyond that size (due to laziness, politics, process or confusion) they begin to become exponentially less productive.</p>\n<p>Of course multi-threaded approaches can still suffer the same issues as single threaded programs if you try to do too much.  If the worker thread in the example above looks like the code below, we will not have gained much.</p>\n<pre><code class="language-coffeescript"><span class="hljs-comment"># meeting.coffee</span>\nself.addEventListener <span class="hljs-string">"message"</span>, <span class="hljs-function"><span class="hljs-params">(e)</span> -&gt;</span>\n    somebodyHasMadeADecision = <span class="hljs-literal">false</span>\n\n    <span class="hljs-comment"># are we done yet?</span>\n    <span class="hljs-keyword">until</span> somebodyHasMadeADecision\n        <span class="hljs-keyword">if</span>  person1Indecisive() <span class="hljs-keyword">and</span> person2Scared() <span class="hljs-keyword">and</span> person3Clueless()\n            longRunningMeeting()\n\n    self.postMessage <span class="hljs-string">"meeting is finally done"</span>\n</code></pre>\n<p>No matter who is involved it’s important for meetings to have a clear purpose.  Just like you wouldn’t put all of your program’s logic inside a single worker thread, the best meetings are simple, single purposed, and lightweight, based on clear, answerable questions.</p>\n<p>There’s a third approach that programmers can take to long running processes.  They can use asynchronous operations, as shown below using promise notation.</p>\n<pre><code class="language-coffeescript">\n<span class="hljs-comment"># define an email response function</span>\n<span class="hljs-function"><span class="hljs-title">readResponses</span> = <span class="hljs-params">(message)</span> -&gt;</span>\n    respond = readEmail()\n    <span class="hljs-keyword">if</span> respond <span class="hljs-keyword">then</span> respondToEmail()\n\nsendEmail(<span class="hljs-string">"importantTopic"</span>)\n    <span class="hljs-comment"># responses and respond if necessary</span>\n    .<span class="hljs-keyword">then</span>(readResponses)\n    <span class="hljs-comment"># read more responses and respond if necessary</span>\n    .<span class="hljs-keyword">then</span>(readResponses)\n    <span class="hljs-comment"># follow up when the responses are done</span>\n    .done followUpOnMeeting\n\n<span class="hljs-comment"># After email we can go back to work right away</span>\nbackToWork();\n</code></pre>\n<p>This async approach doesn’t delegate different resources for different problems, instead we change how we’re thinking about long running operations.  Rather than tying up resources to deal with them, we make them a separate operation that can be consumed and responded to when our program has available time. You can’t do that with meetings.</p>\n<p>By contrast, email, documentation, and other “information artifacts” can be consumed asynchronously, at different paces and different times by different people. They don’t block off any particular time that might need to be devoted to other things.  So Powerpoint meetings can become an email that contains a Powerpoint or wiki page, followed if necessary by clarifying questions which people can work through at their own pace. Decision meetings can become a back and forth discussion on a mailing list, that the interested parties can participate in as they have time and motivation.  It removes blocking issues completely by removing the requirement of all participants being on the same time schedule.</p>\n<p>So the takeaways from this coffee flavored reflection on meetings:  Async operations are your friends.  Don’t have meetings.  If you do, keep them short, small, and focused. Friends don’t let friends read their powerpoint slides line by line.</p>\n'}},function(e,t){e.exports={title:"MobX: First Impressions",date:"2017-01-09 13:30:00+00:00",layout:"post",path:"/2017/01/09/mobx-first-impressions/",description:"First impression of managing data with MobX",keywords:"mobx JavaScript data React",category:"frameworks",key:"mobx-first",readNext:"jest-first,backbone-devs-react,react-component-styles",pageViews:"940",last30pageViews:"189",body:'<p>I spent some time around the holidays this year playing with <a href="https://mobx.js.org/">MobX</a>, a state management library for JavaScript.  MobX is an unopinionated library that provides a layer over normal JavaScript data structures that allow other code to efficiently observe data changes and update based on what has changed.  It’s an interesting tool for handling state in web applications, especially in existing projects that might need to update state handling iteratively.  Here are some first impressions.</p>\n<h3>What is MobX?</h3>\n<p>MobX has 3 core concepts developers need to understand:</p>\n<ol>\n<li><strong>Observable state</strong> - MobX provides functions to make data <em>observable</em>.  Observable data can be watched by other pieces of code which may efficiently update when the state changes.  Observable data is primarily created in MobX using the <code>observable</code> function.</li>\n<li><strong>Derivations</strong> - Functions that <em>watch</em> observable data are called derivations.  MobX has 2 primary types of derivations: <em>computed values</em> and <em>reactions</em>.  Computed values update a value based on other data, while reactions produce side effects: updates to a UI, a network call, or a logging statement for example. MobX provides a <code>computed</code> function for defining computed values; in most cases reactions will likely be mostly defined using a framework specific helper library like <a href="https://github.com/mobxjs/mobx-react">mobx-react</a> or <a href="https://github.com/500tech/ng2-mobx">ng2-mobx</a>.  MobX does provide some lower level libraries for reactions though, including <code>autorun</code> and <code>when</code>.</li>\n<li><strong>Actions</strong> - Code that updates observable state is known as an action.  MobX has a formalized version of actions which can be defined using the <code>action</code> function, but it is also possible to modify state directly using any normal JavaScript code and maintain observable behavior.</li>\n</ol>\n<p>In practice this looks something like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom\'</span>;\n<span class="hljs-keyword">import</span> {observable} <span class="hljs-keyword">from</span> <span class="hljs-string">\'mobx\'</span>;\n<span class="hljs-keyword">import</span> {observer} <span class="hljs-keyword">from</span> <span class="hljs-string">\'mobx-react\'</span>;\n\n<span class="hljs-keyword">let</span> digits = observable([<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]);\n\n<span class="hljs-keyword">const</span> DigitPrinter = observer(<span class="hljs-function">(<span class="hljs-params">{digits}</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n    {digits.join(\', \')}\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);\n});\n\nReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">DigitPrinter</span> <span class="hljs-attr">digits</span> = <span class="hljs-string">{digits}</span> /&gt;</span>, document.getElementById(\'root\'));\n\n/* prints 1, 2 */\n\n\ndigits.push(3);\n\n/* DOM re-renders to print 1, 2, 3 */\n\ndigits[2] = 4;\n\n/* DOM re-renders to print 1, 2, 4 */\n\n</span></code></pre>\n<p>The component is able to passively <em>observe</em> changes in the data, and re-render when it changes.  But MobX is actually even smarter than this example shows.  Let’s look at another example, this time using a more complex data structure (a class).</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> ReactDOM <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-dom\'</span>;\n<span class="hljs-keyword">import</span> {extendObservable} <span class="hljs-keyword">from</span> <span class="hljs-string">\'mobx\'</span>;\n<span class="hljs-keyword">import</span> {observer} <span class="hljs-keyword">from</span> <span class="hljs-string">\'mobx-react\'</span>;\n<span class="hljs-keyword">import</span> moment <span class="hljs-keyword">from</span> <span class="hljs-string">\'moment\'</span>;\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Appointment</span> </span>{\n\n  <span class="hljs-keyword">constructor</span>() {\n    extendObservable(<span class="hljs-keyword">this</span>, {\n      <span class="hljs-attr">dueDate</span>: <span class="hljs-string">\'01-01-2017\'</span>,\n      <span class="hljs-attr">title</span>: <span class="hljs-string">\'Dinner with Joe\'</span>\n      location: <span class="hljs-string">\'Chik-Fil-A\'</span>,\n      <span class="hljs-attr">isToday</span>: computed(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">return</span> moment(dueDate, <span class="hljs-string">\'MM-DD-YYYY\'</span>).diff(moment.now(), <span class="hljs-string">\'days\'</span>) === <span class="hljs-number">0</span>;\n      }),\n    });\n  }\n\n  toString() {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.title}</span> @ <span class="hljs-subst">${<span class="hljs-keyword">this</span>.location}</span>`</span>;\n  }\n}\n\n\n<span class="hljs-keyword">const</span> TodayBox = observer(<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodayBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  render () {\n    <span class="hljs-keyword">let</span> {appointments} = <span class="hljs-keyword">this</span>.props;\n    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      {appointments.filter(a =&gt; a.isToday).map(a =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>a.toString()<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)}     \n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);\n  }\n});\n\n<span class="hljs-keyword">let</span> appointment = <span class="hljs-keyword">new</span> Appointment();\n\nReactDOM.render( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">TodayBox</span> <span class="hljs-attr">appointments</span> = <span class="hljs-string">{[appointment]}</span> /&gt;</span>, document.getElementById(\'root\'));\n\n/* prints an empty div */\n\nappointment.title = \'Dinner with Bob\';\n\n/* Nothing relevant has changed. The component does not re-render */\n\nappointment.dueDate = \'01-09-2017\';  \n\n/*  assume that 01-09-2017 is "today" */\n</span></code></pre>\n<p>MobX has the “magical” ability to determine what changes actually affect the observer and not make unnecessary calls of reaction functions.  In practice, that magic allows you to write less, more efficient code for updating your UI based on data.</p>\n<h3>How Does MobX work?</h3>\n<p>I have a learned skepticism of magical solutions like this.  Generally I find that time-saving magic like this ends up costing time when it comes to maintenance, and explicit relationships between code saves time over less-boilerplate heavy code. Fortunately, while the libraries code itself is fairly complex, it isn’t too hard to understand the logic behind how MobX works.</p>\n<p>On the Observer side, MobX uses <a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">ES5</a> setters and getters to proxy updates to observable data structure and listen in when data is updated.  This allows the type of event listening that <a href="http://backbonejs.org/">Backbone</a> and other libraries provide, without requiring the user to go through special <code>set</code> or <code>get</code> methods to update an object’s properties.  Most of the time you should be able to just be able to write code as you normally would, and MobX will make it work.  There are some exceptions though that mean its important to actually understand how the library work.  Getters and Setters only work when looking up an existing property on an object, so when using primitive values or adding new values to an existing object, some special syntax (the return of <code>get</code> and <code>set</code> methods) may be required.  In Mobx primitive observables are referred to as <em>boxed</em> values, and objects that require new values over time can be handled by using observable Maps, which use the API of <a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">ES6</a> Maps.</p>\n<p>On the derivative side, reactions and computed values are always defined as functions.  MobX wraps these functions and is able to determine (through the method described above) what properties were accessed during each function run.  It then only listens for changes to these properties.  Thus it doesn’t matter if you theoretically could access thousands of observable properties in a function, if you wrap those references in an if statement to a single property, and that property returns false on first run, the derivative function will only listen for changes on that property before running again. When an observable is updated, all derivative code is run synchronously and atomically so there is no concern of getting into bad intermediate states.</p>\n<p>Most of the “magic” is covered by the 2 paragraphs above, and once you understand the ideas behind them (see the resources at the bottom of this post for more in-depth explanations), it is fairly easy to understand the reasoning behind the cases where the magic fails.</p>\n<h3>Decorators</h3>\n<p>Developers who actually use MobX are probably questioning my examples by now, because I’ve been using a different syntax than the primary MobX documentation for showing my examples.  So let’s talk about decorators.  The preferred way (according to the documentation) to write MobX code is to use decorators to define observers and observables.  Decorators are a <a href="http://tc39.github.io/proposal-decorators/">proposed new JavaScript feature</a> for declaratively adding extra behavior to classes, class properties and class methods.  Using them with MobX, my above example would look like this <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>:</p>\n<pre><code class="language-javascript">\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Appointment</span> </span>{\n\n  @observable dueDate = <span class="hljs-string">\'01-01-2017\'</span>\n  @observable title = <span class="hljs-string">\'Dinner with Joe\'</span>\n  @observable location = <span class="hljs-string">\'Chik-Fil-A\'</span>\n\n  @computed get isToday() {\n    <span class="hljs-keyword">return</span> moment(dueDate, <span class="hljs-string">\'MM-DD-YYYY\'</span>).diff(moment.now(), <span class="hljs-string">\'days\'</span>) === <span class="hljs-number">0</span>;\n  }\n\n  toString() {\n    <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">${<span class="hljs-keyword">this</span>.title}</span> @ <span class="hljs-subst">${<span class="hljs-keyword">this</span>.location}</span>`</span>;\n  }\n}\n\n\n@observer <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TodayBox</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n  render () {\n    <span class="hljs-keyword">let</span> {appointments} = <span class="hljs-keyword">this</span>.props;\n    <span class="hljs-keyword">return</span> (<span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>\n      {appointments.filter(a =&gt; a.isToday).map(a =&gt; <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>a.toString()<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>)}     \n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>);\n  }\n}\n</code></pre>\n<p>That obviously looks a lot cleaner than my example.  So what’s the problem?  Again, decorators are a <em>proposed</em> JavaScript feature.  Currently they’re in Stage 2, which means roughly that they are very likely to eventually make it into the language, but may change in non-trivial ways before that happens.  Currently decorators are implemented in <a href="https://www.typescriptlang.org/docs/handbook/decorators.html">TypeScript</a>, as well as a <a href="https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy">3rd party babel plugin</a>, but as of January 2017 <a href="http://kangax.github.io/compat-table/esnext/#test-class_decorators">are not implemented in any browser engines</a>, and are not implemented in any first party babel plugins <a href="https://github.com/babel/babel/issues/2645">due to spec instability</a>.  Decorators are a key part of Angular2, and are used by other frameworks including <a href="http://aurelia.io/">Aurelia</a> and <a href="https://github.com/rwjblue/ember-computed-decorators">Ember</a>, so I don’t think they’re going away.  But I also don’t see them as ready for production use for teams that don’t have the capacity to dedicate the time to update existing code if/when the spec changes<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.  If for one reason or other you’re comfortable with the risks however, decorators are a great way to clean up the MobX API, and I’m excited for the spec to get to the point where I can use them.</p>\n<h3>Comparison to Redux and setState</h3>\n<p>As a state management library that was built to be used with React, the obvious questions to ask about MobX are how it improves over React’s built in state handling, and how it compares to <a href="http://redux.js.org/">Redux</a>, the current most popular state management solution for React. MobX takes a different approach to each.</p>\n<p>It’s important to say at the start that MobX isn’t mutually exclusive with using setState.  It’s possible to use them together, with MobX managing application data and setState handling individual component/UI state.  But there is some advantages to using MobX for UI state as well.  The biggest reason is that MobX is smarter than setState about when re-rendering is required.  By default React Components re-render on any call to setState, regardless of whether the state change actually affects what is rendered or not. MobX’s creator <a href="https://medium.com/@mweststrate/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e#.x0o6y4rxv">wrote more about this on Medium</a>.</p>\n<p>Comparing MobX and Redux could be a whole article on its own, so I’m not going to go too deep here, but suffice it to say that MobX is more flexible than Redux, but as a result loses some of the benefits of Redux’s structured approach.  Specifically, it is easy to convert a single object to become a MobX observable and use it in an existing React component.  It can be easily inlined in an existing file and used for one component even.  You also don’t have to deal with the ceremony of using <a href="http://benmccormick.org/2016/06/04/what-are-mutable-and-immutable-data-structures-2/">immutable data</a>.  Redux is intended as a solution that will take over all your state, and doesn’t scale down nearly as well or mix with other solutions <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>.  However, Redux’s structure also has benefits.  It allows easy testings of each component of an app individually, the creation of powerful tooling that will work with any Redux app, and reliable guarantees of how state will be updated.  These things are mostly possible with MobX <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, but require more developer discipline, and/or can’t be written as easily as universal tools. Overgeneralizing, I would prefer Redux in a new application, but would look to MobX for improving data management in an existing application.  MobX also has advantages in applications where you’re displaying a large amount of UI elements based on a relatively small amount of data, or have a lot of derived data (something like a spreadsheet), whereas Redux has benefits for applications that need to be extremely reliable and well tested.</p>\n<h3>Stray Thoughts</h3>\n<ul>\n<li>If you do want more discipline in MobX, make sure to use <code>useStrict</code> to require updates to use Actions</li>\n<li>MobX has a nice set of <a href="https://github.com/mobxjs/mobx-react-devtools">devtools</a> that are useful if you’re opting in to using actions, and using React with MobX.</li>\n<li>If this isn’t clear yet, I definitely recommend hacking around with Mobx’s low level APIs to learn more about how it works before integrating it straight into a framework</li>\n<li><s>Also note that MobX 3.0 is imminent, there is a release candidate that you can play with now.</s> <strong>Update:</strong> That didn’t take long.  <a href="https://medium.com/@mweststrate/mobx-3-released-unpeeling-the-onion-ca877382f443#.mk6mdypt2">MobX 3.0 is out</a>.</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>The two most helpful resources I found for conceptually understanding MobX were in-depth articles by the library’s author <a href="">Michael Westrate</a>: <a href="https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.jd4hgh2zi">Becoming fully reactive: an in-depth explanation of MobX</a> on Medium and <a href="https://mobx.js.org/intro/concepts.html">Concepts &amp; Principles</a> from the MobX documentation</p>\n</li>\n<li>\n<p>This <a href="https://twitter.com/AdamRackis/status/775706291259908096">tweet thread</a> and the linked article, are a good breakdown of the tradeoffs between MobX and Redux</p>\n</li>\n</ul>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>Technically this also uses class properties as well, another proposal that works well with decorators <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>It’s possible any spec changes will be trivially fixable with a code mod script, but right now there is more uncertainty than I am personally comfortable with.  I’m grateful to people who are willing to take more risks here than me, they push the language forward. <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn3" class="footnote-item"><p>I’m talking here about what is encouraged and easy, not what is possible.  It is of course possible to mix in Redux with other solutions. <a href="#fnref3" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn4" class="footnote-item"><p>MobX has some nice <a href="https://github.com/mobxjs/mobx-react-devtools">devtools!</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"Modern Dojo: Exploring declare",date:"2013-11-14 23:15:00+00:00",layout:"post",path:"/2013/11/14/modern-dojo-exploring-dojo_basedeclare",description:"A dive into the _base/declare module",category:"frameworks",pageViews:"557",last30pageViews:"8",body:'<p>This is part 2 of my ongoing exploration of <a href="http://dojotoolkit.org/">Dojo</a>’s important modules and concepts.  Specifically this post will be examining dojo/_base/declare, Dojo’s object oriented programming helper module.</p>\n<h2>What is dojo/_base/declare used for?</h2>\n<p>dojo/_base/declare (henceforth “declare”) is the Dojo module for dom assisting with Object Oriented Programming.  It provides a function that allows for easy “classical style” inheritance, as well as mixins.  It is fairly flexible, and there seem to be several ways to use it.  I’m going to explore those here.</p>\n<h2>How do you use declare?</h2>\n<p>Dojo’s declare function takes up to 3 arguments.  The first argument, which is optional, gives a fully qualified namespaced class name <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>.  The second argument is a string or an array specifying a class or set of classes that the new class will inherit from.  This argument can also be null.  The final argument is an object with the properties we want the new class to contain.  The full 3 argument syntax looks like the example below.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//declare with a className argument</span>\n\n<span class="hljs-comment">//pull in the declare module</span>\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/_base/declare"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">declare</span>) </span>{\n\n  <span class="hljs-comment">//we\'re going to create a class in the global myApp namespace</span>\n  declare(<span class="hljs-string">"myApp.examples.Messenger"</span>,<span class="hljs-literal">null</span>, {\n    <span class="hljs-attr">message</span>: <span class="hljs-string">"hello world"</span>,\n    <span class="hljs-attr">sendMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-built_in">console</span>.log(message);\n    }\n  });\n  <span class="hljs-comment">//since our class was created globally, we can access it wherever</span>\n  <span class="hljs-comment">//we want, by refering to the namespace property</span>\n  <span class="hljs-keyword">var</span> messenger = <span class="hljs-keyword">new</span> myApp.examples.Messenger();\n  messenger.sendMessage();\n});\n</code></pre>\n<p>This syntax works fine, but to me it seems fairly contrary to the spirit of Modern Dojo.  Rather than keeping the class definition bound in a module, it is instead pushed out as a global, using namespacing techniques rather than AMD style modules for code organization.  It seems to be solely a product of supporting legacy implementations and Dojo’s declarative syntax.  As such I’m going to spend the rest of this piece focusing on the 2 argument syntax, where the above example would look like what we have below.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//declare without the className argument</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/_base/declare"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">declare</span>) </span>{\n\n  <span class="hljs-keyword">var</span> Messenger = declare(<span class="hljs-literal">null</span>, {\n    <span class="hljs-attr">message</span>: <span class="hljs-string">"hello world"</span>,\n    <span class="hljs-attr">sendMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-built_in">console</span>.log(message);\n    }\n  });\n  <span class="hljs-comment">//since our class was created locally, we can access it here</span>\n  <span class="hljs-keyword">var</span> messenger = <span class="hljs-keyword">new</span> Messenger();\n  messenger.sendMessage();\n\n  <span class="hljs-comment">//If we need access our class in other places, we can return it</span>\n  <span class="hljs-comment">//from a module and then load it as a dependency where needed</span>\n});\n</code></pre>\n<p>So what is this simple example actually doing?  declare takes the object that you pass and adds it to the prototype chain of your class.  It’s important to understand that properties on the prototype are shared between all objects based on that class.  This is perfect for functions, as they only need to be created once.  It also works well for primitive values, since if we rewrite them the values will be added to the object itself rather than the prototype.  Putting properties on the prototype can lead to unexpected behavior when dealing with arrays and more complex objects though.  So its important to understand how the prototype chain works.  For example, the code below produces unexpected output since the messages array is shared between all Messengers.</p>\n<pre><code class="language-javascript"><span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/_base/declare"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">declare</span>) </span>{\n\n  <span class="hljs-keyword">var</span> Messenger = declare(<span class="hljs-literal">null</span>, {\n    <span class="hljs-attr">messages</span>: [<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>],\n    <span class="hljs-attr">sendMessages</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.messages);\n    }\n  });\n  <span class="hljs-keyword">var</span> messenger = <span class="hljs-keyword">new</span> Messenger();\n  <span class="hljs-keyword">var</span> messenger2 = <span class="hljs-keyword">new</span> Messenger();\n\n  <span class="hljs-comment">//change the messages array on messenger</span>\n  messenger.messages.push(<span class="hljs-string">"extra value"</span>)\n  <span class="hljs-comment">//and the change has populated to all instances of Messages</span>\n  messenger2.sendMessage();\n  <span class="hljs-comment">//logs ["hello", "world", "extra value"]</span>\n});\n</code></pre>\n<p>Fortunately Dojo provides an easy way to get around this issue with the special constructor property.  If you define the constructor property of your object as a function, dojo treats that property as the constructor for your class and runs it when instantiating your class.  This allows you to have local properties, and only share properties that should be shared.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Constructor example</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/_base/declare"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">declare</span>) </span>{\n\n  <span class="hljs-keyword">var</span> Messenger = declare(<span class="hljs-literal">null</span>, {\n    <span class="hljs-attr">constructor</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      <span class="hljs-keyword">this</span>.messages = [<span class="hljs-string">"hello"</span>,<span class="hljs-string">"world"</span>]\n    },\n    <span class="hljs-attr">sendMessages</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">this</span>.messages);\n    }\n  });\n\n  <span class="hljs-keyword">var</span> messenger = <span class="hljs-keyword">new</span> Messenger();\n  <span class="hljs-keyword">var</span> messenger2 = <span class="hljs-keyword">new</span> Messenger();\n  <span class="hljs-comment">//change the messages array on messenger</span>\n  messenger.messages.push(<span class="hljs-string">"extra value"</span>)\n  messenger.sendMessage(); <span class="hljs-comment">//logs ["hello","world","extra value"]</span>\n  <span class="hljs-comment">//and the change has not populated to other instances of Messages</span>\n  messenger2.sendMessage(); <span class="hljs-comment">//logs ["hello","world"]</span>\n});\n</code></pre>\n<p>Dojo also provides a special helper function to allow you to define arbitrary properties on a member of the class when an object is created.  You can use code like this to accept object arguments that you can map to properties.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//safeMixin example</span>\n\n<span class="hljs-keyword">var</span> TestObject = declare(<span class="hljs-literal">null</span>, {\n  <span class="hljs-attr">val</span>:<span class="hljs-string">"default"</span>,\n  <span class="hljs-attr">constructor</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-comment">//make the constructor arguments a mixin</span>\n    declare.safeMixin(<span class="hljs-keyword">this</span>,args);\n  }\n})\n\n<span class="hljs-comment">//then we can stick with the default value</span>\n<span class="hljs-keyword">var</span> test = <span class="hljs-keyword">new</span> TestObject();\n<span class="hljs-comment">//or come up with our own</span>\n<span class="hljs-keyword">var</span> spicyTest = <span class="hljs-keyword">new</span> TestObject({<span class="hljs-attr">val</span>:<span class="hljs-string">"spicy"</span>});\n\nalert(spicyTest.val) <span class="hljs-comment">//"spicy"</span>\n</code></pre>\n<h4>Inheritance</h4>\n<p>declare also provides a flexible inheritance option.  In the examples above, we created a class without any inheritance by passing null as the superClass argument.  But we can also specify a class as a superclass.  For instance to create a new messenger that alerts your message instead of logging them, you could inherit the existing Messenger class like the example below.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Basic Inheritance</span>\n\n<span class="hljs-keyword">var</span> AlertMessenger = declare(Messenger, {\n    <span class="hljs-attr">sendMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      alert(<span class="hljs-keyword">this</span>.messages)\n    }\n  });\n<span class="hljs-keyword">var</span> alerter = <span class="hljs-keyword">new</span> AlertMessenger();\nalerter.sendMessage(); <span class="hljs-comment">//alerts the message</span>\n</code></pre>\n<p>In this example, AlertMessenger inherits the constructor property from Messenger, but overrides the sendMessage function.  So we change the functionality in a classical OO way.</p>\n<p>One nice feature of Dojo’s OO implementation is that it is easy to make calls up the prototype change even when we are overriding functions.  So for instance if we wanted our AlertMessenger class to send an alert while still logging the message in the console, we could use <code>this.inherited</code> to make it happen.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//this.inherited Example</span>\n\n<span class="hljs-keyword">var</span> AlertMessenger = declare(Messenger, {\n    <span class="hljs-attr">sendMessage</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n      alert(<span class="hljs-keyword">this</span>.messages);\n      <span class="hljs-comment">//calls up the prototype chain to Messenger\'s sendMessage function</span>\n      <span class="hljs-keyword">this</span>.inherited(<span class="hljs-built_in">arguments</span>);\n    }\n  });\n<span class="hljs-keyword">var</span> alerter = <span class="hljs-keyword">new</span> AlertMessenger();\nalerter.sendMessage(); <span class="hljs-comment">//alerts and logs the message</span>\n</code></pre>\n<p>So we still have access to overriden functions if used judiciously. Also, each constructor will be executed along the prototype chain, so there is no need to use <code>this.inherited</code> in a constructor context.</p>\n<h4>Mixins</h4>\n<p>But we’re not limited to a single inheritance instance.  We can still do more.  We can also pass an array of classes to the className argument, allowing us to inherit from multiple types at once. The first argument is the base of the prototype chain, and its extended from there, with the additional class properties being mixed in.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Multi-Inheritance Example</span>\n\n<span class="hljs-keyword">var</span> Lion = declare( <span class="hljs-literal">null</span>, {\n  <span class="hljs-attr">head</span>: <span class="hljs-string">"lion"</span>,\n  <span class="hljs-attr">body</span>: <span class="hljs-string">"lion"</span>,\n  <span class="hljs-attr">legs</span>: <span class="hljs-string">"lion"</span>\n});\n\n<span class="hljs-keyword">var</span> Bird = declare(<span class="hljs-literal">null</span>, {\n  <span class="hljs-attr">head</span>: <span class="hljs-string">"bird"</span>,\n  <span class="hljs-attr">wings</span>: <span class="hljs-string">"bird"</span>\n});\n\n<span class="hljs-keyword">var</span> Human = declare (<span class="hljs-literal">null</span>, {\n  <span class="hljs-attr">head</span>: <span class="hljs-string">"human"</span>\n});\n\n<span class="hljs-comment">//Sphinx is declared with 3 mixins</span>\n<span class="hljs-comment">//lion is first, then bird, then human</span>\n<span class="hljs-keyword">var</span> Sphinx = declare([Lion,Bird,Human],{\n  <span class="hljs-comment">//head gets overriden by human last, wings body and legs are never overriden and stay with their first set values</span>\n\n  aboutMe: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n     alert(<span class="hljs-string">"I have the head of a "</span>+ <span class="hljs-keyword">this</span>.head +\n           <span class="hljs-string">", the wings of a "</span> + <span class="hljs-keyword">this</span>.wings +\n           <span class="hljs-string">", and the body of a "</span> + <span class="hljs-keyword">this</span>.body);\n  }\n\n  });\n\n<span class="hljs-keyword">var</span> sphinx = <span class="hljs-keyword">new</span> Sphinx();\n\nsphinx.aboutMe(); <span class="hljs-comment">//I have the head of a human, the wings of a bird, and the body of a lion</span>\n</code></pre>\n<h2>When should I use dojo/_base/declare</h2>\n<p>declare seems like a great choice for creating reusable objects, and allows for either a classical inheritance style or a more flexible mixin style.  Its a bit of overkill for simple or one off objects, but for defining the structure of a complex model, it seems like a great fit.</p>\n<p>Personally I’m going to avoid the className syntax unless I find a use for it that I currently don’t see.  It seems to be a legacy option that is completely at odds with the rest of Dojo’s avoidance of global variables.  The 2 argument syntax on the other hand, seems like a great choice for creating maintainable and reusable classes.</p>\n<p>declare should be especially useful for programmers who want to implement a classical inheritance structure in JS.  It makes the syntax quick and straightforward.  The only gotcha I see is the need to be aware of how the prototype chain works under the covers so that there’s no being burned by unexpected sharing of changes.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href="http://dojotoolkit.org/documentation/tutorials/1.9/declare/">Official Dojo tutorial on dojo/_base/declare</a></li>\n<li><a href="http://dojotoolkit.org/reference-guide/1.9/dojo/_base/declare.html">Dojo docs on dojo/_base/declare</a></li>\n<li><a href="/blog/2013/01/12/javascript-explained-object-oriented-javascript/">JS Explained: Object Oriented Javascript</a></li>\n</ul>\n<h3>Other Modern Dojo Posts</h3>\n<ul>\n<li><a href="/blog/2013/11/13/modern-dojo-dojo-query/">Exploring dojo/query</a></li>\n</ul>\n<div class="footnotes"><ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        I\'m not a fan of the dojo convention of having optional arguments be first in some cases.  It seems very strange that arguments might "shift" and not line up as expected.  I can understand in this case not wanting to have a small string parameter after a potentially large object listing the class properties, but it still makes for a confusingly inconsistent API.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol></div>\n'
}},function(e,t){e.exports={title:"Modern Dojo: Exploring query",date:"2013-11-13 23:15:00+00:00",layout:"post",path:"/2013/11/13/modern-dojo-exploring-dojoquery",description:"A dive into the query module",category:"frameworks",pageViews:"128",last30pageViews:"0",body:'<p>It appears I’m going to be spending a significant amount of time working with <a href="http://dojotoolkit.org/">the Dojo toolkit</a> for my next project at work, so I’ve spent some time over the last few days trying to familiarize myself with the library.  Its quickly become apparent that there are a few challenges with learning Dojo at the pace I wanted.  First, Dojo is built as a lightweight core with many small modules of functionality available as components.  It’s effectively completely modularized in a way that no other framework really is (though jQuery appears to be moving in that direction as well).  As such, learning it is a bit decentralized.  Second, Dojo, which has existed since 2005, made a big transition back in 2011 to move to an AMD format for managing its modular components.  This resulted in a significant change in basic syntax.  Since this change happened after jQuery’s rise (which led to a significant drop in Dojo usage), it seems many examples on the web still use the old syntax, and I haven’t seen any print resources published since the change.  As a result, the resources for learning modern Dojo seem somewhat piecemeal beyond the toolkit’s website.</p>\n<p>That being the case, I’ve decided to explore Dojo’s primary modules on a case by case basis and document what I’ve learned here.  Hopefully this can be a helpful modern reference to others who are learning.  I’m going to start by exploring dojo/query, one of the primary Dojo modules, which provides jQuery selector style functions for Dojo users.</p>\n<h2>What is dojo/query for?</h2>\n<p>dojo/query is the Dojo module for dom selection.  The core module provides basic CSS selection capability, with the ability to use CSS3 style selectors if needed.  It can be extended using other modules to provide more advanced DOM traversal and manipulation functionality, effectively matching jQuery’s feature set in that area.</p>\n<h2>How do you use dojo/query?</h2>\n<p>To use dojo/query, you first need to require the module, using an AMD style require or define call.  You can then call query (or whatever you’ve aliased it to), and pass it a CSS style selector.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Basic query example</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/query"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)</span>{\n    <span class="hljs-comment">//select all elements with class special</span>\n    <span class="hljs-keyword">var</span> elementList = query(<span class="hljs-string">".special"</span>);\n\n    <span class="hljs-comment">//you can also add an optional second parameter to search</span>\n    <span class="hljs-comment">//under a single DOM element,rather than the whole DOM</span>\n    <span class="hljs-keyword">var</span> parentNode = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">"parent"</span>);\n    elementList = query(<span class="hljs-string">".children"</span>,parentNode);\n});\n</code></pre>\n<p>The query function returns a dojo/NodeList object.  This is a basic array-like wrapper object, similar to a jQuery object.  By default it contains some basic array manipulation functions, but you can also extend it with plugin modules for dom manipulation, dom traversal, and other functions.  In fact you can even write your own extensions to the object.  These extensions are loaded in as additional AMD modules. For instance, we can load dojo/NodeList-dom to extend NodeList with some basic DOM functionality</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Extending NodeList</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/query"</span>,<span class="hljs-string">"dojo/NodeList-dom"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)</span>{\n    <span class="hljs-comment">//add a btn class to all button elements</span>\n    query(<span class="hljs-string">"button"</span>).addClass(btn);\n});\n</code></pre>\n<p>In that simple example, the <code>addClass</code> method was added as an extension to the NodeList type by the NodeList-dom module.  So adding that module brought extra functionality.  Its relatively simple to add custom functionality in this way.  An example from the Dojo docs looks like this:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Dojo extension example</span>\n\n<span class="hljs-comment">//definition (in myapp/NodeList-custom.js)</span>\ndefine([<span class="hljs-string">"dojo/_base/lang"</span>, <span class="hljs-string">"dojo/query"</span>, <span class="hljs-string">"dojo/NodeList-dom"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">lang, query</span>)</span>{\n  lang.extend(query.NodeList, {\n    <span class="hljs-attr">makeRed</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n      <span class="hljs-keyword">this</span>.style({ <span class="hljs-attr">color</span>: <span class="hljs-string">"red"</span> });\n      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;\n    }\n  });\n});\n\n<span class="hljs-comment">//usage (in another file)</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/query"</span>, <span class="hljs-string">"myapp/NodeList-custom"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query</span>)</span>{\n  query(<span class="hljs-string">".greenText"</span>).makeRed();\n});\n</code></pre>\n<p>This is great for modularizing common patterns and functionality, and is a core Dojo concept, not just a dojo/query feature.</p>\n<h2>How does dojo/query perform?</h2>\n<p>I was curious about how dojo/query performance stacked up to jQuery.  So I set up some performance tests on <a href="http://jsperf.com/">jsPerf</a> to take a look.  I compared Dojo to jQuery across a few common and simple selection and manipulation operations.  The results were informative.</p>\n<p>You can see the results here for</p>\n<ul>\n<li><a href="http://jsperf.com/dojo-query-vs-jquery-selectors">ID selection</a></li>\n<li><a href="http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-search">Class selection</a></li>\n<li><a href="http://jsperf.com/dojo-query-vs-jquery-selectors-for-class-manipulation">DOM manipulation</a></li>\n</ul>\n<p>The results varied a bit from platform to platform, but a few things stood out.</p>\n<h4>When selecting on IDs, don’t use dojo/query</h4>\n<p>For the basic ID selection tests, dojo/query was blown away by almost everything. It is very very slow to handle it.  I was initially bothered by this, until I added the dojo/dom test.  dojo/dom’s byID function is the “dojo way” of selecting an element by ID.</p>\n<p>dom.byId appears to be a thin wrapper around the native API, with near native performance everywhere (and confusingly, better than native performance on IE11).  dojo/query meanwhile, lags way behind, literally 100x slower than a native query on Chrome 31.  You can still integrate with dojo/NodeList to get dojo/query’s chaining functionality</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Method chaining with search by ID</span>\n\n<span class="hljs-built_in">require</span>([<span class="hljs-string">"dojo/query"</span>,<span class="hljs-string">"dojo/dom"</span>, <span class="hljs-string">"dojo/NodeList-dom"</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">query,dom</span>)</span>{\n\n    <span class="hljs-keyword">var</span> list = query.NodeList();\n    list.push(dom.byId(<span class="hljs-string">"menu"</span>));\n\n    list.addClass(<span class="hljs-string">"sidebar"</span>).onclick(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) </span>{\n        alert (<span class="hljs-string">"this is the menu"</span>);\n    })\n});\n</code></pre>\n<h4>For simple things operations, you can’t beat native selectors</h4>\n<p>On the basic tests, the native selectors blow away the library results, with little downside.  When you’re simply trying to access an element and, for instance, change its inner HTML, native selectors will scale much better.</p>\n<p>However, the situation begins to become more complicated when more complex queries are involved.  My manipulation example is still a relatively simple example, but the trade-offs start becoming a lot more substantial very rapidly.  For the manipulation example, native code requires significantly more code.  The simplest method of doing things is not supported on IE9, and requires you to understand the distinction between an HTMLCollection and a normal Javascript array.  A solution that supports IE9 and handles other edge cases involves even more code, and performs in the same range as Dojo and jQuery.</p>\n<h4>dojo/query seems to lag behind jQuery in performance, but its in the ballpark</h4>\n<p>dojo/query was consistently outperformed by jQuery in the testing that I did.  But while the gap between native selectors and library versions is very wide, the dojo/jQuery divide seems to be on the order of a 2-4x increase in speed on basic operations.  Thats significant, but hardly damning. If selector performance is your primary criteria for choosing a library, jQuery should be your pick.  But Dojo is competitive enough here, that it doesn’t seem disqualified for use if you have other reasons for doing so.</p>\n<h2>When should I use dojo/query?</h2>\n<p>To sum it all up, it looks like the query library is a great choice for providing jQuery selector style functionality for Dojo users.  It’s small, lightweight, and allows you to load only the things you need to get the job done.  If you only are looking for this type of selector functionality, a custom built jQuery package might be a better fit. But if you’re already using Dojo, dojo/query will get the job done very well.  Just don’t use it to search on id’s.  Use dojo/dom or native selectors instead.</p>\n<h2>More Resources</h2>\n<ul>\n<li><a href="https://dojotoolkit.org/documentation/tutorials/1.9/using_query/">Official Dojo tutorial on dojo/query</a></li>\n<li><a href="http://dojotoolkit.org/reference-guide/1.9/dojo/query.html">Dojo docs on dojo/query</a></li>\n<li><a href="http://dojotoolkit.org/reference-guide/1.9/dojo/NodeList.html">Dojo docs on NodeList</a></li>\n</ul>\n'}},function(e,t){e.exports={title:"Moving Past RequireJS",date:"2015-05-28 14:10:00+00:00",layout:"post",path:"/2015/05/28/moving-past-requirejs",category:"frameworks",dontfeature:"true",description:"A look at the problems with using requireJS in todays JavaScript world",pageViews:"38835",last30pageViews:"1263",body:'<p>RequireJS has been a hugely influential and important tool in the JavaScript world.  It’s still used in many solid, well-written projects today.  But as it has stagnated and competitors have grown up, it now suffers compared to the alternatives.  It’s time for new projects to look past RequireJS when deciding how to structure their front-end projects.</p>\n<h3>What is RequireJS?</h3>\n<p>RequireJS is the most well known module loader for JavaScript.  Module loaders are tools for specifying dependencies for JavaScript files and loading those files into a browser.  They became necessary because JavaScript has not traditionally offered a built in way to specify what other code is needed to execute a file.  Developers coming from server side languages like Java and Python are used to being able to import anything they need from another file, letting the language handle the details.  Since that was not designed into JavaScript, the only alternative originally was having developers take care that all scripts were correctly loaded into a page together in the right order, then making references across files without the assurance that the other file existed.</p>\n<p>Module loaders improve on that by allowing you to define dependencies for your JavaScript files, and assuring that those dependencies are loaded in the correct order so that the variables the code needs are there when referenced.  These dependencies are specified using one of several “module formats”.  There are currently 3 primary competing standards for JavaScript modules: AMD or Asynchronous Module Definition, CommonJS, and EcmaScript 6 Modules.  I’ll discuss these more below, but each of them provide syntax for listing the files that a module requires as a dependency, and the object that the module wishes to import from those files.</p>\n<h3>Why not start a project with RequireJS?</h3>\n<p>RequireJS was the first JavaScript module loader to gain widespread popularity.  It’s used in hundreds of successful production sites, and is widely referenced in JavaScript books, blog posts, and talks.  I personally led a project to convert a large web application to use it for dependency management in my previous job, and still use it now in a current project.  So why would I say not to use it for your project?  There are two sets of issues with RequireJS:  issues with the AMD module format, and increased competition in terms of the features expected from a module loader.</p>\n<h3>The problems with AMD</h3>\n<p>RequireJS requires developers to use AMD modules.  That choice made a ton of sense in 2011 when RequireJS first launched.  It makes less sense today.  In 2011, the only popular alternative to AMD modules was the CommonJS standard, and AMD held a technical advantage over CommonJS. It was essentially a decision between a technological superiority and a cleaner API. In 2015, AMD is one of 3 realistic module syntax alternatives, and no longer holds a significant technical advantage, but it still has a less clear syntax and has begun to experience problems with network effects.</p>\n<h4>Syntax Comparison</h4>\n<p>AMD modules look like this:</p>\n<pre><code class="language-javascript">define([<span class="hljs-string">\'file1\'</span>,<span class="hljs-string">\'file2\'</span>], <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Class1, Class2</span>) </span>{\n    <span class="hljs-keyword">let</span> obj = <span class="hljs-keyword">new</span> Class1(),\n        obj2 = <span class="hljs-keyword">new</span> Class2();\n    <span class="hljs-keyword">return</span> obj.foo(obj2);\n});\n</code></pre>\n<p>A <code>define</code> function is used to define a new module.  It takes 2 arguments: an array of dependencies (specified as strings), and a callback function that is passed in the values exported by each dependency and run after all of the dependencies have been loaded.  AMD also provides a require function that takes the same arguments, but serves as the initialization point of a program, loading its dependencies and executing them when it’s run.</p>\n<p>Compare that to CommonJS and the ES6 Modules syntax:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//commonJS</span>\n<span class="hljs-keyword">let</span> Class1 = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'file1\'</span>),\n    Class2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'file2\'</span>),\n    obj = newClass1(),\n    obj2 = <span class="hljs-keyword">new</span> Class2();\n\n<span class="hljs-built_in">module</span>.exports = obj.foo(obj2);\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-comment">//ES6</span>\n<span class="hljs-keyword">import</span> Class1 <span class="hljs-keyword">from</span> <span class="hljs-string">\'file1\'</span>;\n<span class="hljs-keyword">import</span> Class2 <span class="hljs-keyword">from</span> <span class="hljs-string">\'file2\'</span>;\n\n<span class="hljs-keyword">let</span> obj = newClass1(),\n    obj2 = <span class="hljs-keyword">new</span> Class2();\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> obj.foo(obj2);\n</code></pre>\n<p>There’s some obvious niceties there.  CommonJS and ES6 modules don’t require you to wrap your code in an outer function, which serves to reduce boilerplate and also aligns the import code more closely with the expectations of developers who have used imports in server-side languages.</p>\n<p>But there are also other subtler problems with the AMD syntax.  Because you’re asked to specify your dependencies as an array of strings that then result in parameters to a callback function, adding or removing a dependency requires code to be changed in 2 places. <sup id="fnref:1"><a href="#fn:1">1</a></sup>  This is no big deal in a simple example like above.  But what about in this real world example:</p>\n<pre><code class="language-javascript">define([<span class="hljs-string">\'marionette\'</span>,\n        <span class="hljs-string">\'radio\'</span>,\n        <span class="hljs-string">\'underscore\'</span>,\n        <span class="hljs-string">\'lib/analytics\'</span>,\n        <span class="hljs-string">\'collections/widget\'</span>,\n        <span class="hljs-string">\'collections/user\'</span>,\n        <span class="hljs-string">\'models/user\'</span>,\n         <span class="hljs-string">\'routers/widget_page_router\'</span>,\n        <span class="hljs-string">\'views/widget_page/page\'</span>],\n\n<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Mn, Radio, _, Analytics, WidgetCollection, UsersCollection,\n    User, WidgetRouter, WidgetPage</span>) </span>{\n        <span class="hljs-comment">//module code here</span>\n});\n</code></pre>\n<p>If you were asked to remove a dependency here, it’s easy to imagine accidentally putting a parameter in the wrong position in the list, or removing an item from one list without the other, causing the parameters to be set to the wrong values.  It’s a small issue, but the type of subtle source of bugs that can drive developers crazy.</p>\n<p>Finally the mixed use of require and define for pulling in dependencies seems to be confusing to many developers.  While it certainly isn’t a large learning curve (require is for initiating new code, define is for defining a module that can be pulled into a dependency tree started by a require), it’s an additional point of confusion that doesn’t exist in CommonJS, which simply has a “starting script” that is run and pulls in its dependencies.</p>\n<p><strong>Update</strong>: <em>Commenters on Reddit have correctly pointed out that there’s a <a href="http://requirejs.org/docs/whyamd.html#sugar">second usable AMD syntax</a> that cleans up some of these issues.  I didn’t include it originally since it’s not the “official” AMD syntax and I have not seen it widely used, but it is better and worth noting for users sticking with RequireJS/AMD</em></p>\n<h4>Technical Advantages</h4>\n<p>When RequireJS was first created, AMD had a few technical advantages over CommonJS solutions.  AMD was set up to be asynchronous.  The callback function syntax made it easy to handle dependency loading over a network.  You made the define call, loaded the dependencies, and once all of the dependencies had been pulled over the network, ran the callback function.  This also allowed some dependencies to be lazy-loaded after the initial page load, since that could be handled like any other ajax request with a callback attached.  Since CommonJS was set up in a more synchronous fashion, it was less clear how to accomplish this, and early systems were less popular than requireJS.</p>\n<p>AMD’s asynchronous nature remains a theoretical advantage, but in practice, modern module loaders have found ways to solve these problems for CommonJS.  Webpack allows configuration options for lazy loading individual modules, and developers using Browserify have <a href="http://esa-matti.suuronen.org/blog/2013/04/15/asynchronous-module-loading-with-browserify/">found workarounds</a> to the problem.  At this point there’s no real difference in the capabilities of AMD compared to other module formats.</p>\n<h4>Network Effects</h4>\n<p>While RequireJS and AMD were initially the most popular module system for the browser, CommonJS is built into Node.js and has always been the dominant module format on the server-side.   This was initially no big deal, but Node has grown in popularity and also become more important to client-side developers due to the tooling ecosystem around it.  Because of that, code that doesn’t play well with Node is limited in ways that CommonJS  is not.  One area that I’ve noticed this is unit testing.  There’s a whole ecosystem of unit-testing libraries that allow you to test your modules on the command line using Node (Mocha, jasmine-node, Jest).  This has nice advantages relative to running your tests in a browser.  It’s easy to integrate into a build workflow, the test framework can run all tests in a directory without developers needing to manually add them to a test page, and there’s no extra browser window required.  With AMD you can get part of the way there by making all of your tests asynchronous (painful) and importing requireJS or by using PhantomJS to run your browser tests on the command-line.  But you can’t match the experience of full node compatibility.</p>\n<p>In addition to the unit test example, there are many small node modules out there that can be usefully pulled into a web project.  Libraries like Ampersand.js and Event-Emitter are quite useful in a browser context, but only play nicely if you’re using CommonJS.  While it’s true that most libraries do support AMD, they tend to do so through a “Universal” module format that checks the environment to see what module format is being used and then uses appropriate format.  I’m unfamiliar with any examples of major JavaScript libraries that support AMD module loaders but not CommonJS.  So choosing AMD limits you in a way that choosing CommonJS does not.</p>\n<p>This is not a disadvantage that’s likely to get fixed for AMD modules anytime soon.  If these network effects shift at all, they’re only likely to do so in favor of ES6 modules, which have the appeal of being a “blessed” part of the JavaScript language. So in the short and long term, it’s fair to expect that using AMD modules will limit your compatibility with other tools and libraries compared to CommonJS.</p>\n<h3>What are the alternatives to RequireJS?</h3>\n<p>In 2015, RequireJS is one of 3 major options on the module loading scene, along with <a href="http://browserify.org/">Browserify</a> and <a href="http://webpack.github.io/">Webpack</a>.  Browserify is an attempt to build a module loader on top of the NPM ecosystem and node modules.  It uses CommonJS modules and integrates tightly with NPM.  Webpack is an attempt to unify the modules landscape by supporting AMD, CommonJS and ES6 modules.  It handles JavaScript, CSS and other assets, as well as preprocessors for each. RequireJS suffers in comparison to both of them, both in terms of features and workflow.</p>\n<p>Browserify and Webpack both provide servers for development, allowing you to instantly integrate changes without a long build process or extra JavaScript files loaded into the browser. RequireJS doesn’t have a great solution for development workflow, requiring you to either do a full build every time, or load a copy of the require.js JavaScript file up to your browser where it loads files from the client.  This has disadvantages both in terms of reliability (you’ll be running the files in a different way in development than on production, and there will be timing differences due to the need to load the files on the client), and configuration (you’ll need to have separate configurations for development and production that will have to be kept in sync somehow).</p>\n<p>Browserify and Webpack also provide a clean syntax for preprocessing things like CoffeeScript or JSX files, using transforms or loaders (respectively).  These transforms can be applied to a subset of files with configuration. These methods compare favorably to RequireJS’s plugin system, which require you to manually specify the plugins used each time you load a resource.</p>\n<p>All of this adds up to a strong case for not starting new projects with RequireJS.  It’s a good tool that has benefited many projects, but as other people have learned from its pain points and provided superior solutions, the time has come to move on.</p>\n<h3>Disclaimers</h3>\n<p>It should be noted here that this article is addressed primarily at developers starting new projects.  If you’re working on an project that already uses RequireJS, you’ve probably already worked through the configuration pain, gotten used to the syntax, found a compatible unit testing library and developed a strategy for live development.  If these aren’t things that are causing you pain, don’t switch.  RequireJS is a stable tool that has stood the test of time.  It’s not inherently flawed.  There are simply better options out there these days for developers starting new projects.</p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Axel Rauschmayer has a <a href="http://www.2ality.com/2014/09/es6-modules-final.html">great piece</a> up on his blog 2ality describing ECMAScript 6 modules and how they compare to CommonJS</p>\n</li>\n<li>\n<p>This <a href="https://blog.andyet.com/2014/06/25/introducing-ampersand-js">blog post</a> is primarily an introduction post for Ampersand.js, a modular JS framework. But it also serves as a great look at the environment around nodejs and CommonJS modules, including a discussion of the advantages and disadvantages of using many small modules to structure applications.</p>\n</li>\n<li>\n<p>Several users on <a href="http://www.reddit.com/r/javascript/comments/37lowt/moving_past_requirejs/">reddit</a>, have pointed out that <a href="https://github.com/systemjs/systemjs">systemjs</a> is another competing module loader worth discussing.  I didn’t include it because it’s less mature and wouldn’t be something I’d currently recommend for production apps, but it looks to be getting there quickly and is certainly another option to consider.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        AMD does allow you to use an alternative syntax that is more similar to CommonJS that avoids this issue with "off by 1" errors.  But since it\'s an alternative syntax, not the recommended one, I think it\'s fair to critique this as an issue.  My other points apply equally to both forms.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Mozilla: The state of Web Components",date:"2015-06-14 21:35:58+00:00",layout:"post",path:"/2015/06/14/mozilla-the-state-of-web-components",description:"A look at Mozilla's writeup on the current status of the web components spec",category:"platform",readNext:"component-based-dev,custom-elements-example",pageViews:"290",last30pageViews:"4",body:'<p>Over on Mozilla’s development blog, Wilson Page has a <a href="https://hacks.mozilla.org/2015/06/the-state-of-web-components/">great summary</a> of the current status of the Web Components spec:</p>\n<blockquote>\n<p>Web Components have been on developers’ radars for quite some time now. They were first introduced by Alex Russell at Fronteers Conference 2011. The concept shook the community up and became the topic of many future talks and discussions.</p>\n<p>In 2013 a Web Components-based framework called Polymer was released by Google to kick the tires of these new APIs, get community feedback and add some sugar and opinion.</p>\n<p>By now, 4 years on, Web Components should be everywhere, but in reality Chrome is the only browser with ‘some version’ of Web Components. Even with polyfills it’s clear Web Components won’t be fully embraced by the community until the majority of browsers are on-board.</p>\n</blockquote>\n<p>I’ve been using Custom Elements (the least controversial part of the Web Components spec) in production for a little less than a year now thanks to a <a href="https://github.com/WebReflection/document-register-element">small polyfill script</a>.  I know that many others are using a version of them through <a href="https://www.polymer-project.org/1.0/">Polymer</a>.  It’s been sad to see the spec stagnate without browser support for much longer than might have been expected, but it seems there’s reason for hope.</p>\n<blockquote>\n<p>Web Components have been in planning for over three years, but we’re optimistic the end is near. All major vendors are on board, enthusiastic, and investing significant time to help resolve the remaining issues.</p>\n</blockquote>\n<p>It’s exciting to see public cooperation on this issue, something that was not very visible over the past few years as Chrome fired ahead with an implementation while others pursued other priorities.  If you care about this spec at all, make sure to read <a href="https://hacks.mozilla.org/2015/06/the-state-of-web-components/">the full article</a>.  It’s an interesting look at where the spec may be going as well as a nice peak behind the scenes of how web APIs become established.</p>\n'}},function(e,t){e.exports={title:"A whole new site",date:"2016-12-02 16:00:00+00:00",layout:"post",path:"/2016/12/02/whole-new-site/",description:"Introducing a new look for benmccormick.org",keywords:"Gatsby blog ghost benmccormick.org",key:"new-look-2016",category:"meta",pageViews:"229",last30pageViews:"14",body:'<p>After 2.5 years of stability, this week I moved <a href="http://benmccormick.org">benmccormick.org</a> to a new platform and overhauled the look and feel. Although most readers have seen the site remain relatively stable, this is actually the 5th major revision of the site since it was first created, so this seems like a good time for a quick trip down memory lane.</p>\n<p>I first started it as a Django app, wanting to challenge myself to build a blog.  That was so short-lived that the way-back machine never even registered it, and I don’t have any evidence that it ever existed (thankfully).  In December 2012, I moved the blog over to <a href="http://octopress.org/">Octopress</a> a static site generator based on Ruby.  I started out using a very nice stock template:</p>\n<img src="/posts/images/oldsite1.png" class="full-width">\n<p>and then shortly switched to a version that I mostly did myself based off of the default octopress theme.  This was one of my first attempts to design anything from scratch, and was not particularly pretty:</p>\n<img src="/posts/images/oldsite2.png" class="full-width">\n<p>I enjoyed Octopress, but spent a lot of time messing around with it (and struggling through the unfamiliar ruby ecosystem), and not a lot of time writing.  So in the spring of 2014 I decided I wanted to switch to a blogging platform where I could write, rather than messing with code.  So I moved my blog to <a href="https://ghost.org/">Ghost</a>, lightly modified a public theme, and began writing about Vim.  It was around this time (2 years and 40 articles in) that I began to attract more readers, and also began to focus more on higher quality technical articles:</p>\n<img src="/posts/images/oldsite3.png" class="full-width">\n<p>About a year after that I re-introduced some color to the blog after a prolonged absence. The black and white sidebar was traded for a colorful green, and a I began using a mix of blue and red for text emphasis. I also began to focus on making it more clear how to subscribe to the blog, and highlighted the more popular content:</p>\n<img src="/posts/images/oldsite4.png" class="full-width">\n<p>Ghost was a great blogging platform, but this fall I decided it was time to move off of it.  I was interested in trying some things that didn’t fit into the platform’s more structured approach, and wanted to move the blog to a place where it was no longer losing me money to run.  So I decided to take another look at the static site generator landscape. I looked through the top 12 or so options on <a href="https://www.staticgen.com/">StaticGen</a> and <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> quickly stood out.  It uses concepts I’m extremely comfortable with (built with React and Webpack!), produces fast server-rendered SPA style sites, and dictates almost nothing about how the site is built.</p>\n<p>The site is now built with Gatsby and hosted on Github pages.  I’ve ditched the noisy green sidebar in favor of a simpler text-focused experience and added a small ad at the top of the page to offset some of the costs associated with the blog.  I’m planning on iterating on the design (better organizing and exposing older content, making it simpler to subscribe to the blog, and making it easier for me to add rich content/code examples to posts without relying on 3rd party services), but for right now I’m excited to get back to focusing on writing.</p>\n<img src="/posts/images/current_site.png" class="full-width">\n<p>Like all software, as this blog has evolved, I’m sure not all of the progress has been forward.  If you see any issues with the new site, feedback and bugfixes are welcome.  Feel free to hit me up on <a href="https://twitter.com/ben336">twitter</a>, comment on this post, or open an issue on the site’s <a href="https://github.com/benmccormick/benmccormickorg/issues">github repo</a>.  Thank you to everyone who has read and supported this site over the past several years.</p>\n<h3>More Resources</h3>\n<ul>\n<li>If you’re interested in <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> this post on <a href="https://blog.scottnonnenberg.com/practical-gatsby-js/">Practical Gatsby.js</a> by Scott Nonnenberg is excellent.  Its not a how-to, but more of a series of examples of how he deviated from the base Gatsby blog (and why).  I found it really helpful when brainstorming ideas for this site.</li>\n</ul>\n'
}},function(e,t){e.exports={title:"New Twitter Feed and Practical Vim Giveaway",date:"2014-07-11 11:12:00+00:00",layout:"post",path:"/2014/07/11/new-twitter-feed-and-practical-vim-giveaway",description:"New ways to subscribe",category:"meta",pageViews:"422",last30pageViews:"4",body:'<p>I’ve got a few orders of site business to deal with today.  First, there’s a new way to subscribe to the site.</p>\n<h3>New Twitter Feed</h3>\n<p>The new feed, <a href="http://twitter.com/benmccormickorg">@benmccormickorg</a>, will be a Twitter “RSS Feed” with all of the posts from this site. It’s just another option for people who want to subscribe, along with <a href="http://feedpress.me/benmccormick">RSS</a> and my <a href="http://eepurl.com/WFYon">mailing list</a>.  You can also find my personal account at <a href="http://twitter.com/ben336">@ben336</a>.</p>\n<p><a href="https://twitter.com/benmccormickorg" class="twitter-follow-button" data-show-count="false" data-lang="en">Follow @benmccormickorg</a></p>\n<h3>Practical Vim Giveaway</h3>\n<p><img src="/posts/images/vim.jpg" alt="Practical Vim"></p>\n<p>To go along with that, and as a thanks for all of the great interest and feedback I’ve gotten for my posts on Vim recently, I’m going to be giving away 2 copies of Drew Neil’s book, Practical Vim.</p>\n<p><a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356980&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=FE3JFKHYVRYCUOVS">Practical Vim</a> is the best resource on Vim I’ve found.  Drew Neil is the creator of <a href="http://vimcasts.org/">vimcasts</a>, the popular online Vim site.  And this book is his attempt to explain what makes Vim special.  It’s bursting cover to cover with practical tips and tricks to help you become a more efficient writer and developer.  Reading it helped me understand the philosophy behind Vim, and I would recommend it for anyone who uses Vim or thinks they might want to.  There’s a reason I recommend it as the Vim resource on my <a href="http://benmccormick.org/readinglist/">reading list</a>.</p>\n<p>So how do you get a copy?  There are a few ways</p>\n<ol>\n<li>Follow <a href="http://twitter.com/benmccormickorg">@benmccormickorg</a> on Twitter</li>\n<li>Subscribe to my <a href="http://eepurl.com/WFYon">mailing list feed</a>.</li>\n<li>Tweet a link to one of my <em>Learning Vim</em> posts, with the hashtag <strong>#learningvim</strong></li>\n</ol>\n<p>You can accumulate up to 3 entries by doing each of the above (I won’t count multiple tweets for the 3rd).  The giveaway will end July 25th, at which time I’ll pick 2 winners at random, and get in touch through Twitter or email.  If you have questions or concerns, feel free to speak up in the comments. Otherwise, go subscribe and win a chance to get a great book for free!</p>\n'}},function(e,t){e.exports={title:"One Day Left In Practical Vim Giveaway",date:"2014-07-24 23:55:45+00:00",layout:"post",path:"/2014/07/24/one-day-left-in-practical-vim-giveaway",description:"If you're reading this now... its too late sorry ¯ (ツ)_/¯",category:"meta",pageViews:"9",last30pageViews:"0",body:'<p>My practical Vim giveaway ends tomorrow,  Friday July 25th at midnight.  If you haven’t subscribed or tweeted to win yet, now is the best time, so go for it!</p>\n<h3>Giveaway Details</h3>\n<p><img src="/posts/images/vim.jpg" alt="Practical Vim"></p>\n<p>As a thanks for all of the great interest and feedback I’ve gotten for my posts on Vim recently, I’m going to be giving away 2 copies of Drew Neil’s book, Practical Vim.</p>\n<p><a href="http://www.amazon.com/gp/product/1934356980/ref=as_li_tl?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356980&amp;linkCode=as2&amp;tag=benmccormicko-20&amp;linkId=FE3JFKHYVRYCUOVS">Practical Vim</a> is the best resource on Vim I’ve found.  Drew Neil is the creator of <a href="http://vimcasts.org/">vimcasts</a>, the popular online Vim site.  And this book is his attempt to explain what makes Vim special.  It’s bursting cover to cover with practical tips and tricks to help you become a more efficient writer and developer.  Reading it helped me understand the philosophy behind Vim, and I would recommend it for anyone who uses Vim or thinks they might want to.  There’s a reason I recommend it as the Vim resource on my <a href="http://benmccormick.org/readinglist/">reading list</a>.</p>\n<p>So how do you get a copy?  There are a few ways</p>\n<ol>\n<li>Follow <a href="http://twitter.com/benmccormickorg">@benmccormickorg</a> on Twitter</li>\n<li>Subscribe to my <a href="http://eepurl.com/WFYon">mailing list feed</a>.</li>\n<li>Tweet a link to one of my <em>Learning Vim</em> posts, with the hashtag <strong>#learningvim</strong></li>\n</ol>\n<p>You can accumulate up to 3 entries by doing each of the above (I won’t count multiple tweets for the 3rd).  The giveaway will end July 25th, at which time I’ll pick 2 winners at random, and get in touch through Twitter or email.  If you have questions or concerns, feel free to speak up in the comments. Otherwise, go subscribe and win a chance to get a great book for free!</p>\n'}},function(e,t){e.exports={title:"Orthogonality and CSS in JS",date:"2017-01-03 00:00:00+00:00",layout:"post",path:"/2017/01/03/orthogonality-and-css-in-js/",description:"Separation of concerns in the context of CSS and JavaScript",keywords:"CSS JavaScript Orthogonality Pragmatic Programmer",category:"software-productivity",key:"orthogonality-css-js",readNext:"jest-first,ll-context,callbacks-to-promises",pageViews:"6775",last30pageViews:"119",body:'<p>One of the realities of the constant change in the web development world is that “best practices” are often hotly contested.  One issue that the front end community doesn’t seem to have come to a consensus on yet is how tightly to bundle JavaScript, HTML and CSS in code.  Should they be bundled and managed completely separately?  Kept in different files and imported together into JavaScript component files?  Or can we remove HTML and CSS files entirely and generate everything in JavaScript? This is a discussion that still comes up all the time in my <a href="https://twitter.com/thomasfuchs/status/810885087214637057">twitter</a> <a href="https://twitter.com/TheLarkInn/status/812089065210335232">feed</a>.</p>\n<p>Many new frameworks that encourage a component based architecture (including React, Vue, and Angular2 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>) provide affordances for including HTML and CSS directly in JavaScript, but those solutions are not yet used universally.  Many people are still very happy keeping CSS bundled separately.  I have no idea what the <em>best</em> solution is.  But I am interested in how people talk about the problem.  One major argument I have seen from people advocating both sides is that their preferred approach encourages good “separation of concerns”.</p>\n<div>\n<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">I&#39;m moving from storing my CSS, JS and HTML in different files, to physically putting them on different drives. Keep those concerns separate</p>&mdash; Ben Lesh (@BenLesh) <a href="https://twitter.com/BenLesh/status/812092408519413761">December 23, 2016</a></blockquote>\n</div>\n<p>I’d like to take a deeper look at this and give some vocabulary that can hopefully help anyone working through discussions on how to manage CSS for components.  I’ll focus specifically on CSS since frameworks tend to be more agnostic to how it is blended with JS than they are about HTML, and on components since that is the main context in which people are arguing for blending of css. For this piece, I’ll consider a component to be a set of HTML, CSS, and JavaScript that combine to form a reusable piece of UI <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p>\n<h3>Orthogonality, Cohesion, and Coupling</h3>\n<p><a href="http://amzn.to/2hNzQ0t">The Pragmatic Programmer</a>, one of the best books ever written on Software Engineering, uses the following three terms when talking about “Separation of Concerns”: orthogonality, cohesion, and coupling.</p>\n<p>Orthogonality is the idea that modules should be written in a way that a change in one module should not require changes in any other module.</p>\n<blockquote>\n<p>Two or more things are orthogonal if changes in one do not affect any of the others. In a well-designed system, the database code will be orthogonal to the user interface: you can change the interface without affecting the database, and swap databases without changing the interface.</p>\n<p><strong>— The Pragmatic Programmer</strong></p>\n</blockquote>\n<p>Cohesion is a measure of how well the internal contents of a module relate to each other. A cohesive module is one with a single well defined purpose, where all code in the module is related to that purpose.  A less cohesive module might have multiple purposes, with pieces of code that are completely unrelated to each other.  <a href="https://sites.google.com/site/unclebobconsultingllc/">Robert C. Martin</a> describes this as each module having “a single reason to change”.</p>\n<p>Coupling is a measure of how dependent different modules are on the internal workings of other modules. In a loosely coupled system, any module can be completely rewritten as long as it exposes the same public interface, without any other modules needing to change.  In a tightly coupled system, changing the internal details of one module may require changes in many other modules.</p>\n<p>In the real world most systems are not purely orthogonal, and their modules are likely not 100% cohesive and uncoupled.  But striving for these goals is a good approximation of what many people mean when they talk about <em>separation of concerns</em>.</p>\n<h3>Conways Law</h3>\n<p><a href="http://amzn.to/2hNzQ0t">The Pragmatic Programmer</a> does touch on another application of orthogonality to software engineering:</p>\n<blockquote>\n<p>Have you noticed how some project teams are efficient, with everyone knowing what to do and contributing fully, while the members of other teams are constantly bickering and don’t seem able to get out of each other’s way?</p>\n<p>Often this is an orthogonality issue. When teams are organized with lots of overlap, members are confused about responsibilities. Every change needs a meeting of the entire team, because any one of them might be affected.</p>\n<p>How do you organize teams into groups with well-defined responsibilities and minimal overlap? There’s no simple answer. It depends partly on the project and your analysis of the areas of potential change. It also depends on the people you have available. Our preference is to start by separating infrastructure from application. Each major infrastructure component (database, communications interface, middleware layer, and so on) gets its own subteam. Each obvious division of application functionality is similarly divided. Then we look at the people we have (or plan to have) and adjust the groupings accordingly.</p>\n<p>You can get an informal measure of the orthogonality of a project team’s structure. Simply see how many people need to be involved in discussing each change that is requested. The larger the number, the less orthogonal the group. Clearly, an orthogonal team is more efficient.</p>\n<p><strong>— The Pragmatic Programmer</strong></p>\n</blockquote>\n<p>The idea is that teams work more efficiently when each can work in its own areas without having to be bogged down by using another group (or individuals) code, and only interacting with those modules through a well communicated interface.  This is also known as <a href="https://en.wikipedia.org/wiki/Conway\'s_law">Conway’s Law</a>, which is often used disparagingly but still stands as a true observation about real life code.</p>\n<blockquote>\n<p>organizations which design systems … are constrained to produce designs which are copies of the communication structures of these organizations</p>\n<p><strong>— Conway’s Law</strong></p>\n</blockquote>\n<p>Although it usually isn’t phrased quite so explicitly, I believe Conway’s law is often related to what people mean when they discuss separation of concerns in front end development.</p>\n<h3>Boundaries and Interfaces between CSS and JavaScript</h3>\n<p>Let’s look at 2 examples of how CSS can be structured.  We’ll use a “page view counter” as our example. The element will show the number of users who have viewed the page, and respond to click events by showing a modal with the most popular pages on the site.\nFirst, for a more traditional example, I’ll show a <a href="http://marionettejs.com/">Marionette</a> View, with separate CSS. For a more integrated example, I’ll use a React component.</p>\n<h4>Marionette</h4>\n<pre><code class="language-javascript"><span class="hljs-comment">//view-counter.js</span>\n\n<span class="hljs-keyword">import</span> Mn <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone.marionette\'</span>;\n<span class="hljs-keyword">import</span> template <span class="hljs-keyword">from</span> <span class="hljs-string">\'./view-counter.hbs\'</span>\n<span class="hljs-keyword">import</span> { getPageViews, showModal } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../util/page-views\'</span>;\n\n<span class="hljs-keyword">var</span> ViewCounter = Mn.View.extend({\n\n  template,\n\n  <span class="hljs-attr">className</span>: <span class="hljs-string">\'page-view-counter\'</span>,\n\n  <span class="hljs-attr">ui</span>:  {\n    <span class="hljs-string">\'showPageViewsModal\'</span>: <span class="hljs-string">\'.show-modal-js\'</span>,\n  },\n\n  <span class="hljs-attr">events</span>: {\n    <span class="hljs-string">\'click @ui.showPageViewsModal\'</span>: <span class="hljs-string">\'showPageViewsModal\'</span>,\n  }\n\n  templateContext() {\n      <span class="hljs-keyword">return</span> {\n        <span class="hljs-attr">pageViews</span>: getPageViews(),\n      };\n  },\n\n  showPageViewsModal() {\n    showModal();\n  }\n\n});\n</code></pre>\n<pre><code class="language-hbs"><span class="xml"></span><span class="hljs-comment">{{!view-counter.hbs}}</span><span class="xml">\n\n<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-view-counter__title"</span>&gt;</span> Page Views: <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"page-view-counter__counter show-modal-js"</span>&gt;</span> </span><span class="hljs-template-variable">{{pageViews}}</span><span class="xml"> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n</span></code></pre>\n<pre><code class="language-css">//view-counter.css\n\n.page-view-counter {\n  display: flex;\n}\n\n.page-view-counter__title {\n  font-weight: 700;\n  padding: 3px;\n}\n\n.page-view-counter__counter {\n  padding: 3px;\n}\n</code></pre>\n<h4>React</h4>\n<pre><code class="language-javascript"><span class="hljs-comment">//view-counter.jsx</span>\n<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> { showModal } <span class="hljs-keyword">from</span> <span class="hljs-string">\'../util/page-views\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> PageViewCounter = <span class="hljs-function">(<span class="hljs-params">props</span>) =&gt;</span> {\n    <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span> = <span class="hljs-string">{{display:</span> \'<span class="hljs-attr">flex</span>\'}}&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span> = <span class="hljs-string">{{</span>\n        <span class="hljs-attr">fontWeight:</span> <span class="hljs-attr">700</span>,\n        <span class="hljs-attr">padding:</span> \'<span class="hljs-attr">3px</span>\',\n      }}&gt;</span>\n        Page Views:\n      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">style</span> = <span class="hljs-string">{{padding:</span> \'<span class="hljs-attr">3px</span>\'}}&gt;</span>{this.props.pageViews}<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>\n    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span>\n}\n\n</code></pre>\n<p>The React and Marionette examples have set different module boundaries. In the Marionette example, we have defined 3 modules, split by code type.  Ignoring the leaky abstractions in the Marionette boundaries <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>, we can say we have 3 modules with clear singular purpose (styling, behavior,  structure) that use class names and  <code>templateContext</code> as interfaces.  The handlebars file exposes classes, which the CSS uses to style elements and the JavaScript code uses as attachment points for event handling.  The JavaScript view passes data to the template through templateContext.  In the React code we have defined a single module that exports a component as its only external interface. The module’s single purpose could be defined as “rendering a PageViewCounter”.</p>\n<h3>How do we define module boundaries?</h3>\n<p>If you’re excited to read which of the above examples is the <em>correct</em> module boundary definition, I’m sorry to disappoint you.  It turns out that module boundaries are more of an art than a science.  Let’s consider each of these examples by the criteria we laid out above.</p>\n<p>The Marionette modules are <strong>cohesive</strong>.  Each module is single purpose, with a clear reason why it might change.  The React module is also cohesive, as it describes a single atomic component. However, it has more reasons it might change.  We might change that module because of a change in the look and feel of the site, because of a change in the expected behavior of the click event, or because we’re changing the text inside the component.</p>\n<p>The Marionette modules are not quite <strong>decoupled</strong>.  While this CSS doesn’t nest selectors and we don’t have any explicit dependencies on the HTML structure, it is still written in a way that assumes <code>.page-view-counter__title</code> and <code>.page-view-counter__counter</code> will be direct children of <code>.page-view-counter</code>.  So changing the “internal details” of the Handlebars file by adding an extra element around those children would break the CSS. While the modules are not completely decoupled from each other, they don’t rely on any private details of other modules or global styles and can be used together as a reusable component.  The React module is similarly decoupled from the rest of the system, and as a single module faces no internal coupling issues.</p>\n<p>Both components should be <strong>orthogonal</strong> from the rest of the system, even though the Marionette modules may be less orthogonal internally.  The question of how they meet a Conway’s law style of orthogonality depends on a team.  If your team has designers, and developers separately working on style/structure and behavior, the Marionette version may allow for more efficient division of labor, with communication centering on class based communication.  If you instead have a group of polyglot front end developers who implement mocks from designers across all 3 areas, the React version will instead present a simpler implementation that maps better to your team, with the focus on interfaces across different components.</p>\n<p>In the end decisions like this are an exercise in understanding context and preferences.  What will make your team productive? You can accept the coupling of the first example in order to gain the benefits of small focused modules.  Or you can take the larger scope of the React component in exchange for keeping all information relevant to a component in one place.  Are you making single developers responsible for a set of components?  Or are they responsible for behavior generally, with design handled by someone else? Make the decisions that work for your project.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href="http://amzn.to/2hNzQ0t">The Pragmatic Programmer</a> is a great book. Much of the vocabulary in this post comes from its Chapter 8, but the whole book is worth a read and is highly recommended.</li>\n<li>CSS Tricks has a good look at the <a href="https://css-tricks.com/the-debate-around-do-we-even-need-css-anymore/">pros and cons of CSS in JS</a>.  I focused on theory here, but this is much more hands on about the practical concerns around this debate.</li>\n</ul>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>This is a bit of a generalization.  React provides an abstraction over HTML that replaces hand-written HTML, but doesn’t specify anything for CSS, CSS in JS solutions are simply popular in that community.  Vue and Angular both allow  CSS and HTML to share a file with JS, but CSS can still be handled separately. <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>There are some distinctions about CSS in JS vs importing CSS into JS using webpack that I’m not really dealing with here.  This is a post about how to think about these decisions moreso than the specific options for bundling CSS and JS <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn3" class="footnote-item"><p>The root HTML element in any Marionette component is always defined implicitly in JavaScript, and Handlebars is an expressive templating language that can handle more than structure. <a href="#fnref3" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"Grading Applications on config portability",date:"2017-04-14 09:30:00+00:00",layout:"post",path:"/2017/04/14/grading-applications-on-config-portability/",description:"Which applications make it easy to maintain the same settings on multiple machines",keywords:"configuration portability atom Sublime Text MacOS Vim",category:"tools",readNext:"interesting-atom,learning-vim,vim-files",key:"config-portability",pageViews:"0",last30pageViews:"0",body:'<p>This week I got a new laptop, and for the first time in a while I have separate work and personal computers.  One thing that this has made clear to me is that it is still non-trivial to keep settings and configurations easily up to date between 2 different PCs.</p>\n<p>In my experience there are several levels of “portability” for applications, which are easy to think of as letter grades.</p>\n<h4>A - <em>Seamless</em></h4>\n<p>These applications have built in mechanisms for syncing configs and or data between 2 different environments.  When something is updated on one machine, it is either immediately updated on the other, or easy to pull, without having to remember to update anything or doing any previous setup.</p>\n<h4>B - <em>Easy</em></h4>\n<p>B grade applications are similar to seamless applications, but may have a few more potholes.  Possibly there is some involved setup required to get syncing working initially, or some small chunks of the application configuration don’t sync.</p>\n<h4>C - <em>Workable</em></h4>\n<p>At this point we’ve moved out of the range of easy syncing solutions.  Here it may be possible to import and export settings from a file, without any automatic syncing.  Or there may be a straightforward way to automate the setup, but no declarative representation of the config state.</p>\n<h4>D - <em>Hard</em></h4>\n<p>For some applications there is no clear way to sync or import state, but it is probably still possible through scripting if you’re willing to commit to it.</p>\n<h4>F - <em>Impossible</em></h4>\n<p>Some applications have proprietary settings that can’t be exported or scripted. There is no meaningful way to share settings for these programs.</p>\n<h2>A mixed bag</h2>\n<p>Setting up my new laptop this week, I found that the software I use a lot was all over the map on this scale.  Here are the grades:</p>\n<h4>Atom - <em>B</em></h4>\n<img src="/posts/images/portability/atom.jpg" alt ="Atom Logo">\n<p><a href="https://atom.io/">Atom</a> doesn’t have native syncing persay (though most configs are in a ~/.atom folder that can possibly be synced with git).  But it has a very nice <a href="https://github.com/atom-community/sync-settings">sync-settings</a> plugin that uses gists to sync settings across multiple machines.  It loses points due to a little bit of upfront pain (when setting up a new machine you need to either create a new gist or find your old one, and you need to generate github auth keys for each instance), but gains them back with a very nice set of options to selectively restore or choose when to backup, and painless support for all of Atom’s 3rd party plugiuns</p>\n<h4>Sublime Text - <em>B+</em></h4>\n<p><img src="/posts/images/portability/sublime.png" alt="Sublime Logo"></p>\n<p><a href="https://www.sublimetext.com/3">Sublime Text</a> saves all of its configurations as JSON, so its pretty easy to move them over.  It loses a few points though for making you figure out how to sync them, and a few more points for sticking user configs by default in the <code>~/Library/Application Support/</code> directory, where it is a bit more difficult to sync using things like git and dotfiles.</p>\n<h4>Command Line programs - <em>A-</em></h4>\n<div class="img-group">\n  <image alt="Vim logo" src="/posts/images/portability/vim.png">\n  <image alt="fish logo" src="/posts/images/portability/fish.png">\n</div>\n<div class="img-group">\n  <image alt="git logo" src="/posts/images/portability/git.png">\n</div>\n<p>Command line programs like Vim, Ack, bash/zsh/fish, and git all nail the idea of declarative configuration files that are stored in a common place.  They fall short of a pure A since they don’t provide a sync solution themselves (that would be very non-unixy), but since it is easy to set up <a href="https://dotfiles.github.io/">dotfile repos</a> to sync and backup these settings, they qualify for a strong A-.</p>\n<h4>iTerm2 - <em>C</em></h4>\n<p><img src="/posts/images/portability/iterm.png" alt="iterm2 Logo"></p>\n<p><a href="https://www.iterm2.com/">iterm2</a> is probably the most popular terminal replacement on the mac.  It has tons of settings that you normally edit through a GUI menu.  It does allow you to export those settings, and import them on another machine.  So you need to have access to the original file to generate a snapshot at any given time and need a way to transfer the file(s), but otherwise this is still pretty workable.</p>\n<h4>Hyper - <em>A-</em></h4>\n<p><img src="/posts/images/portability/hyper.gif" alt="hyper Logo"></p>\n<p><a href="https://hyper.is/">Hyper</a> is a newer <a href="https://electron.atom.io/">Electron</a>-based terminal application for OSX.  Like Sublime Text, it defaults to offering a GUI interface into text based configuration files.  Unlike Sublime Text, it stores that file and its plugin files in the users home directory where they can easily be included in a dotfile repo.</p>\n<h4>MacOS - <em>D-</em></h4>\n<p><img src="/posts/images/portability/macos.jpg" alt="macOS sierra Logo"></p>\n<p>Unlike most of the applications I run on it, MacOS is extremely unfriendly to syncing configurations.  There are a few settings I want the same on all my laptops.  Touchpad scrolling should be in the “unnatural”<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> direction, keys should repeat when held, and caps log should be disabled/mapped to control.  There is a set of apps that I would always want to have installed.  There is no declarative way to configure this, or sync it across computers.  Apple’s preferred strategy seems to be having folks use time machine backups, which is great for setting up a new computer for the same purpose as an old one when it is being replaced, but unhelpful when 2 laptops are being used by the same person for different purposes.  It is possible to script the setup of a new laptop with scripts like <a href="https://github.com/mathiasbynens/dotfiles/blob/master/.macos">this one</a> but its very involved and when you update a setting the “normal MacOS way”, its not always clear how you would add that setting to a script.  Plus a “from scratch” script won’t help keep 2 machines aligned as their configs diverge over time.</p>\n<h4>Cloud Services - <em>A</em></h4>\n<div class="img-group">\n  <image alt="dropbox" src="/posts/images/portability/dropbox.png">\n  <image alt="bear logo" src="/posts/images/portability/bear.png">\n</div>\n<p>Unsurprisingly, the one class of software that really nails this experience is cloud software.  For services like Dropbox, Bear, Evernote, Slack, email &amp; calendar clients, etc, most if not all settings and data is stored on servers somewhere else, so getting a new machine up to date and staying in sync over time is just a matter of entering a password.  There are reasons to dislike cloud services, but when moving to a new machine, they’re a thing of beauty.</p>\n<h2>Takeaways</h2>\n<p>If you are going to be using 2 computers for different purposes as a developer, take the time to setup a good dotfiles repo that contains the configs for the command line programs and editors you use.  These days if you do that, pretty much everything else but the operating system will come right along.</p>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>Honestly the wording around that feature is pretty insulting. <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"Productive JavaScript Development",date:"2015-11-25 14:43:46+00:00",layout:"post",path:"/2015/11/25/productive-javascript-development",category:"software-productivity",description:"An examination of what makes JavaScript development productive",key:"productive-js-dev",pageViews:"2572",last30pageViews:"48",body:'<p>I’ve been thinking a lot lately about how we as a JavaScript community can enable more productive JavaScript development.  Most of the major JavaScript libraries were created or popularized to further a theory of how we can be more productive.  jQuery emerged when the biggest productivity challenge for web developers was the incompatible implementations of JavaScript and browser APIs in different browsers.  It largely solved that problem.  Since then, Backbone advocates have pushed for greater productivity through libraries with minimal abstraction where users can understand the source code, Ember has created an ecosystem around the idea that “shared solutions” lead to greater productivity, Angular aimed to make developers (and designers) more productive by adding more power to concepts that were already familiar to them, and React is trying to improve productivity by simplifying the programming model around interfaces.  Meanwhile, tangential to the big frameworks, there has been work to enable more productive development through transpile-to-JavaScript languages (CoffeeScript, TypeScript, Elm, ClojureScript etc), replacing JavaScript on the web period (Dart, WebAssembly, ASM.js), and improving the core JavaScript language while allowing developers to use new features early (ES6 and beyond, as well as Babel).  There’s also work to improve tooling around JavaScript with projects like <a href="http://ternjs.net/">Tern.js</a>, <a href="https://github.com/gaearon/react-hot-loader">Time Machine/React Hot Loader</a>, and continued improvements to Chrome and Firefox developer tools (along with Framework specific developer tools). So there’s no shortage of work being done in this area.  But let’s pull out for a moment.  What are the big picture things that affect productivity?</p>\n<p>Most of the time productivity tools are focused on one of 6 areas.  They make it easier to learn concepts,  easier to write code, easier to read code, easier to architect applications, easier to maintain applications, or easier to debug applications. Here are some examples of each</p>\n<h4>Easy To Learn</h4>\n<p>Angular and Backbone both try to improve programmer productivity by being easy to learn, each in different ways.  Angular puts much of its view logic inside HTML, a medium that many server-side developers and designers are already familiar with.  Therefore it’s a reduced learning curve than something like React, where the UI tends to be more spread across files and is mixed with JavaScript logic <sup id="fnref:1"><a href="#fn:1">1</a></sup>.  Angular also provides extensive documentation, which helps programmers come up to speed faster.</p>\n<p>Backbone on the other hand, attempts to be easy to learn in two ways.  First, there just isn’t that much to learn.  Backbone is a small library with only 6 core concepts (Models, Collections, Views, Events, and Router) each of which should be familiar to developers coming to it from other UI focused frameworks.  That simplicity reduces the load on new users.  At the same time Backbone strives to have libary source code that is both short and readable.  It’s quite possible to read the code for the whole library in under an hour, and the core concepts are obvious when looking through the code.</p>\n<h4>Easy to Write</h4>\n<p>Ember.js aims to make it easy to write application code in at least 2 ways.  First it provides <a href="http://www.ember-cli.com/">tooling</a> to help generate the boilerplate necessary for an ember application.  You can give ember-cli a model name and it will generate the file for that model in the correct place.  In addition Ember abstracts away many of the connections between classes so that you can load the correct files simply using naming conventions, resulting in less code.</p>\n<p>The recent updates to the JavaScript language are about much more than just making it easier to write JavaScript, but several of the features are focused on providing cleaner syntax for common idioms.  Arrow functions in particular allow for maintaining the outer scope of a function in a clean way, when previously it required jumping through hoops that were easy to mess up.</p>\n<p>Redux and React Hot loader are an attempt to develop a programming idiom that allows for drastically reduced latency between making a change and seeing a result.  A React app using redux and a hot loader can be updated instantly without losing state and cycle backwards and forward through state updates.  Lower latency between writing code and seeing the results makes it much easier to iterate quickly towards good code.</p>\n<h4>Easy to Read</h4>\n<p>One of the biggest gains provided by React is an increase in the readability of code by combining all of the elements of a component (JavaScript, HTML and in some cases CSS) into a single file where the component can be read as a coherent whole without flipping through code.</p>\n<p>CoffeeScript is an attempt to strip out the unnecessary syntax bloat of JavaScript and focus on the pure logic.  Whether it succeeds is a totally different question, but it’s a great example of attempting to satisfy this side of the productivity problem by reducing the distractions in code.</p>\n<p>Type annotation tools like TypeScript and Flow also aim to increase code readability, but not by clearing out bloat (annotations can actually make the code feel more crowded and less readable at first).  Instead they add additional information to the code, making the structure and expectations of the code more apparent to a reader.</p>\n<h4>Easy to Architect</h4>\n<p>Ember really shines when it comes to making it easy to architect apps.  By providing clear guidance on how to structure apps, it can increase productivity by reducing bike-shedding.  In Ember every state of the UI is tied to a URL and each route is tied to controllers that display components.  Communication between components happens with actions and data is managed by Ember Data.  Thats a reasonable architecture thats general enough to work for most large web applications (Embers target).</p>\n<p>Unfortunately examples of innovation in this area are much more sparse than the others here, probably because it’s hard to demonstrate in a todo app.  There’s been a recent spate of interest in application architecture from all of the Flux implementations that have popped up for React apps.  I’ve also seen interest in the architecture model of <a href="http://elm-lang.org/">Elm</a>.  But most of the major MVC frameworks have much less community agreement on architecture than they do on smaller scoped issues.</p>\n<h4>Easy to Maintain</h4>\n<p>There are a lot of technologies around JavaScript that promise to make your code more maintainable.  Module loaders like requireJS, browserify and webpack, linters like ESLint and JSHint, type checkers like TypeScript and Flow, and test runners like Mocha and Karma all provide tooling around maintainability.</p>\n<p>At the framework Backbone addresses the idea of maintainability by keeping small and flexible enough to remain usable as requirements change.  React deals with it by simplifying the programming model enough that its easier for new developers to see whats going on.  And Ember deals with it by maintaining a disciplined process for continually improving the framework to “keep up with the web” without leaving developers behind.</p>\n<h4>Easy To Debug</h4>\n<p>In recent years a lot of work has gone into improving developer tools for debugging JavaScript. This has happened at 3 levels.  First browser vendors, especially Google and Mozilla,  have made a huge investment in improving the developer tools that ship with browsers.  It’s now possible to identify many errors quickly that would have been mere guesswork before.  Secondly, frameworks have worked on building their own developer tools.  React and Ember both have incredibly powerful debugging tools with first class support from the framework team.  Marionette (a framework for Backbone apps) has a similarly rich debugging tool, and Angular also has tools for debugging.  Finally, linters and transpilers are also helping to catch some classes of errors at compile time rather than waiting to discover them at run-time.</p>\n<p>Other than tools though, Frameworks can have some features that make them easier or harder to debug.  React and Angular both make a big deal of being easy to write tests for.  In Angular this is true because of their dependency injection system.  In React this works out because React components are basically pure functions that take state and properties and return DOM.  Pure functions are easy to test, especially compared to traditional UIs that are tied to the global mutable DOM. Backbone also contributes to easier debugging by presenting a relatively straightforward and readable source that developers can trace through without becoming baffled by “library mystery meat”.</p>\n<h3>Choices, Choices</h3>\n<p>When picking a toolset in JavaScript it’s helpful to think about all 6 of the above areas.  Any library or framework that has gotten past the minimum threshold of solving a problem will claim to help you in at least one of these areas.  But a useful comparison will run across all six.  What do you think are the best tools for a truly productive workflow in the JavaScript community today?</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Not saying that this is the best way to make things easy to learn, just that it is a goal.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'
}},function(e,t){e.exports={title:"Quick Tip: Take advantage of lodash collections",date:"2016-06-26 21:27:55+00:00",layout:"post",path:"/2016/06/26/quick-tip-take-advantage-of-lodash-collections-2",description:"A quick look at the benefits of using lodash collection methods",keywords:"lodash javascript collections arrays",category:"frameworks",pageViews:"557",last30pageViews:"8",body:'<p>One of the more frustrating things about using JavaScript in the browser is the number of different collection types that you need to deal with.  When using native APIs and 3rd party libraries, it’s easy to encounter 3 or more different types of collections, including <a href="https://developer.mozilla.org/en-US/docs/Web/API/NodeList">NodeLists</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection">HTMLCollections</a>, <a href="https://learn.jquery.com/using-jquery-core/jquery-object/">jQuery Objects</a>, and plain arrays.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">\'div\'</span>)\na instanceOf NodeList <span class="hljs-comment">//true</span>\n\n<span class="hljs-keyword">let</span> b = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'div\'</span>)\nb instanceOf HTMLCollection <span class="hljs-comment">//true</span>\n\n<span class="hljs-keyword">let</span> c = $(<span class="hljs-string">\'div\'</span>)\nc instanceOf jQuery <span class="hljs-comment">// true</span>\n\n<span class="hljs-keyword">let</span> d = [<span class="hljs-string">\'button1\'</span>, <span class="hljs-string">\'button2\'</span>, <span class="hljs-string">\'button3\'</span>].map(<span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> <span class="hljs-built_in">document</span>.getElementById(id));\nd instance <span class="hljs-keyword">of</span> <span class="hljs-built_in">Array</span> <span class="hljs-comment">//true</span>\n</code></pre>\n<p>This ends up mattering in practice because not every function that is available on Array is available on NodeList, HTMLCollections, and jQuery objects.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> ids = <span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">\'div\'</span>).map(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.id)\n<span class="hljs-comment">// Uncaught TypeError: document.querySelectorAll(...).map is not a function</span>\n\nids = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'div\'</span>).map(<span class="hljs-function"><span class="hljs-params">el</span> =&gt;</span> el.id)\n<span class="hljs-comment">// Uncaught TypeError: document.getElementsByTagName(...).map is not a function</span>\n\n<span class="hljs-keyword">let</span> numDivs = $(<span class="hljs-string">\'div\'</span>).reduce(<span class="hljs-function">(<span class="hljs-params">count, el</span>) =&gt;</span> count + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);\n<span class="hljs-comment">// Uncaught TypeError: $(...).reduce is not a function</span>\n</code></pre>\n<p>Since we can’t use native array methods on these alternate collections, we end up having to be very careful about knowing where we’ve retrieved data from, and how to convert those collections or how to work around their limitations.</p>\n<p>It’s useful to know about these distinctions, but in practice dealing with them is a pain.  One of the nice properties of <a href="https://lodash.com/docs">lodash</a> is that it abstracts over these incompatibilities.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> ids = _.map(<span class="hljs-built_in">document</span>.querySelectorAll(<span class="hljs-string">\'div\'</span>), el =&gt; el.id);\n<span class="hljs-comment">// [\'container\', \'left-box\', \'right-box\']</span>\n\nids = _.map(<span class="hljs-built_in">document</span>.getElementssByTagName(<span class="hljs-string">\'div\'</span>), el =&gt; el.id);\n<span class="hljs-comment">// [\'container\', \'left-box\', \'right-box\']</span>\n\n<span class="hljs-keyword">let</span> numDivs = _.reduce($(<span class="hljs-string">\'div\'</span>), (count, el) =&gt; count + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>));\n<span class="hljs-comment">// 3</span>\n</code></pre>\n<p>For methods that iterate over a collection lodash treats all array-like objects (essentially anything with a length property) the same and iterates over their numerical properties from 0 to length-1.  This provides a nice consistency when working with DOM APIs and removes the mental overhead from managing their inconsistencies.</p>\n'}},function(e,t){e.exports={title:"Guillermo Rauch on ECMAScript 6",date:"2015-02-22 21:38:46+00:00",layout:"post",path:"/2015/02/22/rauchg-on-es6",category:"javascript",description:"A link-log of Guillermo Rauch's look at ES6",key:"rauchg-on-es6",pageViews:"335",last30pageViews:"8",body:'<blockquote>\n<p>ECMAScript 6, henceforth ES6 and formerly ES.next, is the latest version of the specification. As of August 2014 no new features are being discussed, but details and edge cases are still being sorted out. It’s expected to be completed and published mid-2015.</p>\n</blockquote>\n<blockquote>\n<p>Adopting ES6 has simultaneously resulted in increased productivity (by making my code more succinct) and eliminated entire classes of bugs by addressing common JavaScript gotchas.</p>\n</blockquote>\n<blockquote>\n<p>More importantly, however, it’s reaffirmed my belief in an evolutionary approach towards language and software design as opposed to clean-slate recreation.</p>\n</blockquote>\n<p><a href="http://rauchg.com/2015/ecmascript-6/">http://rauchg.com/2015/ecmascript-6/</a></p>\n<p>A really great look at the highlights of ES6 in practice.  I’ve been working heavily with ES6 for the last month or so, and agree with him on the highlights.  The standardized module syntax (which I transpile to AMD modules), Promises and destructuring particularly stand out as useful syntax that produces better code than what I had before.  I also enjoy the <code>=&gt;</code> syntax, though I wish the language authors hadn’t combined a syntactic convenience (shorter syntax) with a semantic difference (fat arrow functions are bound to the current context by default, normal functions are not).</p>\n<p>Also of note is his repeated oblique references to <a href="https://babeljs.io/">Babel</a> (formerly 6to5).  Since I wrote my post on  <a href="http://benmccormick.org/2014/11/24/alternative-javascript/">Alternative JavaScript</a> 2 months ago, Babel has clearly emerged as the best way to use JavaScript features that are not yet widely supported today.  It integrates with a wide variety of tools, is reasonably performant speed-wise, and produces roughly 1-1 output, Coffeescript style.  Highly recommended for anyone looking to get started using or learning about new JavaScript features.</p>\n'}},function(e,t){e.exports={title:"Readable code: Know your audience ",date:"2016-12-12 04:00:00+00:00",layout:"post",path:"/2016/12/11/readable-code-audience",description:"A quick observation about what it means to write readable code",keywords:"readable code python",category:"software-productivity",key:"readable-code",pageViews:"254",last30pageViews:"19",body:'<p>A coworker asked me last week if there was a better way to write the following python code:</p>\n<pre><code class="language-python">self.custom_attributes = {\n  x.split(<span class="hljs-string">\':\'</span>)[<span class="hljs-number">0</span>]: x.split(<span class="hljs-string">\':\'</span>)[<span class="hljs-number">1</span>]\n  <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> a.split(<span class="hljs-string">\',\'</span>)\n}\n</code></pre>\n<p>I semi-jokingly replied that there were 3 better ways:</p>\n<h5>For people who like comprehensions</h5>\n<pre><code class="language-python">self.custom_attributes = {\n  key: value\n  <span class="hljs-keyword">for</span> [key, value] <span class="hljs-keyword">in</span> [entry.split(<span class="hljs-string">\':\'</span>) <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> a.split(<span class="hljs-string">\',\'</span>)]\n}\n</code></pre>\n<h5>For people who like functions</h5>\n<pre><code class="language-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">build_obj</span><span class="hljs-params">(acc, val)</span>:</span>\n   [key, value] = val.split(<span class="hljs-string">\':\'</span>)\n   acc[key] = value\n   <span class="hljs-keyword">return</span> acc\nself.custom_attributes = reduce(build_obj, a.split(<span class="hljs-string">\',\'</span>), {})\n</code></pre>\n<h4>For people who like other folks to be able to read their code</h4>\n<pre><code class="language-python"><span class="hljs-comment"># create a hash of custom attributes</span>\nself.custom_attributes = {}\n<span class="hljs-comment"># get the entries from splitting the input string</span>\nentries = a.split(<span class="hljs-string">\',\'</span>)\n<span class="hljs-comment"># for each entry split the key value pairs and add them to the hash</span>\n<span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> entries:\n   [key, value] = entry.split(<span class="hljs-string">\':\'</span>)\n   self.custom_attributes[key] = value\n</code></pre>\n<p>The joke of course is that it doesn’t really matter what the author of the code considers the best way to write it.  Like writing an essay or persuasive speech, it is much more important to consider the audience, and what style will work best for them.  Most code will eventually be read by other people, even if that is simply a future version of the original author who has been stripped of context by time <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.</p>\n<p>If my coworker is confident that his code will be read in the future by confident Python programmers who understand object comprehensions, then he could go with the first example, with its heavy use of python idioms.  If he thought it was more likely that somebody like me who is used to JavaScript idioms, he might consider the less idiomatic python from the second example that matched his teammates.  If he didn’t know who would read the code in the future, he might go with the more explicit and difficult to misinterpret version 3, and possibly tuck it away within a named function so that the main code flow could remain uninterrupted.</p>\n<pre><code class="language-python">self.custom_attributes = parse_entry_string(a)\n\n<span class="hljs-comment"># ... elsewhere ...</span>\n\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">parse_entry_string</span> <span class="hljs-params">(entry_string)</span>:</span>\n    attributes = {}\n    <span class="hljs-comment"># get the entries from splitting the input string</span>\n    entries = a.split(<span class="hljs-string">\',\'</span>)\n    <span class="hljs-comment"># for each entry split the key value pairs and add them to the hash</span>\n    <span class="hljs-keyword">for</span> entry <span class="hljs-keyword">in</span> entries:\n       [key, value] = entry.split(<span class="hljs-string">\':\'</span>)[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]\n       attributes[key] = value\n    <span class="hljs-keyword">return</span> attributes\n</code></pre>\n<p>Of course once the functionality is separated out into a function, it matters a lot less how it is implemented since the only time somebody will need to read it is when they are interested in that specific functionality and can invest the time to understand the code.  The well named function replaces the need for understanding everything when people browse through the code.  This is extremely important in larger code bases, since data often flows through many lines of code.  The more of it that can be usefully (and accurately) abstracted away for a reader, the easier the code base is to debug.</p>\n<p>So quick tip version:</p>\n<ol>\n<li>Think about the audience of the code you’re writing</li>\n<li>Naming functions well limits the needs to make implementation details readable for everybody. It can also make your program flow easier to follow.</li>\n</ol>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>In my experience, it usually only takes about a week for me to look back at my old code and wonder what maniac wrote it and what he could have possibly been thinking <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"Reusable Code Patterns",date:"2016-01-08 05:22:29+00:00",layout:"post",path:"/2016/01/08/reusable-code-patterns",category:"software-productivity",description:"Practical tips on reusing existing code",readNext:"readable-code,ll-context,productive-js-dev",pageViews:"6261",last30pageViews:"35",body:'<p>One of the most repeated mantras in all of software is the term “Don’t Repeat Yourself”. The phrase was first popularized by the book <a href="http://www.amazon.com/Pragmatic-Programmer-Journeyman-Master/dp/020161622X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1452230454&amp;sr=1-1&amp;keywords=pragmatic+programmer">The Pragmatic Programmer</a>, with it’s call for DRY software.  At it’s core, DRY is all about finding a way to keep logic related to a particular function in one place, so that changes for new functionality can be limited in scope and have predictable consistent effects.  Software developers are usually very good at knowing that repetition is bad, but I’ve seen that we can be less great at communicating about our options to avoid it, or discussing the tradeoffs between different approaches.  This post is going to look at a specific situation that programmers encounter all the time, and give a framework for talking about how to handle it, focusing on positive options rather than simply what we want to avoid.</p>\n<p>The high level situation I want to talk about is when a programmer encounters a problem for which they have an existing piece of code that mostly works as a solution, but doesn’t quite meet all the requirements.  Some examples would include:</p>\n<ul>\n<li>a screen that is required to show a user avatar, but at a different size than other avatars displayed in the interface (all of which use an existing avatar ui widget)</li>\n<li>a program that already has an API to get friends data from a users Facebook account, and needs to add a second API to get similar data from their Twitter account</li>\n<li>a program that needs a  function that takes an integer or a string and displays it on the screen, when it already has a function that displays data but only accepts strings</li>\n</ul>\n<p>Some of those are simple, some are more complex, and you might already be thinking about how you’d handle each case.  The point isn’t so much the exact example so much as having a way to communicate what the options are.  I’m going to lay out 6 different patterns for handling situations where you’re required to implement something similar but not exactly the same as something that already exists.  I will not be endorsing a particular strategy as correct, since they all have their place.  Instead I’ll be discussing the benefits and risks of each, and hopefully giving a good framework for thinking about and discussing these tradeoffs in the future.</p>\n<h3>Using the existing component as is</h3>\n<h4>Pros</h4>\n<ul>\n<li>Least Effort</li>\n<li>Encourages consistency and simplicity</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Often not allowed</li>\n<li>May be compromising user experience for developer expediency</li>\n</ul>\n<p>The first option is the simplest.  If you have a component that is similar to what is required but doesn’t quite match the requirements, change the requirements.  This can make sense in situations like the avatar example above, when you have a UI element or control that you use everywhere in the system.  It may make sense to use that same element in a new place for the benefit of consistency and user knowledge, rather than inventing a new UI element for the page.  This obviously requires an environment where developer input is welcome in the design and requirements process.</p>\n<p>Developers should be cautious with this though.  If using an existing component removes unecessary complexity from the design and saves time, it’s a win-win.  But if the design was a good one, and users lose out on functionality through developer “efficiency”, it can hurt the product.  Even worse, decisions like that usually end up coming back round again, as the need that was ignored often will pop up in new situations.</p>\n<h3>Copy and Paste</h3>\n<h4>Pros</h4>\n<ul>\n<li>Simple</li>\n<li>Keeps existing code stable in the short term</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Adds to maintenance burden</li>\n<li>Decreases readability/understandability of the code base for other developers</li>\n</ul>\n<p>This is the approach that says “To Hell with DRY”, and takes some existing code, creates a copy of it, and then partially modifies it to suit the current situation.  This would be analogous to taking the User avatar code listed above, creating a copy of it and simply modifying it to be bigger.  That might look like this in CSS:</p>\n<pre><code><span class="hljs-selector-class">.user-avatar</span> {\n    <span class="hljs-attribute">height</span>: <span class="hljs-number">30px</span>;\n    <span class="hljs-attribute">width</span>: <span class="hljs-number">30px</span>;\n    <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;\n    <span class="hljs-attribute">float</span>: left;\n    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span>;\n}\n\n<span class="hljs-selector-class">.user-avatar-big</span> {\n    <span class="hljs-attribute">height</span>: <span class="hljs-number">50px</span>;\n    <span class="hljs-attribute">width</span>: <span class="hljs-number">50px</span>;\n    <span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span>;\n    <span class="hljs-attribute">float</span>: left;\n    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">10px</span>;\n}\n</code></pre>\n<p>Everything now works exactly the way we want it.  The problem comes when somebody wants to change the floats on avatar elements, or add a border to all of them now.  Instead of being able to make one change, they have to be aware of both avatar versions, and modify both.</p>\n<p>Note that copy and paste isn’t always bad.  Often there are very good reasons for not modifying existing code.  It may be code that you don’t control (for instance forking an open source project that is not actively maintained to add a feature that you want), or code that is from another project (or from a legacy portion of the current project that is handled as a different code base).  DRY is not crazy advice though, and if you’re operating within a single codebase you control, this is usually not the best option.</p>\n<h3>Classical Inheritance</h3>\n<h4>Pros</h4>\n<ul>\n<li>Well understood by most programmers, especially those with an academic background</li>\n<li>fits very well when you have multiple things that are variations of a type, with more similarities than differences</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Often used as a silver bullet for all situations</li>\n<li>Not suitable for situations where the objects are more different than similar, or when they are 2 different things at the core with shared behavior</li>\n</ul>\n<p>If you ask a recent Computer Science graduate what the best way to solve the problem of similar behavior across objects is, 99% of them will immediately say <a href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">inheritance</a>.  The “conventional wisdom” that’s taught in most introductory computer science courses is that Object Oriented Programming is the best way to structure programs, and that Object Oriented programming is primarily about inheritance.  Both statements are shaky, but the prevalence of this mindset means that many developers come out of school and look at every problem they see as a nail to hit with their inheritance hammer (this is certainly something I was guilty of when I first graduated).</p>\n<p>Inheritance isn’t bad.  It’s definitely a tool you want in your toolbox, and shallow hierarchies of objects that inherit from a base class are a great pattern.  90% of “Frameworks” out there (Backbone, React, django, Rails, etc) use some form of inheritance as a way of structuring how users interact with the framework.  But when it is your only tool, things get ugly quickly.</p>\n<p>Inheritance is a bad choice when 2 objects are mostly different.  Inheritance forces objects to share an API, and implies that objects can be used interchangeably.  If the objects aren’t really interchangeable, this can lead to jumping through hoops to maintain a shared API, with a small base class being stretched between 2 or more verbose child classes.  Interfaces especially tend to be bad places to use inheritance, as they tend to require small tweaks and differences when used in different places that aren’t friendly to being passed as configuration properties or over-ridden methods.</p>\n<h3>Configuration</h3>\n<h4>Pros</h4>\n<ul>\n<li>Keeps everything in a single place</li>\n<li>Declarative configuration can be easier to read and update than a bunch of logic</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Can get out of hand fast as use cases increase</li>\n<li>Often unclear what defaults should be, bad defaults make common use cases verbose</li>\n</ul>\n<p>We can define separate behaviors for 2 similar things by using a single configurable object. This maximizes code re-use since everything is in one place, and provides an easy to read abstraction over the code for quick changes later.  However, like inheritance it works much better for similar objects with small differences rather than different objects with shared behaviors, and can lead to “configuration creep” when the differences slowly grow, creating a monster configuration and spaghetti code that tries to handle all of the possible configuration options it could be passed.</p>\n<p>A big design point with configuration based strategies is figuring out good defaults.  If an object is designed so that the default case requires minimal to no configuration, and only true edge cases require a lot of configuration, configuration based objects and APIs can be very pleasant to deal with.  But objects with bad or no defaults that require common cases to include extensive configuration eventually lead to bloated projects that are very difficult to debug.</p>\n<h3>Mixins</h3>\n<h4>Pros</h4>\n<ul>\n<li>Share individual behaviors or attributes well</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Can break down when the behavior or attribute requires significant knowledge about the object</li>\n</ul>\n<p>In contrast to inheritance and configuration, <a href="https://en.wikipedia.org/wiki/Mixin">mixins</a> work well when objects are significantly different, but share similar behaviors. <code>Mixins</code> are the strategy of adding individual methods or properties to an object without implying any relationship between objects that use it.  Mixins are great when used to add a standalone behavior to different objects.  They avoid the problems of inheritance and don’t lock an object into a single API.</p>\n<p>That said, it can often be hard to construct good mixins, since many behaviors require knowledge of the object that is performing the behavior, such as making assumptions about the structure of the objects data.  This either requires the objects implementing the mixin to obey rules about how they’re structured, similar to inheritance, involves offloading significant complexity into the mixin to allow it to handle different formats (making it a potential source of bugs), or it risks naming conflicts if the mixin tries to implement the data storage itself.</p>\n<h3>Composition</h3>\n<h4>Pros</h4>\n<ul>\n<li>Incredibly flexible for handling subtly different behaviors</li>\n</ul>\n<h4>Cons</h4>\n<ul>\n<li>Can ramp up complexity, making it difficult to see the whole system</li>\n<li>May end up pushing code re-use problems downwards instead of solving them, leading to many small similar modules</li>\n</ul>\n<p>Often when faced with 2 similar objects or functions, the best solution is to create more objects or functions.  Composition is trendy these days.  On the server side, you have people talking up micro-services and programs composed of small single-purpose modules.  On the client, React is the hottest library around.  The idea is appealing.  Instead of having one big complicated “thing”, I can create a few smaller “things” that I can wrap my mind around, and then get them to work together.  When this works well its great.  React for example, makes testing UIs much easier, since you can unit test individual components in a reliable way.  The problem is that it often moves complexity out of the components and into the architecture.  The hard part becomes figuring out how components fit together, designing interfaces and deciding what should be going where.  Although any individual piece of code may be comprehensible and simple, the system at large is harder to visualize and understand.</p>\n<p>Like mixins, composition often works best when you have 2 or more fairly different “things” that share behavior.  The composition mindset is to treat code like lego blocks that you can snap together in different configurations as needed.  When done well, it allows for useful abstraction, letting developers create complex components out of meaningful sub-components without having to know all the details of the subcomponents.  When done poorly, it can lead to a fractured project with many undocumented dependencies between components.</p>\n<h2>All Together Now</h2>\n<p>The great thing about these strategies is that none of them is the <strong>right answer</strong>.  All of them have their place, and can even be combined.  At my work we’ve developed code for describing workflows.  The workflows are described using an object that takes a configuration and uses it to layout a series of widgets.  Each widget inherits from a framework, and many of them use mixins to share behavior.  Most of the widgets are composed of several smaller views, and as developers we have pushed back against designs several times in order to allow greater widget re-use.  Each time we need to create a new automator we’ve started by copy and pasting some of the configuration boilerplate (which hopefully we’ll reduce going forward by providing better default behavior as we understand the requirements better). This is one feature of a large software product, and it uses all 6 reuse patterns I’ve described to perform its purpose.</p>\n<p>In the end, what I hope you as a reader get out of this is not that one strategy is good or bad.  Instead I want to provide a way of thinking about the choices around re-use, so that we as developers can talk intelligently about the options and tradeoffs and make the right choice for a given situation.</p>\n'}},function(e,t){e.exports={title:"Revertible Observables in Knockout",date:"2013-05-07 20:05:00+00:00",layout:"post",path:"/2013/05/07/revertible-observables-in-knockout",description:"Building an observable with simple undo functionality",category:"frameworks",key:"revertible-observables",pageViews:"3131",last30pageViews:"44",body:'<p>Last week I was looking for a way to use KnockoutJS on a configuration menu that required the user to be able to cancel or accept their input after filling out the menu.</p>\n<p>Initially I was just copying the initial data and refilling my data model manually on cancel.  I wasn’t satisfied with that solution though.  It didn’t seem like it would scale well if the menu got more complicated, and it lacked the elegance and frictionless nature of most knockout data management.</p>\n<p>After some searching I found <a href="http://www.knockmeout.net/2011/03/guard-your-model-accept-or-cancel-edits.html">Ryan Niemeyer’s Protected Observable example</a>, and it initially seemed like exactly what I wanted, a way to only persist changes to the view model if they were explicitly confirmed.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//knockout-protected.js</span>\n<span class="hljs-comment">//https://gist.github.com/ben336/5537138#file-knockout-protected-js</span>\n\n<span class="hljs-comment">//wrapper to an observable that requires accept/cancel</span>\nko.protectedObservable = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">initialValue</span>) </span>{\n    <span class="hljs-comment">//private variables</span>\n    <span class="hljs-keyword">var</span> _actualValue = ko.observable(initialValue),\n        _tempValue = initialValue;\n\n    <span class="hljs-comment">//computed observable that we will return</span>\n    <span class="hljs-keyword">var</span> result = ko.computed({\n        <span class="hljs-comment">//always return the actual value</span>\n        read: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n           <span class="hljs-keyword">return</span> _actualValue();\n        },\n        <span class="hljs-comment">//stored in a temporary spot until commit</span>\n        write: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>) </span>{\n             _tempValue = newValue;\n        }\n    });\n\n    <span class="hljs-comment">//if different, commit temp value</span>\n    result.commit = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">if</span> (_tempValue !== _actualValue()) {\n             _actualValue(_tempValue);\n        }\n    };\n\n    <span class="hljs-comment">//force subscribers to take original</span>\n    result.reset = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        _actualValue.valueHasMutated();\n        _tempValue = _actualValue();   <span class="hljs-comment">//reset temp value</span>\n    };\n\n    <span class="hljs-keyword">return</span> result;\n};\n\n</code></pre>\n<p>There was a problem with this approach though.  Ryan’s model saves the update to a temporary value and then moves it into an observable if the result is committed.  That works great for simple models and mostly behaves well if the user cancels out of the edit screen without committing or resetting. But it breaks down if you have another computed observable that depends on the value of the protected observable.  In my case I had an output that I wanted to show dynamically changing based on the input allowing experimentation.  Here’s a simplified example using a protected observable:</p>\n<iframe width="100%" height="300" src="http://jsfiddle.net/tc299/4/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n<p>As you can see, the tables field doesn’t update until you confirm the entry. Ideally though we’d like it to update as the user changes their guest number, so they can see the effect on cost and space used before they confirm a change in guests.  We want to do this while still preserving the users abilities to cancel changes if they don’t like the results though.  So how to we do this?  We make a small change to the default value returned by the protected observable.  Here’s what I’m calling a Revertible Observable:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">/*\nknockout-revertible.js\nhttps://gist.github.com/ben336/5537115#file-knockout-revertible-js\n*/</span>\n\n <span class="hljs-comment">//wrapper to an observable that requires accept/cancel</span>\nko.revertibleObservable = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">initialValue</span>) </span>{\n    <span class="hljs-comment">//private variables</span>\n    <span class="hljs-keyword">var</span> _actualValue = initialValue,\n        _tempValue = ko.observable(initialValue);\n\n    <span class="hljs-comment">//computed observable that we will return</span>\n    <span class="hljs-keyword">var</span> result = ko.computed({\n        <span class="hljs-comment">//always return the current value</span>\n        read: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n           <span class="hljs-keyword">return</span> _tempValue();\n        },\n        <span class="hljs-comment">//stored in a temporary spot until commit</span>\n        write: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newValue</span>) </span>{\n             _tempValue(newValue);\n        }\n    });\n\n    <span class="hljs-comment">//if different, commit temp value</span>\n    result.commit = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">if</span> (_tempValue() !== _actualValue) {\n            _tempValue.valueHasMutated();\n             _actualValue = _tempValue();\n        }\n    };\n\n    <span class="hljs-comment">//force subscribers to take original</span>\n    result.reset = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        _tempValue(_actualValue);   <span class="hljs-comment">//reset temp value</span>\n    };\n\n    <span class="hljs-keyword">return</span> result;\n};\n\n</code></pre>\n<p>This preserves the ability to see the results of your changes in realtime, while also allowing you to easily revert with a simple cancel button and no explicit data tracking.  Now our example can work as we’d like, with the customer getting immediate feedback on how their guest changes effect the total cost.</p>\n<iframe width="100%" height="300" src="http://jsfiddle.net/QQYrL/4/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>\n<p>Note that this isn’t a silver bullet.  An explicit confirmation is no longer required for the changes to be passed through, so its important to make sure that the user either confirms or resets the values after entering them.  But it allows for instant feedback on changes while still supporting the ability to dump the changes if the user decides they don’t like the result.  I think its a useful pattern for any situation where the user is entering data and you want to show them a preview of the outcome.  I hope others will find it as useful as I have.</p>\n<h3>Update</h3>\n<p>I showed this to Ryan and he replied with a nice simplification of the concept.</p>\n<div>\n<blockquote class="twitter-tweet"><p>@<a href="https://twitter.com/ben336">ben336</a> nice Ben. I have had to do something similar in the past. Here is a simplified version that I have used: <a href="http://t.co/IiqFe90kwi" title="http://jsfiddle.net/rniemeyer/SFCgr/">jsfiddle.net/rniemeyer/SFCg…</a></p>&mdash; Ryan Niemeyer (@RPNiemeyer) <a href="https://twitter.com/RPNiemeyer/status/331954950009663488">May 8, 2013</a></blockquote>\n</div>\n<pre><code class="language-javascript"><span class="hljs-comment">//Ryan Niemeyer\'s simplified knockout-revertible.js</span>\n<span class="hljs-comment">//http://jsfiddle.net/rniemeyer/SFCgr/ Fiddle</span>\n ko.revertibleObservable = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">initialValue</span>) </span>{\n    <span class="hljs-comment">//private variables</span>\n    <span class="hljs-keyword">var</span> result = ko.observable(initialValue);\n\n    result.forEditing = ko.observable(initialValue);\n\n    <span class="hljs-comment">//if different, commit edit value</span>\n    result.commit = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">var</span> editValue = result.forEditing();\n\n        <span class="hljs-keyword">if</span> (editValue !== result()) {\n            result(editValue);\n        }\n    };\n\n    <span class="hljs-comment">//force subscribers to take original</span>\n    result.reset = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        result.forEditing(result());\n    };\n\n    <span class="hljs-keyword">return</span> result;\n};\n\n</code></pre>\n'
}},function(e,t){e.exports={title:"RSS Roundup",date:"2013-06-29 11:40:00+00:00",layout:"post",path:"/2013/06/29/rss-roundup",category:"reviews",description:"A look at the options for RSS readers post-Google Reader",pageViews:"24",last30pageViews:"0",body:'<p>We’re at T-3 days till the Google Reader shutdown, and it seems like the “wait and see” crowd has made their initial decisions.  As a large crop of companies and products have weighed in, a large and diverse selection of “Google Reader replacements” have formed.  The groups behind them range from small indie developers (Feedbin, Go Reader) to fallen internet giants looking to reclaim glory (Digg, AOL). The readers themselves seem to fall into a few main categories:</p>\n<ul>\n<li>Free cloud service aiming for scale</li>\n<li>Free, paid, or ad-hoc self hosted option</li>\n<li>Former Reader clients allowing standalone RSS or a proprietary sync service</li>\n<li>Paid cloud hosted option</li>\n</ul>\n<p>Lots of others have chimed in with reviews of each of these services over the last few days, but I think that its hard to recommend a specific service universally, since people have different things they’re looking for in those services.  So I thought I’d take a look at the different categories and see why somebody would use them.</p>\n<h3>Free cloud based services</h3>\n<p>It seems like the most popular Reader replacement has been Feedly.  Its one of several options that try to replicate what Reader provided while also maintaining its non-existent price tag.  In doing so, they also inherit the inherent dangers of a product that adds more expense than revenue for each user they gain.  Products like that can seem like an obvious choice for users in the short term, but the results are often <a href="http://mashable.com/2012/11/16/tweetro-dead-twitter-api/">less pleasant</a> in the long term.  Business models built around free products incentivize behaviors in ways that are unrelated to the customers’ best interests.  This can eventually cause privacy issues or unwanted restrictions.  <em>They also can go the way of Google Reader, a product that was killed off when the costs were no longer worth the benefits provided.</em></p>\n<p>However, this group does best meet the expectations of an audience used to the free “available anywhere” nature of Google Reader, and includes several excellent products.  Feedly clearly has become a major undertaking, and Digg Reader has an elegant minimalistic style. Each has its flaws, but also has a dedicated team behind it that is clearly listening to feedback and determined to succeed.</p>\n<h3>Self Hosted Options</h3>\n<p>There is a certain type of person whose immediate reaction to seeing Google Reader’s shutdown was to give up on external services and write their own. If you have tried that then you probably already have very strong opinions on this issue.  If you didn’t, the good news is that several of these efforts have produced public open source options.  There are also other options for self-hosting RSS, most notably <a href="http://www.feedafever.com/">Fever</a>, a self hosted app that you can purchase for a 1 time $30 fee and then host yourself. There’s also <a href="http://mattjibson.com/blog/2013/06/26/go-read-open-source-google-reader-clone/">Go Read</a>, an open source app whose author is currently hosting it for free on App Engine (with ads soon to come), but also has open-sourced it and made it easy to run on App Engine’s free limits.</p>\n<p>In the end, these options will appeal to those who want to control their experience, and especially those who want to tinker.  But for most this will look like a lot of work and expense for unclear benefits.</p>\n<h3>Reader Clients</h3>\n<p>A huge ecosystem of apps was built up around Google Reader over the past several years.  There are “Google Reader” apps on every major platform with different styles and features to appeal to a wide variety of users.  Especially on mobile, most users accessed Reader through one of these apps, rather than through the site itself.  Now that Google Reader has removed the sync backbone of their community, these apps have had the opportunity and challenge of reinventing themselves.  Most have adapted one or more of the new services, but some are focusing on local RSS or are developing their own sync service.  <a href="http://netnewswireapp.com/">NetNewsWire</a> in particular seems to be going it alone.  This may make sense for somebody who’s dedicated to a certain reader.  At the very least, the services supported by different apps are a big piece of the puzzle for those of us on the hunt for a new service.</p>\n<h3>Paid Sync Services</h3>\n<p>Finally, there is a market re-emerging for paid RSS sync services.  Services like this began to emerge before Google Reader emerged as a dominant free alternative.  Now that Reader is gone, the service has become economically viable again.  The market appears to be settling on a cost of $18 to $25 a year for RSS hosting.  Several services fall into that sweet spot, including <a href="https://feedbin.me/">Feedbin</a> and <a href="http://feedwrangler.net/welcome.html">Feed Wrangler</a>.</p>\n<h2>What now?</h2>\n<p>For now, the most important step for Google Reader refugees is to download your subscription information from Google.  Even if you’ve imported your information into a new service, it’s important to have a local copy, especially since several of the new services don’t support any export options.</p>\n<p>After that I’d recommend trying a couple of the new services.  They work differently, and reflect the different ways people use RSS.  For me personally, I found Feedly’s UI to be frustrating, and am still totally confused that Digg’s otherwise excellent offering seems to provide no way to view only view unread items.  I was also concerned by the lack of a business model for Feedly, and the fact that Digg Reader appears mostly dedicated to supporting Digg, rather than serving as a standalone business.  I didn’t seriously consider Fever or any other self-hosted services.  I want RSS to be a thought-free process for me, where I’m able to focus on the content and not the tool.  I’m willing to pay for that.</p>\n<p>In the end I’ve settled on Feedbin.  I’m paying the $2/month rate, and have been quite satisfied so far. It has a clean and usable web interface, and works with my favorite iPhone client <a href="http://reederapp.com/">Reeder</a>. It also makes it easy to quickly scan unread items, and move all items to read, which fits my personal workflow.  Feedbin works for me.  I hope you find what works for you.</p>\n<h2>Related Reading</h2>\n<ul>\n<li>Marco Arment <a href="http://www.marco.org/2013/06/28/all-or-nothing">doesn’t see a future for proprietary sync services</a></li>\n<li>Dr Drang had a rough experience trying to <a href="http://www.leancrew.com/all-this/2013/06/my-rss-failure/">do it himself</a>, but now <a href="http://www.leancrew.com/all-this/2013/06/feedle-dee-dee/">seems happy with Feed Wrangler</a></li>\n<li>The Verge took a look at the more established options and <a href="http://www.theverge.com/2013/3/19/4119006/the-best-google-reader-alternatives">recommends Feedly</a></li>\n</ul>\n'}},function(e,t){e.exports={title:"Running Jest Tests Before Each Git Commit",date:"2017-02-26 23:00:00+00:00",layout:"post",path:"/2017/02/26/running-jest-tests-before-each-git-commit/",description:"A simple setup to run your Jest tests before every commit",keywords:"Jest testing git pre-commit JavaScript",category:"tools",readNext:"jest-first,saving-time-jest,mobx-first",key:"jest-git",pageViews:"2721",last30pageViews:"516",body:'<p>My main work project makes heavy use of <a href="https://facebook.github.io/jest/">Jest</a> to test our JavaScript code.  For a while now I’ve wanted to set up a way to run tests every time I run a commit.  I knew that git provides <a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks">hooks</a> that allow scripting actions to occur before or after any commit or push, and in fact we were already using a <code>pre-commit</code> hook script to lint our code with <a href="http://eslint.org/">ESLint</a>.  But it was non-obvious how to make that work well with Jest testing.  I eventually figured out a setup that worked, and the found a better way to do both the Jest and ESLint testing.  Since it took me a while to work through, I thought I’d share it here and save the rest of you some time.</p>\n<h3>What didn’t work</h3>\n<p>A naive approach to this problem would be to set up a pre-commit hook that simply ran <code>jest</code> to run all tests. The problem is that running our full test suite currently takes between 10 and 20 seconds to run all tests and that time is increasing as we grow our test suite.  Adding that overhead to every commit would cost my team a lot of time, and would be especially inefficient since the repo contains plenty non-JavaScript code that doesn’t require tests to be run when updated.</p>\n<p>For our ESLint hook, we queried git to get a list of staged files, and then ran eslint against each one of them individually, displaying a pass/fail message.  That looked something like this:</p>\n<pre><code class="language-bash">STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep <span class="hljs-string">"js$"</span>)\n<span class="hljs-keyword">if</span> [[ <span class="hljs-string">"<span class="hljs-variable">$STAGED_FILES</span>"</span> = <span class="hljs-string">""</span> ]]; <span class="hljs-keyword">then</span>\n    <span class="hljs-built_in">exit</span> 0\n<span class="hljs-keyword">fi</span>\n\nPASS=<span class="hljs-literal">true</span>\n\n<span class="hljs-keyword">for</span> FILE <span class="hljs-keyword">in</span> <span class="hljs-variable">$STAGED_FILES</span>\n<span class="hljs-keyword">do</span>\n    eslint --quiet <span class="hljs-string">"<span class="hljs-variable">$FILE</span>"</span>\n\n    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">"$?"</span> == 0 ]]; <span class="hljs-keyword">then</span>\n        <span class="hljs-built_in">echo</span> <span class="hljs-string">"\\t\\033[32mESLint Passed: <span class="hljs-variable">$FILE</span>\\033[0m"</span>\n    <span class="hljs-keyword">else</span>\n        <span class="hljs-built_in">echo</span> <span class="hljs-string">"\\t\\033[41mESLint Failed: <span class="hljs-variable">$FILE</span>\\033[0m"</span>\n        PASS=<span class="hljs-literal">false</span>\n    <span class="hljs-keyword">fi</span>\n<span class="hljs-keyword">done</span>\n</code></pre>\n<p>This works great for ESLint, but doesn’t work out of the box for Jest, because I don’t want Jest to run the files that changed, I want them to run any tests that changed AND any tests that might have been broken because of that.</p>\n<p>Jest has a wonderful command line flag <code>jest --onlyChanged</code>/<code>jest -o</code> that runs only the tests related to files that have been changed according to git.  It is extremely helpful since it is smart enough to read the dependency structure for the project and run all tests that might be changed from updating a source file. It also has a <code>--lastCommit</code> option that does the same thing for files that were in the previous commit.  Unfortunately, these options aren’t helpful at the point of committing, since <code>onlyChanged</code> does not look at files that have been staged for commit, and we haven’t actually made a commit yet for <code>lastCommit</code> to read.</p>\n<h3>What Did Work</h3>\n<p>Fortunately Jest has a lower level command that uses the same logic as <code>onlyChanged</code> and <code>lastCommit</code>.  <code>--findRelatedTests</code> is a flag that tells Jest to run any tests related to the files passed to it instead of trying to run those files as tests as it would normally do.</p>\n<img alt="an example of findRelatedTests running against the redux repo" src="/posts/images/jest-related-tests.png" class="full-width ">\n<p>This is a perfect fit for a pre-commit hook.  I was able to integrate it into my existing script like this:</p>\n<pre><code class="language-bash">jest --bail --findRelatedTests <span class="hljs-variable">$STAGED_FILES</span>\n<span class="hljs-keyword">if</span> [[ <span class="hljs-string">"$?"</span> == 0 ]]; <span class="hljs-keyword">then</span>\n    <span class="hljs-built_in">echo</span> <span class="hljs-string">"\\t\\033[32mJest Tests Passed\\033[0m"</span>\n<span class="hljs-keyword">else</span>\n    <span class="hljs-built_in">echo</span> <span class="hljs-string">"\\t\\033[41mJest Tests Failed\\033[0m"</span>\n    PASS=<span class="hljs-literal">false</span>\n<span class="hljs-keyword">fi</span>\n</code></pre>\n<p><code>$STAGED_FILES</code> is re-used from the eslint portion of the script, and is just a space delimited list of files that are being committed.  The <code>--bail</code> option simply stops running tests as soon as one has failed.  Including that is optional, you won’t see all the tests that have failed, but the failure will happen faster and you’ll be able to decide how to proceed, including possibly running the full test script on your own.</p>\n<p>Those lines (along with some sanity checks for the existence of Jest and error handling when PASS is set to false) are enough to get a workable commit hook going, but they’re not ideal.  pre-commit hooks aren’t persisted by git, so each user has to install the hook script individually, and any updates aren’t shared automatically.  Plus I’m inefficiently passing all staged files to eslint and Jest regardless of whether they’re JavaScript that those tools are actually meant to work on.  My ESLint code was also written before ESLint developed robust <code>--fix</code> capabilities, and doesn’t try to fix the errors it is capable of fixing.  Finally, while this is just poor coding and not an inherent limitation of my other method, I’m using globally installed versions of Jest and ESLint instead of scoping them to my project.</p>\n<h3>Making it better</h3>\n<p>Fortunately I’d discovered a better solution the other day while working on something else.  There is an npm package for making this process easier, <a href="https://github.com/okonet/lint-staged">lint-staged</a>.  Lint staged abstracts away the boilerplate of getting the staged files, and makes it easy to run local node executables against specific sets of files.  I was able to replace my whole pre-commit script and address all of the problems mentioned above with only a few lines in my package.json:</p>\n<pre><code class="language-json">{\n  <span class="hljs-attr">"scripts"</span>: {\n    <span class="hljs-attr">"lint-staged"</span>: <span class="hljs-string">"lint-staged"</span>,\n  },\n  <span class="hljs-attr">"lint-staged"</span>: {\n    <span class="hljs-attr">"*.js"</span>: [\n      <span class="hljs-string">"eslint --fix"</span>,\n      <span class="hljs-string">"git add"</span>,\n      <span class="hljs-string">"jest --bail --findRelatedTests"</span>\n    ]\n  },\n  <span class="hljs-attr">"devDependencies"</span>: {\n    <span class="hljs-attr">"eslint"</span>: <span class="hljs-string">"3.16.1"</span>,\n    <span class="hljs-attr">"jest"</span>: <span class="hljs-string">"19.0.1"</span>,\n    <span class="hljs-attr">"lint-staged"</span>: <span class="hljs-string">"3.3.1"</span>,\n  },\n}\n</code></pre>\n<p><code>lint-staged</code> now handles making sure that I’m only running checks against JavaScript files, lets eslint autofix and stage any files that it can fix, and uses the local versions of jest and eslint.  It also adds a nice pretty interface for the results:</p>\n<img alt="pretty lint-staged output" src="/posts/images/lint-staged-errors.png" class="full-width ">\n<p><code>lint-staged</code> docs recommend using an npm based hooks manager like <a href="https://github.com/observing/pre-commit">pre-commit</a> for running the scripts, but due to some quirks in my setup (node_modules is symlinked, and I sometimes want to run these commands inside a docker container), I found it easier to maintain a custom pre-commit script and just replace the previous logic with <code>npm run lint-staged</code>.  Either way, all of the actual logic is now checked into the repository and shared between all users.  The only manual step is adding the call to a pre-commit hook or (if you’re using a helper lib) running npm install.</p>\n<h3>More Resources</h3>\n<ul>\n<li>This maybe merits a future post on its own, but if you’re interested in automating away your code style maintenance look at combining <a href="https://github.com/prettier/prettier">prettier</a> (and possibly  <a href="https://github.com/not-an-aardvark/eslint-plugin-prettier">eslint-plugin-prettier</a>) with the pre-commit hooks from above.  Prettier will guarantee that your code follows a consistent style, and because it handles maximum line lengths, is much more robust than ESLint on its own.  Using its ESLint plugin within my editor and on pre-commit hooks has pretty much eliminated me manually fixing code style problems.</li>\n</ul>\n'}},function(e,t){e.exports={title:"Saving Time With Jest: Meetup Summary",date:"2016-12-10 05:15:00+00:00",layout:"post",path:"/2016/12/10/saving-time-with-jest",description:"A summary of my meetup talk on saving time with Jest",keywords:"Jest JavaScript testing meetup talk Triangle React",category:"tools",key:"saving-time-jest",readNext:"jest-first,backbone-devs-react,mobx-first",pageViews:"499",last30pageViews:"59",body:'<p>This week I gave a talk at the brand new Triangle ReactJS meetup group on how <a href="https://facebook.github.io/jest/">Jest</a> can save developers time.  I was asked afterwards to share the content online for those who missed it.  My talk was mostly demos and wasn’t recorded, so there unfortunately isn’t much to share, but I thought I could write out the basic ideas behind the talk, and share them here.</p>\n<h3>What is Jest</h3>\n<p>Jest is a JavaScript testing framework built by Facebook to address their internal problems testing JavaScript code.  It was open-sourced in 2014, but unlike Facebook’s other recent high profile JavaScript OSS projects like React, Flux, Relay and GraphQL, it failed to develop much traction in the community and mostly stagnated for 2 years.  That changed in early 2016 when 2 Facebook developers, <a href="https://twitter.com/cpojer">Christoph Pojer</a> and <a href="https://twitter.com/abramov_dmitrii">Dmitrii Abramov</a> began working on improving the project. Over the past year they’ve brought massive improvements to the developer experience of using Jest.</p>\n<p>At a more practical level Jest is a test runner with a built in assertion library and support for code coverage, babel transpilation, and module mocking.  It began as a wrapper around <a href="https://jasmine.github.io/">Jasmine</a>, an older JavaScript testing library, but has since replaced parts of Jasmine with replacement functionality, while retaining backwards compatibility.</p>\n<h3>How Can Jest Save Me Time?</h3>\n<p>Jest saves developers  time in 4 main ways:</p>\n<ol>\n<li><strong>Setup</strong> - Jest is simple to configure</li>\n<li><strong>Writing Tests</strong> - Jest provides a method for writing simple UI tests, and makes it easy to port over existing tests</li>\n<li><strong>Running Tests</strong> - Jest runs tests in parallel, doesn’t require a browser, and only runs the tests that are affected by the current code changes</li>\n<li><strong>Fixing Tests</strong> - Jest gives great error messages, helps you find the failing code, and has other smaller UX features that make it easy to debug your failing tests quickly.</li>\n</ol>\n<div>\n<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">Tonight <a href="https://twitter.com/ben336">@ben336</a> speaks about using <a href="https://twitter.com/hashtag/jest?src=hash">#jest</a> with <a href="https://twitter.com/hashtag/reactjs?src=hash">#reactjs</a> for your testing needs <a href="https://twitter.com/nestraleigh">@nestraleigh</a> <a href="https://t.co/CAV8wZUwFw">pic.twitter.com/CAV8wZUwFw</a></p>&mdash; Tracy Lee | ladyleet (@ladyleet) <a href="https://twitter.com/ladyleet/status/806655476515618822">December 8, 2016</a></blockquote>\n</div>\n<h3>Setup</h3>\n<p>Setting up Jest is extremely straightforward. Here’s a <code>Hello World</code> React Project</p>\n<pre><code class="language-json">//package.json\n{\n  "name": "simple_example",\n  "version": "1.0.0",\n  "description": "A minimal jest testing example",\n  "scripts": {\n    "test": "jest"\n  },\n  "dependencies": {\n    "react": "^15.4.1"\n  },\n  "devDependencies": {\n    "babel-jest": "^17.0.2",\n    "babel-preset-es2015": "^6.18.0",\n    "babel-preset-react": "^6.16.0",\n    "jest": "^17.0.3",\n    "react-test-renderer": "^15.4.1"\n  }\n}\n</code></pre>\n<p>In package.json we have 4 dependencies that are part of a normal React project setup, <code>react</code>, the 2 babel presets for using <a href="http://benmccormick.org/2015/09/14/es5-es6-es2016-es-next-whats-going-on-with-javascript-versioning/">es2015</a> syntax, and <code>react-test-renderer</code>, which is a react addon for rendering react for testing, similar to how <code>react-dom</code> renders components for the browser.  We then add <code>jest</code> and <code>babel-jest</code>.  <code>jest</code> provides the test runner, assertions API, mocking capabilities, and cli.  <code>babel-jest</code> is a drop-in dependency that lets Jest integrate with Babel.  Neither require any additional configuration in the normal case. Lets say the rest of our project looks like this:</p>\n<pre><code class="language-txt">├── __tests__\n│   └── simple-component<span class="hljs-selector-class">.spec</span><span class="hljs-selector-class">.js</span>\n├── package<span class="hljs-selector-class">.json</span>\n└── simple-component<span class="hljs-selector-class">.js</span>\n</code></pre>\n<pre><code class="language-javascript">// simple-component.js\nimport React from \'react\';\n\nexport const SimpleComponent = () =&gt; &lt;div&gt;\n    Hello World\n&lt;/div&gt;;\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-comment">// __tests__/simple-component.spec.js</span>\n<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> renderer <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-test-renderer\'</span>;\n<span class="hljs-keyword">import</span> {SimpleComponent} <span class="hljs-keyword">from</span> <span class="hljs-string">\'../simple-component\'</span>;\n\nit(<span class="hljs-string">\'shows Hello World\'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> component = renderer.create( <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">SimpleComponent</span>/&gt;</span></span>);\n  <span class="hljs-keyword">let</span> componentJSON = component.toJSON();\n  expect(componentJSON.children[<span class="hljs-number">0</span>]).toBe(<span class="hljs-string">\'Hello World\'</span>);\n});\n</code></pre>\n<p>Given this project, we only have to run</p>\n<pre><code>yarn <span class="hljs-comment"># or npm install</span>\n<span class="hljs-keyword">jest\n</span></code></pre>\n<p>and jest will automatically find our test file and run the test.</p>\n<img src="/posts/images/jest-hello-world.gif" class="full-width" alt ="gif of running jest">\n<h3>Writing Tests</h3>\n<p>Jest provides Snapshot Tests, which are a quick way of writing tests to catch changes in the rendered output of a UI component (or any other serializable content).  <a href="http://benmccormick.org/2016/09/19/testing-with-jest-snapshots-first-impressions/">I’ve written about Snapshot testing before</a>, so I won’t go into depth here.  But snapshot tests are significantly faster to write than traditional assertion based tests, and for the write type of code can provide greater or equal benefit.  This is one area where technically Jest may not save you time.  Instead it may take your team to a place where you’re actually willing to write tests for your UI components for the first time.</p>\n<p>There are also a great set of codemods for Jest. <a href="https://github.com/skovhus/jest-codemods">jest-codemods</a> can help you take your existing suite of tests from Mocha, Ava, or tape and translate it over to Jest automatically.  Of course if you were using Jasmine previously, your tests can be migrated without changes. So Jest saves you time by not requiring you to rewrite any tests.</p>\n<h3>Running Tests</h3>\n<p>Jest runs tests fast by default.  While I’ve seen from comments on my last Jest post and elsewhere that some people may have been able to optimize mocha or AVA to be fast enough that switching to Jest was a downgrade, for most people Jest is going to be faster than whatever they may have been using before.  This is true because of performance reasons (tests run in parallel, and mock out timers to avoid unnecessary waiting), but also because of UX decisions.  Jest is able to use git and node’s modules system to detect what files have changed since the last commit, and which tests are affected by that.  Because of that, it is able to optionally run only the tests that might have changed on each run (<code>jest -o</code>).  Since it is usually able to run tests fast as a result (since it only runs a few at a time), Jest also is able to have an awesome watch mode (<code>jest --watch</code>).  In watch mode, tests rerun as files change, and there are options to target specific tests, run all tests, or fix snapshots as you go.</p>\n<img src="/posts/images/jest-watch.gif" class="full-width" alt ="gif of running jest --watch">\n<h3>Fixing Tests</h3>\n<p>Jest provides 4 main conveniences for fixing tests</p>\n<ol>\n<li>Error messages have clear formatted diffs, making it easy to know the difference between what was received and expected</li>\n<li>Error messages have a clear traceback to the line that failed, either the assertion in the test file, or the exception in the source file</li>\n<li>Even though tests run in parallel, Jest makes sure that any console output from the test is placed in line with the test output, making it easy to debug with quick console messages</li>\n<li>When running Jest multiple times, Jest runs the tests that failed in the previous run prior to other tests, leading to a faster feedback loop even when not using watch mode</li>\n</ol>\n<img src="/posts/images/jest-error.png" class="full-width" alt ="gif of running jest --watch">\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Another speakup at Wednesday’s meetup has a Jest related blog post out this week.  Nate Hunzaker blogged about <a href="https://www.viget.com/articles/acceptance-testing-react-apps-with-jest-and-nightmare">using Jest with Nightmare.js for acceptance tests</a></p>\n</li>\n<li>\n<p>If you live in the Triangle area (thats Raleigh/Durham, North Carolina to the rest of the world) make sure to check out the <a href="http://www.meetup.com/trianglereact/">Triangle React meetup</a>.  The plan as I understand it is to do events once a month, alternating project nights and talks.  I believe <a href="https://twitter.com/ladyleet">Tracy</a> is looking for more speakers too, so hit her up if you’re interested.  This time 4 of us spoke for 15-20 minutes, so it isn’t as much preparation as other events where you’re the only speaker.</p>\n</li>\n</ul>\n'}},function(e,t){e.exports={title:"Searching for the perfect reading device:  My Nexus 7 (2013) Review",date:"2013-08-16 12:00:00+00:00",layout:"post",path:"/2013/08/16/searching-for-the-perfect-reading-device-my-nexus-7-2013-review",description:"Reviewing a small Android Tablet",category:"reviews",pageViews:"77",last30pageViews:"1",body:'<p>Since Amazon announced its Kindle platform back in 2007, I have read books on a variety of different devices.  I’ve owned and used two different Kindle devices and experimented with the rest.  I’ve read on my smartphones, iPad, laptop, and traditional paper books. There are great things about each, but there are also aspects of all of them that drive me crazy.</p>\n<p>When the new Nexus 7 was announced last month, it seemed like the type of device I was waiting for: powerful, light, and affordable. Most importantly, it included a screen that would be easy on the eyes.</p>\n<h2>The Problem with the Kindle</h2>\n<p>Up until now, I’ve mostly used Kindles for long form reading.  Their e-ink screens are fantastic,the experience is seamless when reading Amazon content , and they’re light and easy to hold as a small paperback.  The problem is, while I love reading, a lot of the content I was interested in, including blogs, the Bible, online news, and magazines, was difficult or impossible to access on a traditional Kindle.  In addition, my Kindle often wasn’t able to cope with the diagrams and code snippets common in the more technical books I read.</p>\n<p>As a result, my Kindle often ended up neglected, and I used my iPhone or laptop instead.  Kindles are fantastic reading hardware, but their lack of integration with non Amazon store content cripples their usefulness.  I think Amazon’s best play here would be to make a deal with a service like Pocket or Instapaper <sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> for deep integration that goes beyond the almost unusable “send document to Kindle” integration that Instapaper currently provides<sup id="fnref:2"><a href="#fn:2" rel="footnote">2</a></sup>.  That would go a long way to making it a viable multi-purpose reading device.</p>\n<p>As for the Kindle Fire line, they serve as a step in the right direction, but have consistently been panned for laggy performance and an interface that is effectively a store front.  They still might be a valid contender though, except for the growth of other options that don’t share those problems.</p>\n<h2>Why not an iPad?</h2>\n<p>The other serious contender for the title of “best reading device” is the iPad.  Since it first came out in 2010, it has quickly become the most popular choice for multimedia consumption on a midsize (7-11 inch) screen. It has arguably the best hardware, and inarguably the best selection of third party apps and integrations.  The question then becomes, “Which iPad?”</p>\n<p>The “original iPad” line, now on its fourth generation, boasts a large ten inch screen- one of the nicest screens you can find on a mobile device. It also hosts three and a half years-worth of apps designed specifically for the iPad’s size and form.  It is by almost all accounts the best multipurpose tablet that money can buy.  As a reading device, though, it leaves much to be desired.  At 1.44 lbs, it’s heavy and awkward to hold in one hand. It’s also expensive: $200-$400 greater than other reading devices.  These factors can easily be overlooked relative to the versatility and utility of the iPad as a productivity and media-consumption device, but they make it difficult to recommend as a pure reader.</p>\n<p><img src="/posts/images/devicetable.png" alt=""></p>\n<p>The iPad mini, on the other hand, is almost the perfect shape and size for a reader.  It is the lightest high-end tablet on the market, and also feels like much more of a premium device than the Nexus or the Kindle when you hold one in your hand.  It comes at a reasonable cost ($170 less than the “regular” iPad), and like the Retina iPad, it comes with the full support of the Apple ecosystem. The iPad mini is its older sibling’s only truly valid competitor for “best multipurpose tablet”, and a completely valid choice as a reading device at that.</p>\n<p>On the other hand, the iPad mini also has a screen that is completely blown away by all of its competitors.  Compared to any of the other devices mentioned here, its text looks pixelated and less crisp, as you can see in this comparison from <a href="http://arstechnica.com/gadgets/2013/07/the-2013-nexus-7-review-meet-the-new-standard-for-android-tablets/">Ars Technica’s Nexus 7 review</a>.</p>\n<p><img src="/posts/images/textcomp.jpg" alt="Comparing the text"></p>\n<p>For many uses this is not a big deal, but when reading longform text, I find that the display resolution really makes a difference in how long I’m able to read comfortably.  When I looked at the Mini in my local Apple store, iBooks’ text was significantly less crisp than it was on the other devices.  Combined with the extra cost relative to a Kindle or Nexus 7, it becomes difficult to justify recommending an iPad Mini as a reading-focused device.</p>\n<h2>Enter the Nexus 7</h2>\n<p>The new Nexus 7 manages to avoid many of the tradeoffs hindering the other devices.  It has a top of the line screen at a price point directly in between the Kindle Paperwhite and the iPad Mini.  It also remains easy to hold, with a smaller (though slightly heavier) frame than the Mini. And since it is a full Android tablet, it comes equipped with a real web browser and integrations with all the most prominent reading services <sup id="fnref:3"><a href="#fn:3" rel="footnote">3</a></sup>.  That’s the Nexus 7’s promise, but is it able to live up to it?</p>\n<h2>A beautiful screen</h2>\n<p>The first thing you notice when you see a Nexus 7 is the screen. It’s a premium component set inside an otherwise solid but unremarkable slab.  The icons on the home screen are crisp and detailed, and the text is clear.  It’s a screen that practically begs you to read.</p>\n<p>The only downside of the screen is that not every device has one yet.  As a result, web sites and non-optimized apps can appear blurry and pixelated.  The images and toolbars in my preferred Bible app, for instance, appear out of focus, although the text itself is still crisp and readable.  This is the price of progress though, and something that Apple users have had to deal with each time a device has transitioned to Retina.  Android’s fragmentation will make the transition slower,  but its a problem that will be mitigated over time as more apps are targeted at newer devices with high resolutions.</p>\n<h2>Easy to hold</h2>\n<p>When I bought the Nexus 7, I was nervous about how the device would feel.  Unlike iPads, which you can touch and handle in Apple stores, it’s difficult to know how a Google product will feel in your hands before you buy one.  My local Best Buy had a single test unit, and it was anchored to the display table with a 6&quot; plastic cord that weighed about as much as the device itself <sup id="fnref:4"><a href="#fn:4" rel="footnote">4</a></sup>.  I couldn’t find any other way to actually touch a Nexus 7 without purchasing, so I decided to purchase one before I went on a vacation and give it a week to prove itself.</p>\n<p>In the end I was satisfied, if not quite delighted, by the devices feel.  It feels sturdy in the hands, and definitely falls into the “book” size range. On the other hand, the Nexus 7 is both smaller and heavier than an iPad mini, giving it some unwanted heft.  This seems like an unavoidable consequences of cramming a Retina-class screen into a 7&quot; tablet while maintaining reasonable battery life.  But it does mean that it can’t match the paperback feel of the Kindle or the “pleasant to hold” sensation of the iPad Mini.  The Nexus 7 makes you think a bit more about it than those two devices, which is probably the biggest knock on it as a reader.  It’s not too heavy to hold in one hand, but it may feel a bit awkward doing so.  I usually end up using two hands if I’m sitting down to read, but will hold it with one hand if I’m carrying it around.</p>\n<h2>What about the apps?</h2>\n<p>The app selection was my second biggest concern when considering the Nexus 7.  As a previous owner of one of the original Windows Phones, I know what it’s like to work with a platform that doesn’t get full support from developers.  If you love the OS you can still have a good experience, but your choices will be limited and you may not be able to make some things work.  Android tablets in 2013 aren’t quite where Windows Phone was in 2010, but there is a big drop in the quality and consistency of tablet apps from the iPad to an Android tablet.  When it comes to reading, however, this seems to be a manageable issue.</p>\n<p>Android has high quality tablet apps for book reading, RSS, and Read-It-Later services.  The Kindle app is solid, though it’s missing some features from the iOS app like the X-ray option and the ability to change fonts.  <a href="http://twentyfivesquares.com/press/">Press</a> is as good as any RSS client I’ve tried on iOS or the desktop.  <a href="http://www.instapaper.com/">Instapaper</a> is surprisingly nice on Android, given <a href="http://www.marco.org/">Marco Arment’s</a> <a href="http://www.marco.org/2013/08/13/google-blindness">well documented skepticism</a> toward Android.  There are other solid options for those using other services, including apps for Pocket, Nook, and Feedly.</p>\n<h2>The Verdict</h2>\n<p>Overall I’ve been incredibly pleased with the Nexus 7 so far.  I think it makes the right tradeoffs for a reading device.  It adds a little extra heft in exchange for a brilliant screen at an affordable cost, in a package that is still smaller than many paperbacks.  It might not please somebody looking for a multipurpose media tablet: it’s still missing popular iOS apps like Amazon Instant Video and Tweetbot<sup id="fnref:5"><a href="#fn:5" rel="footnote">5</a></sup> (and even when apps do exist they’re <a href="http://www.webpronews.com/android-is-still-missing-top-ipad-apps-2013-08">often not optimized for tablets</a>).  But if you don’t need that functionality, there is a lot here to love.  As a multi-source reading device, the Nexus 7 is king.</p>\n<p><em>Update June 2014: After almost a year with the Nexus 7, I stand by my analysis of the tradeoffs involved with different devices.  But I’ve found that the ones the Nexus 7 make bother me more than I expected.  It’s ended up feeling like an impractical device for me.  Because it’s battery life doesn’t match something like the kindle, I have to worry about charging it.  But because it doesn’t have the general utility of the iPad (or more importantly my iPhone), I end up neglecting it.  The lack of a decent twitter app, and the lack of polish on most non-Google apps makes it a tough sell when faced with the option of doing something on the Nexus vs doing it on my phone or laptop.  I still think the Nexus 7 is a great device.  But it has not met my needs as well as I expected</em></p>\n<p><a target="_blank" href="http://www.amazon.com/s/?_encoding=UTF8&camp=1789&creative=390957&field-keywords=Nexus%207&linkCode=ur2&rh=i%3Aaps%2Ck%3ANexus%207&tag=benmccormicko-20&url=search-alias%3Daps&linkId=IQG4KEHRXYATOHXG">Get The Nexus 7 (Amazon Affiliate Link)</a><img src="https://ir-na.amazon-adsystem.com/e/ir?t=benmccormicko-20&l=ur2&o=1" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;" /></p>\n<hr>\n<div class="footnotes">\n<ol>\n<li class="footnote" id="fn:1">\n<p>\nActually, an Amazon acquisition seems like the perfect out for Pocket, a popular service that completely lacks a business model.\n<a href="#fnref:1" title="return to article"> ↩\n</a></p>\n<li class="footnote" id="fn:2">\n<p>\nTo be clear, it\'s unusable because Amazon makes it unusable.  There is no way (as far as I can tell) to bulk-delete documents, or delete a document from the device after you finish it.  Instead, you have to go to Amazon.com later and delete documents one at a time. It\'s left my Kindle library  littered with old Instapaper articles that I have no interest in reading again.\n<a href="#fnref:2" title="return to article"> ↩\n</a></p>\n<li class="footnote" id="fn:3">\n<p>\nIn my case that\'s Kindle, Instapaper, Feedbin and Pinboard, but it equally supports Nook, Pocket, Feedly, Delicious and most other popular services.  Of course if all your books are in iBooks then you probably haven\'t even made it this far.\n<a href="#fnref:3" title="return to article"> ↩\n</a></p>\n<li class="footnote" id="fn:4">\n<p>\nBest Buy seems to go out of its way to cater to people who don\'t actually care if their devices are nice.  They\'ve gotten a little better with some of their featured electronic displays. There was a very nice "touch and play" section for Samsung devices.  But it always seems like half the display devices are non-functional, and they\'re actively trying to push Windows machines with reasonable specs, cheap plastic casing and trackpads you have to hit with a hammer to get a response.\n<a href="#fnref:4" title="return to article"> ↩\n</a></p>\n<li class="footnote" id="fn:5">\n<p>\nObviously there are plenty of twitter apps on Android, but I haven\'t been able to find one that is anywhere near as nice to use as Tweetbot. That\'s obviously a compliment to Tweetbot\'s development team, though it does seem to me that there may be some API limits that are hurting the Android apps.  Otherwise, I can\'t understand why they seem to universally require 2 taps to follow a link.\n<a href="#fnref:5" title="return to article"> ↩\n</a></p>\n<pre><code>&lt;/li&gt;\n</code></pre>\n</ol></div>\n'
}},function(e,t){e.exports={title:"Setting Up Your Text Editor For JavaScript Development",date:"2014-10-13 01:05:51+00:00",layout:"post",path:"/2014/10/13/setting-up-your-text-editor-for-javascript-development",description:"A look at some tools and plugins that help create a productive JavaScript development workflow",category:"tools",readNext:"learning-vim,interesting-atom,vim-files",pageViews:"9831",last30pageViews:"152",body:'<p>The coding workflow for JavaScript developers gets better all the time.  Over the last 10 years, the JavaScript ecosystem has built up a rich set of tools to make your life easier.  Most of the buzz around tooling comes from browser devtools and the various build systems available for JavaScript projects, but you can also take advantage of improved tools within your code editor.  While there are some great IDEs for JavaScript development out there like WebStorm and Visual Studio, most JavaScript developers seem to prefer lighter-weight text editors.  So this post is going to be a quick look at the tools I use for more seamless JavaScript development in a text editor.</p>\n<h3>Basics</h3>\n<p>Before we get to anything JavaScript specific, there are a few important things to set up.  First, I’m assuming that you’re using a modern, extensible text editor. Those include, but are not limited to: <a href="http://www.sublimetext.com/">Sublime Text</a>, <a href="http://www.vim.org/">Vim</a>, <a href="https://atom.io/">Atom</a> and <a href="http://www.gnu.org/software/emacs/">Emacs</a>. There is great support for all of the below tips in each of these editors<sup id="fnref:0"><a href="#fn:0">1</a></sup>.</p>\n<p>In addition you should have</p>\n<ol>\n<li>Reasonable default configurations<sup id="fnref:1"><a href="#fn:1">2</a></sup></li>\n<li>A fast system for navigating between files<sup id="fnref:2"><a href="#fn:2">3</a></sup></li>\n<li>Great code searching<sup id="fnref:3"><a href="#fn:3">4</a></sup></li>\n</ol>\n<p>If you’re still working through those things, make sure to take the time to learn a bit more about your editor along with any JavaScript specific tools you use.  There’s a ton of efficiency you can gain from having those 3 things in place.</p>\n<p>Finally the first two tips below require <a href="http://nodejs.org/">node.JS</a> and npm to be installed, as they rely on node libraries to function.  If you’ve never installed those before, the process is pretty painless.</p>\n<p>Once you have all of that in place, we can move on to other things.</p>\n<h3>Syntax Linting</h3>\n<p>JavaScript is a dynamic, weakly-typed language.  It is also written by human beings.  As a result, it can be easy to start running bad code without realizing that it has problems.  Some types of problems you’ll find out about quickly.  Bad syntax will halt program execution for instance.  But others will linger, subtly effecting logic or just making the code hard to understand for future developers (including yourself).</p>\n<p>JavaScript linters (also called syntax checkers) can provide some of the safety of a compiler, and also help enforce a consistent set of styles to help maintain readability.  They are not magic.  JavaScript is still a weakly typed language with some weird syntactical sinkholes. It’s relatively easy to make logic mistakes if you’re undisciplined.  But linters are a great safety tool, especially for developers newer to JavaScript and its conventions.  Run as part of a build process, they can prevent you shipping bad code and help standardize conventions across a team</p>\n<p>While it’s a great idea to make linters part of your build process, you get even more power from integrating them with your editor.  Almost all modern text editors include some sort of plugin for displaying syntax errors and warnings in the gutter to the left of the text.  You can check out the integration pages for <a href="http://eslint.org/docs/integrations/">ESLint</a> and <a href="http://www.jshint.com/install/">jsHint</a> to get a feel for the plugins available for your editor.</p>\n<img src="/posts/images/lintingpic.png" class="full-width" alt ="linting picture">\n<h3>TernJS + Autocomplete</h3>\n<p>Linters are great for telling you what not to do, but can’t give you much guidance on what you actually are able to do.  Fortunately we have other tools for that.  <a href="http://ternjs.net/">Tern.js</a> is a fantastic library that provides “intellisense” style autocompleting for JavaScript code, along with other IDE-like features including documentation links and refactoring support. It’s not perfect, since JavaScript’s nondeterministic syntax sometimes makes it hard to tell what properties a variable will actually have at runtime, but it takes a good shot at it and is able to go pretty far, especially for libraries where it can expose the full API to you within the editor.  To get the most out of Tern, you’ll need to set up a Tern project definition, where you can specify any files that you always want loaded, and any plugins you want to use. The preloaded files is useful if you’re making global references to a namespace or library, and the plugins can give you support for module systems, so that you can handle references that are passed into a module from a different file in code using requireJS or Angular.</p>\n<img src="/posts/images/ternjs.gif" class="full-width" alt ="ternjs picture">\n<h3>Snippets</h3>\n<p>JavaScript development, especially on the front end, can involve a lot of repetitive boilerplate code<sup id="fnref:4"><a href="#fn:4">5</a></sup>.  Whether it’s module boilerplate like AMD require/define wrappers, library boilerplate like directive definitions in Angular or a Model definition in Backbone, or our own favorite patterns that we repeat a lot, we end up writing a lot of code over and over again.  Snippets are a great way to accomplish that.  They were one of the key features of Textmate when it first became popular.  Today they’re built in to Sublime Text and Atom, and there are popular libraries for both <a href="https://github.com/SirVer/ultisnips">Vim</a> and <a href="https://github.com/capitaomorte/yasnippet">Emacs</a> to simulate the same functionality.</p>\n<p>Snippets allow you to define templates for common boilerplate code, allowing you to quickly insert repetitive content, including adding hooks for text that will vary across uses.  For instance here’s a snippet I have defined for creating a new AMD module<sup id="fnref:5"><a href="#fn:5">6</a></sup>.</p>\n<pre><code><span class="hljs-comment">#A new AMD define module</span>\nsnippet dfn\ndefine([<span class="hljs-variable">$1</span>],<span class="hljs-keyword">function</span>(<span class="hljs-variable">$2</span>) {\n    <span class="hljs-variable">$0</span>  \n});\nendsnippet\n</code></pre>\n<p>This allows me to type <em>dfn&lt;tab&gt;</em> at any time to expand out the template.  Initially my cursor will be in spot <code>$1</code>, and I can then enter text and tab to spot <code>$2</code>, with my final tab ending me at <code>$0</code>.  Snippet libraries can also provide other functionality like functions to show the current time, filename, or other contextual information.   Some can also mirror text so that you can enter a string once and have it appear throughout the template.  It can be a great time saver when you’re chugging through the boilerplate code of your project.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>If you want to implement JavaScript syntax checking definitely check out <a href="http://eslint.org/">ESLint</a> or <a href="http://www.jshint.com/">jsHint</a>.  They both offer a lot more options and flexibility than <a href="http://www.jslint.com/">jsLint</a>, the pioneer in this area.  It’s pretty easy to find an integration plugin for most common editors through those websites or Google, but <a href="https://github.com/scrooloose/syntasticsu">Syntastic</a> for Vim and <a href="https://github.com/SublimeLinter/SublimeLinter3j">Sublime Linter</a> for Sublime Text come especially recommended and have the advantage of supporting all 3 major JavaScript linters as well as syntax checking for multiple languages.</p>\n</li>\n<li>\n<p><a href="http://ternjs.net/">Tern’s website</a> has great documentation and links to the editor specific implementations for different editors.  If you’re a Vim user I’d also recommend taking a look at <a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a> for an improved autocomplete interface that works well with Tern and UltiSnips.</p>\n</li>\n<li>\n<p>For snippet libraries, you can take a look at <a href="https://github.com/SirVer/ultisnips">UltiSnips</a> for Vim and <a href="https://github.com/capitaomorte/yasnippet">Yasnippet</a> for Emacs.  If you want an application agnostic snippet solution, <a href="http://kapeli.com/dash">Dash</a> is a documentation management program for OSX that also has a rich snippet component you can use in any program the same way you’d use an editor specific solution.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:0">\n        <p> Other than the lack of an official Tern plugin for Atom\n        <a href="#fnref:0" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:1">\n        <p>\n        Sublime Text and Atom provide pretty reasonable defaults. Vim users could consider checking out my piece on <a href="http://benmccormick.org/2014/07/14/learning-vim-in-2014-configuring-vim/">configuring Vim</a>.  I don\'t know enough to advise for Emacs, you\'re on your own their, but google is your friend.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        This really deserves a post of its own, not a footnote, but in general my approach to this is fuzzy search, split panes and a way to retrace my movements.   \n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:3">\n        <p>\n        Sublime Text and Atom have reasonably nice built in search tools, but I\'d recommend using a plugin that integrates with ack or ag, two <a href="http://benmccormick.org/2013/11/25/a-look-at-ack/">very nice search tools</a>.  I don\'t see such a plugin for Atom on their repository site right now, but the other 3 certainly support it.\n        <a href="#fnref:3" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:4">\n        <p>\n        Hopefully not too much obviously\n        <a href="#fnref:4" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:5">\n        <p>\n        This is using the syntax for Vim\'s Ultisnips plugin.\n        <a href="#fnref:5" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Shutdown Tiles for Windows 8 Start Screen",date:"2012-11-08 12:00:00+00:00",layout:"post",path:"/2012/11/08/shutdown-tiles-for-windows-8-start-screen",category:"tools",description:"A solve for shutting down Windows 8 easily",pageViews:"26",last30pageViews:"0",body:'<p>Solves one of the bigger annoyances I’ve had with the OS so far.</p>\n<p><a href="http://gallery.technet.microsoft.com/scriptcenter/Create-a-ShutdownRestartLog-37c8111d">Technet Script Center: Create a Shutdown/Restart/Log Off Tile</a></p>\n'}},function(e,t){e.exports={title:"Simple Publish-Subscribe with jQuery",date:"2013-02-13 21:00:00+00:00",layout:"post",path:"/2013/02/13/simple-publish-subscribe-with-jquery",description:"Building a basic pub-sub wrapper around jQuery",category:"frameworks",key:"jquery-pub-sub",pageViews:"8137",last30pageViews:"113",body:'<p>Here’s a cool pattern that I’ve been able to use in two of my projects lately:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//Publish Subscribe with jQuery</span>\n\n<span class="hljs-keyword">var</span> exampleHandle = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{\n\t<span class="hljs-comment">//do stuff when topic is published</span>\n\t...\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">subscribe</span>(<span class="hljs-params">topic,handle</span>)</span>{\n    $(<span class="hljs-string">"#subscription"</span>).bind(topic,handle);\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">publish</span>(<span class="hljs-params">topic,params</span>)</span>{\n\t$(<span class="hljs-string">"#subscription"</span>).trigger(topic,params)\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">unsubscribe</span>(<span class="hljs-params">topic,handle</span>)</span>{\n    $(<span class="hljs-string">"#subscription"</span>).unbind(topic,handle);\n}\n\n</code></pre>\n<p><a href="http://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern">Publish-Subscribe</a> is a pretty commonly used model for sending messages in software applications.  Implementations can vary, from the very heavyweight setups of things like <a href="http://en.wikipedia.org/wiki/Java_Message_Service">Java Message Service</a> to much lighter methods.  This is an example of a lightweight pubsub implementation for javascript.</p>\n<h3>Implementation Details</h3>\n<p>The method is based on jQuery’s <code>trigger</code> and <code>bind</code> functions.  These allow you to listen for a custom event on an element, and manually trigger an event on an element.  This provides the basic backbone for the simple subscription model.</p>\n<p>If an application element wants to subscribe to a topic, they bind a handler to the “subscription element”.  This can be a designated element on the page, or just the window element.  You can also of course use different elements for different subscriptions.  Then, when something publishes to that topic, the handler function will execute.</p>\n<p>For publishing, a function can pass a topic and parameters to the publish function.  This calls jQuery’s <code>trigger</code> to set off the event topic, passing along the parameters.  These params are passed to the handle function.</p>\n<p>If an element wants to cancel its subscription, they can pass the topic and handle function to the <code>unsubscribe</code> method. Note that the handle has to be the same function object that was used to originally subscribe, not a copy or similar function.  You also can use jQuery’s <code>unbind</code> to cancel all subscriptions to a topic by only specifying the topic without the handle function.</p>\n<p>I’ve found this to be a useful, lightweight way of creating loosely coupled messages across different components of my software systems.</p>\n<hr>\n<h3>Further Reading</h3>\n<ul>\n<li><a href="http://api.jquery.com/category/events/event-handler-attachment/">jQuery Documentation</a> - in depth information on bind, trigger and unbind</li>\n</ul>\n'}},function(e,t){e.exports={title:"Somewhat Open",date:"2013-08-15 16:15:00+00:00",layout:"post",path:"/2013/08/15/somewhat-open",category:"opinion",description:"What is an open API?",pageViews:"110",last30pageViews:"0",body:'<p><a href="http://blogs.technet.com/b/microsoft_on_the_issues/archive/2013/08/15/the-limits-of-google-s-openness.aspx">From Microsoft’s official “Microsoft on the Issues” Blog:</a></p>\n<blockquote>\n<p>It seems to us that Google’s reasons for blocking our app are manufactured so that we can’t give our users the same experience Android and iPhone users are getting. The roadblocks Google has set up are impossible to overcome, and they know it.</p>\n</blockquote>\n<p>It’s ok to have an open API, and it’s ok to not have an open API so that your competitors can’t benefit from your services, but claiming to have an open API and then shutting out users of a competitors platforms on a string of technicalities? That’s just a joke.</p>\n'}},function(e,t){e.exports={title:"Stability vs Decline",date:"2016-03-09 06:04:39+00:00",layout:"post",path:"/2016/03/09/stability-vs-decline",category:"software-productivity",key:"stability-decline",description:"What is the difference between stable and declining software?",readNext:"backbone-eco,backbone-devs-react,bb-radio",pageViews:"782",last30pageViews:"4",body:'<p>My post on <a href="http://benmccormick.org/2016/03/07/the-sad-state-of-the-backbone-ecosystem/">the sad state of the Backbone ecosystem</a> from this weekend was surprisingly popular.  I got a lot of responses pointing out <a href="https://twitter.com/ben336/status/707063566940016645">some things I got wrong</a>, sharing my concerns, or pushing back on my main points.  Objections to the post came in 2 primary forms, which I want to quickly address.  The first concern is that the Backbone ecosystem doesn’t matter. The second concern is that the trend I’m identifying as decline and decay is actually stability.</p>\n<h3>Does Backbone’s ecosystem matter?</h3>\n<p>The first concern came in 2 main forms.  The first (and more polite) form was from commenters who shared their experience and said that they’d found Backbone’s core to be enough when combined with their own code.  The second group was a generalization of that, effectively saying that Backbone is a minimal framework, and <strong>real programmers</strong> can write their own code on top of that.  I’m sympathetic to the first framing, much less so to the second.</p>\n<p>One of the beauties of Backbone is that it can be used in a variety of ways.  Its small and simple enough that you can pull it in and use only part of it (maybe just the models or event system for instance), but it has been scaled to be used for large web applications like Trello, Rdio, Backbone, Bitbucket and others. Some of those use cases quite frankly, don’t need anything else most of the time.  If you’re writing a very simple single screen piece of interactive behavior with Backbone, you don’t need any special extra libraries for that.</p>\n<p>I personally work on a large scale web application (~200 Backbone Views) that has been developed for over 3 years and will continue to be developed (hopefully) for a long time. In that situation, having well documented, tested and supported third party libraries for common tasks like rich tables, form validation, UI component libraries, and integrations with other tools is tremendously useful.  As an experienced developer, I’m capable of writing all of these things myself, but doing so takes time, and the result is likely to be less stable, less well documented, and less well thought through than a popular open source solution.  To be clear, nobody is obligated to write these things for me.  I’m merely making a factual statement that the experience of writing a large web application in Backbone becomes more difficult as the community around the library shrinks.</p>\n<p>There’s a second reason why down playing the importance of an ecosystem is harmful though.  I’ve said that I am capable of writing the various components of an ecosystem myself.  But that’s only true of me because I have years of experience writing code, and specifically of working with different libraries that gave me ideas on how those problems should be tackled.  A community that says you should be able to do everything yourself without starting places and good examples is a community that is hostile to beginners.  Let’s not let the JavaScript community be that.</p>\n<h3>Is Backbone just stable?</h3>\n<p>The second disagreement (and the most common theme on <a href="https://news.ycombinator.com/item?id=11237283">Hacker News</a>) was that the current state of Backbone and its ecosystem is not sad at all.  Backbone is stable, and thats something to be celebrated.  In some cases this echoed what I actually said in the post.  I specifically called out the core Backbone library as a good example of stable software:</p>\n<blockquote>\n<p>I’m starting with Backbone itself to give an idea what a stable mature project graph looks like. Backbone isn’t getting the activity it used to, but there’s still a steady flow of bug fixes and documentation updates, and issues are being worked through.</p>\n</blockquote>\n<p>Backbone is stable, and in a vacuum that is something to be happy about.  Stability has not prevented it from having an active team of contributors who are continuing to refine it and make small improvements.  This is great, and on it’s own would make me incredibly pleased as a user.  The problem comes with the libraries around it.  Excepting Marionette, which appears to be getting ready to launch their long awaited version 3, activity in the ecosystem has stagnated in a different way than Backbone core.</p>\n<p>Unlike Backbone core, secondary libraries have important issues requested by several people being ignored.  I’ve chosen to avoid calling out specific projects because I don’t think anyone has a responsibility to fix other people’s open source problems and don’t want to add to open source guilt.  But it is not hard to find examples of this if you browse through popular Backbone packages on Github.</p>\n<p>Unlike Backbone core, secondary libraries sometimes have no clear active maintainer who can be counted on to put out a release in the case of an emergency change being needed.  This matters because Backbone and JavaScript libraries in general live on an unstable platform.  Browsers change all the time.  While they do their best to maintain backwards compatibility, browsers occasionally introduce bugs, and occasionally fix bugs that a library may have been relying on or working around. In addition to disaster scenarios like that, tools change and best practices change over time.  When documentation stagnates and doesn’t keep up with changes, libraries become less useful and approachable over time.  Most Backbone tutorials on the web, and the documentation for many libraries, assume that scripts will be loaded in directly and that variables will be referenced through namespacing.  In a world where module loaders are becoming a default tool for larger JavaScript applications, thats a gap that makes libraries hard to learn, or teaches out of date practices to less experienced developers.</p>\n<p>A healthy stable project ought to be able to check off 3 boxes.</p>\n<ol>\n<li>\n<p>It meets the goals of its authors</p>\n</li>\n<li>\n<p>Major bugs are fixed as they’re reported.</p>\n</li>\n<li>\n<p>It is maintained to the extent that as new issues come in, they are responded to and dealt with</p>\n</li>\n</ol>\n<p>That definition could mean that a library handles a single use cases, and there is rare activity because nobody ever encounters any problems.  But for larger projects, this likely means refinements to fix small issues, documentation changes, and an occasional big bugfix over time. Its these things that make the difference between stable software and abandonware.</p>\n<h3>What does it matter in the end?</h3>\n<p>I didn’t write my original post to say that Backbone is dead.  I wanted to highlight a way in which the experience of using it has declined over time.  It is specifically a way that makes using Backbone harder for me.  I’m grateful to the many people who have built Backbone and the ecosystem around it, and think it is still a very useful tool.  This ecosystem issue does make me unlikely to recommend Backbone for folks who are building web applications “at scale”.  I think Ember or possibly React are better choices for that.  For small one off projects, and for content focused sites that need as little JavaScript as possible while still providing a rich experience, Backbone is a great choice.</p>\n'}},function(e,t){e.exports={title:"Staying DRY with Marionette Behaviors",date:"2015-03-23 04:04:17+00:00",layout:"post",path:"/2015/03/23/staying-dry-with-marionette-behaviors",description:"How to keep your Views DRY using Behaviors in your Marionette app",keywords:"Marionette.js behaviors JavaScript",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"9684",last30pageViews:"146",body:'<p><em>This is the sixth post in a series on <a href="http://marionettejs.com/">Marionette.js</a>.  For more background on what Marionette is, check out the series page, <a href="http://benmccormick.org/marionette-explained/">Marionette Explained</a></em></p>\n<p>Any successful project draws complaints, and <a href="http://backbonejs.org/">Backbone.js</a> is a successful project by pretty much any measurement.  The biggest complaints I’ve heard leveled against Backbone as an MVC framework revolve around the boilerplate involved in writing Backbone apps.  The claim goes that Backbone forces you to write the same event binding and workflow code over and over again.  In general I’d claim that’s a feature of <em>bad</em> Backbone apps, and  not something unavoidable.  But it’s certainly true that Backbone doesn’t give you much guidance on how to reduce repetition and boilerplate in your code.  Making it easy to reduce repetition turns out to be one of the main roles of <a href="http://marionettejs.com/">Marionette</a>. This post is a look at one of the tools that Marionette provides to help you simplify your applications: the Behavior class.</p>\n<p>Marionette Behaviors are reusable chunks of UI logic that you can mix into your Views.  When you have a common problem that you face across several Views, Behaviors can help you reduce boilerplate and repetition.  We’ll take a look at a practical example first, and then we can get into the Behaviors API.</p>\n<p>Let’s see how Behaviors can help us write better form validation code.  When I’m validating forms, I use the <a href="http://thedersen.com/projects/backbone-validation/">backbone.validation</a> library. It provides helpers for checking the validity of model properties and attaching error messages to inputs, but doesn’t force a specific workflow. However, I have a specific flow I usually want.  A user should be able to enter data as they see fit to start, with no validation warnings until they’ve tried to submit the form.  After they’ve initially submitted the form, warnings should appear next to any invalid fields, and they should update and disappear as the user fixes their input.</p>\n<p>That process is pretty easy to implement with backbone.validation.  I simply connect my Model to each form View I create, and in the Model I add some logic to re-validate each time the Model is changed, but only after the first time validation is triggered by a user submit.  That works great in most cases.  The problem comes when I need to re-render my view in the middle of this process.  This is a pretty common occurrence if your form has sub-views that may appear based on the contents of other parts of the form. In that case, I have to make sure that the validation state persists across renders.  That might look something like this. <sup id="fnref:1"><a href="#fn:1">1</a></sup></p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Mn <span class="hljs-keyword">from</span> <span class="hljs-string">\'marionette\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Validation <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone-validation\'</span>;\n\n<span class="hljs-keyword">var</span> FormView = Mn.LayoutView.extend({\n\n    <span class="hljs-attr">template</span>: <span class="hljs-string">\'#form\'</span>,\n\n    <span class="hljs-attr">ui</span>: {\n        <span class="hljs-attr">submit</span>: <span class="hljs-string">\'.submit\'</span>\n    },\n\n    <span class="hljs-attr">events</span>: {\n        <span class="hljs-string">\'click @ui.submit\'</span>: <span class="hljs-string">\'submitForm\'</span>\n    },\n\n    <span class="hljs-attr">modelEvents</span>: {\n        <span class="hljs-string">\'validated\'</span>: <span class="hljs-string">\'setValidated\'</span>,\n    },\n\n    <span class="hljs-attr">onRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//any other post-render View code here</span>\n\n        Validation.bind(<span class="hljs-keyword">this</span>);\n        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.validated) {\n            <span class="hljs-keyword">this</span>.model.validate();\n        }\n    },\n\n    <span class="hljs-attr">setValidated</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">this</span>.validated = <span class="hljs-literal">true</span>;\n    },\n\n    <span class="hljs-attr">submitForm</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//handle form submission</span>\n    }\n\n});\n</code></pre>\n<p>So it’s not that much code to add the functionality we want.  But when we need this code on multiple Views, adding and maintaining it becomes a pain quickly, creating the type of boilerplate that developers rage against.  So how can Behaviors help? It turns out to be easy to pull the functionality from our example out into a separate Behavior that any View can implement.</p>\n<p>That would look something like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Mn <span class="hljs-keyword">from</span> <span class="hljs-string">\'marionette\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Validation <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone-validation\'</span>;\n\n<span class="hljs-keyword">var</span> ValidationBehavior = Mn.Behavior.extend({\n\n    <span class="hljs-attr">modelEvents</span>: {\n        <span class="hljs-string">\'validated\'</span>: <span class="hljs-string">\'setValidated\'</span>,\n    },\n\n    <span class="hljs-attr">onRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//Set up any other form related stuff here</span>\n        Validation.bind(<span class="hljs-keyword">this</span>.view);\n        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span>.hasBeenValidated) {\n            <span class="hljs-keyword">this</span>.view.model.validate();\n        }\n    },\n\n\n    <span class="hljs-attr">setValidated</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">this</span>.hasBeenValidated = <span class="hljs-literal">true</span>;\n    },\n\n});\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> ValidationBehavior;\n</code></pre>\n<p>You could then pull the Behavior back into the View like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Mn <span class="hljs-keyword">from</span> <span class="hljs-string">\'marionette\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Validation <span class="hljs-keyword">from</span> <span class="hljs-string">\'backbone-validation\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ValidationBehavior <span class="hljs-keyword">from</span> <span class="hljs-string">\'behaviors/validation\'</span>;\n\n<span class="hljs-keyword">var</span> FormView = Mn.LayoutView.extend({\n\n    <span class="hljs-attr">template</span>: <span class="hljs-string">\'#form\'</span>,\n\n    <span class="hljs-attr">ui</span>: {\n        <span class="hljs-attr">submit</span>: <span class="hljs-string">\'.submit\'</span>\n    },\n\n    <span class="hljs-attr">events</span>: {\n        <span class="hljs-string">\'click @ui.submit\'</span>: <span class="hljs-string">\'submitForm\'</span>\n    },\n\n    <span class="hljs-attr">behaviors</span>: {\n        <span class="hljs-attr">validation</span>: {\n            <span class="hljs-attr">behaviorClass</span>: ValidationBehavior\n        }\n    },\n\n    <span class="hljs-attr">submitForm</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-comment">//handle form submission</span>\n    }\n});\n</code></pre>\n<p>We could do this for any number of Views that required validation.  The same thing can be done for many other types of functionality, including key-binding and “warn before delete”.</p>\n<h3>Behaviors API</h3>\n<p>Behaviors have essentially the same API as Marionette Views, because they’re meant to be extracted out of existing Views.  So the event hashes, ui elements, and life-cycle methods that you find on a Marionette View are all also available on Behaviors.  The life cycle functions on a Behavior execute immediately after their corresponding functions on the Behavior’s associated View. Behaviors also get <code>el</code>, <code>$el</code> and <code>$</code> properties that are proxied to the equivalent properties on the Behaviors view.</p>\n<p>Behaviors are not just mixins though. Behavior properties are isolated from the Views they’re associated with, preventing naming collisions and also encouraging reusable, decoupled designs.  Generally Behaviors don’t directly modify their associated Views or data.  The communication flow is one way, with Behaviors accepting input from their parent View in the form of an options object that is attached to the Behavior when it is created.  You can pass these options through using the behaviors hash on the View.  For instance to pass an error message to the validation behavior above, you could define your behaviors hash like this:</p>\n<pre><code>    <span class="hljs-selector-tag">behaviors</span>: {\n        <span class="hljs-attribute">validation</span>: {\n            behaviorClass: ValidationBehavior,\n            errorMessage: <span class="hljs-string">\'You did something wrong.\'</span>\n        }\n    },\n</code></pre>\n<h3>A quick note on how Behaviors attach to Views</h3>\n<p>You can see in the example above that the general form for attaching Behaviors to a View is to include a key-value pair for each Behavior, where the value is an object that lays out the options for the Behavior.  The interesting thing in the example above is that the name of the key doesn’t matter at all.  It’s not used by the library in any way; instead Marionette picks out the correct behavior to use based on the behaviorClass property in the value.  So why is the API structured like that?  To understand, you need to know that the Behaviors API supports two separate scenarios for looking up the correct Behaviors for a View.</p>\n<p>The original API Marionette included for looking up Behaviors requires you to override a behaviorsLookup function on Marionette to tell the library where to retrieve your Behaviors from.  The keys of the behaviors hash on a view were passed to the lookup function, which then retrieved the Behavior classes from wherever the user chose to store them (probably a global namespace object).</p>\n<p>That API works great for developers used to using namespaces to organize their code, but for developers using modern JavaScript module loaders, it introduces global state and indirection where it wasn’t needed.  To handle this case, the behaviorClass key was added as an option for the value object, allowing developers to specify Behaviors as dependencies of the file they were defining a View in, and then attach the Behavior directly to the View.</p>\n<p>That makes much more sense for module users, but leads to a clunky API where the keys aren’t used.  Fortunately, in newer versions of Marionette you can get around this entirely, by defining your behaviors as an array on a view.  So the example above would look like:</p>\n<pre><code>    <span class="hljs-attribute">behaviors</span>: [{\n        <span class="hljs-attribute">behaviorClass</span>: ValidationBehavior,\n        <span class="hljs-attribute">errorMessage</span>: <span class="hljs-string">\'You did something wrong.\'</span>\n    }]\n</code></pre>\n<p>This works due to an undocumented implementation detail in Marionette 2.4.1 <sup id="fnref:2"><a href="#fn:2">2</a></sup>, but will be <a href="https://github.com/marionettejs/backbone.marionette/pull/2368">fully supported</a> in future versions.  In future versions you also will be able to pass a class directly as an array item if the Behavior is not taking any arguments, further cleaning up the API.</p>\n<h3>When are Behaviors useful?</h3>\n<p>Marionette’s documentation explains Behaviors very broadly, which makes sense for official documentation since it gives ideas without limiting how users think about them.  But in my experience Behaviors are best used for three different use-cases.</p>\n<h4>Sharing common event handling logic</h4>\n<p>This is the most obvious use for Behaviors, and what the documentation focuses on.  It’s easy to set up common event based UI patterns like “warn on close” with behaviors.  But they also can be used for more complicated event based UI logic.  At Windsor Circle we use 2 behaviors to share common “drag and drop” code with a Droppable Behavior that can be implemented by a CollectionView and a Draggable Behavior for ItemViews.  That makes it simple to make any CollectionView based list sortable with drag and drop, and keeps the code in a nice central place where any improvements will be shared across the code base.</p>\n<h4>Sharing common life-cycle functions</h4>\n<p>In addition to event handling, Behaviors also give you access to the various <a href="http://benmccormick.org/2015/01/05/marionette-view-life-cycles/">life cycle</a> methods of Marionette Views.  That lets you split out common life cycle functionality and reduce code.  An easy example of this would be a Behavior that fades a View in each time by adding a css class with an animation associated with it.</p>\n<pre><code><span class="hljs-keyword">let</span> FadeIn = Marionette.Behavior.extend({\n    <span class="hljs-attr">onBeforeShow</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">this</span>.$el.addClass(<span class="hljs-string">\'hidden fadein\'</span>);\n    },\n    <span class="hljs-attr">onShow</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">this</span>.$el.removeClass(<span class="hljs-string">\'hidden\'</span>);\n    }\n});\n</code></pre>\n<p>which would work with a CSS snippet like this:</p>\n<pre><code><span class="hljs-selector-class">.fadein</span> {\n  <span class="hljs-attribute">transition</span>: opacity <span class="hljs-number">1s</span>;  \n  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">1</span>;\n}\n\n<span class="hljs-selector-class">.fadein</span><span class="hljs-selector-class">.hidden</span> {\n    <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;\n}\n</code></pre>\n<h4>Simplifying integration with libraries</h4>\n<p>This final use case is a special case of the first 2, but I think its worth mentioning in its own\ncategory.  Many 3rd party Backbone or jQuery libraries require repetitive initialization code to use within a View.  This code is often the same across all Views, or only requires minor tweaks.  The perfect use case for a Behavior!  The Validation code above is one example of this, but it’s useful for many plugins.  For instance, if you use the <a href="http://harvesthq.github.io/chosen/">Chosen</a> jQuery plugin to create rich dropdown boxes, you could create a Behavior to automatically initialize select elements with Chosen, and optionally pass a class to restrict it to only initialize selects with a specific class.</p>\n<pre><code><span class="hljs-keyword">let</span> UseChosen = Marionette.Behavior.extend({\n    <span class="hljs-attr">onRender</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        <span class="hljs-keyword">let</span> className = <span class="hljs-keyword">this</span>.options.className,\n            chosenOptions = <span class="hljs-keyword">this</span>.options.chosenOptions || {};\n        <span class="hljs-keyword">if</span>(className) {\n            <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'.${className}\'</span>).chosen(chosenOptions);\n        }\n        <span class="hljs-keyword">else</span> {\n            <span class="hljs-keyword">this</span>.$(<span class="hljs-string">\'select\'</span>).chosen(chosenOptions);\n        }\n    }\n});\n</code></pre>\n<h4>Wrap-Up</h4>\n<p>Behaviors are a great resource for avoiding repetition in your Backbone code.  If you have examples of good open-source Behaviors out there, please mention them in the comments.  I’d also love to hear what use cases you’ve found for them, even if the code isn’t public to share.</p>\n<h3>More Resources</h3>\n<ul>\n<li>Atomic Object has a <a href="http://spin.atomicobject.com/2014/09/11/marionette-behaviors-overview/">nice writeup</a> on Marionette Behaviors, and a <a href="http://spin.atomicobject.com/2014/09/12/testing-marionette-js-behaviors/">followup on testing them</a>.</li>\n<li>Behaviors seem to make the most sense to people when given examples of how you might use them.  One great open-source example is this <a href="https://github.com/behave-ui/behave-ui-hotkeys">key-binding Behavior</a> that makes it easy for you to add keyboard shortcuts to a View</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Going forward on this blog I\'m planning on using ES6 features in code examples where appropriate.  If the code looks weird to you check out <a href="https://babeljs.io/docs/learn-es6/">this nice summary of ES6 features</a>.    \n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        The latest version of Marionette at the time of writing.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'
}},function(e,t){e.exports={title:"Staying Productive",date:"2016-01-25 04:41:46+00:00",layout:"post",path:"/2016/01/25/staying-productive",category:"software-productivity",description:"Thinking through the environmental factors that lead to productivity",key:"staying-productive",pageViews:"1017",last30pageViews:"5",body:'<p>I’ve been thinking a lot lately about what makes me productive vs unproductive.  A lot of the time Software Developers tend to focus on their tools and environments when they think about productivity.  I’m certainly all into that, as you can see if you look <a href="http://benmccormick.org/learning-vim-in-2014/">back</a>, <a href="http://benmccormick.org/2015/11/25/productive-javascript-development/">through</a>, <a href="http://benmccormick.org/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far/">my blog</a>.  But in my mind the most important factors in building productivity are non-software related.</p>\n<h3>Setting Goals</h3>\n<p>By far the most important thing I’ve found for being productive was setting clear goals for what I want to get done.  Without goal posts to aim for, it’s hard to tell what you’ve really accomplished, and easy to get pulled off onto suboptimal tasks.  Goals are best set with a wider context in mind.  The act of setting and measuring goals tends to make us focus on those areas, so make sure your goals reflect your priorities.  If you set all of your goals around work, it can be easier to justify neglecting your family.  If you set a goal of writing every day, that might overwhelm time for exercising and keeping yourself healthy.  Therefore its helpful to set goals in a holistic way that allows you to judge what you value in the big picture.</p>\n<h3>Mechanical / Creative Tasks</h3>\n<p>I saw a great <a href="https://news.ycombinator.com/item?id=10959022">comment</a> on Hacker News the other day that differentiated between projects and chores. The idea is that when you’re feeling productive you should work on projects, when you’re not you should do chores.  One of the biggest boosts to my productivity I’ve found was when I started categorizing work in my head as “mechanical” vs “creative” tasks.  Mechanical tasks (ie chores) are things that require little mental energy.  They’re well defined and possibly onerous.  Examples include filing email, documenting code, code reviews, and low-thinking code tasks like reproducing a client issue or adding a small well-defined feature.  Creative tasks for me tend to look like more involved code changes designing new features, or debugging client issues that aren’t obvious.</p>\n<p>I’m not universally energetic or productive.  Some days I can focus intently on a problem, other days I have the attention span of <a href="https://www.youtube.com/watch?v=SSUXXzN26zg">the dogs from UP!</a>.  When I’m able to focus, I intentionally put aside mechanical tasks, and leave them for times when I have less energy, continuous time or attention.  Oftentimes I’ll even put off higher priority mechanical tasks (or vice versa) to match my mental level to the task, because I end up getting more done sooner in the long run.</p>\n<h3>Productive Environments are a thing</h3>\n<p>It’s easy to think of productivity as a purely internal thing.  But the environment you’re in matters too.  For creative software work that means getting large blocks of non-distracting time.  That requires some intentionality.  I’ve been blessed with a workplace where I’m given plenty of flexibility.  That means that at times of high distraction-level (big projects, lots of meetings) I tend to actually do most of my work outside of the office, sometimes at weird times.  I use my time at the office for mechanical tasks and meetings, and do the creative work elsewhere.  That’s obviously suboptimal, and when I can I try to clear time during days to do creative work at the office and bunch the distractions.  However it works out for you, the key is to (as much as possible) group your distractions and leave large un-interrupted periods for creative work.</p>\n<p>Distractions can be self-inflicted as well as coming from others.  When I want to get stuff done, I try to listen to familiar music (oftentimes looping a single album for a few days).  I’ll also close Slack/Twitter/Email and other distracting apps.  Note that the distinction between mechanical and creative is important here.  When doing mechanical work, I’m fine having distractions around.  It’s only when I’m trying to harness mental energy that I care.</p>\n<h3>Day to Day work adds up</h3>\n<p>I’m a <a href="http://blog.codinghorror.com/the-magpie-developer/">magpie</a>.  I love shiny new tools, projects, and ideas.  It’s very easy for me to get bored with a problem once I feel like I understand it.   I get excited by pouring effort into learning something new, not so much the hard work to finish the last 20% of what I’ve started.  What I’m slowly learning though is that it is my day-to-day work that makes an impact, not my crazy productivity binges.  Making things that last requires day to day dedication.  That also means maintaining focus.  The easiest way to waste day to day hard work is to spend it on a different thing each day.  There’s nothing wrong with trying new things.  But real productivity requires setting some priorities and sticking with them for a while.</p>\n<h3>Team matters more than the project</h3>\n<p>Finally, individual productivity doesn’t happen in a vacuum.  Who we work with can undermine or boost our results.  I don’t believe that it’s a small difference either.  I’d rather have a great team with no individually brilliant members than a bad team with one or two great programmers any day.  One of <a href="http://www.windsorcircle.com/about-us/our-values">Windsor Circle’s values</a> is that teams survive longer than individuals.  The same can be said of their results.  Teams can magnify what is possible for a product.  Any individual has limits on what he or she can create.  Teams allow for those limits to be lifted by building on each others skills. At the same time, teams can limit each other by fighting, mis-communicating, distracting, or pursuing different goals.  So all of the other productivities ideas here can be applied just as well to a team as they do to an individual.  The best work comes from teams consistently working together towards a common goal over a long period of time in a constant and productive environment.</p>\n'}},function(e,t){e.exports={title:"Sublime Text For Javascript: Configuration",date:"2013-01-01 18:00:00+00:00",layout:"post",path:"/2013/01/01/sublime-text-for-javascript-configuration",category:"tools",description:"Helpful configuration options for JS developers",pageViews:"9290",last30pageViews:"49",body:'<p>I’m starting a new series of posts on Sublime Text, and how to get the most out of the editor.\nThe series will be focused on Javascript development, as that is how I use Sublime Text, but it should be applicable to any developer who uses Sublime Text as part of their workflow.</p>\n<ul>\n<li><a href="http://benmccormick.org/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts">Sublime Text For Javascript: Keyboard Shortcuts</a></li>\n<li><a href="http://benmccormick.org/2013/01/01/sublime-text-for-javascript-configuration">Sublime Text For Javascript: Configuration</a></li>\n<li><a href="http://benmccormick.org/2013/01/03/sublime-text-for-javascript-plugins">Sublime Text For Javascript: Packages</a></li>\n</ul>\n<h3>Configuration</h3>\n<p>Sublime Text allows for plenty of text editing power out of the box, but the real power comes\nwhen you begin configuring it to meet your own needs.  This is by definition a topic that different people will approach in different ways, but in this post I will attempt to give an overview of what is configurable in Sublime Text (<strong>Spoiler: almost everything</strong>), and how to configure them.</p>\n<h3>The Basics</h3>\n<p>Sublime Text settings are defined using json files.  There are multiple levels of configuration\nto give you very fine grained control of how your editor will act for different files.\nFrom the <a href="http://www.sublimetext.com/docs/2/settings.html">Sublime Docs</a>,  settings are prioritized like this:</p>\n<blockquote>\n<p>Settings files are consulted in this order:</p>\n<p>Packages/Default/Preferences.sublime-settings\nPackages/Default/Preferences (platform).sublime-settings\nPackages/User/Preferences.sublime-settings\n&lt;Project Settings &gt;\nPackages/ &lt;syntax &gt; / &lt;syntax &gt;.sublime-settings\nPackages/User/&lt;syntax &gt;.sublime-settings\n&lt;Buffer Specific Settings &gt;</p>\n</blockquote>\n<p>Settings can be set on a default, user, project, or syntax-type basis, and add specific\nsettings for distraction free mode.</p>\n<p><strong>Never set your options using the Default-Settings files!</strong></p>\n<p>The default settings files for Sublime text will be overwritten when you update\nto a new version, and the plugin specific settings will be overwritten when those\nplugins are updated.  Always use the “User-Settings” files instead for &quot;global&quot;\nsettings.  Its not a bad idea to immediately copy the default settings file to\nthe User-Settings file when you’re initially setting up sublime so that you can\nsee all of the options that are set in that file and edit them accordingly.</p>\n<p>Heres my User-Settings file for my Windows-based version of Sublime:</p>\n<pre><code class="language-json">{\n    // Modified Solarized Theme with Mardown Support (https://gist.github.com/1904917)\n   "color_scheme": "Packages/User/Solarized (Light).tmTheme",\n\n    "font_face": "Consolas",\n    "font_size": 8,\n\n    // Valid options are "no_bold", "no_italic", "no_antialias", "gray_antialias",\n    // "subpixel_antialias", "no_round" (OS X only) and "directwrite" (Windows only)\n    "font_options": ["directwrite"],\n\n    // If enabled, will highlight any line with a caret\n    "highlight_line": true,\n\n    // Set to true to automatically save files when switching to a different file\n    // or application\n    "save_on_focus_lost": true,\n\n    // Columns in which to display vertical rulers\n    "rulers":\n    [\n        80\n    ],\n\n    // The theme controls the look of Sublime Text\'s UI (buttons, tabs, scroll bars, etc)\n    "theme": "Soda Light.sublime-theme",\n\n    // Set to true to close windows as soon as the last file is closed, unless\n    // there\'s a folder open within the window. This is always enabled on OS X,\n    // changing it here won\'t modify the behavior.\n    "close_windows_when_empty": true,\n\n    // List any packages to ignore here. When removing entries from this list,\n    // a restart may be required if the package contains plugins.\n    "ignored_packages":\n    [\n        "Default",\n        "Vintage",\n        "ZenCoding"\n    ]\n}\n</code></pre>\n<h3>Visuals</h3>\n<p>One of the most configurable thing about Sublime Text is the GUI.  If you don’t\nlike something about how the program looks, it is probably configurable. Some of the\nmost important visual settings are below:</p>\n<h4>Color Scheme</h4>\n<p>The most obvious configurable visual setting is the color scheme.  Sublime ships\nwith a solid selection of default color schemes, and its easy to find and download\nmore online with <a href="http://wbond.net/sublime_packages/package_control">Package Control</a>, which I’ll cover more in the\nplugins article.  I use Sublime’s Monokai Bright theme for JS development, and a\n<a href="https://gist.github.com/1904917">custom Solarized theme</a> for writing in Markdown for this blog and my\nnotes.  You can set color scheme with a command like this in one of your settings files</p>\n<pre><code class="language-javascript"><span class="hljs-string">"color_scheme"</span>: <span class="hljs-string">"Packages/User/Solarized (Light).tmTheme"</span>\n</code></pre>\n<p>or you can set it in the preferences menu on the top of the screen (this will set it\nin your User-Settings file)</p>\n<h4>Theme</h4>\n<p>You can also configure the overall look and feel of the application.  While the\ndefault is by no means ugly, many people prefer the <a href="https://github.com/buymeasoda/soda-theme/">Soda</a> theme that adds\nsome prettier gradients and a choice of a light/dark theme.  You can set that\nlike this after downloading the theme:</p>\n<pre><code class="language-javascript"><span class="hljs-string">"theme"</span>: <span class="hljs-string">"Soda Light.sublime-theme"</span>,\n</code></pre>\n<h4>Quickies</h4>\n<p>Here are a few more quick visual tweaks</p>\n<ul>\n<li>“rulers”: set where to show vertical rulers.  Takes an array of integers.  I put one at 80 in order to limit my line lengths in javascript.</li>\n<li>“tab_size”,“translate_tabs_to_spaces”, and &quot;use_tab_stops: Determine space and tabs behaviors.</li>\n<li>“highlight_line”: If true will highlight every line with a cursor</li>\n</ul>\n<h3>Key Bindings</h3>\n<p>This is where all of the information from <a href="http://benmccormick.org/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts">Monday’s post</a> starts to become a whole lot less useful.  All of the keyboard shortcuts that were discussed in that post are completely configurable.  Again you want to use the “User” preferences file in\nPackages/User to set the keybindings.  Keybindings are stored in json form like this:</p>\n<pre><code class="language-json">{ "keys": ["ctrl+z"], "command": "undo" },\n{ "keys": ["ctrl+shift+z"], "command": "redo" },\n{ "keys": ["ctrl+y"], "command": "redo_or_repeat" },\n{ "keys": ["ctrl+u"], "command": "soft_undo" },\n{ "keys": ["ctrl+shift+u"], "command": "soft_redo" },\n</code></pre>\n<p>You can override existing shortcuts to make common commands more convenient or\ncreate your own by combining <a href="http://www.sublimetext.com/docs/commands">sublime commands</a>.  One cool trick is the ability to define keyboard shortcuts to toggle settings.</p>\n<blockquote>\n<p>The toggle_setting command can be used to toggle a setting. For example, to make a key binding that toggles the word_wrap setting on the current file, you can use (in Preferences/Key Bindings - User):</p>\n</blockquote>\n<pre><code class="language-json">{\n    <span class="hljs-attr">"keys"</span>: [<span class="hljs-string">"alt+w"</span>],\n    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"toggle_setting"</span>,\n    <span class="hljs-attr">"args"</span>:\n    {\n        <span class="hljs-attr">"setting"</span>: <span class="hljs-string">"word_wrap"</span>\n    }\n}\n</code></pre>\n<blockquote>\n<p>The set_setting command can be used to set a setting to a specific value. For example, this key binding makes the current file use the Cobalt color scheme:</p>\n</blockquote>\n<pre><code class="language-json">{\n    <span class="hljs-attr">"keys"</span>: [<span class="hljs-string">"ctrl+k"</span>, <span class="hljs-string">"ctrl+c"</span>],\n    <span class="hljs-attr">"command"</span>: <span class="hljs-string">"set_setting"</span>,\n    <span class="hljs-attr">"args"</span>:\n    {\n        <span class="hljs-attr">"setting"</span>: <span class="hljs-string">"color_scheme"</span>,\n        <span class="hljs-attr">"value"</span>: <span class="hljs-string">"Packages/Color Scheme - Default/Cobalt.tmTheme"</span>\n    }\n}\n</code></pre>\n<p>The settings modified here are buffer specific settings: they override any settings placed in a settings file, but apply to the current file only.</p>\n<h3>Plugins</h3>\n<p>Plugins also sometimes have their own configuration files.  These generally mimic the format of the editor, and its adviced as usual to use the User Settings for these so as to avoid having your settings blown away with updates</p>\n<h3>Build Systems</h3>\n<p>Sublime also lets you configure custom build systems to build your project.  These can be defined at the same levels of everything else, though in this case it probably makes most sense at the syntax and project level.</p>\n<h3>Projects</h3>\n<p>Projects are a great way to organize your Sublime Text files.  You can set up a project\nat any time by creating a .sublime-project file (this will happen automatically if you choose save project or edit project in the Project toolbar menu).  The project configuration menu takes a list of folders, a list of settings, and a list of build system settings as a JSON file.  These settings will then override your user level settings for files in the folders that you specify.  This lets you meet project specifications for things like tabs or line length without constantly fiddling with settings.  You also can enable or disable different plugins based on project, and create visual distinction between projects with different color themes.</p>\n<h3>Macros</h3>\n<p>Macros let you save a series of common commands as a json file.  You can then run them\nfrom the “Tools/Macro” menu.  There’s more information in the <a href="http://docs.sublimetext.info/en/latest/extensibility/macros.html">unofficial docs</a></p>\n<h3>Snippets</h3>\n<p>One final thing that you can configure in Sublime Text is “Snippets”.  Sublime Snippets provide advanced templating ability thats configured with an XML template.  A detailed description of what you can do with snippets is available in the <a href="http://docs.sublimetext.info/en/latest/extensibility/snippets.html">unofficial docs</a>.  Suffice it to say that it allows everything from a simple text replacement to full  templating based on a variety of environment variables.</p>\n<p>Sublime contains several Javascript related snippets by default for several basic tasks, and there are more that you can find in other places around the internet.  <a href="http://freshbrewedcode.com/jonathancreamer/2012/07/13/a-couple-of-useful-javascript-sublime-text-2-snippets/">Here’s one example by Jonathan Creamer</a> with a few snippets for plugin development, and a nice little console.log snippet for quick development.</p>\n<h3>Summary</h3>\n<ol>\n<li>Pretty much everything in Sublime can be customized using JSON files</li>\n<li>Use User files or project/syntax specific files, not the Default files</li>\n<li>Learn your options and you can get a lot more out of Sublime Text</li>\n</ol>\n<p>I hope this is helpful.  I’ll be following up with one final post later this week on helpful Sublime plugins for javascript development.</p>\n'}},function(e,t){e.exports={title:"Sublime Text For Javascript: Keyboard Shortcuts",date:"2012-12-30 21:00:00+00:00",layout:"post",path:"/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts",category:"tools",description:"Helpful keyboard shortcuts for JS developers",pageViews:"14295",last30pageViews:"141",body:'<p>I’m starting a new series of posts on Sublime Text, and how to get the most out of the editor.\nThe series will be focused on Javascript development, as that is how I use Sublime Text, but it\nshould be applicable to any developer who uses Sublime Text as part of their workflow.</p>\n<ul>\n<li><a href="http://benmccormick.org/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts">Sublime Text For Javascript: Keyboard Shortcuts</a></li>\n<li><a href="http://benmccormick.org/2013/01/01/sublime-text-for-javascript-configuration">Sublime Text For Javascript: Configuration</a></li>\n<li><a href="http://benmccormick.org/2013/01/03/sublime-text-for-javascript-plugins">Sublime Text For Javascript: Packages</a></li>\n</ul>\n<h2>Keyboard Shortcuts</h2>\n<p><img src="/posts/images/Sublime_cheat_sheet.png" alt="Keyboard Shortcuts"></p>\n<h5>Update: Get a <a href="https://github.com/ben336/benmccormick_blog_posts/blob/master/images/post_images/sublime_cheatsheet.pdf?raw=true">printable cheat sheet here</a>)</h5>\n<p>When you’ve gotten comfortable with a quality text editor, it should really be unnecessary to\nmove your hands off the keyboard. Sublime Text gives you a ton of power without ever touching\nyour mouse.  It takes a little while to get up to speed with its way of doing things, but the\nmore you use these shortcuts, the more you want to use Sublime Text.</p>\n<p><strong>Note: I will be using windows based commands for these examples.  In general they are the same for linux, and similar for OSX, with command replacing ctrl, and alt replacing shift in some cases.</strong></p>\n<h3>Navigation</h3>\n<h4>Ctrl + P  (Go To Anything)</h4>\n<p>We’re starting with the best here.  Ctrl + P opens up “Go To Anything”.  This allows for\nfuzzy search with Google Instant style results from among all open files and files in your current project.</p>\n<p>So you could start typing “mpag” and the editor would instantly load up mainPage.html into your editor pane, while showing a list of possible hits in your command palette, with a score next to them showing the confidence level of the match.  The speed of this feature is amazing.</p>\n<p>The real power of Go To Anything though comes when you combine it with subcommands.\nGo To Anything supports 3 subcommands</p>\n<ul>\n<li><strong>@</strong> - this lets you specify a function within the file that you want to go to.  This can\nalso be fuzzy-matched, so chb@setbg might take you immediately to the setBackground\nmethod of the chartbuilder.js file.</li>\n<li><strong>:</strong> - this lets you go to a line by number.  So chb:100 will take you to line 100 of chartbuilder.js</li>\n<li><strong>#</strong> - this lets you search for a string in the file so chb#extend will take you to\nthe first occurence of “extend” in Chartbuilder.js.</li>\n</ul>\n<p>You can also use these subcommands by themselves (Ctrl+ subcommand) to navigate within the current file.</p>\n<p>After you’ve found the location you want, you can hit enter and begin editing immediately.</p>\n<h4>Ctrl + alt + P (Switch Project)</h4>\n<p>Sublime Projects are a powerful way to organize your work.  Switching projects allows\nyou to instantly open all windows that you had left open the last time you used the project.\nThis gives you the ability to instant switch between work-items without losing momentum\ngetting things set up the way you want.  ctrl + alt + P lets you switch projects within\nyour current window.</p>\n<h4>Ctrl + shift + P (Command Palette)</h4>\n<p>Sublime’s Command Palette probably deserves its own article.  But in essence this\nis the easiest way to control plugins, and also holds shortcuts for several of the lesser used\ncommands like setting syntax and controlling bookmarks.</p>\n<h4>Ctrl + PgUp, Ctrl + PgDown (Switch Files)</h4>\n<p>These let you switch between your open files.  There are also Ctrl+tab and Ctrl+shift+tab, which are listed as\nnext file in stack and previous file in stack.  I have seen no difference between the behavior of these two\nsets of commands.  If anybody knows the difference, please enlighten me in the comments.</p>\n<h4>F2 and variants (Bookmark Commands)</h4>\n<p>Sublime Texts bookmarks make it easy to move to predetermined locations in the file.  Bookmarks are set to a specific location in the file. There are several shortcuts associated with them.</p>\n<ul>\n<li><strong>Ctrl + F2</strong> - Toggles a bookmark from the current location.</li>\n<li><strong>F2</strong> - Go to next bookmark</li>\n<li><strong>Shift + F2</strong> - Go to previous bookmark</li>\n<li><strong>Alt + F2</strong> - puts a cursor at each bookmark location</li>\n<li><strong>Ctrl + Shift + F2</strong> - Clear all bookmarks</li>\n</ul>\n<h4>Search Commands</h4>\n<p>Sublime Text has a fairly standard set of search commands, with a few special twists</p>\n<ul>\n<li><strong>Ctrl + F</strong> - Search</li>\n<li><strong>Ctrl + Shift + F</strong> - Search in other files (gives a listing of all findings in a new file, you can use f4 to iterate over the results within their files)</li>\n<li><strong>F3</strong> - Find Next</li>\n<li><strong>Shift + F3</strong> - Find Previous</li>\n<li><strong>Ctrl + H</strong> - Replace</li>\n<li><strong>Ctrl + E</strong> - Search for current selection</li>\n</ul>\n<h4>A few more minor shortcuts</h4>\n<ul>\n<li><strong>Ctrl + M</strong> - Go to a matching bracket.  Goes to the end of the innermost set of brackets if not currently on a bracket.</li>\n<li><strong>Ctrl + K then Ctrl + C</strong> - Scrolls to move cursor to center of the screen</li>\n</ul>\n<h3>Selection and Multiple Cursors</h3>\n<p>One of the most powerful features of Sublime Text is its ability to easily select and manipulate text, especially\nthe way it can use multiple cursors simultaneously</p>\n<h4>Ctrl + D (Multiple Selection)</h4>\n<p>One of the cooler features of sublime text is its multiple selection option.  When you have some selected text,\nentering Ctrl+D selects the next instance of that selection.  You can do this repeatedly.  If you want to skip an instance\nyou can just hit Ctrl + K and then Ctrl + D again.  You can then edit all of the selections together, or use the multiple selections to make further changes.  The Esc key lets you go back to a single selection.</p>\n<h4>Ctrl + L (Select Line)</h4>\n<p>I use this one all the time.  Allows you to select the entire line the cursor is on.  Combined with Ctrl + D you can select\nevery line a selection appears on.</p>\n<h4>Ctrl + Shift + L (Split Selection into lines)</h4>\n<p>Splits a multiline selection into individual line selections, giving you a cursor for each line</p>\n<h4>Ctrl + alt + Up/Down (Add a new line with a cursor)</h4>\n<p>Adds a new line above or below the current line with an additional cursor at that line.\nLets you quickly start multiple lines with the same content</p>\n<h4>Ctrl + D Select Current Word</h4>\n<p>Expands the selection to the current word</p>\n<h4>Ctrl + Shift + Space - Expand selection to current block</h4>\n<p>The name of this feature in Sublime Text is “Expand selection to current scope”,\nbut thats misleading for javascript, which does not have block scope.  There are\na few more of these commands, but this and Ctrl + Shift + M (which appears to behave identically)\nare the relevant commands for Javascript.  Ctrl + Shift + A expands to tag for HTML.</p>\n<h3>Editing</h3>\n<h4>Ctrl + / (Add Comment)</h4>\n<p>If you add a shift it makes a block comment.</p>\n<h4>Ctrl + Enter (Move to a new line)</h4>\n<p>Moves to a new line below the current line.  Ctrl + Shift + Enter moves to a new line above the current line</p>\n<h4>Delete shortcuts</h4>\n<ul>\n<li><strong>Ctrl + del</strong> - Delete word forward (removes the rest of the word from cursor)</li>\n<li><strong>Ctrl + backspace</strong> - Delete word backward</li>\n<li><strong>Ctrl + Shift + K</strong> - Delete Line</li>\n<li><strong>Ctrl + K, Ctrl + K</strong> - Delete Line forward</li>\n<li><strong>Ctrl + K, Ctrl + backspace</strong> - Delete line backwards</li>\n</ul>\n<h4>Mark Commands</h4>\n<ul>\n<li><strong>Ctrl + k then Ctrl + space</strong> - Add a mark</li>\n<li><strong>Ctrl + k then Ctrl + A</strong> - Select to mark</li>\n<li><strong>Ctrl + k then Ctrl + W</strong> - Delete To mark</li>\n<li><strong>Ctrl + k then Ctrl + X</strong> - Switch Location with mark</li>\n<li><strong>Ctrl + k then Ctrl + G</strong> - Clear Mark</li>\n</ul>\n<h4>Some Quickies</h4>\n<ul>\n<li><strong>Ctrl + ]</strong> - Indent a line</li>\n<li><strong>Ctrl + [</strong> - Unindent a line</li>\n<li><strong>Ctrl + shift + up/down</strong> - Swap a line upwards/downwards</li>\n<li><strong>Ctrl + J</strong> - join line with next line</li>\n<li><strong>Ctrl + Shift + D</strong> - Duplicate line</li>\n<li><strong>Ctrl + T</strong> - Transposes the letter/word prior to the cursor with the one after.  I’ve never actually found a use for this in my js coding.</li>\n</ul>\n<h3>Finding The Power</h3>\n<p>Of course the real power of these shortcuts happens when you start using them for real things and combining them together.\nHere are a few real life examples of ways sublime text can speed up everyday javascript coding.</p>\n<h4>Creating a Javascript array from a CSV</h4>\n<p>If you have a CSV full of data that you want to convert into a 2d js array, you can simply select the whole area,\nuse Ctrl + Shift + L, hit end to move to the end of the lines, insert a “],” then hit home and add “[” to the start of each line.\nFinally hit escape, then [ to surround the selection with brackets.  Finally hit the right arrow to move to the end of the selection\nand move back to delete the trailing comma.  The whole transformation can be done with 10 keystrokes.</p>\n<h4>Renaming a variable or function</h4>\n<p>This is an obvious one, but Ctrl + D allows you to easily select every instance of a selection.  You can switch over “false positives” with Ctrl+K, Ctrl+D</p>\n<h4>Code Formatting</h4>\n<p>Want to move your curly brackets to a new line after the expression?  Ctrl +D all “){” instances then move left and enter.  You can move it back by selecting the plain { and using backspace, though you may need to skip some.  Fixing indentation is easy with Ctrl + [ and ctrl + ].</p>\n<h4>Editing in 2 functions</h4>\n<p>If you’re working on 2 functions, bookmarks can be great ways to easily navigate back and forth between 2 (or more sections of code)</p>\n<h3>This is just the start</h3>\n<p>Sublime Text is what you make of it.  If you use it regularly I suggest that you learn to use it well.\nYou don’t need to learn all the shortcuts, but find a few that work for you and make you a faster, more efficient coder.</p>\n<p>If you have suggestions for other great uses of keyboard shortcuts in Sublime Text, please leave them in the comments.</p>\n'}},function(e,t){e.exports={title:"Sublime Text For Javascript: Packages",date:"2013-01-03 21:00:00+00:00",layout:"post",path:"/2013/01/03/sublime-text-for-javascript-plugins",category:"tools",description:"Helpful packages for JS developers",pageViews:"6096",last30pageViews:"14",body:'<p>This is the final post in my series on Sublime Text, and how to get the most out of the editor.\nThe series is focused on Javascript development, as that is how I use Sublime Text, but it\nshould be applicable to any developer who uses Sublime Text as part of their workflow.</p>\n<ul>\n<li><a href="http://benmccormick.org/2012/12/30/sublime-text-for-javascript-keyboard-shortcuts">Sublime Text For Javascript: Keyboard Shortcuts</a></li>\n<li><a href="http://benmccormick.org/2013/01/01/sublime-text-for-javascript-configuration">Sublime Text For Javascript: Configuration</a></li>\n<li><a href="http://benmccormick.org/2013/01/03/sublime-text-for-javascript-plugins">Sublime Text For Javascript: Packages</a></li>\n</ul>\n<p>A large part of Sublime Text’s power comes from its extensive collection of packages.\nThere are packages for pretty much every use case.  I’m going to limit myself to listing 5 of the most useful for Javascript development, but its definitely worth looking around at the options to find more that fit what you want to do.</p>\n<h3>#1. Package Control - The Essential Plugin</h3>\n<p><a href="http://wbond.net/sublime_packages/package_control">Package Control</a> is the very first package anyone should install for Sublime Text.  It makes it easy to install any other package without having to clone Git repositories or work through Sublimes file structure.  And the author has made it relatively easy to install Package control as well.  All that is required is a quick copy and paste of code provided on the developers website.  Package control makes it easy to install new packages, snippets, themes, and color schemes.</p>\n<h3>#2. Sublime Linter - Write Better Code</h3>\n<p><a href="https://github.com/SublimeLinter/SublimeLinter">Sublime Linter</a> is a code quality tool for Sublime Text that makes it easy to find and fix code that doesn’t meet the standards that you define.  For javascript code you can choose to use jsHint<a href="http://www.jshint.com/">jshint</a> or jsLint<a href="http://www.jslint.com/">jslint</a>, the two most popular javascript linters.  I highly recommend this package.  It places a border around lines that are non-conformant with a message in the bottom border of the editor, but otherwise stays out of your way.  It makes it easy to fix code issues as you’re editing, rather than waiting till the end and getting a huge error dump when you run your code through the linter.</p>\n<h3>#3. Emmet - Get Through The Boilerplate</h3>\n<p><a href="http://docs.emmet.io/">Emmet</a> is a tool for web developers that allows you to use CSS style prefixes to quickly generate html code.  It allows quick generation of boilerplate HTML with a familiar syntax, so you can focus on code instead of markup.  The github project for the package is <a href="https://github.com/sergeche/emmet-sublime">here</a></p>\n<h3>#4. Git - Take Control Of Your Project Inside Your Editor</h3>\n<p><a href="http://git-scm.com/">Git</a> has rapidly become the go to version control system for open-source projects, and is also used by many private organizations and individual developers.  If you’re using Git to manage your javascript projects, you should definitely install the <a href="https://github.com/kemayo/sublime-text-2-git/wiki">git package</a> for Sublime Text.  Its not a command line replacement, some commands move much slower than it would with command line, but it allows the convenience of using common commands like add, diff, and blame from within your editor.</p>\n<h3>#5. Clipboard History - Improve your clipboard</h3>\n<p><a href="https://github.com/kemayo/sublime-text-2-clipboard-history">Clipboard History</a>  is a nice little utility that lets you see the recent history of your clipboard.  It only works for snippets copied from within Sublime Text, but its a nice little tool for refactoring, when you’re moving code around quickly and want to delete something without losing it completely.</p>\n<h3>Find your own</h3>\n<p>In the end different packages work for different people.  I highly recommend installing Package Control and browsing around through the options.  If you find a great package, leave a comment here and let me know.  There are a lot of packages out there, and everybody’s needs are different</p>\n'
}},function(e,t){e.exports={title:"Sync Multiple Google Calendars in Windows 8",date:"2012-11-07 12:00:00+00:00",layout:"post",path:"/2012/11/07/sync-multiple-google-calendars-in-windows-8",category:"tools",description:"A helpful tip for using Google Calendar in Windows 8",pageViews:"34",last30pageViews:"1",body:"<p>Syncing with multiple Google calendars, or any Google calendars that you don’t directly control seems like an unsupported feature in Windows 8 calendar app. Since I like to be able to see my wife’s calendar as well as my own, and also occasionally create separate calendars for different things, this was a very frustrating limitation. After a bit of research, I found that it was possible. In the end, the workaround is a testament to how much Google has changed over the years.</p>\n<p>###How to do it</p>\n<p>After a bit of frustration trying to make it work through Google directly, I found this workaround on Microsoft’s help page:</p>\n<pre><code>1. Download &quot;User Agent Switcher&quot; from the Chrome Webstore\n2. Say your device is an Iphone 4\n3. Go to http://m.google.com/sync\n4. Deactivate Javascript in Settings\n5. Click your Windows mail device\n6. In the URL is this string: &quot;supportMultipleCalendars=false&quot;. Change it to true.\n7. Reload the Page.\n8. If you have deactivated javascript you can add the calendars.\n9. Save\n10. Re-add your Google Account to your Windows Calendar app. It now works.\n</code></pre>\n<p>This is of course easier if you actually own an iOS device of some kind, since you can skip steps one and 2, and don’t have to worry about switching your User Agent String back later. Disabling javascript is accessible under the Safari hub in the iOS settings app. Also I found step 10 to be unecessary. After closing the app and reopening it I was able to see my additional calendars.</p>\n<p>###Why its ridiculous</p>\n<p>For an advocate of the open web, Google sure does manage to make its services hard to use on competing platforms doesn’t it? I understood when Google’s stuff was crippled on Windows Phone, where it has no native apps, and the web-apps are the feature phone versions. It is a niche market and Google wasn’t going to put extra time and energy into optimizing it in order to help a competitor. But Windows 8 is hardly going to be a niche market. Google is actively preventing something that clearly is technically trivial. Doing this in order to discourage users from using your service on a competing platform may be good business, but it is not “open web friendly.” Its Google’s choice to make obviously, and I wouldn’t call it unethical exactly, but they’ve come a long way from the moral high ground they claimed to occupy in the web space just a few years ago.</p>\n"}},function(e,t){e.exports={title:"Evaluating Web Apps With Lighthouse",date:"2017-02-14 03:30:00+00:00",layout:"post",path:"/2017/02/13/improving-site-performance-with-lighthouse",description:"Profiling and improving my site with Google's Lighthouse tool",keywords:"Lighthouse Performance Progressive Web App",category:"tools",readNext:"ll-context,jest-first,new-look-2016",pageViews:"301",last30pageViews:"66",body:'<p>Last year Google coined the term “Progressive Web App” as a way of describing the type of sites and applications that they think are the future of the web.  Progressive Web Apps are sites that load quickly, are always responsive to user input, work as well as possible offline, and integrate with native platforms like native apps.  While this site is not an “app” per say, I do want it to be as fast and responsive as possible, and I also wanted to better understand what Google is pulling under the PWA umbrella.  Fortunately, Google has built a tool <a href="https://developers.google.com/web/tools/lighthouse/">Lighthouse</a> to help developers profile and improve their web applications, comparing them to a set of PWA benchmarks.  So I took this site through Lighthouse, and worked against their suggestions with the goal of learning more about PWAs and improving the experience of using <a href="http://benmccormick.org">benmccormick.org</a>.  I’m passing along my experience here.</p>\n<h3>Getting Started</h3>\n<p>I began by downloading the Lighthouse extension in the <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk">Chrome Web Store</a>.  Lighthouse can be installed either as a chrome extension or a node command line tool.  Both produce the same HTML report, but I chose the chrome extension for the convenience of keeping everything in the browser.  When I ran the initial report, I got the following result:</p>\n<img alt="first score: 48/100" src="/posts/images/lighthouse/first_report_summary.png" class="full-width bordered-img">\n<p>48 out of 100 didn’t seem like a bad starting place.  Scrolling down it looked like I was mainly dinged on a few main areas:</p>\n<ol>\n<li>I had no offline support</li>\n<li>I did’t have any special setup for being included on a users homescreen. (I did have platform appropriate icons, but no app configuration)</li>\n<li>I had some possible inefficiencies in the assets I loaded.</li>\n</ol>\n<img alt="offline issues" src="/posts/images/lighthouse/first_report_offline.png" class="full-width bordered-img">\n<img alt="native issues" src="/posts/images/lighthouse/first_report_native.png" class="full-width bordered-img">\n<img alt="asset issues" src="/posts/images/lighthouse/first_report_assets.png" class="full-width bordered-img">\n<p>Native app support isn’t a huge priority for me, and the assets issue seemed small, so I decided to investigate the offline support issue first.</p>\n<h3>Offline</h3>\n<p>I based my service worker implementation off of <a href="https://github.com/chriscoyier/Simple-Offline-Site">Simple Offline Site</a> a demo Service Worker repo created by Chris Coyier for an article on <a href="https://css-tricks.com/serviceworker-for-offline/">CSS Tricks</a>.  This was perfect since it’s default behavior was what I wanted: cache everything, and check for updates from the server everytime we return from cache so we’re never out of date for long.  You can see what I did specifically in my <a href="https://github.com/benmccormick/benmccormickorg/blob/master/pages/sw.es6">github repo for this site</a>. After adding the service worker, my score moved up to 63/100.</p>\n<p>Finally, Service Workers only work on HTTPS connections, but most links to my site are not https currently. So to take full advantage (and to address another metric I was flagged on), I used a <a href="https://support.cloudflare.com/hc/en-us/articles/200170536-How-do-I-redirect-all-visitors-to-HTTPS-SSL-">CloudFlare page rule</a> to redirect all visting traffic to use https.  That bumped me up to 69/100.</p>\n<img alt="asset issues" src="/posts/images/lighthouse/second_report_offline.png" class="full-width bordered-img">\n<h3>Native Support</h3>\n<p>As I said previously, native platform support isn’t a major priority for this blog, but I was curious about the process.  Getting native support turned out to be very straightforward.  I had already collected icons for the various platforms, and created a simple manifest when I originally created a favicon for my site.  But the manifest file didn’t have everything and it wasn’t being deployed properly to my site.  Fixing that and making it available at <code>/manifest.json</code>, fixed all of the problems related to native platform support.</p>\n<p>My manifest file now looks like this:</p>\n<pre><code class="language-json">{\n\t<span class="hljs-attr">"name"</span>: <span class="hljs-string">"benmccormick.org"</span>,\n  <span class="hljs-attr">"short_name"</span>: <span class="hljs-string">"benmccormick"</span>,\n\t<span class="hljs-attr">"icons"</span>: [\n\t\t{\n\t\t\t<span class="hljs-attr">"src"</span>: <span class="hljs-string">"\\/android-chrome-192x192.png?v=yyxgnp97qG"</span>,\n\t\t\t<span class="hljs-attr">"sizes"</span>: <span class="hljs-string">"192x192"</span>,\n\t\t\t<span class="hljs-attr">"type"</span>: <span class="hljs-string">"image\\/png"</span>\n\t\t},\n\t\t{\n\t\t\t<span class="hljs-attr">"src"</span>: <span class="hljs-string">"\\/android-chrome-384x384.png?v=yyxgnp97qG"</span>,\n\t\t\t<span class="hljs-attr">"sizes"</span>: <span class="hljs-string">"384x384"</span>,\n\t\t\t<span class="hljs-attr">"type"</span>: <span class="hljs-string">"image\\/png"</span>\n\t\t}\n\t],\n\t<span class="hljs-attr">"theme_color"</span>: <span class="hljs-string">"#ffffff"</span>,\n\t<span class="hljs-attr">"background_color"</span>: <span class="hljs-string">"#57a3e8"</span>,\n\t<span class="hljs-attr">"display"</span>: <span class="hljs-string">"browser"</span>\n}\n</code></pre>\n<p>After correctly deploying that manifest file, my score moved all the way up to 100/100!</p>\n<img alt="asset issues" src="/posts/images/lighthouse/third_report_native.png" class="full-width bordered-img">\n<p>I clearly benefited from starting in a good spot.  <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a> is “fast by default” as a platform for building blogs, and I’ve done my best to avoid making it slow.  But it was fun seeing what I could do to make the site a better experience for users with bad connectivity, and to learn more about what Google is trying to do with PWAs.</p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Google has a bunch of resources around creating Progressive Web Apps.  You can find them on <a href="https://developers.google.com/web/progressive-web-apps/">their PWA landing page</a>.</p>\n</li>\n<li>\n<p>It was so easy to make my blog a PWA mostly because it is built on <a href="https://github.com/gatsbyjs/gatsby">Gatsby</a>. Worth looking at if you’re a web developer who blogs.</p>\n</li>\n</ul>\n'}},function(e,t){e.exports={title:"Testing with Jest Snapshots: First Impressions",date:"2016-09-19 12:41:00+00:00",layout:"post",path:"/2016/09/19/testing-with-jest-snapshots-first-impressions/",description:"First impression of testing UI components using Jest snapshots",keywords:"Jest JavaScript testing React Snapshot Tests",category:"tools",key:"jest-first",readNext:"saving-time-jest,backbone-devs-react,mobx-first",pageViews:"8589",last30pageViews:"1140",body:'<p>Over the past 6 months my team at work has been slowly transitioning a large Backbone application to React.  One of the main goals of the transition has been to build out unit tests as we transition components.  As part of that we switched from using Karma to using Jest for managing our tests.</p>\n<p>Our new setup with Jest has several advantages over our previous setup. All Jest tests run through node using a fake DOM implementation.  We don’t need to start up a browser so tests are faster and less flaky <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.  Jest makes it possible to mock all modules by default <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>, which works well for us since our code base currently contains a large amount of code that is difficult to test for one reason or another.  Jest provides great integration with Babel, which is helpful since all of our Backbone and React code uses ES6 that we transpile for the browser.  Finally Jest provides a wonderful watch mode that runs only the tests that are relevant to the changes you’ve made and makes it easy to see the result.</p>\n<p>About a month ago, Jest debuted a new feature: Snapshot testing.  It works a bit differently than a normal unit test.  Instead of executing some code and comparing the output against a value provided by a developer, the first time a test is run, the output passed into the test is saved to a “snapshot file”.  Then when the test is run in the future, the output is compared to the snapshot file.  If the output matches the file, the test passes, if the output is different then the file, the test fails and Jest prints a diff.  We’ve been using Jest snapshots for a few weeks now and I wanted to share my initial impressions.</p>\n<h3>What is it like to use a snapshot test ?</h3>\n<p>The process for snapshot testing is a bit different than normal tests.  Most snapshot tests look fairly simple.  Something like this example from the <a href="https://github.com/facebook/jest/tree/master/examples/snapshot">Jest repository</a>:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// Link.react.js</span>\n<span class="hljs-comment">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n\n<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n\n<span class="hljs-keyword">const</span> STATUS = {\n  <span class="hljs-attr">NORMAL</span>: <span class="hljs-string">\'normal\'</span>,\n  <span class="hljs-attr">HOVERED</span>: <span class="hljs-string">\'hovered\'</span>,\n};\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Link</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n\n  <span class="hljs-keyword">constructor</span>() {\n    <span class="hljs-keyword">super</span>();\n\n    <span class="hljs-keyword">this</span>._onMouseEnter = <span class="hljs-keyword">this</span>._onMouseEnter.bind(<span class="hljs-keyword">this</span>);\n    <span class="hljs-keyword">this</span>._onMouseLeave = <span class="hljs-keyword">this</span>._onMouseLeave.bind(<span class="hljs-keyword">this</span>);\n\n    <span class="hljs-keyword">this</span>.state = {\n      <span class="hljs-attr">class</span>: STATUS.NORMAL,\n    };\n  }\n\n  _onMouseEnter() {\n    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">class</span>: STATUS.HOVERED});\n  }\n\n  _onMouseLeave() {\n    <span class="hljs-keyword">this</span>.setState({<span class="hljs-attr">class</span>: STATUS.NORMAL});\n  }\n\n  render() {\n    <span class="hljs-keyword">return</span> (\n      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>\n        <span class="hljs-attr">className</span>=<span class="hljs-string">{this.state.class}</span>\n        <span class="hljs-attr">href</span>=<span class="hljs-string">{this.props.page</span> || \'#\'}\n        <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">{this._onMouseEnter}</span>\n        <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">{this._onMouseLeave}</span>&gt;</span>\n        {this.props.children}\n      <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>\n    );\n  }\n\n}\n\n<span class="hljs-comment">// Link.react-test.js  (partial)</span>\n<span class="hljs-comment">// Copyright 2004-present Facebook. All Rights Reserved.</span>\n<span class="hljs-comment">/* eslint-disable no-unused-vars */</span>\n<span class="hljs-meta">\n\'use strict\'</span>\n\n<span class="hljs-keyword">import</span> React <span class="hljs-keyword">from</span> <span class="hljs-string">\'react\'</span>;\n<span class="hljs-keyword">import</span> Link <span class="hljs-keyword">from</span> <span class="hljs-string">\'../Link.react\'</span>;\n<span class="hljs-keyword">import</span> renderer <span class="hljs-keyword">from</span> <span class="hljs-string">\'react-test-renderer\'</span>;\n\nit(<span class="hljs-string">\'renders correctly\'</span>, () =&gt; {\n  <span class="hljs-keyword">const</span> tree = renderer.create(\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">Link</span> <span class="hljs-attr">page</span>=<span class="hljs-string">"http://www.facebook.com"</span>&gt;</span>Facebook<span class="hljs-tag">&lt;/<span class="hljs-name">Link</span>&gt;</span></span>\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n\n</code></pre>\n<p>The first time the test is run, a snapshot file is produced.  In this case, running the previous test produces a snapshot file that looks like this:</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// Link.react-test.js.snap  (partial)</span>\nexports[<span class="hljs-string">`test renders correctly 1`</span>] = <span class="hljs-string">`\n&lt;a\n  className="normal"\n  href="http://www.facebook.com"\n  onMouseEnter={[Function bound _onMouseEnter]}\n  onMouseLeave={[Function bound _onMouseLeave]}&gt;\n  Facebook\n&lt;/a&gt;\n`</span>;\n</code></pre>\n<p>This gives us a baseline for what we expect the UI to look like.  The snapshot is generated in a folder in your <code>__tests__</code> directory, so that it can be checked into source control.</p>\n<p>The next time a test is run, if nothing has changed, the test passes.  However, if we change something (let’s say we add a class), the test fails and shows us a diff.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// updated link render method</span>\n\nrender() {\n  <span class="hljs-keyword">return</span> (\n    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">a</span>\n      <span class="hljs-attr">className</span>=<span class="hljs-string">{</span>`<span class="hljs-attr">link-item</span> ${<span class="hljs-attr">this.state.class</span>}`}\n      <span class="hljs-attr">href</span>=<span class="hljs-string">{this.props.page</span> || \'#\'}\n      <span class="hljs-attr">onMouseEnter</span>=<span class="hljs-string">{this._onMouseEnter}</span>\n      <span class="hljs-attr">onMouseLeave</span>=<span class="hljs-string">{this._onMouseLeave}</span>&gt;</span>\n      {this.props.children}\n    <span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span></span>\n  );\n}\n</code></pre>\n<pre><code class="language-diff">\n# jest output\n\nFAIL  __tests__/Link.react-test.js\n ✕ renders correctly (16ms)\n\n● renders correctly\n\n    Received value does not match the stored snapshot 1.\n\n    - Snapshot\n    + Received\n\n      &lt;a\n<span class="hljs-deletion">-       className="normal"</span>\n<span class="hljs-addition">+       className="link-item normal"</span>\n        href="http://www.facebook.com"\n        onMouseEnter={[Function bound _onMouseEnter]}\n        onMouseLeave={[Function bound _onMouseLeave]}&gt;\n        Facebook\n      &lt;/a&gt;\n\n      at Object.&lt;anonymous&gt; (__tests__/Link.react-test.js:14:16)\n</code></pre>\n<p>We can then choose to accept this change by running <code>jest -u</code> to update the snapshot, or update our code to fix the regression.  If we update the snapshot file, the test will start passing again.</p>\n<h3>Snapshot tests are a complement for conventional tests not a replacement</h3>\n<p>The first thing that became clear to me while using snapshot testing is that they’re not for everything.  They are optimized for a different case than normal assertion-based tests.</p>\n<p>Classic assertion based tests are perfect for testing clearly defined behavior that is expected to remain relatively stable.</p>\n<p>Snapshot tests are great for testing less clearly defined behavior that may change often.</p>\n<p>Snapshot testing is perfect for things that in the past would have raised concern for “overly brittle” tests that slow development teams down.  The classic example of this (and the main focus of discussion around Jest snapshots so far) is UI testing.</p>\n<p>UI components often change in small and trivial ways.  Copy is changed, whitespace is added, a border color is modified. Generally this means that developers have to choose between detailed tests that catch any regression but require constant updates, or less detailed tests that focus on core behaviors but miss smaller regressions.</p>\n<p>Snapshot tests provide a new way of approaching these problems in unit tests.  Because they are easy to write and effortless to update, and provide a clear view of what changed after each update, whether it is major or minor.</p>\n<p>This isn’t without any disadvantage. Snapshot tests preserve a starting point, but don’t give any indication of developer intent to future developers.  Like any other test, if the initial snapshot passes with bugs, or doesn’t capture the full range of cases, the test won’t adequately cover those behaviors.  But unlike traditional tests, snapshot tests don’t provide specific guidance for what the original developer expected beyond the “actual behavior”.  If there are multiple sub-behaviors that interact to produce output, its not clear which of those are essential, and which are incidental.  That’s not something you want for your critical application logic, especially complicated logic with many subtle cases.  But for UI components and other application elements that are likely to change a lot over time, this is a good set of tradeoffs.</p>\n<h3>Snapshot tests are more useful with a healthy code review process</h3>\n<p>I’ve pointed out several times now that snapshot tests are easy to update.  One of the downsides of the current design is that they can be almost too easy to update.  When a snapshot test fails, you have the option of modifying the output so that the test passes again, or updating the snapshot to reflect the new output.  Unfortunately, Jest currently provides no granularity for this updating.  Running <code>jest -u</code> to update the snapshots will update all snapshots.  So if  a single change causes many snapshots to break, it can be easy to accidentally update all of them, and possibly difficult to work through the whole diff to find changes.</p>\n<p>A robust code review process minimizes these problems.  Because snapshots are checked into source, the diffs in the snapshots are checked into source control.  Viewing diffs in a dedicated code review tool like Github, Bitbucket or Gitlab, it’s easier to see exactly what changed over many files than it might be when updating snapshots from the command line, and if you update a snapshot multiple times in a single branch, you can see the net effect on the snapshot through source control diffs better than you can through Jest.</p>\n<h3>Snapshot tests work well with auto-mocking</h3>\n<p>Auto-mocking has been one of Jest’s more controversial features.  Prior to version 15, Jest mocked every module used in tests by default.  To run the actual module code, it was necessary to manually unmock each module used or change Jest configurations.  Though it is now disabled by default, auto-mocking actually works very well with snapshot tests.  One problem with tests that rely on generating DOM in React is the fact that most components of any complexity are actually made up of smaller components, that often use external functions with complex logic to determine what to show.  If we fully render everything, changing any of those pieces can break tests for many components, moving us away from the concept of a “unit test”.  If we mock child components and helper functions and then test them individually though, we can focus our tests to only change based on the logic of the individual component being tested.  This is incredibly easy with Jest, and especially helpful in large code bases that don’t have complete test coverage.  Auto-mocking is considered an “advanced feature” of Jest, but it’s not hard to use.  Most mocked modules produce something non-harmful by default, and when its necessary to override, its not difficult to produce something meaningful without getting too involved.  Just add a file with the same name as the file to be mocked into a <code>__mocks__</code> folder in that directory, and give the mocked module the same interface as the mocked component.  You can either write it from scratch or use <a href="http://facebook.github.io/jest/docs/api.html#jest-genmockfrommodule-modulename">jest.genMockFromModule</a> as a starting place.</p>\n<h3>Summary</h3>\n<p>I’m impressed by Jest snapshots.  When combined with React, they’re providing my first non-frustrating experience unit testing UI components.  I’m excited to use them more going forward, and will be interested to see how they evolve from here.</p>\n<hr>\n<h3>Extra: A few miscellaneous Jest Thoughts</h3>\n<ul>\n<li>The UI output from Jest 15 tests is the best I’ve ever seen from a testing framework.  Aside from the nice diffs on snapshots, they do a good job explaining how output differed from expectations in assertion based tests, and communicating context for test failures, warnings and logging messages.  They also give great guidance when making configuration changes:</li>\n</ul>\n<div style="display:flex; justify-content:center">\n<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/cpojer">@cpojer</a> This is lovely, thank you! <a href="https://t.co/CX1v11CAVc">pic.twitter.com/CX1v11CAVc</a></p>&mdash; Ben McCormick (@ben336) <a href="https://twitter.com/ben336/status/772906536154894336">September 5, 2016</a></blockquote>\n</div>\n<ul>\n<li>\n<p>I’ve also been super impressed with Jest’s watch mode in Jest 15.  <code>--watch</code> makes it easy to focus on a few files or run tests on all files, and stays up to date as you change code.  If you haven’t worked with Jest in a while, the developer experience alone makes it worth trying out.</p>\n</li>\n<li>\n<p>One potential future annoyance with snapshot tests:  The snapshot format can’t be iterated on without breaking all current tests.  Make sure not to mix functional changes with Jest updates!</p>\n</li>\n</ul>\n<div style="display:flex; justify-content:center">\n<blockquote class="twitter-tweet" data-cards="hidden" data-lang="en"><p lang="en" dir="ltr">We&#39;ll update the snapshot format sometimes in minor/major releases. When updating Jest, please update snapshots<br><br>See <a href="https://t.co/gPE63dMz8P">https://t.co/gPE63dMz8P</a></p>&mdash; Christoph Pojer (@cpojer) <a href="https://twitter.com/cpojer/status/776623521069805568">September 16, 2016</a></blockquote>\n</div>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p>Randy Coulman has a <a href="http://randycoulman.com/blog/2016/09/06/snapshot-testing-use-with-care/">nice article</a> on some of the reasons to be careful about embracing snapshot testing.  He makes good points about the requirement of human involvement in verifying a change in time-crunched situations and also the potential value of snapshot tests for legacy code.</p>\n</li>\n<li>\n<p>My team uses a mix of <a href="https://github.com/airbnb/enzyme">enzyme</a> and snapshot tests for unit testing React Components.  <a href="https://github.com/trayio/enzyme-to-json?utm_content=buffer6b78b&amp;utm_medium=social&amp;utm_source=twitter.com&amp;utm_campaign=buffer">This repo</a> combines them, allowing you to use enzyme to generate the snapshot output to diff against rather than the renderer provided by Jest. I personally haven’t felt the need to integrate these two tools, but if your team uses enzyme and wants consistency/fewer (used) dependencies, this could be a cool option.</p>\n</li>\n<li>\n<p>Finally here’s <a href="https://blog.grommet.io/post/2016/09/01/how-we-landed-on-jest-snapshot-testing-for-javascript">another article</a> on how Snapshot testing convinced one team to migrate to Jest from Tape</p>\n</li>\n</ul>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>PhantomJS was a tremendous source of pain in our Karma setup. <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>This used to be the default setting, with Jest 15 it can be configured to work that way. <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'}},function(e,t){e.exports={title:"The Case For Marionette.js",date:"2014-12-02 01:53:52+00:00",layout:"post",path:"/2014/12/02/the-case-for-marionette-js",description:"Making the case for Marionette.js as a framework for front end development",keywords:"JavaScript Marionette.js Backbone",category:"frameworks",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"29541",last30pageViews:"307",body:'<p>Building large web applications using <a href="http://backbonejs.org/">Backbone.js</a> can be hard.  Backbone is a great tool, but it’s designed to be minimalist and useful in a wide variety of situations.  As a result, you get less guidance and support from the tool as you scale up than you do from more opinionated frameworks like <a href="https://angularjs.org/">Angular</a> and <a href="http://emberjs.com/">Ember</a>.  When a Backbone application grows, maintaining it requires adding structure, either through a custom set of conventions and components, or based on somebody elses framework.  There are a lot of different Backbone frameworks out there, but I want to make the case for using <a href="http://marionettejs.com/">Marionette.js</a>.</p>\n<p><img src="/posts/images/marionettelogo.png" alt="Marionette Logo"></p>\n<p>I’ve been using Marionette for the past year, and it’s been incredibly valuable.  It’s really helped ease a lot of the initial issues I found with scaling out Backbone.  But there was one big issue with Marionette when I started with it. It was not simple to figure out how exactly I should be using it.</p>\n<p>When I start to use a new piece of software, I’m always hoping to see 2 types of documentation.  The first is the nitty-gritty stuff that most people associate with documentation.  What are the APIs available, what can you pass to them, what components, features, or functions does it provide?  The second type is what I think of as the “story telling” documentation.  It overlaps a bit with marketing, but basically it’s the documentation that explains the value of the software, gives you ideas on how you might use it, and outlines the philosophy that lead to the tool.  Without the first type of documentation you end up with an exciting idea that you may struggle to implement.  Without the second type, you can end up with a lot of nice tools that you aren’t sure how to combine together.</p>\n<p>Marionette is great, but it’s a tool that doesn’t have much of the story telling documentation I mentioned above.  It gets off to a good start, with the following intro on its website:</p>\n<blockquote>\n<p>Backbone.Marionette is a composite application library for Backbone.js that aims to simplify the construction of large scale JavaScript applications.</p>\n</blockquote>\n<blockquote>\n<p>It is a Collection of common design and implementation patterns found in the applications that we have been building with Backbone, and includes pieces inspired by composite application architectures, event-driven architectures, messaging architectures, and more.</p>\n</blockquote>\n<p>But the site fails to follow through on explaining the values or philosophy that went into building it.  Instead, when you start with Marionette you’re left with a bunch of components that are well documented individually, without much guidance on how to put them together or use them.  Any explanation of the value added is scoped to an individual component in the docs, and there’s no real indication of why these particular components are bundled together. I’m going to try and provide this type of high level explanation of the value that Marionette can bring, laying out the big picture in this piece and then digging into each area of value in future posts.  To start, let’s look at the problems that Marionette is trying to solve.</p>\n<h3>Decisions, Decisions</h3>\n<p>Developing with Backbone is an exercise in decision making.  Backbone provides you with a minimalist set of Models and Collections that essentially serve as light wrappers around JavaScript objects synced over Ajax. It provides you lightweight Views that associate an object with a DOM node and some data.  It provides a router that associates URLs with function, and it provides helpers for managing events between all of these options.  That leaves Backbone developers with many questions to answer.</p>\n<ul>\n<li><strong>How do you render Views?</strong> - By default, Backbone’s render method does nothing. To use it, you need to fill in your own rendering function.  That could use a templating system like Underscore templates or Handlebars, jQuery manipulation of the DOM, or simple string inserts with <code>.innerHTML()</code>.  You could use the same method for every View, or mix it up and use different methods for different Views.</li>\n<li><strong>How do you manage relationships between objects?</strong> - By default Backbone provides a way to manage sets of Models as a Collection, but it doesn’t have any built-in utilities for handling nested Models or Collections.  And if you want to nest your Views you’re completely on your own.  You can have a View manage it’s child Views, have a single object that manages all Views, or let each View manage itself.</li>\n<li><strong>How do your Views communicate between each other?</strong> - Views will often need to communicate with each other.  If for instance one View needs to change the contents of another area of the page, it could do so directly through jQuery, could get a direct reference to a View managing that area and call a function on it, change a Model that another View listens to, adjust a URL that a router listens to, or fire an event that another View could respond to. Apps can use some combination of all of these methods.</li>\n<li><strong>How do you avoid repeating yourself?</strong> - If you’re not careful, Backbone can involve a lot of boilerplate.  Taking the naive approach, you could end up writing rendering code, View management code and event management code over and over again in every View.  If you try to get around that using inheritance, you can end up with brittle designs that require you to make calls down to a Views prototype when you want View specific code.  Avoiding that type of repetition and the maintenance overhead it brings is a challenge.</li>\n<li><strong>How do you manage a View’s life-cycle??</strong> - What code is responsible for rendering a View?  Does it render itself on creation?  Or is it the responsibility of the object creating it?  Does it get attached to the DOM immediately on render? Or is that a separate step?  When the View is removed from the DOM or deleted, how do you handle any cleanup that is needed?</li>\n<li><strong>How do you structure your application?</strong> - How do you get your app started?  Do you have a central object that starts everything, or is it more distributed?  If you do centralize, do you use the router to start things, or provide some other object for managing your code?</li>\n<li><strong>How do you prevent memory leaks?</strong> - If your application is a <a href="http://en.wikipedia.org/wiki/Single-page_application">Single Page Application</a> or it contains long lasting interactive sections, another issue that you may need to deal with is memory leaks.  It can be easy to create “zombie Views” in Backbone if you’re not attentive to the need to unregister events attached to a View after you’re done with it.</li>\n</ul>\n<p>That’s just a small sample of the type of decision making that you have to make for a Backbone project.  Those questions signify flexibility, but they also represent mental overhead.  If you’re like me, you see these common problems and think that you can get better results relying on a shared solution that leverages the experience of the community.</p>\n<h3>What does Marionette Give You?</h3>\n<p>Marionette is an attempt to provide this type of shared solution, capturing Backbone best practices as a set of components and design patterns.  So what value does it provide?  Marionette gives you:</p>\n<ul>\n<li><strong>A Standardized Rendering process</strong> - Marionette takes an opinionated stand on how Views should be rendered.  Without any additional configuration, it will take a template that you specify with a View’s template property, compile it with Underscore’s templating function and pass it a model or collection.  If you need to pass it other data, or want to use a different template library, Marionette provides hooks to customize that process in a <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a> way.</li>\n<li><strong>A consistent View lifecycle</strong> - Marionette defines a consistent View life cycle where Views are initialized, rendered, shown, refreshed, and destroyed.  Each of these events has events and callbacks associated it, and any common boilerplate associated with them is handled behind the scenes.</li>\n<li><strong>The ability to define and manage complex layouts</strong> - Marionette provides region objects that define portions of the DOM that can display and swap out Views.  Combined with utilities to manage child views, you can easily create deeply nested View structures with Marionette while minimizing complexity.</li>\n<li><strong>A central event bus with semantic events to simplify communication between Views</strong> - Marionette includes Backbone.Wreqr or Backbone Radio as an event bus to allow communication between Views without explicitly coupling them.</li>\n<li><strong>Helpers to help you write DRY Code</strong> - In addition to centralizing the rendering and view management code, Marionette provides hooks to allow you to abstract away details of the DOM and events in your View code, and a mechanism to pull common ui operations out into separate reusable objects</li>\n<li><strong>Helpers to avoid “Zombie Views” and memory leaks</strong> - Marionette’s lifecycle includes an explicit destroy phase that cleans up many common sources of memory leaks, and provides a hook for you to take care of the rest</li>\n<li><strong>A central Application object to initialize your application</strong> - Using Marionette, you’re able to specify a set of initializers that run any code that needs to be executed before your application starts, providing a clear structure and starting point to your app.</li>\n</ul>\n<p>That’s not the complete feature set, but it is the essential sales pitch.  I’ll be digging deeper into each of these advantages over my next few posts, but the important thing to understand is that Marionette provides a framework for building Backbone apps that builds on established practices from the community.  If you’re building a Backbone application and want to focus on the problems that are specific to your application, Marionette is a great way to move past common issues and focus on what’s unique to you.</p>\n<h3>More Resources</h3>\n<ul>\n<li>For a practical introduction to Marionette, you could do much worse than <a href="https://www.youtube.com/watch?v=PrQSpdWkN6Q">this talk</a> from the recent Nodevember conference.  Jeremy Fairbank, a member of the Marionette core team, explained how you can use Marionette to improve the architecture of your Backbone apps.</li>\n<li>The resource that best helped me understand Marionette isn’t technically about Marionette at all.  Derek Bailey’s book <a href="https://leanpub.com/building-backbone-plugins?a=3a4Srv2pP9p87WQ_eoDoGp">Building Backbone Plugins</a> lays out the philosophy and thinking behind Marionette without directly referencing it, explaining the challenges that he faced in building a useful abstraction over Backbone.  You can read my <a href="http://benmccormick.org/2014/07/09/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey/">full review</a> if you’re interested, but I highly recommend it for any Backbone developer as a way of better understanding how to structure your Backbone applications.</li>\n</ul>\n'
}},function(e,t){e.exports={title:"The Debugging Toolbox",date:"2014-08-19 11:35:00+00:00",layout:"post",path:"/2014/08/19/the-debugging-toolbox",category:"software-productivity",description:"The process I use for solving problems",pageViews:"824",last30pageViews:"1",body:'<p>Do you know a <em>Problem Solver</em>?  They’re the ones who can take a crazy, vague bug report from a client and come up with a fix in an hour.  The ones who everybody else asks for help when the project deadline is creeping up.  The ones who get shipped out to the client site when the field team is out of their depth.  In school they were the person you called at 1AM the night before your project was due, hoping for a miracle.</p>\n<p>I’m guessing you can think of somebody.  Problem solving is a valuable gift, something that stands out.  But the truth is, all software developers should be problem solvers.  It’s a key part of our jobs.  We just happen to call it debugging.</p>\n<p>Debugging is hard.  As developers, we’re faced with vague problem descriptions, massive code bases, and constant pressure to move our projects forward.  But you can do some great things if you’re disciplined about getting better at debugging.</p>\n<p>I’ve built up my own debugging process over the years.  It’s nothing more exciting than <em>Problem Solving 101</em>, but it’s a productive way of working that lets me get stuff fixed quickly and keep issues from happening again. It helps me fix things even when I’m not qualified to do so, and keeps maintenance work from overwhelming my ability to get things done.  If that sounds useful to you, you should probably keep reading. Here’s my process.</p>\n<h3>Step 1: Define The Problem</h3>\n<p>The need to define the problem seems like common sense, but it often gets skipped.  The first thing you need before fixing a problem is a clear definition of what the problem looks like.  That means a detailed look at 2 things:</p>\n<ol>\n<li>What is the current behavior?</li>\n<li>What should the behavior be?</li>\n</ol>\n<p>The second question often gets neglected.  At Windsor Circle, we have a system that receives product records from another system.  The data it was receiving occasionally contained blank product titles, which was not considered valid data.  I was asked to ensure that the second system would not pass invalid data.  I could of course have just decided to not pass any records that had blank product data.  Or I could have filled them with a <code>&quot;None&quot;</code> string, calculated a value from other attributes, or a thousand other approaches.  Since each of these would have removed the current bad behavior, I might have been able to slip them by for a while.  Instead I asked what the correct behavior should be, which led to a longer discussion and an eventual decision that we would need to handle a small set of empty titles after all.  At that point I was able to actually deal with the problem.</p>\n<h3>Step 2: Reproduce The Problem</h3>\n<p>After you define the problem, the next step is to reproduce it.  <strong>Do not skip this step.</strong>  If you can’t define and consistently reproduce a situation where the problem occurs, it will be impossible to know whether you’ve solved it.  If the issue involves a lot of specific circumstances and moving parts, or only occurs sporadically, this may be the hardest part of the whole process.  The things you want to keep in mind:</p>\n<ol>\n<li>What are the circumstances under which this occurs? Always? Only on certain browsers/OSs/hardware?  Is it a timing issue? A timezone issue? All of the above?</li>\n<li>Is there a series of actions that I can do that makes this occur every single time?</li>\n<li>Am I confident that I know all of the situations that cause this to occur?</li>\n</ol>\n<p>Answering #1 is the first step.  If you can say yes to #2 you’re in a fantastic position to proceed.  If you can say yes to #3, you need to get a lot more suspicious and cynical.  But the more confident you can be about each of these, the better equipped you’ll be going forward.</p>\n<h3>Step 3: Narrow the Scope</h3>\n<p>Now that we’ve established our problem and hopefully found a consistent path to reproduce it, we’re ready to start rooting out our problem.</p>\n<p>The first step is to narrow the scope.  In a normal software environment, you’re likely to be dealing with a large amount of your own code, as well as 3rd party libraries and APIs, some sort of environment, and unpredictable user behavior.  That’s a lot of uncertainty and information to process.  I’ve seen developers who really try to understand the whole system before even thinking about the problem.  But in many cases that’s unrealistic.  Instead, you should be trying to get rid of as much of that information as possible by narrowing the scope of where the bug might exist.  There are 4 main ways of narrowing scope.</p>\n<h4>Prove That The Problem Is Unique To A Component</h4>\n<p>If you want to eliminate a system component from consideration, one good way is by proving that the issue is not unique to it.  This works particularly well for platform issues.  For instance, you might prove that something is not a browser-specific problem by showing that the issue occurs in all browsers.  This can give you some firm ground to stand on.  If you do expose a platform-specific issue, that can be good news too, as they tend to be better documented.</p>\n<h4>Follow The Flow</h4>\n<p>If your problem is a data issue (and many issues are), you can also narrow the scope by following the flow of data through your application.  There are 2 main ways to do this.  One is by starting at the beginning of the flow, where the data initially comes into the system, and follow it through, looking to see where things go wrong. You could also start at the end with the incorrect output and try to trace back and see where it came from.</p>\n<p>A good debugging tool is a great asset here.  There may be times when you’re forced to work without one though (for example, working in an environment you don’t control or a domain-specific language without adequate tooling).  In that case you can get by with log statements, or even changing the code to output a result early.  Regardless, what you want is clear evidence that data was good at a certain point, or already bad at another.  This allows you to eliminate that code from consideration and focus in on the code before it.</p>\n<h4>Follow The History</h4>\n<p>If you know this problem was introduced relatively recently, you can approach it by figuring out what changed.  Version control systems in particular provide great tools for this type of analysis.  If you know that the change was introduced within a set period of time, that provides an additional dimension from which you can narrow the scope and filter ideas.</p>\n<h3>Step 4: Make An Educated Guess</h3>\n<p>Now it’s time to make a guess at where the problem may be.  It’s important for this to be an <strong>educated</strong> guess.  You don’t want to check code at random.  Your starting point should come from your past experience with similar issues, or be the result of research into the problem. I can’t overstate how important research can be. It’s always worth starting with a quick Google search, since it might save you hours of time looking on your own.  Once you’ve narrowed the scope a bit, you can revisit your research, looking specifically for known issues with a specific component for instance.  Your guesses also can be a follow-up to new information from Step #5.  Despite the ordering I give here, debugging is never a completely linear process. You need to have all of these tools in your toolbox.  Experience will help you know which to use.</p>\n<h3>Step 5: Understand The Behavior</h3>\n<p>If you’ve managed to isolate the unwanted behavior a bit and have a guess where the problem might be, now’s the time to read more deeply into the code.  What is actually happening in there?  Does the logic of the code match your understanding of its purpose?  Do you see any red flags or danger signs?</p>\n<p>I once interviewed a candidate for a programming job who told me he didn’t read code very much while debugging.  Instead he made changes to observe the new behavior and kept fiddling until the output worked the way he wanted.  While that might work for aligning text on a Wordpress site, you simply can’t get away with that in a complex application.  Reading and understanding code quickly is a skill, but it’s one you must develop if you want to be a productive developer.</p>\n<h3>Step 6: Repeat Steps 3-5 until you have a thesis</h3>\n<p>If you’ve narrowed your scope and read some code, you might have an idea about what you think the problem is and how to solve it.  If you do, then proceed to step #6.  If not, take what you’ve learned and use it to loop back to step #3, to reduce the scope even more.</p>\n<h3>Step 7: Test your Thesis</h3>\n<p>If you think you have a handle on the problem, now’s the time to test it.  There are a few ways to do that.  One obvious way is to apply a fix and see if the problem goes away.  But if the fix would be expensive in time, money or complexity or if you’re afraid of treating the symptoms rather than the disease, you can also look into creating a simpler test case.</p>\n<p>Earlier this month I encountered an issue where a <a href="http://handlebarsjs.com/">handlebars</a> template was failing to render correctly occasionally.  After digging in and narrowing the scope, I determined that the issue occurred only on Chrome, and seemed to happen randomly after a few renders.  I was able to create a <a href="http://jsfiddle.net/w2gtm3yx/1/">very simple test case</a> that reproduced the problem in a jsFiddle. I didn’t use any of my own data. Instead I just created the simplest test that I expected to fail.  And it did.  That gave me confidence that the issue was in the Handlebars-Chrome interaction, and I was able to find a workaround by looking through their <a href="https://github.com/wycats/handlebars.js/issues/832">issues page</a> on Github<sup id="fnref:1"><a href="#fn:1">1</a></sup>.  That type of iteration on your test cases also provides useful reference material in case the issue reoccurs.</p>\n<h3>Step 8: Repeat 3-7 until you can no longer reproduce</h3>\n<p>If your thesis turns out to be wrong, take your new knowledge and go back to step #3. It’s important to understand that this isn’t a rigidly structured process though.  This also may be time to go back and double check steps 1 &amp; 2.  Do you really know what the right behavior is?  Have you learned anything that might change that?  If you couldn’t reproduce the issue after a change, are you sure that you’ve really fixed it?  Or were there holes in your original path to reproduce it?  A healthy amount of paranoia helps here.</p>\n<h3>Step 9: Document and future-proof</h3>\n<p>Once you’ve fixed the problem, or gotten to a point where you’re not going to continue for some reason, there’s one very important last step.  Document what you’ve learned.  If you made a change to the code that “looks wrong” but fixes the problem, leave a comment explaining it, and save it from future “code cleanups”.  If you can’t reproduce the problem consistently and it still exists, document what you learned in a bug tracker so that somebody can come back to it later.  If you isolated the problem to a 3rd party component, file a bug report and include your test case (simplified as much as possible).  If you created a useful test case, automate it or add it as a reference somewhere.  Exact processes will vary by team, but the key phrase here is “Those who don’t learn from the past are doomed to repeat it.”  Are you going to bruise this bug or bury it?  Make sure you can fix the problem quickly if it happens again. If you can do anything to keep it from coming back, do it.</p>\n<h3>The Takeaway</h3>\n<p>Real world engineering means dealing with code you don’t understand.  That might be your coworkers’ code, a 3rd party library, a buggy video driver, or your own 3 year old code. To do that effectively you need a process.  That might be mine, or one of your own, it could be formal, or just built on habit.  But make sure you have one.  The ability to dive in quickly, understand what’s going on and create a fix will set you apart.  It’s not that hard, but it takes discipline, creativity, and most of all practice.  So go ahead and start fixing something.  Maybe you’ll be the <em>Problem Solver</em> next time</p>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Chrome 36.0.1985.143 seems to have resolved the issue.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"The iPhone 5 Conversation so Far",date:"2012-09-19 11:00:00+00:00",layout:"post",path:"/2012/09/19/the-iphone-5-conversation-so-far",category:"opinion",description:"The same conversation just keeps happening",pageViews:"46",last30pageViews:"1",body:'<p><a href="http://www.bbc.com/news/technology-19557497">Blog A</a>: The iPhone 5 is boring.</p>\n<p>~Blog B~: Customers are buying the iPhone 5; Blog A is an idiot.</p>\n<p><a href="http://fireballed.org/linked/2012/09/18/jetpack-design/">Blog C</a>: Smart Companies make boring products.</p>\n<p>The 3 reactions after every major Apple news: Apple is overrated, Apple is above reproach, This is what Apple just did, so all companies should do that.  Wash, rinse, repeat.</p>\n<p><em>Update June 2014: Apologies for the broken links.  The world does not always respect the permalink.</em></p>\n<p><em>Update #2: Found a cached version for blog C</em></p>\n'}},function(e,t){e.exports={title:"The Most Interesting Atom Packages I've found (so far)",date:"2016-01-11 02:25:49+00:00",layout:"post",path:"/2016/01/11/the-most-interesting-atom-packages-ive-found-so-far",category:"tools",description:"A rundown of the coolest Atom packages I've seen",key:"interesting-atom",readNext:"learning-vim,vim-files,vim-language",pageViews:"87920",last30pageViews:"3356",body:'<p>I’ve been using <a href="https://atom.io/">Atom</a> as my primary text editor for the last 3 months.  I don’t completely love it.  There are elements (startup speed, maturity of some core editing components, not being able to run it in a terminal) that I miss from my experiences with Vim and/or Sublime Text.  I’m using Atom though because the core editing experience is now “good enough” and the way the editor is built allows for some very cool and unique experiences.  Atom (like <a href="https://code.visualstudio.com/">Visual Studio Code</a>) is built on <a href="http://electron.atom.io/">Electron</a>, Github’s JavaScript environment for building desktop apps.  Because it is built with web technologies and was designed from the beginning to be extensible, it is much easier for most developers to build rich visual extensions on top of Atom that provide unique UIs for editor functions than it is in Sublime Text, Vim, Emacs or an IDE.  The following are some of the “most interesting” Atom packages I’ve found.  Interesting in this case means that they really only could have been done as they are in Atom or a similarly flexible editor.</p>\n<h3>Pigments</h3>\n<p>At first use, <a href="https://github.com/abe33/atom-pigments">Pigments</a> seems like a pretty run of the mill color highlighter.  There are similar projects for Sublime Text and Vim that look at color names in a CSS or LESS file and highlight them with the color they represent.</p>\n<img class="full-width" alt="pigment-preview" src="/posts/images/color_less_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom.png">\n<p>But Pigments does much more than that.  In addition to highlighting text, Pigments searches your project and creates a directory of all the colors used in your projects.  You can look through your palette and quickly go to the definition of any individual color.  Because pigments tracks everything, it can highlight LESS/SCSS variables as well as plain color names, even if those variables were originally defined in a different file.  Pigments also hooks into Atom’s autocomplete, and displays a preview of the color options when autofilling colors.</p>\n<img class="full-width" alt="Pigments project" src="/posts/images/Palette_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom_and_Editor_-_benmccormick_org.png">\n<p>It is a rich way of managing colors for a whole project, the best way of seeing at a glance every color used in your CSS project that I’ve ever seen.</p>\n<h3>Expose</h3>\n<p><a href="https://atom.io/packages/expose">Expose</a> is a file management tool modeled after Mac OSX’s expose feature.  With it, you can instantly display all open files as small thumbnails, and switch quickly between them using the keyboard, which can be super helpful when tabs get out of control.</p>\n<img class="full-width" alt="expose" src="/posts/images/frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom_and_Editor_-_benmccormick_org.png">\n<h3>Autocomplete-plus</h3>\n<p><a href="https://github.com/atom/autocomplete-plus/">Autocomplete-plus</a> started as a community package but has now become part of the core editor.  It’s also probably the least unique idea I’m listing here.  It’s still worth including on this list though, for 2 reasons.  First, autocomplete plus has flexible visual context options, allowing autocomplete providers to show the type of the autocomplete option, a brief description, and potentially a more in depth description.  So users can distinguish between (for instance) completions offering a snippet, a function, a keyword, or an import.</p>\n<img class="full-width" alt="autocomplete-plus" src="/posts/images/frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom.png">\n<p>Autocomplete-plus is also a great example of the flexible nature of Atom.  Because Atom itself is made up of packages, with a very small core package, it’s easy to replace key parts of the editor like the auto-complete package with a community version.  And if that version ends up being better in the long run, it’s possible to pull that into the editors core, as happened with autocomplete-plus.</p>\n<h3>Todo-show</h3>\n<p><a href="https://atom.io/packages/todo-show">Todo-show</a> is a cool little package that searches your project for comments containing TODO, FIXME, CHANGED, REVIEW and other configurable comment strings, and lists them as a table.  It’s a simple idea that formalizes something that many developers do all the time.</p>\n<img class="full-width" alt="todo-show" src="/posts/images/frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom-1.png">\n<p><strong>Update</strong>:  Twitter has pointed out this even crazier riff on this concept that I’d seen a while ago but had been unable to find when I dove back into Atom.  <a href="http://imdone.io/">Imdone</a> is a trello-like experience in the editor for managing todos.</p>\n<div>\n<blockquote class="twitter-tweet" lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/ben336">@ben336</a> <a href="https://twitter.com/AtomEditor">@AtomEditor</a> You might also like imdone-atom. It&#39;s a drag and drop TODO task board with issue tracking integration!</p>&mdash; imdone.io (@imdoneIO) <a href="https://twitter.com/imdoneIO/status/686577997395013633">January 11, 2016</a></blockquote>\n</div>\n<h3>Linter</h3>\n<p>Similar to autocomplete-plus, you may think you’ve seen <a href="https://atom.io/packages/linter">Linter</a> before.  It’s similar to Syntastic for Vim and SublimeLinter for Sublime Text.  But Atom’s flexibility allows it to be better than both of those.  Like Syntastic and SublimeLinter, Linter integrates with many different linting providers to show errors and warnings that tools pick up on through static analysis in files.  But rather than being limited to the line-by-line gutter warnings or showing collections of warnings through awkward use of UI elements meant for a different purpose, Linter shows you a live collection of errors at the bottom of the file and lets you easily switch back and forth between that and errors for all open project files.</p>\n<img class="full-width" alt="linter" src="/posts/images/frequency_cap_es6_-__Users_Ben_Code_Windsor_wcui_dev_src_wcui_-_Atom-2.png">\n<h3>git-time-machine</h3>\n<p><a href="https://github.com/littlebee/git-time-machine">git-time-machine</a> is the newest package on this list.  It’s only a month old, but is quite possibly my favorite example of Atom’s potential.  After setting it up, you can use a keyboard shortcut to see a bubble plot of that files git history, and then hover to see the commit messages, and click to see an old version of the file.  It is the most accessible UI I’ve ever seen for working with git history.</p>\n<img class="full-width" alt="time-machine" src="/posts/images/Fullscreen_1_10_16__9_24_PM.png">\n'}},function(e,t){e.exports={title:"The Mystery of Docker and the Disk-Eating Cow",date:"2017-03-28 14:40:00+00:00",layout:"post",path:"/2017/03/28/the-mystery-of-docker-and-the-disk-eating-cow/",description:"Tracking down how Docker ate half my hard drive",keywords:"Docker Daisy Disk MacOS",category:"tools",key:"docker-cow",pageViews:"344",last30pageViews:"344",body:'<p>Yesterday morning I was innocently minding my own business, downloading some files, when I noticed that nearly all the disk space on my 256GB work laptop had been consumed.  This seemed rather unlikely to me, given that I’d only had the laptop for about a year and I didn’t store anything other than code and work documents on it.  Text files just don’t take up that much space most of the time.  So I decided to make a purchase I’d considered for a while, bought <a href="https://daisydiskapp.com/">Daisy Disk</a>, and began investigating.</p>\n<p>The first thing I noticed was a huge amount of the disk space (about half) was taken up by the <code>~/Library/Containers</code> folder. That folder contained my email history and also data on my <a href="https://www.docker.com/">Docker</a> containers. Docker functions as a lightweight VM, and essentially holds copies of virtualized operating systems and file systems inside each docker container and image, so it made sense to me that it could be taking up a lot of space, though &gt;120GB still seemed wrong for my paltry 4 containers.  So my first step was to delete all of the containers and images on my laptop.  That cleared about 20GB of space but still left my drive looking like this:</p>\n<p><img alt="daisy disk showing 100+GB of docker" src="/posts/images/docker-cow/daisy.png"\nclass="full-width"></p>\n<p>At this point, I was annoyed.  103.5 GB was taken up by some folder called Docker.qcow2 and Daisy Disk wouldn’t show me what was inside.  So I drilled in on the file system and immediately found out that Docker.qcow2 was not a directory like I’d assumed due to size, but a single 100+GB file.  At that point I decided to poll my teammates to see if I was the only one dealing with this:</p>\n<p><img alt="daisy disk showing 100+GB of docker" src="/posts/images/docker-cow/slack.png"\nclass="full-width"></p>\n<p>So between the 5 of us, we each had “cow files” taking up between 23 and 103GB of disk space. Some Googling revealed a <a href="https://github.com/docker/for-mac/issues/371">github thread</a> that showed this is a so far unsolved issue with Docker For Mac.  Summary: qcow2 files are a format for saving disk images.  Docker For Mac’s implementation works well for writing and updating images, but doesn’t automatically free up disk space when a container or image is deleted. So as you use and delete containers over time this file gradually grows.  I have a habit of deleting and recreating containers when I’m trying to debug something, which explains why I had a much larger file than others.  There isn’t currently a true fix for this issue, but you can delete the file.  You’ll lose all your containers and images, but when you recreate them the file will be small again.  There also is supposed to be some automatic limiting of the file.  The current cap is 64GB, but there is work on making it configurable.  Unfortunately the current cap is not respected if you had previously used docker-machine to control docker on your machine, which is how my file exceeded the cap.  I’m also unclear on what happens when the file hits the cap.  I get the impression that things stop working and you need to delete everything anyway (you just avoid running out of disk space on the host machine).</p>\n<p>Fortunately it was no problem for me to delete everything, and so I was able to clear things out, at which point my disk looked a lot happier:</p>\n<p><img alt="daisy disk showing 100+GB of docker" src="/posts/images/docker-cow/daisy2.png"\nclass="full-width"></p>\n<h3>Lessons Learned</h3>\n<p>I had 3 takeaways from this interesting adventure.</p>\n<ol>\n<li>If you’re using Docker For Mac, keep an eye on your disk space.  If you’re able to occasionally delete and recreate your containers without data loss, consider occasionally doing that and deleting the cow file.  If you can’t do that, be careful how many containers you add and delete, and make sure you manage your disk space well.</li>\n<li><a href="https://daisydiskapp.com/">Daisy Disk</a> is awesome and highly recommended.  It’s an example of a rare breed: the beautiful system utility. The visualizations it shows are both pretty and useful; it made diagnosing this issue a breeze.</li>\n<li>One more thing I learned from my coworkers slack yesterday: <code>ls</code> takes an <code>-h</code> argument that shows file sizes in KBs/MBs/GBs instead of all in bytes.  This is super helpful when examining large files.  Compare the 2 lists of files from my Downloads folder in the image below. The normal form is very nice for comparing 2 files side by side and seeing which one is bigger, but the second form is much more helpful when you want to get an idea of exactly how big something is, or communicate it to others.  Most of us don’t think about file sizes in terms of bytes anymore.</li>\n</ol>\n<p><img alt="daisy disk showing 100+GB of docker" src="/posts/images/docker-cow/downloads.png"\nclass="full-width"></p>\n'}},function(e,t){e.exports={title:"The Sad State of the Backbone Ecosystem",date:"2016-03-07 05:06:40+00:00",layout:"post",path:"/2016/03/07/the-sad-state-of-the-backbone-ecosystem",description:"A look at the current state of Backbone libraries",keywords:"Backbone github graphs repos",category:"frameworks",dontfeature:"true",key:"backbone-eco",readNext:"mn-series,backbone-devs-react,bb-es6-1",pageViews:"26823",last30pageViews:"379",body:'<p>For the past 2 years, ~90% of my coding time has been spent working on a large scale Backbone.js app.  In February 2014, the Backbone community was in a fairly good place.  The core library had reached 1.0 the previous year and had a strong team around it.  Marionette had emerged as a de-facto standard for web applications <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>.  There were Backbone specific plugins for many tasks, and generally gaps could be filled using the jQuery plugin ecosystem, or a framework agnostic library.  At the time, Backbone would have been a very defensible choice as a library for starting a new web development, as a simpler and more stable alternative to AngularJS, the current “hot” framework.</p>\n<p>Since then a few things have happened.  First, React has taken off, while Angular and Ember have continued to grow and learn from React and each other. Angular and React have benefited from significant marketing and financial support for a core development team that have helped them grow quickly.  Google Trends gives a pretty good idea of how that has turned out.</p>\n<p><img src="/posts/images/Google_Trends_-_Web_Search_interest__angular_js__react_js__backbone_js__ember_js_-_Worldwide__Jan_2010_-_Feb_2016.png" alt="Google trends graph"></p>\n<p><strong>Update:</strong> <em>I’ve changed the above graph from an original that used angular.js, backbone.js, ember.js, and react.js as the search terms.  Only Backbone prefixes itself with a .js that way, and it undersold the other libraries, especially Angular.  I believe that this chart more accurately reflects usage trends.</em></p>\n<p>Secondly, Backbone’s author, <a href="https://twitter.com/jashkenas">Jeremy Ashkenas</a> made a decision to call Backbone “finished” in terms of API and feature set after the 1.0 release.  This has the advantage of leaving Backbone as by far the most stable major JavaScript framework, but hinders efforts to pull in lessons from other frameworks <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</p>\n<p>Finally, whether as a result of the first 2 items or due to some other factor, the ecosystem around Backbone has crumbled.  While Backbone’s core has stabilized, it still has a team of maintainers who are actively managing the project.  That does not appear to be the case for many of the other libraries in the Backbone ecosystem.  To investigate my perception of this, I decided to look at the contribution graphs of popular Backbone libraries to see the trends over the last 2 years.  I built a list of libraries based on the projects that the bower registry returns for the backbone keyword, looking for projects with at least 400 github stars<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>. That lead to a list of 24 projects below.</p>\n<p>To be clear, I’m not posting this as a criticism of anyone.  Open source is a volunteer effort, and maintaining a project is hard and often doesn’t make sense when the author has moved on to other challenges.  This is simply an honest look at where the Backbone ecosystem stands, with the goal of helping those of us who are building Backbone applications or considering using it to evaluate the ecosystem honestly.</p>\n<h3>1. Backbone</h3>\n<p><img src="/posts/images/Contributors_to_jashkenas_backbone.png" alt="backbone graph"></p>\n<p><strong>Open issues:</strong> 54</p>\n<p><strong>Issues closed in 2016:</strong> 50+</p>\n<p><strong>Last Release</strong>: 3 days ago (March 3rd 2016)</p>\n<p>I’m starting with Backbone itself to give an idea what a stable mature project graph looks like.  Backbone isn’t getting the activity it used to, but there’s still a steady flow of bug fixes and documentation updates, and issues are being worked through.</p>\n<h3>2. Marionette</h3>\n<p><img src="/posts/images/Contributors_to_marionettejs_backbone_marionette.png" alt="mn graph"></p>\n<p><strong>Open Issues:</strong> 107</p>\n<p><strong>Issues closed in 2016:</strong> 30+</p>\n<p><strong>Last Release</strong>: November 22 2015</p>\n<p>Of all the graphs here, this one is the nearest and dearest to me.  I’ve contributed code to Marionette, and have written about it <a href="http://benmccormick.org/marionette-explained/">many times</a> on this blog.  Marionette still is seeing plenty of work, but as the contributors have cycled through, work on a long awaited version 3 with important improvements has sat on a branch for over a year.  This is a great library, but it hasn’t been immune to the wider issues in the ecosystem.</p>\n<h3>3. Backbone.Relational</h3>\n<p><img src="/posts/images/Contributors_to_PaulUithol_Backbone-relational.png" alt="bb-relational"></p>\n<p><strong>Open Issues:</strong> 122</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> August 19 2015</p>\n<p>Backbone.Relational is another “stable” library.  On its own, there’s nothing wrong with that, this is a focused library that doesn’t necessarily need a lot of new features.  But this is the start of a pattern.</p>\n<h3>4. backbone-forms</h3>\n<p><img src="/posts/images/Contributors_to_powmedia_backbone-forms.png" alt="bb-forms"></p>\n<p><strong>Open Issues:</strong> 172</p>\n<p><strong>Issues closed in 2016:</strong> 14</p>\n<p><strong>Last Release:</strong> Jan 21, 2016</p>\n<h3>5. backgrid</h3>\n<p><img src="/posts/images/Contributors_to_wyuenho_backgrid.png" alt="backgrid"></p>\n<p><strong>Open Issues:</strong> 111</p>\n<p><strong>Issues closed in 2016:</strong> 3</p>\n<p><strong>Last Release:</strong> Jan 21 2014</p>\n<p>This is the first project on this list that I wouldn’t consider to be actively maintained.  Commits over the past 2 years have been primarily about keeping tooling and documentation up to date.</p>\n<h3>6. backbone.localStorage</h3>\n<p><img src="/posts/images/Contributors_to_jeromegn_Backbone_localStorage.png" alt="localstorage"></p>\n<p><strong>Open Issues:</strong> 45</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Jan 22 2015</p>\n<h3>7. backbone.stickit</h3>\n<p><img src="/posts/images/Contributors_to_NYTimes_backbone_stickit.png" alt="stickit"></p>\n<p><strong>Open Issues:</strong> 26</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> May 11 2015</p>\n<h3>8. backbone.paginator</h3>\n<p><img src="/posts/images/Contributors_to_backbone-paginator_backbone_paginator.png" alt="paginator"></p>\n<p><strong>Open Issues:</strong> 20</p>\n<p><strong>Issues closed in 2016:</strong> 7+</p>\n<p><strong>Last Release:</strong> Feb 3 2016</p>\n<h3>9. Backbone-validation</h3>\n<p><img src="/posts/images/Contributors_to_thedersen_backbone_validation.png" alt="validation"></p>\n<p><strong>Open Issues:</strong> 79</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> May 8 2015</p>\n<p>I have personal experience with the abandoned state of this library since my team has been working off a forked version of it for 6 months while waiting on maintainers to address a <a href="https://github.com/thedersen/backbone.validation/pull/302">pull request</a>.  Like many others here, it appears to be a project that the core team moved on from and nobody else had the motivation or time to pick it up.  While there’s nothing wrong with that, it makes it hard to rely on these projects.</p>\n<h3>10. Knockback</h3>\n<p><img src="/posts/images/Contributors_to_kmalakoff_knockback.png" alt="knockback graph"></p>\n<p><strong>Open Issues:</strong> 4</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Sep 28 2015</p>\n<h3>11. Exoskeleton</h3>\n<p><img src="/posts/images/Contributors_to_paulmillr_exoskeleton.png" alt="exoskeleton graph"></p>\n<p><strong>Open Issues:</strong> 21</p>\n<p><strong>Issues closed in 2016:</strong> 2</p>\n<p><strong>Last Release:</strong> August 4 2014</p>\n<h3>12. Backbone.dualstorage</h3>\n<p><img src="/posts/images/Banners_and_Alerts_and_Contributors_to_nilbus_Backbone_dualStorage.png" alt="backbone.dualstorage"></p>\n<p><strong>Open Issues:</strong> 30</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Feb 16 2015</p>\n<h3>13. Backbone-react-component</h3>\n<p><img src="/posts/images/Contributors_to_magalhas_backbone-react-component.png" alt="backbone react component"></p>\n<p><strong>Open Issues:</strong> 8</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Nov 6 2015</p>\n<h3>14. Backbone-offline</h3>\n<p><img src="/posts/images/Contributors_to_alekseykulikov_backbone-offline.png" alt="backbone-offline"></p>\n<p><strong>Open Issues:</strong> 30</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Aug 21 2013</p>\n<p>This project is actually documented as being deprecated and discontinued.  There is talk in the README about building a successor library, but it appears to have never emerged.</p>\n<h3>15. React.Backbone</h3>\n<p><img src="/posts/images/Contributors_to_clayallsopp_react_backbone.png" alt="react.backbone"></p>\n<p><strong>Open Issues:</strong> 11</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Jan 5 2015</p>\n<p>Interesting, and not encouraging, that the 2 newest libraries at this popularity level are both for helping Backbone users migrate to React, and neither appear to be very active.</p>\n<h3>16. Backbone.expoxy</h3>\n<p><img src="/posts/images/Contributors_to_gmac_backbone_epoxy.png" alt="backbone.epoxy"></p>\n<p><strong>Open Issues:</strong> 19</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Nov 20 2014</p>\n<h3>17. backbone.iobind</h3>\n<p><img src="/posts/images/Contributors_to_noveogroup_backbone_iobind.png" alt="backbone.iobind"></p>\n<p><strong>Open Issues:</strong> 16</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Dec 10 2014</p>\n<h3>18. backbone-associations</h3>\n<p><img src="/posts/images/Contributors_to_dhruvaray_backbone-associations.png" alt="backbone-associations graph"></p>\n<p><strong>Open Issues:</strong> 16</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Jun 28 2014</p>\n<p>We’re really starting to get into the meat of the dead projects now.  While there are always going to be older projects that were once popular and got a lot of stars and are now abandoned, that shouldn’t be this many of the top 20 projects</p>\n<h3>19. backbone-tastypie</h3>\n<p><img src="/posts/images/Contributors_to_PaulUithol_backbone-tastypie.png" alt="tastypie graph"></p>\n<p><strong>Open Issues:</strong> 12</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Oct 26 2013</p>\n<p>This is a single use case library that presumably was abandoned after solving a problem, but its worth including to illustrate that the 400 star bar isn’t that hard to hit. A similar search for React projects on bower yields 46 projects with 400+ stars, and React is only ~3 years old.</p>\n<h3>20. backbone.syphon</h3>\n<p><img src="/posts/images/Contributors_to_marionettejs_backbone_syphon.png" alt="syphon graph"></p>\n<p><strong>Open Issues:</strong> 19</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Oct 18 2015</p>\n<h3>21. backbone-nested</h3>\n<p><img src="/posts/images/Contributors_to_afeld_backbone-nested.png" alt="backbone-nested"></p>\n<p><strong>Open Issues:</strong> 45</p>\n<p><strong>Issues closed in 2016:</strong> 1</p>\n<p><strong>Last Release:</strong> Jul 27 2015</p>\n<h3>22. backbone.radio</h3>\n<p><img src="/posts/images/Contributors_to_marionettejs_backbone_radio.png" alt="backbone.radio"></p>\n<p><strong>Open Issues:</strong> 9</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Sep 5 2015</p>\n<p>Backbone.Radio (along with Backbone.syphon) is part of the marionette project.  You can see that those projects at least have continued work during the past year, albeit at a significantly less active rate than during 2014</p>\n<h3>23. backbone-fetch-cache</h3>\n<p><img src="/posts/images/Contributors_to_madglory_backbone-fetch-cache.png" alt="backbone-fetch-cache graph"></p>\n<p><strong>Open Issues:</strong> 26</p>\n<p><strong>Issues closed in 2016:</strong> 2</p>\n<p><strong>Last Release:</strong> Feb 16 2014</p>\n<h3>24. backbone-query-parameters</h3>\n<p><img src="/posts/images/Contributors_to_jhudson8_backbone-query-parameters.png" alt="backbone-query-parameters"></p>\n<p><strong>Open Issues:</strong> 10</p>\n<p><strong>Issues closed in 2016:</strong> 0</p>\n<p><strong>Last Release:</strong> Sep 23 2014</p>\n<p>So what does this look like in aggregate.  Of the “top 24” Backbone projects, only 2 were started after January 2014, and one of those is a tool to migrate Backbone projects to React, the other was a rebrand of an existing tool.  18 of the top 24 libraries have not had a release in the last 6 months, 9 have not had a release since December 2014 or earlier.  If we classify these libraries as “Actively Growing”, “Actively being developed”, “Stable and maintained”, “Flickering Signs of life”, “All but dead”<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>, and “Dead”, I would personally split that out like this:</p>\n<table>\n<thead>\n<tr><th>Title</th><th>Libraries</th><tr>\n</thead>\n<tbody>\n<tr><td>Actively Growing</td><td></td></tr>\n<tr><td>Actively Developed</td><td> Marionette</td></tr>\n<tr><td>Stable + minimally maintained</td><td> Backbone, Backbone.Relational, backbone-forms, backbone.paginator, Backbone.syphon, Backbone.radio</td></tr>\n<tr><td>Flickering Signs of life</td><td> back grid, knockback,</td></tr>\n<tr><td>All but Dead</td><td> backbone.localstorage, backbone.stickit, backbone-validation, exoskeleton, backbone.dualstorage, backbone.react-component, react.backbone, backbone-nested, backbone-fetch-cache, backbone-query-parameters</td></tr>\n<tr><td>Dead</td><td> backbone.offline, backbone.iobind,  backbone.epoxy, backbone-associations, backbone-tastypie</td></tr>\n</table>\n<p>It is not a pretty picture right now.  If you’re part of the Backbone community, I’d love to hear from you on this.  Should we be calling Backbone dead and looking to migrate ASAP?  Do you think I’m overselling this problem?  Are there libraries that I’m not considering right now that are thriving?  Or is focusing on Backbone-specific libraries a mistake because most developers are pasting together multiple libraries that aren’t necessarily tightly tied.</p>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>When I attended BackboneConf later that year, about 75% of attendees raised their hands when asked if they had used Marionette <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>Some ideas, like a better router or better templating systems, can be pulled in as 3rd party libraries just fine.  But conceptual changes like 1 way data flow or easily composable components from React and the ES6 class model can’t easily be pulled into Backbone without changes to the core library.  It’s debatable whether those ideas are useful for Backbone, but it is clear that they will not fit within the current state of the library. <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn3" class="footnote-item"><p>I used Bower rather than npm because it returns search results sorted by stars rather than trying to directly match the query. <a href="#fnref3" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn4" class="footnote-item"><p>I don’t like calling somebody else’s project dead if its not labeled that way and has had recent issues activity <a href="#fnref4" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'
}},function(e,t){e.exports={title:"Underscore vs Lo-Dash",date:"2014-11-12 13:00:00+00:00",layout:"post",path:"/2014/11/12/underscore-vs-lodash",description:"A comparison between Underscore and lodash",keywords:"underscore lodash lo-dash JavaScript performance",category:"frameworks",key:"underscore-lodash",readNext:"mn-series,backbone-devs-react,mobx-first",pageViews:"116368",last30pageViews:"1633",body:'<p>Last week was the time for my team’s quarterly “dependency update” where we go through all the third party libraries we’re using and keep up on any updates or maintenance that need to happen.  That presented the opportunity for me to do a bit more research into an alternative for one of our libraries, <a href="http://underscorejs.org/">Underscore</a>.  Underscore is a JavaScript utility library that provides helper functions for common idioms with a focus on functional programming.  It’s a dependency for <a href="http://backbonejs.org/">Backbone</a>, the MVC library that our web app is based on, and was originally created by Jeremy Ashkenas, who also wrote Backbone.  I love the functional style that Underscore subscribes to, and while the much improved browser support for ES5 functions like map, reduce and filter makes it less necessary than it used to be, Underscore still provides plenty of benefits.</p>\n<p>For a while now though, I’ve been hearing about <a href="https://lodash.com/">Lo-Dash</a>.  Lo-Dash began its life as a fork of Underscore, and still tracks Underscore’s API enough to allow it to serve as a drop-in replacement.  But under the hood it’s been completely rewritten, and it’s also added a number of features and functions that Underscore does not provide.  About a year ago I saw a spurt of articles recommending that Underscore users switch to Lo-Dash, and it came up again recently when <a href="https://github.com/jashkenas/underscore/issues/1805">Underscore’s decision to not follow semantic versioning</a> caused problems for some NodeJS applications. The <a href="http://stackoverflow.com/questions/13789618/differences-between-lodash-and-underscore">definitive Stack Overflow question on the topic</a> seems to come down pretty solidly in favor of Lo-Dash.  And the Lo-Dash <a href="https://lodash.com/docs">documentation</a> touted a prettier chaining syntax as a feature, something that caught my eye since I’ve always disliked Underscore’s chaining mechanism.  As I did my research though I noticed that most of the comparisons are at least a year old.  Both libraries have continued to evolve and improve since then, so I thought there’d be value in adding another writeup comparing the current iterations.</p>\n<h3>Why Do We Even Care?</h3>\n<p>Before I get into the weeds of comparisons, let me address why you’d want to use either of these libraries at all.  Underscore and Lo-Dash provide cross-browser compatible functional programming utility methods.  This post will be long enough without me trying to explain all the benefits of functional programming, but suffice it to say that if you’re manipulating and transforming data in any reasonably complex way, an Underscore style library will help you write performant readable code easier than you could with what Javascript natively provides.  We’ll touch more on performance later, but both Underscore and Lo-Dash perform better than native browser functional methods, and for complex data manipulations they’re significantly more readable than a series of for loops.  They let you write code that’s fast and reads like a description of what you intend to have happen.</p>\n<h3>How are Underscore and Lo-Dash similar?</h3>\n<p>As stated above, Underscore and Lo-Dash provide similar functionality.  Lo-Dash’s API is a superset of Underscore’s.  It provides everything that Underscore does, along with a few additional helper functions.  Lo-Dash can generally serve as a drop-in replacement for Underscore with no changes; it works just fine with Backbone.  So to some extent this question could be answered simply with a link to Underscore’s <a href="http://underscorejs.org/">documentation</a>.</p>\n<h3>How are Underscore and Lo-Dash different?</h3>\n<p>This question could really be rephrased as “What has Lo-Dash added?”.  Lo-Dash answers that with a pretty extensive list on its site, but the claims really boils down to a few things:</p>\n<ul>\n<li>Usability Improvements</li>\n<li>Extra Functionality</li>\n<li>Performance Gains</li>\n</ul>\n<p>Let’s examine those one by one.</p>\n<h4>Usability</h4>\n<p>Lo-Dash makes a number of additions to Underscore that don’t add new capabilities, but increase usability for developers.  These include</p>\n<ol>\n<li><s>Built in Support for AMD Module Loaders</s></li>\n<li>Short hand syntaxes for chaining</li>\n<li>Custom Builds to only use what you need</li>\n<li>Semantic versioning and 100% code coverage</li>\n</ol>\n<p>Each of these are relatively small things that add up to time savings for developers.  <s>Supporting AMD natively saves a configuration step, allowing you to use Lo-Dash on requirejs-based projects without having to specify it as a shim.</s> <em>(<strong>Update</strong>: As of 1.6, Underscore also has native AMD support.)</em>  Lo-Dash also improves the syntax for chaining functions.  Underscore’s chaining syntax has always felt a bit clunky to me.</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLongNames</span>(<span class="hljs-params">users</span>) </span>{\n    <span class="hljs-keyword">return</span> _.chain(users).pluck(<span class="hljs-string">\'name\'</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>{\n      <span class="hljs-keyword">return</span>  name.length &gt; <span class="hljs-number">10</span>;\n    }).value();\n}\n</code></pre>\n<p>Lo-Dash cleans that up a bit by not requiring the chain functionality and instead making the Lo-Dash object a function, jQuery style:</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLongNames</span>(<span class="hljs-params">users</span>) </span>{\n    <span class="hljs-keyword">return</span> _(users).pluck(<span class="hljs-string">\'name\'</span>).filter(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)</span>{\n      <span class="hljs-keyword">return</span>  name.length &gt; <span class="hljs-number">10</span>;\n    }).value();\n}\n</code></pre>\n<p>It’s a small nicety that clears away some syntactical noise.</p>\n<p>Lo-Dash also provides custom builds.  By default Lo-Dash is significantly larger than Underscore.  The full library weighs in at 33KB minified, double Underscore’s 16KB size<sup id="fnref:1"><a href="#fn:1">1</a></sup>.  But you can negate that a bit by only pulling in the things you need.  The “modern version” that drops compatibility for IE8 and other older browsers weighs in at 29KB minified (but not gzipped).  If you want to drop the Lo-Dash extra functionality entirely, and only use it for performance and usability reasons, you can build an underscore compatible version and use only 20kb.  You can also go even further, and for instance use only the functionality required by Backbone.  That will get you down to 13kb, smaller than the original Underscore library.</p>\n<p>Finally, Lo-Dash provides semantic versioning and 100% code coverage.  To me these mostly serve as signals that this is a project interested in being disciplined about its engineering practices, which is a good sign.  But the semantic versioning issue seems to be particularly important for those using a utility library in Node, as Underscore’s versioning practices have <a href="https://github.com/jashkenas/underscore/issues/1805">caused problems</a> for some.</p>\n<h4>Extra Functionality</h4>\n<p>Lo-Dash includes several functions not included in Underscore.  Some of these are simply syntactical shortcuts for common idioms.  <code>_.forOwn</code> allows you to iterate over an objects own properties, allowing you to skip the common practice of including a guard function in a loop to avoid touching items on an objects prototype chain.  Similarly <code>_.create</code> is a simplified syntax for <code>Object.create</code> and <code>_.parseInt</code> is a safe version of the built-in parseInt function <a href="http://stackoverflow.com/questions/14528397/strange-behavior-for-map-parseint">which can have surprising behavior</a>.  Lo-Dash also provides helper function for deep cloning, merging and extensions, operations that are not available in most libraries.  Specifically <code>_.cloneDeep</code> and <code>_.merge</code> serve as “deep” versions of Underscore’s <code>_.clone</code> and <code>_.extend</code>, and <code>_.where</code> accepts an argument to support deep comparisons.  If you are routinely doing comparisons and copying of nested objects for equality, these functions will definitely have their place for you.</p>\n<h4>Performance</h4>\n<p>Lo-Dash has an impressive set of <a href="https://lodash.com/benchmarks">benchmarks</a> that you can run on its site which highlight its speed advantage over Underscore on a variety of operations. This is great, but benchmarking against specific tests like this can lead to local optimizations that might not lead to real-world speed.  I also don’t have much interest in many of the functions tested; I use them rarely and can handle a speed dip if necessary.  I was mostly interested in how Underscore and Lo-Dash compared on their core functional methods.  So I set up some jsPerf tests that you can run yourself for <a href="http://jsperf.com/lodash-underscore-and-native-each">_.each</a>, <a href="http://jsperf.com/lodash-underscore-and-native-contains">_.contains</a>, <a href="http://jsperf.com/lodash-underscore-and-native-map">_.map</a>, <a href="http://jsperf.com/lodash-underscore-and-native-reduce">_.reduce</a>, and <a href="http://jsperf.com/lodash-underscore-and-native-filter">_.filter</a>. Here’s a simplified version of the results, comparing Underscore and Lo-Dash performance in terms of their improvement over the speed of the browsers’ native functions.  Results in the chart are averaged across browsers.</p>\n<blockquote>\n<p><strong>Edit: There used to be a chart here. Unfortunately the 3rd party service I used to embed the chart lost my data.  A good reminder to own your own content.  At this point the exact performance data from 2014 would no longer be representative of the current state of things anyway.  The tests above will provide a more accurate look at current performance.</strong></p>\n</blockquote>\n<p>These tests are not incredibly scientific, and the chart especially is oversimplified, but they’re meant to represent real world usage in an easily digestible format.  Draw conclusions from them at your own risk.  That said, there were a few interesting results that I think are reasonably reliable.</p>\n<ol>\n<li>\n<p><strong>Both Underscore and Lo-Dash blow away the native functional methods.</strong></p>\n<p>With its latest versions Underscore has joined Lo-Dash in using loop based iteration to handle each, map, reduce and filter instead of proxying to the native code.  Counterintuitively this ends up being much faster.  Consistently across the board, Underscore and Lo-Dash beat native functions in terms of speed.  A little research indicates that this is because native functions optimize for sparse arrays and have more weird corner cases that they handle.  In any case, the performance difference is pretty startling across the board.</p>\n<p>You can still manage to beat the libraries’ performance by using simple for loops, which is what underscore and lo-dash use after they handle edge cases of their own.  The tradeoff at that point becomes about readability and reliability vs speed, and I’d suggest that using loops is an optimization step in most cases where you’d want to use a utility library, rather than a good starting point.</p>\n</li>\n<li>\n<p><strong>Lo-Dash is definitely not slower than Underscore</strong></p>\n<p>It’s hard to know how significant some of the results here are, as there are a mix of differences which change across browsers.  Again, it’s not a very scientific test.  But Lo-Dash is never significantly slower than Underscore on pretty much any test (the worst seems to be a ~7% difference on Firefox for <code>_.each()</code>).  And for several tests it came across as significantly faster (8x speed difference for contains on Firefox!).  I expect many of these differences would prove to be insignificant or inaccurate on a more rigorous test, but it would be very surprising if the net result was that Underscore was faster for common operations.</p>\n</li>\n</ol>\n<h3>Summary: What to use?</h3>\n<p>So to wrap it all up, if you need a utility library which one should you actually use?  I’ll stop just short of unreserved recommendations for Lo-Dash that I saw when I researched this.  I think Lo-Dash is the clear winner for NodeJS users.  Its biggest weakness (file size) doesn’t matter on the server, and its use of semantic versioning matters a lot more for developers depending on npm for dependency management.  So take the performance gains and extra capabilities and go with it.  However, there are more tradeoffs on the client.  Both Lo-Dash and Underscore are small, but optimizing page-weight still matters for many sites, especially on mobile devices.  Underscore has learned from Lo-Dash and improved its performance enough that the differences are often insignificant. And while Lo-Dash’s extras are convenient, none of them seem essential unless you are comparing and cloning a lot of deeply nested objects.  So I’d advise web developers to weigh the tradeoffs and pick the library that best meets their priorities.</p>\n<p><em>(<strong>Update:</strong> There’s been plenty of discussion on this post today.  Check out the comments below for a lot of helpful insight from <a href="https://twitter.com/jdalton">John-David Dalton</a>, Lo-Dash’s creator and an Underscore contributor.  You can also check out the discussion on <a href="http://www.reddit.com/r/javascript/comments/2m2hs6/underscore_vs_lodash/">Reddit</a>.)</em></p>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p><a href="http://kitcambridge.be/blog/say-hello-to-lo-dash/">Say Hello to Lo-Dash</a>, a blog post written by Lo-Dash’s core team after they released 1.0 is a great summary of the advantages of Lo-Dash.  It’s a year and a half old now, but mostly holds up pretty well, with the only real difference being that Underscore has pulled in several of the features they mention here since then.</p>\n</li>\n<li>\n<p>I mentioned this in the post, but Lo-Dash provides a much more thorough benchmarking page than what I provided <a href="https://lodash.com/benchmarks">on their site</a>.  They also provide a helpful <a href="https://github.com/lodash/lodash/wiki/Roadmap">roadmap</a> to let users know about plans for Lo-Dash 3.0.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        These numbers are minified but not gzipped, based on the file size when I download the minified versions from the project site.\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"Understanding the Backbone Mindset: A review of Building  Backbone Plugins by Derick Bailey",date:"2014-07-09 11:38:40+00:00",layout:"post",path:"/2014/07/09/understanding-the-backbone-mindset-a-review-of-building-backbone-plugins-by-derick-bailey",category:"reviews",description:"A book review of a great deep dive into Backbone best practices",readNext:"mn-series,backbone-devs-react,bb-radio",pageViews:"12652",last30pageViews:"22",body:'<p>As the saying goes, judging a book by its cover is a dangerous business.  A lot of books have titles that promise great things, and content that under-delivers and disappoints.  Every once in a while, though, you find a gem that does the opposite. <a href="https://leanpub.com/building-backbone-plugins?a=3a4Srv2pP9p87WQ_eoDoGp">Building Backbone Plugins</a> sounds like a niche book for library developers.  But it actually is the best resource on <a href="http://backbonejs.org/">Backbone.JS</a> development I’ve found, a book that will benefit anyone who works with Backbone.</p>\n<p>So what’s the fuss about?  The book’s author, Derick Bailey, is the creator of <a href="http://marionettejs.com/">Marionette.JS</a>, a popular application framework for Backbone Apps.  <em>Building Backbone Plugins</em> explores the problems that Derick tried to solve with Marionette and then explains the mindset behind Marionette’s solutions.  It is not a book exclusively about Marionette though.  The solutions in the book are example code that represents a simplified view of what Marionette does.  Instead the book looks at the common problems any developer will encounter in a Backbone project, and provides a possible solution, while working hard to generalize the lessons and concepts as much as possible.</p>\n<p>Building Backbone Plugins is divided into 4 parts.  The first two look at Backbone Views and dealing with the DOM.  The third looks at Models and Collections.  The last part deals with application structure and events.  These are followed by a series of appendices that read as stretched-out blog posts on a variety of related topics that didn’t quite fit into one of the 4 buckets that the rest of the book falls into.</p>\n<p>In my mind, the first two parts are the heart of the book.  They’re a step-by-step look at how you can remove repetitive code from your Backbone Views and structure your application to expose the developers intent in each file, rather than burying the purpose in boilerplate. I learned a lot about how I could improve my Backbone code, and these two sections actually inspired me to start integrating Marionette into a project at work. The application structure advice in the fourth part is also particularly strong, with quality information about events, and ideas on how to scale a Backbone application beyond TodoMVC sizes.</p>\n<p>On the other hand, the appendices feel a bit tacked on, and seem to be full of stuff the author wanted to add but couldn’t figure out how to weave into the rest of the book.  Since it’s legitimate content rather than simply greater detail on things that have been already covered, they don’t act as real appendices and leave the book feeling a bit unfocused at the end. When you combine that with some weaker content in part 3 (where the author moves away from Marionette into some other smaller examples), the book can feel a bit choppy and directionless.  But the goldmine of knowledge and perspective in Parts 1, 2 and 4 more than make up for it.</p>\n<p>I would not recommend BBP as a “first book” on Backbone.  It assumes plenty of knowledge, and doesn’t attempt to teach Backbone basics.  But for an intermediate level Backbone developer, or any Javascript developer who wants to grow their thinking about application structure, there is plenty of solid insight here. Meditations on handling nested views, cleaning up unused views, abstracting out repetitive boilerplate, and structuring genuinely large applications are all worth the price of the book.  Finally, if you’re writing code using Marionette already, this book is a must-have.  Marionette’s documentation does a great job of explaining the “what” and the “how” of Marionette.  But this book explains the all-important “why” of a framework that is based on encoding Backbone best practices into a library. It will help you think like an experienced Backbone developer.</p>\n<h3>More Resources</h3>\n<ul>\n<li><a href="https://leanpub.com/building-backbone-plugins?a=3a4Srv2pP9p87WQ_eoDoGp">Building Backbone Plugins</a> - You can purchase the book on leanpub. (Note: Affiliate Link)</li>\n<li><a href="http://addyosmani.github.io/backbone-fundamentals/">Developing Backbone Applications</a> - This book by Addy Osmani is a great resource for Backbone Beginners who want a more basic introduction to Backbone concepts.  It’s available as a free HTMl site on github, but you also can <a href="http://www.amazon.com/gp/product/1449328253/ref=as_li_tl?ie=UTF8&camp=1789&creative=390957&creativeASIN=1449328253&linkCode=as2&tag=productjavasc-20&linkId=5RQTSOTPFIGKMLJK">purchase it as a paperback or ebook.</a><img src="http://ir-na.amazon-adsystem.com/e/ir?t=productjavasc-20&l=as2&o=1&a=1449328253" width="1" height="1" alt="" style="border:none !important; margin:0px !important;" /></li>\n<li><a href="http://marionettejs.com/">Marionette.js</a> - This framework serves as the inspiration for Derick’s book and is a great way to structure larger Backbone apps.</li>\n</ul>\n'}},function(e,t){e.exports={title:"Unexpected Javascript: That Doesn't Do What You Think",date:"2013-01-15 23:30:00+00:00",layout:"post",path:"/2013/01/15/unexpected-javascript-that-doesnt-do-what-you-think",category:"javascript",description:"A quiz for JavaScript developers",pageViews:"737",last30pageViews:"0",body:'<p>When I started writing Javascript, I encountered a lot of stuff that was just plain weird.  Stuff didn’t act the way I expected, syntax seemed misleading, and some behavior just seemed completely wrong.  I have a better understanding now and have come to appreciate Javascript for the quirky but stable language that it is once you know the rules.  But just for fun, here are some examples of assumptions that its easy to make when looking at Javascript for the first time.  All of the following statements are wrong (at least in some cases).  See if you know why.  And feel free to contribute more in the comments!</p>\n<h3>Equality Problems</h3>\n<ul>\n<li><code>0.1+0.2 === .3</code> is true <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></li>\n<li><code>10000000000000001+20000000000000000 === 300000000000000001</code> is true <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></li>\n<li><code>x === x</code> is true for all values of x <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></li>\n<li><code>&quot;1.0e0&quot; == {valueOf: function(){ return true;}};</code> is false <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></li>\n<li>if <code>x==y</code> and <code>x==z</code> then <code>z==y</code> <sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup></li>\n<li><code>parseInt(\'016\') === 16</code> is true. <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></li>\n</ul>\n<h3>Environment Concerns</h3>\n<ul>\n<li><code>window</code> will always be available as a global variable <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup></li>\n<li>Javascript will always be enabled on your web page <sup class="footnote-ref"><a href="#fn8" id="fnref8">[8]</a></sup></li>\n<li>If it works in firebug it will work in the browser <sup class="footnote-ref"><a href="#fn9" id="fnref9">[9]</a></sup></li>\n</ul>\n<h3>Code Structure</h3>\n<ul>\n<li>You don’t need to add semicolons in javascript, they’re inserted automatically <sup class="footnote-ref"><a href="#fn10" id="fnref10">[10]</a></sup></li>\n<li>I always add semicolons, so I don’t need to know about how they’re inserted <sup class="footnote-ref"><a href="#fn11" id="fnref11">[11]</a></sup></li>\n<li>The var keyword is unnecessary, variables are created just by referencing them. <sup class="footnote-ref"><a href="#fn12" id="fnref12">[12]</a></sup></li>\n<li><code>return eval(&quot;x&quot;)</code> is the same as <code>var a = eval; return a(&quot;x&quot;);</code> <sup class="footnote-ref"><a href="#fn13" id="fnref13">[13]</a></sup></li>\n<li>Functions are the only thing in Javascript that restrict scope.  <sup class="footnote-ref"><a href="#fn14" id="fnref14">[14]</a></sup></li>\n</ul>\n<h3>Function Issues</h3>\n<ul>\n<li>I will always know what <code>this</code> is when the function is run <sup class="footnote-ref"><a href="#fn15" id="fnref15">[15]</a></sup></li>\n<li>You can get the last argument of the function using <code>arguments.pop()</code> <sup class="footnote-ref"><a href="#fn16" id="fnref16">[16]</a></sup></li>\n<li>The following will generate different names and alerts for each link: <sup class="footnote-ref"><a href="#fn17" id="fnref17">[17]</a></sup></li>\n</ul>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addLinks</span> (<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>, link; i&lt;<span class="hljs-number">5</span>; i++) {\n    link = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">"a"</span>);\n    link.innerHTML = <span class="hljs-string">"Link "</span> + i;\n    link.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n        alert(i);\n    };\n    <span class="hljs-built_in">document</span>.body.appendChild(link);\n  }\n}\n</code></pre>\n<ul>\n<li>The following function will return 1: <sup class="footnote-ref"><a href="#fn18" id="fnref18">[18]</a></sup></li>\n</ul>\n<pre><code class="language-javascript">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>{\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; }\n    <span class="hljs-keyword">return</span> f();\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>)</span>{ <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>; }\n  })();\n</code></pre>\n<ul>\n<li>The if statement code can be removed here with no side effects: <sup class="footnote-ref"><a href="#fn19" id="fnref19">[19]</a></sup></li>\n</ul>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testf</span>(<span class="hljs-params"></span>)</span>{\n  x=<span class="hljs-number">3</span>;\n  <span class="hljs-keyword">if</span>(<span class="hljs-literal">false</span>){\n    <span class="hljs-keyword">var</span> x=<span class="hljs-number">5</span>;\n  }\n}\n</code></pre>\n<h4>Explanations here:</h4>\n<hr class="footnotes-sep">\n<section class="footnotes">\n<ol class="footnotes-list">\n<li id="fn1" class="footnote-item"><p>Actually comes to 0.30000000000000004 See <a href="http://stackoverflow.com/questions/588004/is-javascripts-floating-point-math-broken">here</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn2" class="footnote-item"><p>Loses the trailing 1 due to limits of <a href="http://stackoverflow.com/questions/588004/is-javascripts-floating-point-math-broken">floating point numbers</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn3" class="footnote-item"><p>It turns out that <code>NaN === NaN</code> is false <a href="#fnref3" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn4" class="footnote-item"><p>Both values get cast to 1 by the <a href="http://stackoverflow.com/questions/359494/javascript-vs-does-it-matter-which-equal-operator-i-use">== operator</a> <a href="#fnref4" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn5" class="footnote-item"><p>‘’ == ‘0’ is false, 0==’’ is true, as is 0 ==‘0’ <a href="#fnref5" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn6" class="footnote-item"><p>Prior to ECMAScript 5, strings with leading 0s were interpreted as Octal Notation.  This is resolved in newer browsers, but IE8 and other older browsers still show this behavior. <a href="#fnref6" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn7" class="footnote-item"><p>Window is a browser construct.  It may not be available in all JS environments (for instance, it is not available in Node.js)  Unless you know exactly where your code will be run, be careful <a href="#fnref7" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn8" class="footnote-item"><p>Especially in government situations, security conscious users may disable javascript.  Even if the user is able to enable JS, it may be disabled by default.  You can prepare your site for this. <a href="#fnref8" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn9" class="footnote-item"><p>This is not always accurate.  Firebug executes in eval context, <a href="http://perfectionkills.com/understanding-delete/">and that may lead to strange behavior </a>. <a href="#fnref9" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn10" class="footnote-item"><p>There are some cases when a JS parser may unexpectedly concatenate 2 lines you didn’t intend.  This is particularly an issue when the next line begins with an arithmetic operator or a <code>(</code>, as is the case for immediately invoked function expressions.  You can see an example with <a href="http://jsfiddle.net/2XSCk/">this fiddle</a> <a href="#fnref10" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn11" class="footnote-item"><p>You can still be burned by automatic semicolon insertion even if you don’t want to take advantage of it.  The classic example is that Javascript will automatically insert a semicolon after <code>return</code> if you put the value to be returned on a new line, something that may happen often if you’re returning a new object and like to start your curly braces on a new line. <a href="#fnref11" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn12" class="footnote-item"><p>This is more of a beginner assumption.  Undeclared variables are automatically set as global variables and can cause plenty of problems if you don’t understand this. <a href="#fnref12" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn13" class="footnote-item"><p>Strangely, Javascript differentiates between direct calls to eval and indirect calls. You can read more on this <a href="http://stackoverflow.com/questions/9107240/1-evalthis-vs-evalthis-in-javascript">StackOverflow Question</a> <a href="#fnref13" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn14" class="footnote-item"><p>This is admittedly an edge case, but catch statements of try…catch blocks also restrict scope, and the <code>with</code> statement also modifies the scope, in a different way.  <code>with</code> is not recommended <a href="#fnref14" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn15" class="footnote-item"><p>Even methods of an object can be called by another object with Javascript’s call and apply functions.  The only way to guarantee that the correct value of this is used is to use <a href="https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind">Javascript’s bind function</a> <a href="#fnref15" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn16" class="footnote-item"><p><code>arguments</code> is not a real array.  It is array-like, in that it has a length value, and has integer properties that it accepts.  But you can’t run normal array arguments on it without converting it to an Array object. <a href="#fnref16" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn17" class="footnote-item"><p>This is the classic example of improper closure behavior.  I got this example from <a href="http://robertnyman.com/2008/10/09/explaining-javascript-scope-and-closures/">this article</a>, where you can read more. <a href="#fnref17" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn18" class="footnote-item"><p>Function declarations are hoisted to the top of the function.  Therefore both versions of f are defined, and the second one overrules the first, before f is called and return <a href="#fnref18" class="footnote-backref">↩︎</a></p>\n</li>\n<li id="fn19" class="footnote-item"><p>More variable hoisting.  In this case the var x declaration is hoisted to the top of the function, even though the assignment can never be executed.  This has the effect of making the variable local to the function rather than global, which is potentially very significant.  You can see the difference in this <a href="http://jsfiddle.net/H4bCx/">jsFiddle</a>/ <a href="#fnref19" class="footnote-backref">↩︎</a></p>\n</li>\n</ol>\n</section>\n'
}},function(e,t){e.exports={title:"Vim Workflows: File Switching",date:"2014-11-10 04:06:52+00:00",layout:"post",path:"/2014/11/10/vim-workflows-file-switching-strategies",description:"A look at the different approaches you can take to managing files in Vim",category:"tools",key:"vim-files",readNext:"learning-vim,vim-art,vim-language",pageViews:"5510",last30pageViews:"105",body:'<p>Becoming productive in Vim is about more than just knowing all of the features available to you<sup id="fnref:1"><a href="#fn:1">1</a></sup>. It’s all about knowing which ones to use in which situations.  In my series from this summer on <a href="http://benmccormick.org/learning-vim-in-2014/">learning Vim</a>, I focused a lot on the different tools Vim provides for solving problems.  Today I’ll show how I put some of those tools together to actually be more productive.</p>\n<p>A good tool should allow you to focus on your problem while using it, without making you spend a lot of time thinking about extraneous things. File switching is an area in text editing that can really slow you down if you let it.  The first file switching method that most Vim users is the simple <code>:e</code> command to open a file.  Technically it’s the only command you need for file switching, since you can use it to open up any file you want and start editing it.  But doing so requires you to essentially internalize the complete structure of your file system and type out full paths every time.  On a large project with nested directories that becomes a significant mental load and use of time, even if you’re taking advantage of Vim’s tab completion features. And it’s a mental load that’s inessential to the task at hand.  You need to recall the precise layout of your file structure every time only because the tool isn’t able to make things easier for you.</p>\n<p>Fortunately Vim is able to make easier things easier for you when you use the right tool for the job.  That means rather than using one file switching strategy to rule them all, we can combine several tools to reduce the mental load on us and focus on our code or writing. I’ll specifically look at a few common scenarios and my approach for each.  This isn’t the only workflow you can use to address these scenarios, but hopefully it will inspire you to improve your own Vim workflow.  So here are the different scenarios:</p>\n<h4>I want to move to a file with a name I know</h4>\n<img src="/posts/images/ControlP_-____Dropbox_blog_drafts__-_VIM.png" class="full-width" alt ="ctrlp screenshot">\n<p>When you’re moving to a file with a name that you know, it’s hard to beat the power of a fuzzy finding plugin like <a href="https://github.com/kien/ctrlp.vim">CtrlP</a> or <a href="https://github.com/Shougo/unite.vim">Unite</a>.  CtrlP allows me to type in the name of a file without remembering or typing a long directory path and instantly get a list of potential files.  Usually the file I’m looking for is the top hit.</p>\n<h4>I want to move to a file, but I don’t know what it’s called</h4>\n<img src="/posts/images/NERD_tree_1_-____Dropbox_blog_drafts__-_VIM.png" class="full-width" alt ="NerdTree screenshot">\n<p>This scenario happens most often on projects that you’re unfamiliar with and just getting into.  You’re looking for some functionality, but don’t know exactly what it’s called within the project and need to look through the file system for hints.  In this case you need a directory browsing tool.  Vim bundles <a href="http://www.vim.org/scripts/script.php?script_id=1075">netrw</a> by default and it’s a good starting place.  If you have issues with netrw, many people install <a href="https://github.com/scrooloose/nerdtree">NerdTree</a> as an alternative file explorer.  I personally don’t use NerdTree very often these days.  Most of my work over the last year or so has been on one large project or smaller experimental projects and I haven’t needed it.  But it’s been very useful when I’ve cloned down a github repository to look it over or make changes.  It’s the best way to quickly get the lay of the land of a project within Vim, and to find a specific file before you really know what you’re looking for.</p>\n<h4>I want to move to a file that I already have open</h4>\n<img src="/posts/images/switching_between_files_md____Dropbox_blog_drafts__-_VIM.png" class="full-width" alt ="Buffer list">\n<p>A common scenario in Vim involves moving back and forth between 2 files, possibly a file and its corresponding test file.  If you don’t want to use splits, that means you’ll want a quick command to move between open files.  Fortunately Vim keeps a list of active buffers open.  When I’m only flipping between 2 files I’ll usually use the <code>:bprev</code> and <code>:bnext</code> commands, which I’ve aliased to <code>[b</code> and <code>]b</code> <sup id="fnref:2"><a href="#fn:2">2</a></sup>. If I have more than a few files open though I’ll usually either use <code>:b</code> and type the name of the file, or just use ctrlp again, which doesn’t require me to remeimber if the file I wasn’t is actually already open or not.</p>\n<h4>I want to move back to the place I just was</h4>\n<img src="/posts/images/5114935852_49b373e961_b.jpg" class="full-width" alt ="indy">\n<p>“Rabbit Holing” happens to me all the time when I’m working on code.  I start looking at one thing, then look at code related to that, and before I know it I’m 4 files deep following a chain of stuff I’m debugging.  Oftentime I want to move back up that chain.  I could of course remember what files I opened and use one of the methods above, but that requires me to internalize the memory of events.  The command that maps best to my desire to move back up the chain is using Vim’s jumplist.  Vim keeps track of every “jump” you make within a window or split, and allows you to move back up and down that jump list as you like, both within files and across them. The commands to move up and down the jump list are mapped to <code>&lt;c-o&gt;</code> and <code>&lt;c-i&gt;</code> by default.  When I use them I don’t have to keep track of what files I’m moving across or even if I’m switching files at all.  I can just investigate my issue and have confidence that I’ll be able to get back.  Think of it as tying down a rope before you dive into a cave full of snakes.</p>\n<h4>I want to create a new file</h4>\n<p>Creating a new file means that we finally find a use for the basic <code>:e</code> command.  Because you need to specify a full directory path anyway when you’re creating a file, it makes sense to use the basic Vim commands here.  If you need to create a directory to put the file in, you can use the shell command with <code>:!mkdir &lt;path/to/dir&gt;</code>.  While writing this piece I learned that ctrlp has the ability to create a new directory path and file in a single command, which is a nice touch.  But you lose out on Vim’s autocompletion of paths if you’re creating a directory nested in existing directories.  I find the builtins to be simplest here.</p>\n<h4>I want to edit a specific piece of code, but don’t know what file it’s in</h4>\n<img src="/posts/images/_No_Name__-_-_VIM_and_Ghost_Admin.png" class="full-width" alt ="Ag.vim">\n<p>Finally, possibly the most common scenario for me is when I know I have a particular piece of code I need to edit, but don’t have it mapped to a particular file in my head.  Rather than forcing myself to recall the file, the easiest path is to let Vim take the information I know and help me out.  Specifically I use Ag.vim for code search within projects.  It is a wrapper around Ag, a <a href="http://benmccormick.org/2013/11/25/a-look-at-ack/">fantastic code search program based on Ack</a>.  It allows me to enter a search term, and then pulls up all occurrences of that term within my project.  One of it’s best features is filtering by file type, which allows me to type something like <code>:Ag --less &quot;\\.widget&quot;</code> and search my LESS files for all rules effecting the class <code>.widget</code>.</p>\n<h3>Let Vim Work For You</h3>\n<p>The workflow I described is not the “one true way” to navigate files in Vim.  Some people hate plugins and will prefer to use <code>:e</code>,<code>:b</code>, and netrw for everything. You can certainly do many of the things above with NerdTree or CtrlP if you prefer to simplify to one tool.  And <a href="https://github.com/Shougo/unite.vim">Unite</a> is an attempt to pull almost all of these scenarios into one tool.  The point is to be aware of the inessential work created in the different scenarios you face when coding and offload the work to Vim in a way that makes sense to you.</p>\n<hr>\n<h3>More Resources</h3>\n<ul>\n<li>\n<p><a href="http://vimcasts.org/blog/2013/01/oil-and-vinegar-split-windows-and-project-drawer/">Oil and Vinegar</a> is a nice Vimcasts article on how to make NerdTree work well with multiple splits</p>\n</li>\n<li>\n<p>I wrote a more <a href="http://benmccormick.org/2014/07/07/learning-vim-in-2014-working-with-files/">introductory post</a> this summer on the tools you can use to manage files in Vim.  It talks in a bit more detail about some of the Vim features I mentioned above.</p>\n</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        That\'s true of many things actually.  \n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        I actually use <a href="https://github.com/tpope/vim-unimpaired">unimpared.vim</a> to provide consistent keybindings for these types of motions.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n</ol>\n</div>\n'}},function(e,t){e.exports={title:"What are Higher Order Components?",date:"2016-12-14 14:30:00+00:00",layout:"post",path:"/2016/12/14/what-are-higher-order-components",description:"An explanation of React's higher order components",keywords:"react components higher order",category:"frameworks",key:"what-are-hocs",readNext:"react-component-styles,callbacks-to-promises,mobx-first",pageViews:"832",last30pageViews:"248",body:'<p>If you spend much time at all reading through articles and documentation around React, you’re likely to run into the term “Higher Order component”, often abbreviated HoC.  Since it is often used without context in React discussions, and is not a particularly intuitive term for many (most?) developers, I thought it was worth publishing a quick and simple explanation of what Higher Order Components are.</p>\n<p>Higher Order Components are functions that take a React Component, and return a React Component.  The “higher order” phrasing is borrowed from the term “higher order function”, a more widely used term in Mathematics and Computer Science that refers to a function that either takes one or more functions as an argument, returns a function, or does both.  Since React Components can be thought of as functions that take data and return ui elements, the naming and usage make sense.  Let’s look at an example of a higher order component.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">const</span> ExtraPropsComponent = <span class="hljs-function">(<span class="hljs-params">WrappedComponent, componentType</span>) =&gt;</span> {\n  <span class="hljs-keyword">return</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtraPropsChild</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>{\n    render() {\n      <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">Object</span>.assign({}, <span class="hljs-keyword">this</span>.props, {\n        <span class="hljs-attr">importantFunction</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">\'foo\'</span>,\n        componentType,\n      });\n      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">WrappedComponent</span> {<span class="hljs-attr">...props</span>}/&gt;</span>\n    }\n  }\n}\n</span></code></pre>\n<p>This is a pretty basic HoC that takes a component and returns a new version of that component that will always be passed 2 extra props <code>importantFunction</code> and <code>componentType</code>. One is statically generated in this case, but the other is dynamically passed in when the component is generated.  The ability to pass dynamic content in when defining the component is one of the key wins of HoCs in the real world.  For instance, this is how Redux’s <a href="https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options">connect</a> function works.</p>\n<p>Note that this is different from a normal React Component that renders a subcomponent passed as an argument like this:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> componentType = <span class="hljs-string">\'???\'</span>;\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExtraPropsComponent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span>\n  <span class="hljs-title">render</span>() </span>{\n      <span class="hljs-keyword">let</span> { ChildComponent } = <span class="hljs-keyword">this</span>.props;\n      <span class="hljs-keyword">let</span> props = <span class="hljs-built_in">Object</span>.assign({}, <span class="hljs-keyword">this</span>.props, {\n        <span class="hljs-attr">importantFunction</span>: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> <span class="hljs-string">\'foo\'</span>,\n        componentType,\n      });\n      <span class="hljs-keyword">delete</span> props.ChildComponent;\n\n      <span class="hljs-keyword">return</span> <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">ChildComponent</span> {<span class="hljs-attr">...props</span>} /&gt;</span>;\n  }\n}\n</span></code></pre>\n<p>These 2 examples are roughly equivalent for this case, but accomplish things in different ways.  The HoC is a function that takes a component and data when it is created and generates another component.  The normal component example is a component that takes a component as a property and accesses a variable that is in its scope at creation time to generate the element tree that it renders.  The HoC is more flexible as you could theoretically create multiple versions of a component using the single HoC.</p>\n<pre><code class="language-javascript">\n<span class="hljs-keyword">const</span> FancyButton = ExtraPropsComponent(Button, <span class="hljs-string">\'fancy\'</span>);\n<span class="hljs-keyword">const</span> CrazyButton = ExtraPropsComponent(Button, <span class="hljs-string">\'crazy\'</span>);\n<span class="hljs-keyword">const</span> BoringButton = ExtraPropsComponent(Button, <span class="hljs-string">\'boring\'</span>);\n</code></pre>\n<p>For the equivalent functionality without using an HoC, you would have to define the whole component for each case.</p>\n<h3>Higher Order Components in the real world</h3>\n<p>I’ve already mentioned connect from <a href="https://github.com/reactjs/react-redux">react-redux</a> as an example of a higher order component.  Other popular libraries that use HoC as part of their APIs include:</p>\n<ul>\n<li><a href="http://formidable.com/open-source/radium/">Radium</a>: a library for inline styles in React that uses a higher order component to transform in-line styles added to a component into a more robust-css like system</li>\n<li><a href="https://github.com/ReactTraining/react-router">React Router</a>: a routing library for React that uses <code>withRouter</code> a HoC that injects access to the router into components that it wraps</li>\n<li><a href="https://facebook.github.io/relay/">Relay</a>: Facebook’s library for connecting to GraphQL APIs includes Relay.Container, a HoC that allows developers to declare the data requirements for a component</li>\n</ul>\n<h3>More Resources</h3>\n<ul>\n<li>This was intentionally a very high level look at Higher Order Components.  If you want to go deeper, <a href="https://medium.com/@franleplant/react-higher-order-components-in-depth-cf9032ee6c3e#.yhbug3ohe">this medium article</a> is a great deep dive into all the use cases they allow.</li>\n<li>If you’re interested in using HoCs in your own code base, <a href="https://github.com/acdlite/recompose">recompose</a> is a utility library for making the syntax around defining and using them painless</li>\n</ul>\n'}},function(e,t){e.exports={title:"What are mutable and immutable data structures?",date:"2016-06-04 21:52:52+00:00",layout:"post",path:"/2016/06/04/what-are-mutable-and-immutable-data-structures-2",description:"A quick look at the difference between mutable and immutable data",keywords:"immutable mutable JavaScript Immutable.js",category:"software-productivity",readNext:"lodash-underscore,backbone-devs-react,orthogonality-css-js",pageViews:"1456",last30pageViews:"296",body:'<p>Sometimes concepts and ideas slowly grow in a programming community, sometimes they seem to appear in a flash.  For the first several years I wrote JavaScript, I don’t recall ever seeing anything written online about immutable data.  Since React hit the scene in the last 2 years however, articles mentioning mutable and immutable data seem to have multiplied, as have libraries like Immutable.js and alternate front end languages like Elm that allow users to “use immutable data”.  I’m not going to address those libraries, but thought it would be useful to throw out a quick primer on what immutable data actually is, how it differs from mutable data, and why anyone cares.</p>\n<p>A mutable object is an object whose state can be modified after it is created.  An immutable object is an object whose state cannot be modified after it is created.  Examples of native JavaScript values that are immutable are numbers and strings.  Examples of native JavaScript values that are mutable include objects, arrays, functions, classes, sets, and maps.</p>\n<h3>Implications of mutable object</h3>\n<p>So why does this matter?  Consider the following code examples:</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> a = {\n    <span class="hljs-attr">foo</span>: <span class="hljs-string">\'bar\'</span>\n};\n\n<span class="hljs-keyword">let</span> b = a;\n\na.foo = <span class="hljs-string">\'test\'</span>;\n\n<span class="hljs-built_in">console</span>.log(b.foo); <span class="hljs-comment">// test</span>\n<span class="hljs-built_in">console</span>.log(a === b) <span class="hljs-comment">// true</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-string">\'test\'</span>;\n<span class="hljs-keyword">let</span> b = a;\na = a.substring(<span class="hljs-number">2</span>);\n\n<span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//st</span>\n<span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//test</span>\n<span class="hljs-built_in">console</span>.log(a === b) <span class="hljs-comment">//false</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">\'foo\'</span>, <span class="hljs-string">\'bar\'</span>];\n<span class="hljs-keyword">let</span> b = a;\n\na.push(<span class="hljs-string">\'baz\'</span>)\n\n<span class="hljs-built_in">console</span>.log(b); <span class="hljs-comment">// [\'foo\', \'bar\', \'baz\']</span>\n<span class="hljs-built_in">console</span>.log(a === b) <span class="hljs-comment">// true</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;\n<span class="hljs-keyword">let</span> b = a;\na++;\n\n<span class="hljs-built_in">console</span>.log(a) <span class="hljs-comment">//2</span>\n<span class="hljs-built_in">console</span>.log(b) <span class="hljs-comment">//1</span>\n<span class="hljs-built_in">console</span>.log(a === b) <span class="hljs-comment">//false</span>\n</code></pre>\n<p>What we see is that for mutable values, updating state applies across all <em>references</em> to that variable.  So changing a value in one place, changes it for all references to that object.  For the immutable data types, we have no way of changing the internal state of the data, so the reference always gets reassigned to a new object.  The biggest implication of this is that for immutable data, equality is more reliable since we know that a value’s state won’t be changed out from under us.</p>\n<p>Finally, its worth noting that it’s still possible to treat JavaScript objects as immutable.  This can first be done through <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze">Object.freeze</a>, which shallowly renders a JavaScript object immutable.  But it can also be done with programmer discipline.  If we want to rely on object’s being immutable, it’s possible to enforce that all object updates are done through something like\n<code>Object.assign(a, {foo: \'bar\'})</code> rather than <code>a.foo = \'bar\'</code>, and all array updates are done through functions that generate new arrays like <code>Array.prototype.map</code>, <code>Array.prototype.filter</code>, or <code>Array.prototype.concat</code>, rather than mutating methods like <code>Array.prototype.push</code>, <code>Array.prototye.pop</code>, or <code>Array.prototype.sort</code>.  This is less reliable without language level constraints, but has become popular in the React ecosystem for dealing with data for folks who don’t want to introduce abstractions like Immutable.js.</p>\n'}},function(e,t){e.exports={title:"Lessons Backbone Developers Can Learn From React",date:"2015-09-09 11:19:43+00:00",layout:"post",path:"/2015/09/09/what-can-backbone-developers-learn-from-react",description:"A look at the lessons that Backbone developers can learn from React",keywords:"Backbone React JavaScript frameworks",category:"frameworks",key:"backbone-devs-react",readNext:"mobx-first,mn-series,backbone-eco",pageViews:"25690",last30pageViews:"225",body:'<p>Since I started programming professionally, I’ve always kept an informal list of technologies I want to check out.  Things that I thought would be useful for my career, would expose me to new ideas, or just looked plain cool.  I spent a chunk of my Labor Day weekend working through that list a bit by learning more about <a href="http://facebook.github.io/react/">React</a>, the JavaScript View library from Facebook. React is a fascinating piece of technology, and a strong ecosystem of tools and libraries is growing up around it.  For developers starting brand new front-end projects in 2015, it ranks as one of the 2 main libraries I’d suggest looking into as a base, along with <a href="http://emberjs.com/">Ember</a>.  Most developers though are not starting brand new projects.  We’re maintaining existing code, or starting a new project while trying to reuse components of an old one.  Fortunately, React is about ideas as much as it is technology.  For this piece, I’m going to go through the big ideas of React and look at 3 of them that developers working on other frameworks (and <a href="http://backbonejs.org/">Backbone</a> in particular) can learn from.  There’s a lot more to React and its community than just these 3 ideas, so I’ll also include some extra resources at the bottom for those interested in learning more about it.</p>\n<h3>Idea 1: Interfaces should be a tree of composable components</h3>\n<p>React interfaces are constructed by combining many small “components”, each of which can be created by combining other smaller components.  In the end a normal React interface will resemble a tree, with a top level component that encompasses the whole app and many smaller components nested inside of it.  It’s a model that should be familiar; the browser DOM works the same way.</p>\n<p>Building interfaces this way lets you reuse more code and also makes code easier to reason about.  Because you’re composing your interfaces rather than using inheritance or monolithic page objects to build your pages, you can write common code for items like buttons, date-pickers and lists once and then re-use them all over place, even creating larger components like a dialog box out of smaller components like buttons, inputs and an overlay.  And since components are small and focused, it’s much easier to dive into them and understand what is going on.  Since react components are built to work in this standardized ways, you can be comfortable knowing that no other code is going to be changing the area of the UI controlled by that component.</p>\n<p>Backbone doesn’t enforce a specific way to organize your UI code.  You can create a single Backbone View for a whole page, have different non-nested views control different portions of a page, or use a nested scheme.  For simple sites or apps, each of these can make sense.  You probably don’t need a nested component tree for a simple content page with one or two pieces of interactive behavior.  But for large rich apps, small composable Views (or other building blocks) can provide much more flexibility, allowing you to mix and match pieces of your application to build diverse pages without becoming overwhelmed with code.</p>\n<p>Building this sort of tree system in Backbone is one of the main selling points of <a href="http://marionettejs.com/">Marionette</a>, the most popular of several libraries that add conventions on top of Backbone’s structure.  Marionette provides collection Views and layout Views that <a href="http://benmccormick.org/2014/12/22/building-complex-layouts-with-marionette-js/">let you build rich View trees</a> that are very similar in structure to a React app, while maintaining compatibility with Backbone’s code and the Backbone communities conventions.  It’s also possible to compose an applications interface with a mix of Backbone and other “components”; for instance using <a href="http://webcomponents.org/">web components</a>, React Components, or even jQuery UI widgets to represent individual pieces in an application and then tying together their layout using Backbone Views.</p>\n<p>That’s not to say there are no problems with implementing this style in Backbone though.  For one thing, when nesting one Backbone view inside of another, Backbone does not provide strong encapsulation of child views.  Because Backbone Views act on HTML directly, when a parent view listens to an event or modifies HTML directly, it is possible for the view to listen to events on elements controlled by a child view and even modify those elements directly.  That can create confusing side effects, since in a deeply nested view tree it means an event could lead to code being triggered in one of many different Views, and the state of that piece of DOM could be affected by many different areas of code at once.  In Backbone these problems must mostly be solved with programmer discipline, a weight that adds to the difficulty of deeply nested UIs, but doesn’t prevent them.</p>\n<h3>Idea 2: Modern JavaScript leads to cleaner code</h3>\n<p>Using modern JavaScript is less a core idea of React, and more a value of its community.  When researching React, almost every example of React code I found was written using <a href="https://babeljs.io/docs/learn-es2015/">ES6 style JavaScript code</a> and a modern module system (commonJS or ES6 modules using either <a href="https://webpack.github.io/">webpack</a> or <a href="http://browserify.org/">browserify</a>).  Many React developers are even pushing the boundaries of todays browsers and standards and experimenting with how their code could be improved by proposed ES7 features.  I rarely see Backbone code examples using these styles.  They’re usually in ES5 style or <a href="http://coffeescript.org/">Coffeescript</a> and use AMD modules or global namespaces to structure code.  Some of this is a natural function of the hype cycle: most Backbone code examples were written 3-4 years ago when it was the hot new JavaScript framework, while most React examples are written now.  But the net result is that most people who use Backbone today aren’t being exposed to these new styles and tools.  Since things like JavaScript APIs and module loaders can be chosen separate from what framework you choose <sup id="fnref:1"><a href="#fn:1">1</a></sup>, this is an opportunity to take advantage of innovation from other places without giving up an investment in Backbone.</p>\n<p>Take the following code examples for instance.  This is the same View written in 3 styles: ES5 with namespaces, ES6 and ES7.  Compare the readability and usability in each case.  The example is just a simple view that takes a template, logs a message when it is created and shows a different modal when 2 different buttons are clicked, with a callback function after the modal is closed.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//ES5 with namespaces</span>\n(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">App, Backbone, Modal, _</span>) </span>{\n\n    App.ExampleView = Backbone.View.extend({\n\n        <span class="hljs-attr">template</span>: App.templates[<span class="hljs-string">\'exampleview\'</span>],\n\n        <span class="hljs-attr">events</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-string">\'click .example-button\'</span>: <span class="hljs-string">\'showSuccess\'</span>,\n            <span class="hljs-string">\'click .example-button2\'</span>: <span class="hljs-string">\'showError\'</span>,\n        },\n\n        <span class="hljs-attr">constructor</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            Backbone.View.apply(<span class="hljs-keyword">this</span>, [].slice.call(<span class="hljs-built_in">arguments</span>));\n            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Created a Example View\'</span>);\n        },\n\n        <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-keyword">this</span>.$el.html(_.template(<span class="hljs-keyword">this</span>.template)(<span class="hljs-keyword">this</span>.model.attributes));\n        },\n\n        <span class="hljs-attr">showSuccess</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You did it\'</span>);\n        },\n\n        <span class="hljs-attr">showError</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You failed\'</span>, <span class="hljs-string">\'Error\'</span>);\n        },\n\n        <span class="hljs-attr">showModal</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message, title</span>) </span>{\n            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> title === <span class="hljs-string">\'undefined\'</span>) {\n                title = <span class="hljs-string">\'Alert\'</span>;\n            }\n            Modal.show(message, title, <span class="hljs-keyword">this</span>.onModalClose.bind(<span class="hljs-keyword">this</span>));\n        },\n\n        <span class="hljs-attr">onModalClose</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'re-rendering after modal closes to capture any changes\'</span>);\n            <span class="hljs-keyword">this</span>.render();\n        },\n    })\n\n})(App || {}, Backbone, Modal, _);\n</code></pre>\n<p>Obviously the scenario is a bit contrived here (we’d want to generalize any logging in the constructor in real life, and we would listen for model changes to re-render rather than just blindly doing it in a callback).  But notice how many confusing things are going on that are completely incidental to what the code is doing.  A JavaScript beginner would have a lot to work through in this example.  Why is the whole file wrapped in a function?  Where do Backbone and Modal come from?  What’s going on with <code>Backbone.View.apply(this, [].slice.call(arguments));</code>?  That’s even aside from the incidental complexity of having to know what order your files are loaded in when using this particular module style.  We can do so much better.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//ES6</span>\n<span class="hljs-keyword">import</span> {View} <span class="hljs-keyword">from</span> Backbone;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Modal <span class="hljs-keyword">from</span> <span class="hljs-string">\'utils/modal\'</span>;\n<span class="hljs-keyword">import</span> {template} <span class="hljs-keyword">from</span> <span class="hljs-string">\'lodash\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ExampleViewTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">\'templates/exampleview\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> ExampleView = View.extend({\n\n    <span class="hljs-attr">template</span>: ExampleViewTemplate,\n\n    events() {\n        <span class="hljs-string">\'click .example-button\'</span>: <span class="hljs-string">\'showSuccess\'</span>,\n        <span class="hljs-string">\'click .example-button2\'</span>: <span class="hljs-string">\'showError\'</span>,\n    },\n\n    <span class="hljs-keyword">constructor</span>(...args) {\n        View.apply(<span class="hljs-keyword">this</span>, args));\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Created a Example View\'</span>);\n    },\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(template(<span class="hljs-keyword">this</span>.template)(<span class="hljs-keyword">this</span>.model.attributes));\n    },\n\n    showSuccess() {\n        <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You did it\'</span>);\n    },\n\n    showError() {\n        <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You failed\'</span>, <span class="hljs-string">\'Error\'</span>);\n    },\n\n    showModal(message, title=<span class="hljs-string">\'Alert\'</span>) {\n        Modal.show(message, title, () =&gt; <span class="hljs-keyword">this</span>.onModalClose());\n    },\n\n    onModalClose() {\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'re-rendering after modal closes to capture any changes\'</span>);\n        <span class="hljs-keyword">this</span>.render();\n    },\n});\n</code></pre>\n<p>ES6 allows us to clean up our original example a lot!  We’re able to ditch the wrapping function, and instead pull our dependencies directly at the top of the file, with clear pointers to module paths so that new developers can easily go find the code we’re referencing.  At a smaller level, we’ve cleaned up many of the annoyances from the original code.  We no longer have to slice arguments; instead we can use the rest operator to collect all of the arguments as an array and pass them to the constructor directly.  Similarly, we don’t need to explicitly check for undefined anymore in showModal since we can display default arguments.  Finally, we can get rid of some function boilerplate, removing the function keyword completely for object methods and changing the <code>bind(this)</code> from onModalClose to use an ES6 lambda function.  All of this is helpful, and represents the best of what is stable for production at the moment.  But if we want to look ahead to the current proposed ES7 additions, we’ll be able to clean this code up even more.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">//ES7</span>\n<span class="hljs-keyword">import</span> {View} <span class="hljs-keyword">from</span> Backbone;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> Modal <span class="hljs-keyword">from</span> <span class="hljs-string">\'utils/modal\'</span>;\n<span class="hljs-keyword">import</span> {template} <span class="hljs-keyword">from</span> <span class="hljs-string">\'lodash\'</span>;\n<span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> ExampleViewTemplate <span class="hljs-keyword">from</span> <span class="hljs-string">\'templates/exampleview\'</span>;\n\n<span class="hljs-keyword">export</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExampleView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">View</span> </span>{\n\n    template = ExampleViewTemplate;\n\n    <span class="hljs-keyword">constructor</span>(...args) {\n        <span class="hljs-keyword">super</span>(args);\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'Created a Example View\'</span>);\n    }\n\n    render() {\n        <span class="hljs-keyword">this</span>.$el.html(template(<span class="hljs-keyword">this</span>.template)(<span class="hljs-keyword">this</span>.model.attributes));\n    }\n\n    @on(<span class="hljs-string">\'click .example-button\'</span>)\n    showSuccess() {\n        <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You did it\'</span>);\n    }\n\n    @on(<span class="hljs-string">\'click .example-button2\'</span>)\n    showError() {\n        <span class="hljs-keyword">this</span>.showModal(<span class="hljs-string">\'You failed\'</span>, <span class="hljs-string">\'Error\'</span>);\n    }\n\n    showModal(message, title=<span class="hljs-string">\'Alert\'</span>) {\n        Modal.show(message, title, ::<span class="hljs-keyword">this</span>.onModalClose);\n    }\n\n    onModalClose() {\n        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">\'re-rendering after modal closes to capture any changes\'</span>);\n        <span class="hljs-keyword">this</span>.render();\n    }\n}\n</code></pre>\n<p>ES7 allows us to clean up more boilerplate using classes <sup id="fnref:2"><a href="#fn:2">2</a></sup>, static properties, and <code>::</code> as a special shorthand for function binding.  But it also allows us to start actually improving the interface of Backbone itself.  The example above uses decorators to define extra behaviors that wrap the View’s methods. In this case decorators <a href="http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/">allow us to contextualize the events to function mapping</a> for our View, improving on the default events hash that Backbone provides.  There are many examples of similar convenient conventions that are being experimented with in the React community. Backbone developers can learn a lot here by looking through React code.  Since React components are syntactically similar to Backbone Views (even though the underlying model is quite different), it’s easy to learn a lot of new JavaScript techniques that can be used in Backbone in the process.</p>\n<h3>Idea 3: Don’t use DOM as a source of state</h3>\n<p>The final big idea that Backbone developers can learn from React is its insistence on not using the DOM as a source of state.  React encourages a programming model where in theory, any component can be re-rendered at any time based on a change in data.  That means that any UI state must be captured in code and not in the UI.  This is another approach that requires programmer discipline in Backbone.  It means that instead of just typing out <code>this.$(\'.main-content\').addClass(\'highlighted\')</code>, you’ll want to set an <code>contentIsHighlighted</code> variable somewhere and then either re-render your view or do a structured update based on your state.  That way, instead of having to read the DOM later to know the state of your application it is all copied in code.  This leads to better testability, more predictable code and fewer edge cases when the structure of your HTML changes.</p>\n<p>This idea was historically the primary benefit for Backbone apps over pure jQuery applications.  But the truth is that while Backbone does a good job of pulling application data into code with models and collections, it makes it very tempting to encode UI state info in the DOM by exposing jQuery helpers and not providing a canonical way to store view state.  Still, a little discipline goes a long way.  By using a separate Backbone Model as a view-model or just storing your state as properties on the view object itself, you can pull your state out of the DOM and make it much easier to inspect and reason about when you’re debugging your code or trying to refactor.</p>\n<p>You probably can’t take this idea to the full extent that React takes it using Backbone.  The extreme end of the React philosophy is to use React components as stateless functions that simply take application data and ui state as arguments and return an HTML representation of the UI.  This means that React interfaces can be re-rendered completely after any change without losing information.  React supports this and makes it performant by using a “virtual DOM” to generate the new HTML that would result from a data or state change, compare it to the existing HTML, and then only make the changes that are required in the actual DOM <sup id="fnref:3"><a href="#fn:3">3</a></sup>.  That works well in React since it has a clear concept of what is controlled by each component.  As previously noted, Backbone does not strongly encapsulate its Views, which complicates doing the type of virtual DOM analysis that React manages.  So it’s more practical to focus on pulling state out of Views and managing re-renders based on Backbone’s event system (the idiomatic Backbone approach).  If you want to pursue the UI as pure functional programming paradigm, you’d probably do better moving off Backbone to a system designed for that like React, <a href="http://cycle.js.org/">cycle.js</a>, <a href="https://github.com/omcljs/om">Om</a>, or <a href="https://github.com/Reactive-Extensions/RxJS">rxjs</a>.  But even if you can’t go all in on functional UI programming in your current code base, understanding the problems inherent with using DOM to manage state will help you write better Backbone apps.</p>\n<h3>React Resources Round-up</h3>\n<p>If you’re interested in learning more about React, many others have put together better resources than I’m capable of.  Here’s a quick roundup of some of the resources I’ve found helpful.</p>\n<h4>Intro</h4>\n<ul>\n<li>If you want to get a big picture view of what React is about, I’d recommend starting with this <a href="https://www.youtube.com/watch?v=x7cQ3mrcKaY">2013 conference video</a> where a member of the React team, addresses some of the criticisms that React received early on and lays out the ideas behind the library.  Some of the details have changed since, but the big picture view remains.</li>\n<li>The React documentation is also exceptionally well-written and accessible.  This blurb on <a href="http://facebook.github.io/react/docs/thinking-in-react.html">thinking in react</a> is a good place to start.</li>\n</ul>\n<h4>Talks</h4>\n<ul>\n<li>If you want to see some of the nice potential side effects that React can provide <a href="https://www.youtube.com/watch?v=xsSnOQynTHs">this talk</a> by Dan Abramov, the creator of Redux, shows how easy it is to create developer tools that significantly improve a developers feedback loop and user experience while writing code.</li>\n<li>The <a href="https://www.youtube.com/watch?v=PAA9O4E1IM4">keynote from React Europe</a> gives a good feel for the current state of the ecosystem around React.</li>\n</ul>\n<h4>Articles</h4>\n<ul>\n<li><a href="http://rauchg.com/2015/pure-ui/">Pure UI</a> by Guillermo Rauch is the best explanation I’ve read of the benefits of the UI model that React encourages, though it is not specifically about React.</li>\n<li>One of the biggest instinctive objections many developers have when they first see React code is the mixing of JavaScript and the HTML syntax of JSX inside a single file.  <a href="https://medium.com/javascript-scene/jsx-looks-like-an-abomination-1c1ec351a918">Eric Elliot has a nice post on medium</a> examining those objections and explaining why JSX makes sense.</li>\n</ul>\n<h4>Projects</h4>\n<ul>\n<li><a href="https://facebook.github.io/flux/">Flux</a> is one of the 2 main data management frameworks that Facebook and the React team recommend for use with React.  The second newer one, <a href="https://facebook.github.io/relay/">Relay</a> is a bit more crazy advanced and requires a very specific type of backend API to implement.  If you’re interested in Flux, also make sure to check out <a href="https://github.com/rackt/redux">Redux</a>, an opinionated flux implementation focused pure functional programming concepts.</li>\n<li><a href="https://github.com/rackt/react-router">React Router</a> is a router for React applications based on Ember’s router.  It provides a nice declarative model for defining routes based on JSX, the JS language extension that Facebook created along with React</li>\n<li><a href="https://babeljs.io/">Babel</a> isn’t a react specific technology, but its important to understand it if you want to digest most of the React examples out there, or build a React app yourself, since it is now recommended as the tool for writing React code in an idiomatic style.</li>\n</ul>\n<div class="footnotes">\n<ol>\n    <li class="footnote" id="fn:1">\n        <p>\n        Well at this point many frameworks are doubling down on "1st class experiences" with Babel (React/Ember) or Typescript (Angular2).  But Backbone at least doesn\'t care what transpilers you use or don\'t, and the other libraries are all still usable with vanilla ES5 JavaScript.\n        </p>\n        <a href="#fnref:1" title="return to article"> ↩</a></p>\n    </li>\n    <li class="footnote" id="fn:2">\n        <p>\n        Yes I know that classes are an ES6 feature.  But without decorators, using them with Backbone <a href="http://benmccormick.org/2015/07/06/backbone-and-es6-classes-revisited/">is clunky</a>.\n        </p>\n        <a href="#fnref:2" title="return to article"> ↩</a></p>\n    </li>\n        <li class="footnote" id="fn:3">\n            <p>\n            In addition to other performance enhancements if an app is structured in a way that it can be determined exactly which data changed.\n            </p>\n            <a href="#fnref:3" title="return to article"> ↩</a></p>\n        </li>\n</ol>\n</div>\n'
}},function(e,t,n,a){"use strict";var s=n(a),o=(n(8),function(e){var t=this;if(t.instancePool.length){var n=t.instancePool.pop();return t.call(n,e),n}return new t(e)}),i=function(e,t){var n=this;if(n.instancePool.length){var a=n.instancePool.pop();return n.call(a,e,t),a}return new n(e,t)},r=function(e,t,n){var a=this;if(a.instancePool.length){var s=a.instancePool.pop();return a.call(s,e,t,n),s}return new a(e,t,n)},l=function(e,t,n,a){var s=this;if(s.instancePool.length){var o=s.instancePool.pop();return s.call(o,e,t,n,a),o}return new s(e,t,n,a)},c=function(e){var t=this;e instanceof t?void 0:s("25"),e.destructor(),t.instancePool.length<t.poolSize&&t.instancePool.push(e)},p=10,h=o,d=function(e,t){var n=e;return n.instancePool=[],n.getPooled=t||h,n.poolSize||(n.poolSize=p),n.release=c,n},u={addPoolingTo:d,oneArgumentPooler:o,twoArgumentPooler:i,threeArgumentPooler:r,fourArgumentPooler:l};e.exports=u}]));
//# sourceMappingURL=bundle.js.map